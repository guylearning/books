<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough Ruby to Be Dangerous: Write Programs, Publish Gems, and Develop Sinatra Web Apps with Ruby</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137844111.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="h2" id="ch01"><span epub:type="pagebreak" id="page_1"></span>Chapter 1</h2>
<h2 class="h2a"><strong>Hello, World!</strong></h2>
<p class="noindent">“Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.” Or so says the <a href="https://www.ruby-lang.org/en/">official Ruby website</a>. In my experience, this description rings true—as does the declaration by <a href="https://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Ruby’s creator</a> that the language is “<a href="https://rubyonrails.org/doctrine/#optimize-for-programmer-happiness">optimized for programmer happiness</a>.” Ruby feels natural to read and write, has a wealth of built-in libraries, and has a powerful <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented</a> design.</p>
<p class="indent"><em>Learn Enough Ruby to Be Dangerous</em> is designed to get you started writing practical and modern Ruby programs as fast as possible, with a focus on the real tools used every day by software developers.</p>
<p class="indent">As a general-purpose programming language, Ruby is limited only by the developer’s imagination. Ruby has enjoyed especially robust adoption in <em>web development</em>, the art of writing dynamic web applications for the World Wide Web (indeed, your trusty author is perhaps best known in the tech world as the author of the <em><a href="https://www.railstutorial.org/book">Ruby on Rails Tutorial</a></em>, an introduction to web development using <a href="https://rubyonrails.org/">Ruby on Rails</a>). But Ruby thrives in many other niches as well, such as <a href="https://github.com/erikhuda/thor">shell scripting</a>, <a href="http://www.nokogiri.org/">text parsing</a>, and <a href="https://brew.sh/">package management</a>.</p>
<p class="indent">The present tutorial can serve as either a prerequisite to the <em><a href="https://www.railstutorial.org/book">Ruby on Rails Tutorial</a></em> (especially for those who haven’t programmed much before) or as a natural follow-on (for those who want to solidify their command of the underlying Ruby language). In particular, <em>Learn Enough Ruby to Be Dangerous</em> includes an introduction to web development with <em>Sinatra</em>, a small and relatively simple Ruby web framework that is excellent preparation for Ruby on <span epub:type="pagebreak" id="page_2"></span>Rails while also being a useful tool in its own right.</p>
<p class="indent">As noted above, there’s more to Ruby than web development, though, and we’ll be treating Ruby as a general-purpose programming language right from the start. The result is a practical <a href="https://www.learnenough.com/tutorial-writing-tutorial">narrative introduction</a> to Ruby—a perfect complement both to <a href="https://www.codecademy.com/">in-browser coding tutorials</a> and to the voluminous but hard-to-navigate Ruby <a href="https://ruby-doc.org/">reference material</a> on the Web.</p>
<p class="indent"><em><a href="https://www.learnenough.com/javascript">Learn Enough Ruby to Be Dangerous</a></em> broadly follows the structure of <em><span class="blue">Learn Enough JavaScript to Be Dangerous</span></em>, which can be studied either before or after this tutorial. Because many of the examples are the same, the tutorials reinforce each other nicely—there are few things more instructive in computer programming than seeing the same basic problems solved in two different languages.</p>
<p class="indent">You won’t learn everything there is to know about Ruby in this tutorial— that would take thousands of pages and centuries of effort—but you will learn enough Ruby to be <em>dangerous</em> (<a href="ch01.xhtml#ch01fig01">Figure 1.1</a>).<sup><a id="fn1_1" href="ch01.xhtml#fn1_1a">1</a></sup></p>
<p class="footnote"><sup><a id="fn1_1a" href="ch01.xhtml#fn1_1">1</a></sup>Image courtesy of Kirk Fisher/Shutterstock.</p>
<figure class="figure" id="ch01fig01">
<img src="graphics/f0003-01.jpg" alt="Images" width="891" height="595"/>
<figcaption>
<p class="title-f">Figure 1.1: Ruby knowledge, like Rome, <a href="https://en.wiktionary.org/wiki/Rome_wasn%27t_built_in_a_day">wasn’t built in a day</a>.</p>
</figcaption>
</figure>
<p class="indent">There are no programming prerequisites for <em>Learn Enough Ruby to Be Dangerous</em>, although it certainly won’t hurt if you’ve programmed before (and suggested shortcuts for experienced devs appear in <a href="ch01.xhtml#box1_2">Box 1.2</a> below). What is important is that you’ve started developing your <em>technical sophistication</em> (<a href="ch01.xhtml#box1_1">Box 1.1</a>), either on your own or using the preceding <a href="https://www.learnenough.com/courses">Learn Enough tutorials</a>. These tutorials include the following, which together make a good list of prerequisites for this book:</p>
<ol class="num">
<li><p class="num"><em><a href="https://www.learnenough.com/command-line">Learn Enough Command Line to Be Dangerous</a></em></p></li>
<li><p class="num"><em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em></p></li>
<li><p class="num"><em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em></p></li>
<li><p class="num"><em><a href="https://www.learnenough.com/html">Learn Enough HTML to Be Dangerous</a></em></p></li>
<li><p class="num"><em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em> (optional)</p></li>
<li><p class="num"><em><a href="https://www.learnenough.com/javascript">Learn Enough JavaScript to Be Dangerous</a></em> (optional)<span epub:type="pagebreak" id="page_3"></span></p></li>
</ol>
<p class="noindent"><span epub:type="pagebreak" id="page_4"></span>All of these tutorials are available for individual purchase, and we offer a subscription service—the <a href="https://www.learnenough.com/all-access">Learn Enough All Access subscription</a>—with access to all the corresponding online courses.</p>
<aside epub:type="sidebar" class="sidebar1" id="box1_1">
<p class="sb-title">Box 1.1. Technical Sophistication</p>
<p class="indent">An essential aspect of using computers is the ability to figure things out and troubleshoot on your own, a skill we at <a href="https://www.learnenough.com/">Learn Enough</a> call <em>technical sophistication</em>.</p>
<p class="indent">Developing technical sophistication means not only following systematic tutorials like <em>Learn Enough Ruby to Be Dangerous</em>, but also knowing when it’s time to break free of a structured presentation and just start Googling around for a solution.</p>
<p class="indent"><em>Learn Enough Ruby to Be Dangerous</em> will give us ample opportunity to practice this essential technical skill.</p>
<p class="indent">In particular, as alluded to above, there is a wealth of Ruby reference material on the Web, but it can be hard to use unless you already basically know what you’re doing. One goal of this tutorial is to be the key that unlocks the documentation. This will include lots of pointers to the <a href="https://ruby-doc.org/">official Ruby site</a>.</p>
<p class="indent">Especially as the exposition gets more advanced, I’ll also sometimes include the web searches you could use to figure out how to accomplish the particular task at hand. For example, how do you use Ruby to manipulate a Document Object Model (DOM)? Like this: <a href="https://www.google.com/search?q=ruby%2Bdom%2Bmanipulation">ruby dom manipulation</a>.</p>
</aside>
<p class="indent">In order to learn enough Ruby to be dangerous, we’ll begin at the beginning with a series of simple <a href="https://en.wikipedia.org/wiki/%22Hello%2C_World!%22_program">“hello, world</a>” programs using several different techniques (<a href="ch01.xhtml#ch01">Chapter 1</a>), including an introduction to <em>irb</em>, an interactive command-line program for evaluating Ruby code. In line with the Learn Enough philosophy of always doing things “for real”, even as early as <a href="ch01.xhtml#ch01">Chapter 1</a> we’ll deploy a (very simple) dynamic Ruby application to the live Web.</p>
<p class="indent">After mastering “hello, world”, we’ll take a tour of some Ruby <em>objects</em>, including strings (<a href="ch02.xhtml#ch02">Chapter 2</a>), arrays (<a href="ch03.xhtml#ch03">Chapter 3</a>), and other native objects (<a href="ch04.xhtml#ch04">Chapter 4</a>). Taken together, these chapters constitute a gentle introduction to <em>object-oriented programming</em> with Ruby.</p>
<p class="indent"><span epub:type="pagebreak" id="page_5"></span>In <a href="ch05.xhtml#ch05">Chapter 5</a>, we’ll learn the basics of <em>functions</em>, an essential subject for virtually every programming language. We’ll then apply this knowledge to an elegant and powerful style of coding called <em>functional programming</em> (<a href="ch06.xhtml#ch06">Chapter 6</a>).</p>
<p class="indent">Having covered the basics of built-in Ruby objects, in <a href="ch07.xhtml#ch07">Chapter 7</a> we’ll learn how to make objects of our own. In particular, we’ll define an object for a <em>phrase</em>, and then develop a method for determining whether or not the phrase is a <em>palindrome</em> (the same read forward and backward).</p>
<p class="indent">Our initial palindrome implementation will be rather rudimentary, but we’ll extend it in <a href="ch08.xhtml#ch08">Chapter 8</a> using a powerful technique called <em>test-driven development</em> (TDD). In the process, we’ll learn more about testing generally, as well as how to create a self-contained Ruby library called a <em>Ruby gem</em> (and thereby join the large and growing ecosystem of software packages managed by Ruby’s gem-hosting service, <em><a href="https://rubygems.org/">RubyGems.org</a></em>).</p>
<p class="indent">In <a href="ch09.xhtml#ch09">Chapter 9</a>, we’ll learn how to write nontrivial <em>shell scripts</em>, one of Ruby’s biggest strengths. Examples include reading from both files and URLs, with a final example showing how to manipulate a downloaded file as if it were an HTML web page.</p>
<p class="indent">In <a href="ch10.xhtml#ch10">Chapter 10</a>, we’ll develop our first full Ruby web application: a site for detecting palindromes. This will give us a chance to learn about <em>routes</em>, <em>layouts</em>, <em>embedded Ruby</em>, and <em>form handling</em>. As a capstone to our work, we’ll deploy our palindrome detector to the live Web.</p>
<p class="indent">In most cases, typing in code examples by hand is the most effective way to learn, but sometimes copying and pasting is more practical. To make the latter more convenient, all code listings from this book are available online at the <a href="https://github.com/learnenough/learn_enough_ruby_code_listings">following URL</a>:</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0005-01" id="f0005-01a">Click here to view code image</a></p>
<pre class="pre"><strong>https://github.com/learnenough/learn_enough_ruby_code_listings</strong></pre>
</div>
<p class="indent">Finally, experienced developers can largely skip the first four chapters, as described in <a href="ch01.xhtml#box1_2">Box 1.2</a>.</p>
<aside epub:type="sidebar" class="sidebar1" id="box1_2">
<p class="sb-title"><span epub:type="pagebreak" id="page_6"></span>Box 1.2. For Experienced Devs</p>
<p class="indent">By keeping a few <span class="blue">diffs</span> in mind, experienced developers can skip <a href="ch01.xhtml#ch01">Chapters 1</a>–<a href="ch04.xhtml#ch04">4</a> of this tutorial and start with functions in <a href="ch05.xhtml#ch05">Chapter 5</a>. They can then move quickly onto functional programming in <a href="ch06.xhtml#ch06">Chapter 6</a>, consulting earlier chapters as necessary to fill in any gaps.</p>
<p class="indent">Here are some of the notable differences between Ruby and most other languages:</p>
<ul>
<li><p class="bullet">Use <code><span class="green"><strong>#!/usr/bin/env ruby</strong></span></code> for the shebang line in shell scripts (<a href="ch01.xhtml#sec1_4">Section 1.4</a>).</p></li>
<li><p class="bullet">Use <code><span class="green"><strong>#{...}</strong></span></code> for string interpolation (<a href="ch02.xhtml#sec2_2">Section 2.2</a>).</p></li>
<li><p class="bullet">Single-quoted strings are raw strings (<a href="ch02.xhtml#sec2_2_1">Section 2.2.1</a>).</p></li>
<li><p class="bullet">Use <code><span class="green"><strong>puts</strong></span></code> for printing (<a href="ch02.xhtml#sec2_3">Section 2.3</a>).</p></li>
<li><p class="bullet">Use <code><span class="green"><strong>elsif</strong></span></code> for <code><span class="green"><strong>else if</strong></span></code> (<a href="ch02.xhtml#sec2_4">Section 2.4</a>).</p></li>
<li><p class="bullet">In a boolean context, all objects are <code><span class="green"><strong>true</strong></span></code> except <code><span class="green"><strong>nil</strong></span></code> and <code><span class="green"><strong>false</strong></span></code> itself— even <code><span class="green"><strong>""</strong></span></code>, <code><span class="green"><strong>[]</strong></span></code>, and <code><span class="green"><strong>0</strong></span></code> (<a href="ch02.xhtml#sec2_4_2">Section 2.4.2</a>).</p></li>
<li><p class="bullet">Boolean methods end in a question mark, as in <code><span class="green"><strong>"".empty?</strong></span></code> (<a href="ch02.xhtml#sec2_5">Section 2.5</a>).</p></li>
<li><p class="bullet">Iterate using <code><span class="green"><strong>each</strong></span></code> (<a href="ch03.xhtml#sec3_5">Section 3.5</a>).</p></li>
<li><p class="bullet">Math operations are attached to a <code><span class="green"><strong>Math</strong></span></code> object; e.g., <code><span class="green"><strong>Math.sqrt(2)</strong></span></code> (<a href="ch04.xhtml#sec4_1_1">Section 4.1.1</a>).</p></li>
<li><p class="bullet">Hash keys are often <em>symbols</em>, a data type for labels (<a href="ch04.xhtml#sec4_4_1">Section 4.4.1</a>).</p></li>
</ul>
</aside>
<section>
<h3 class="h3" id="sec1_1"><span epub:type="pagebreak" id="page_7"></span>1.1 Introduction to Ruby</h3>
<p class="noindent">Created by <a href="https://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Yukihiro “Matz” Matsumoto</a> (<a href="ch01.xhtml#ch01fig02">Figure 1.2</a>),<sup><a id="fn1_2" href="ch01.xhtml#fn1_2a">2</a></sup> Ruby was originally designed as an object-oriented scripting language—that is, a language based on <em>objects</em> that’s good for writing <em>shell scripts</em>. (We’ll learn more about objects starting in <a href="ch02.xhtml#ch02">Chapter 2</a>, and we’ll cover shell scripts in <a href="ch09.xhtml#ch09">Chapter 9</a>.) The name <em>Ruby</em> is a reference (in part) to the <em><a href="https://en.wikipedia.org/wiki/Perl">Perl</a></em> programming language, which (along with <a href="https://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a> and <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a>) is one of Ruby’s principal design influences.</p>
<p class="footnote"><sup><a id="fn1_2a" href="ch01.xhtml#fn1_2">2</a></sup>Image copyright © 2012 by Michael Hartl.</p>
<figure class="figure" id="ch01fig02">
<img src="graphics/f0008-01.jpg" alt="Images" width="826" height="826"/>
<figcaption>
<p class="title-f">Figure 1.2: Yukihiro “Matz” Matsumoto, the creator of Ruby, with author Michael Hartl at RubyConf 2012.</p>
</figcaption>
</figure>
<p class="indent">In order to give you the best broad-range introduction to programming with Ruby, <em>Learn Enough Ruby to Be Dangerous</em> uses four main methods:</p>
<ol class="num">
<li><p class="num">An interactive prompt with a Read-Evaluate-Print Loop (REPL)</p></li>
<li><p class="num">Standalone Ruby files</p></li>
<li><p class="num">Shell scripts (as <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">introduced</a> in <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em>)</p></li>
<li><p class="num">Ruby web applications running in a web server</p></li>
</ol>
<p class="indent">We’ll begin our study of Ruby with four variations on the time-honored theme of a <a href="https://en.wikipedia.org/wiki/%22Hello%2C_World!%22_program">“hello, world</a>” program, a tradition that dates back to the <a href="https://en.wikipedia.org/wiki/%22Hello%2C_World!%22_program#History">early days</a> of the <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C programming language</a>. The main purpose of “hello, world” is to confirm that our system is correctly configured to execute a simple program that prints the string <code><span class="green"><strong>hello, world!</strong></span></code> (or some close variant) to the screen. By design, the program is simple, allowing us to focus on the challenge of getting the program to run in the first place.</p>
<p class="indent">Since the original application of Ruby was to write shell scripts for execution at the command line, we’ll start by writing a series of programs to display a greeting in a command-line terminal: first in a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> called <em>interactive Ruby</em>, or <em>irb</em>; then in a standalone file called <code><span class="green"><strong>hello.rb</strong></span></code>; and finally in an executable shell script called <code><span class="green"><strong>hello</strong></span></code>. We’ll then write (and deploy!) a simple proof-of-concept web application using the <a href="http://sinatrarb.com/">Sinatra</a> web framework.</p>
<p class="indent">(Throughout what follows, I’ll assume that you have access to a Unix-compatible system like macOS, Linux, or the <a href="https://www.learnenough.com/dev-environment-tutorial#sec-cloud_ide">Cloud9 IDE</a>, as described in <span epub:type="pagebreak" id="page_8"></span>the free tutorial <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>. If you use the cloud IDE, I recommend creating a <a href="https://www.learnenough.com/dev-environment-tutorial#fig-cloud9_page_aws">development environment</a> called <code><span class="green"><strong>ruby-tutorial</strong></span></code>, and be sure to choose the Ubuntu Server option as shown in <a href="https://www.learnenough.com/dev-environment-tutorial#fig-cloud9_new_workspace">Figure 4</a> of <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>. For Mac users, although it shouldn’t matter in <em>Learn Enough Ruby to Be Dangerous</em>, it is recommended that you use the Bourne-again shell (Bash) rather than the default Z shell to complete this tutorial. To switch your shell to Bash, run <code><strong>chsh -s /bin/bash</strong></code> at the command line, enter your password, and restart your terminal program. Any resulting alert messages are safe to ignore. See the Learn Enough blog post <a href="https://news.learnenough.com/macos-bash-zshell">“Using Z Shell on Macs with the Learn Enough Tutorials</a>” for more information.)</p>
<p class="indent"><span epub:type="pagebreak" id="page_9"></span>You can check to see if Ruby is already installed by running <code><span class="green"><strong>ruby -v</strong></span></code> at the command line to get the version number (<a href="ch01.xhtml#ch01ex01">Listing 1.1</a>).</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex01"><strong>Listing 1.1:</strong> Checking the Ruby version.</p>
<p class="codelink"><a href="ch01_images.xhtml#f0009-01" id="f0009-01a">Click here to view code image</a></p>
<pre><span class="blue"><strong>$</strong></span> <strong>ruby -v</strong>
<span class="green"><strong>ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x86_64-linux]</strong></span></pre>
</div>
<p class="noindent">This standardizes on Ruby 3, but any version of Ruby later than 2.7 should be fine for this tutorial. If instead you get a result like</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0009-02" id="f0009-02a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>ruby -v</strong>
<span class="green1"><strong>-bash: ruby: command not found</strong></span></pre>
</div>
<p class="noindent">or you get a version number earlier than 2.7, then you will have to install a more recent version of Ruby.</p>
<p class="indent">The details of installing Ruby vary by system and can require applying a little technical sophistication (<a href="ch01.xhtml#box1_1">Box 1.1</a>). The different possibilities are covered in <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>, which you should take a look at now if you don’t already have Ruby on your system. In particular, if you end up using the cloud IDE recommended by <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>, you can update the Ruby version as follows:<span epub:type="pagebreak" id="page_10"></span></p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0010-01" id="f0010-01a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <span class="blue1"> <strong><em># on cloud IDE</em></strong></span>
<span class="blue"><strong>$</strong></span> <strong>rvm get stable</strong>
<span class="blue"><strong>$</strong></span> <strong>rvm install <span class="gray">3</span>.1.1</strong>
<span class="blue"><strong>$</strong></span> <strong>rvm --default use <span class="gray">3</span>.1.1</strong></pre>
</div>
<p class="indent">(This uses <a href="https://rvm.io/">Ruby Version Manager</a>, which comes preinstalled on the cloud IDE.) Once that command is finished, you can verify the Ruby version as follows:</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0010-02" id="f0010-02a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>ruby -v</strong>
<span class="green"><strong>ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x86_64-linux]</strong></span></pre>
</div>
<p class="noindent">(Exact version numbers may differ.)</p>
</section>
<section>
<h3 class="h3" id="sec1_2">1.2 Ruby in a REPL</h3>
<p class="noindent">Our first example of a “hello, world” program involves a Read-Eval-Print Loop, or <em>REPL</em> (pronounced “repple”). A REPL is a program that <strong>read</strong>s input, <strong>eval-</strong>uates it, <strong>print</strong>s out the result (if any), and then <strong>loop</strong>s back to the read step. Most modern programming languages provide a REPL, and Ruby is no exception. In Ruby’s case, it’s called <em>irb</em>, short for “interactive Ruby”, and we can run it at the command line as shown in <a href="ch01.xhtml#ch01ex02">Listing 1.2</a>.</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex02"><strong>Listing 1.2:</strong> Bringing up the irb prompt at the command line.</p>
<pre><strong><span class="green">$ irb</span></strong>
<span class="blue">&gt;&gt;</span></pre>
</div>
<p class="noindent">Here <code><span class="green"><strong>&gt;&gt;</strong></span></code> represents a generic irb prompt, which you can achieve on your system by editing a special configuration file called <code><span class="green"><strong>.irbrc</strong></span></code>. Start by creating <code><span class="green"><strong>.irbrc</strong></span></code> in your home directory using the <a href="https://www.learnenough.com/text-editor">text editor</a> of your choice:<sup><a id="fn1_3" href="ch01.xhtml#fn1_3a">3</a></sup></p>
<p class="footnote"><sup><a id="fn1_3a" href="ch01.xhtml#fn1_3">3</a></sup>I generally use Sublime Text or Atom for everyday editing, but for editing short configuration files and the like I usually use Vim. The reason is that Vim is incredibly fast to open and quit, which is especially convenient when the editing task itself takes only a few seconds.<span epub:type="pagebreak" id="page_11"></span></p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>vim ~/.irbrc</strong></pre>
</div>
<p class="noindent">Then fill the file with the contents of <a href="ch01.xhtml#ch01ex03">Listing 1.3</a>. This arranges to simplify the irb prompt as in <a href="ch01.xhtml#ch01ex02">Listing 1.2</a> while suppressing some annoying auto-indent behavior.</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex03"><strong>Listing 1.3:</strong> Adding some irb configuration.<br/><code><em>~/.irbrc</em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#f0011-01" id="f0011-01a">Click here to view code image</a></p>
<pre><span class="brown"><strong>IRB</strong></span><span class="gray"><strong>.</strong></span><strong>conf</strong><span class="gray"><strong>[</strong></span><span class="blue"><strong>:PROMPT_MODE</strong></span><span class="gray"><strong>] =</strong></span> <span class="blue"><strong>:SIMPLE</strong></span>
<span class="brown"><strong>IRB</strong></span><span class="gray"><strong>.</strong></span><strong>conf</strong><span class="gray"><strong>[</strong></span><span class="blue"><strong>:AUTO_INDENT_MODE</strong></span><span class="gray"><strong>] =</strong></span> <span class="green1"><strong>false</strong></span></pre>
</div>
<p class="noindent">To apply this configuration, you should exit <code><span class="green"><strong>irb</strong></span></code> using <code><span class="green"><strong>exit</strong></span></code> or <code><span class="green"><strong>Ctrl-D</strong></span></code> and then rerun the <code><span class="green"><strong>irb</strong></span></code> command.</p>
<p class="indent">With that bit of configuration done, we’re now ready to write our first Ruby program using the <code><span class="green"><strong>puts</strong></span></code> command (pronounced “put-ess”), which stands for “put string”, as seen in <a href="ch01.xhtml#ch01ex04">Listing 1.4</a>. (We’ll start learning about strings in <a href="ch02.xhtml#ch02">Chapter 2</a>.)</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex04"><strong>Listing 1.4:</strong> A “hello, world” program in the REPL.</p>
<p class="codelink"><a href="ch01_images.xhtml#f0011-02" id="f0011-02a">Click here to view code image</a></p>
<pre><span class="blue"><strong>&gt;&gt;</strong></span> <span class="green1"><strong>puts</strong></span> <span class="red-s"><strong>"hello, world!"</strong></span>
<span class="green"><strong>hello, world!</strong></span>
<span class="green"><strong>=&gt; nil</strong></span></pre>
</div>
<p class="noindent">That’s it! That’s how easy it is to print “hello, world!” interactively with Ruby.</p>
<p class="indent">If you’re familiar with other programming languages (such as JavaScript), <a href="ch01.xhtml#ch01ex04">Listing 1.4</a> is notable for its lack of both parentheses and a terminating semicolon. Cleaning up punctuation in this way is very “Rubyish”, i.e., characteristic of Ruby.</p>
<p class="indent">You might also note that the final line in <a href="ch01.xhtml#ch01ex04">Listing 1.4</a> includes a <em>return value</em>, which for <code><span class="green"><strong>puts</strong></span></code> is <code><span class="green"><strong>nil</strong></span></code>, a special Ruby value that means “nothing at all”. We’ll learn more about <code><span class="green"><strong>nil</strong></span></code> starting in <a href="ch02.xhtml#sec2_3">Section 2.3</a>.</p>
<section>
<h4 class="h4" id="sec1_2_1"><span epub:type="pagebreak" id="page_12"></span>1.2.1 Exercises</h4>
<ol class="num">
<li><p class="num">What happens if you use <code><span class="green"><strong>print</strong></span></code> in place of <code><span class="green"><strong>puts</strong></span></code>? How would you change <code><span class="green"><strong>print</strong></span></code>’s argument to get the result to match <a href="ch01.xhtml#ch01ex04">Listing 1.4</a>? <em>Hint</em>: <a href="https://www.learnenough.com/r/learn_enough_command_line/basics/man_pages#sec-exercises_man">Recall</a> that <code><span class="green"><strong>\n</strong></span></code> is the typical way to represent a <a href="https://en.wikipedia.org/wiki/Newline">newline</a> character.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec1_3">1.3 Ruby in a File</h3>
<p class="noindent">As convenient as it is to be able to explore Ruby interactively, most Real Programming® takes place in text files created with a text editor. In this section, we’ll show how to create and execute a Ruby file with the same “hello, world” program we discussed in <a href="ch01.xhtml#sec1_2">Section 1.2</a>. The result will be a simplified prototype of the reusable Ruby files we’ll start learning about in <a href="ch05.xhtml#sec5_2">Section 5.2</a>.</p>
<p class="indent">We’ll start by creating a directory for this tutorial and a Ruby file (with a <code><span class="green"><strong>.rb</strong></span></code> file extension) for our <code><span class="green"><strong>hello</strong></span></code> program (be sure to exit irb first if you’re still in the REPL):</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0012-01" id="f0012-01a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <span class="green"><strong>cd</strong></span> <span class="blue1"> <strong><em># Change to the home directory; use cd ~/environment on the cloud IDE.</em></strong></span>
<span class="blue"><strong>$</strong></span> <strong>mkdir -p repos/ruby_tutorial</strong>
<span class="blue"><strong>$</strong></span> <span class="green"><strong>cd</strong></span> <strong>repos/ruby_tutorial</strong>
<span class="blue"><strong>$</strong></span> <strong>touch hello.rb</strong></pre>
</div>
<p class="noindent">Here the <code><span class="green"><strong>-p</strong></span></code> option to <code><span class="green"><strong>mkdir</strong></span></code> arranges to create intermediate directories if necessary. <em>Note</em>: Throughout this tutorial, if you’re using the cloud IDE recommended in <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>, you should replace the home directory <code><span class="green"><strong>~</strong></span></code> with the directory <code><span class="green"><strong>~/environment</strong></span></code>.</p>
<p class="indent">Next, using our favorite <a href="https://learnenough.com/text-editor">text editor</a>, we’ll fill the file with the contents shown in <a href="ch01.xhtml#ch01ex05">Listing 1.5</a>. Note that the code is exactly the same as in <a href="ch01.xhtml#ch01ex04">Listing 1.4</a>, with the difference that in a Ruby file there’s no command prompt <code><span class="green"><strong>&gt;&gt;</strong></span></code>.</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex05"><strong>Listing 1.5:</strong> A “hello, world” program in a Ruby file.<br/><code><em>hello.rb</em></code></p>
<pre><span class="green"><strong>puts</strong></span> <span class="brown"> <strong>"hello, world!"</strong></span></pre>
</div>
<p class="indent"><span epub:type="pagebreak" id="page_13"></span>At this point, we’re ready to execute our program using the <code><span class="green"><strong>ruby</strong></span></code> command we used in <a href="ch01.xhtml#ch01ex01">Listing 1.1</a> to check the Ruby version number. The only difference is that this time we omit the <code><span class="green"><strong>-v</strong></span></code> flag and instead include an argument with the name of our file:</p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>ruby hello.rb</strong>
<span class="green"><strong>hello, world!</strong></span></pre>
</div>
<p class="noindent">As in <a href="ch01.xhtml#ch01ex04">Listing 1.4</a>, the result is to print “hello, world!” to the terminal screen, only now it’s the raw shell instead of an irb REPL.</p>
<p class="indent">Although this example is simple, it’s a huge step forward, as we’re now in the position to write Ruby programs much longer than could comfortably fit in an irb session.</p>
<section>
<h4 class="h4" id="sec1_3_1">1.3.1 Exercises</h4>
<ol class="num">
<li><p class="num">What happens if you give <code><span class="green"><strong>puts</strong></span></code> two arguments, as in <a href="ch01.xhtml#ch01ex06">Listing 1.6</a>?</p></li>
</ol>
<div class="ex-box">
<p class="ex-caption" id="ch01ex06"><strong>Listing 1.6:</strong> Using two arguments.<br/><code><em>hello.rb</em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#f0013-01" id="f0013-01a">Click here to view code image</a></p>
<pre><span class="green1"><strong>puts</strong></span> <span class="red-s"><strong>"hello, world!"</strong></span><strong>,</strong> <span class="red-s"><strong>"how's it going?"</strong></span></pre>
</div>
</section>
</section>
<section>
<h3 class="h3" id="sec1_4">1.4 Ruby in a Shell Script</h3>
<p class="noindent">Although the code in <a href="ch01.xhtml#sec1_3">Section 1.3</a> is perfectly functional, when writing a program to be executed in the command line <a href="https://www.learnenough.com/r/learn_enough_command_line/basics/man_pages#sec-man_pages">shell</a> it’s often better to use an <em>executable script</em> of the sort <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">discussed</a> in <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em>. Indeed, as noted in <a href="ch01.xhtml#sec1_1">Section 1.1</a>, shell scripting was Ruby’s original programming niche.</p>
<p class="indent">Let’s see how to make an executable script using Ruby. We’ll start by creating a file called <code><span class="green"><strong>hello</strong></span></code>:<span epub:type="pagebreak" id="page_14"></span></p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>touch hello</strong></pre>
</div>
<p class="noindent">Note that we <em>didn’t</em> include the <code><span class="green"><strong>.rb</strong></span></code> extension—this is because the filename itself is the user interface, and there’s no reason to expose the implementation language to the user. Indeed, there’s a reason not to: By using the name <code><span class="green"><strong>hello</strong></span></code>, we give ourselves the option to rewrite our script in a different language down the line, without changing the command our program’s users have to type. (Not that it matters in this simple case, but the principle should be clear. We’ll see a more realistic example in <a href="ch09.xhtml#sec9_3">Section 9.3</a>.)</p>
<p class="indent">There are two steps to writing a working script. The first is to use the same command we’ve seen before (<a href="ch01.xhtml#ch01ex05">Listing 1.5</a>), preceded by a “<a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">shebang</a>” line telling our system to use <code><span class="green"><strong>ruby</strong></span></code> to execute the script.</p>
<p class="indent">Ordinarily, the exact shebang line is system-dependent (as seen with <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">Bash in</a> <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em> and with <a href="https://www.learnenough.com/r/learn_enough_javascript/hello_world/js_shell#sec-js_shell">JavaScript</a> in <em><a href="https://www.learnenough.com/javascript">Learn Enough JavaScript to Be Dangerous</a></em>), but with Ruby we can ask the shell itself to supply the proper command. The trick is to use the <code><span class="green"><strong>ruby</strong></span></code> executable available as part of the shell’s <em>environment</em> (env):</p>
<div class="sidebar">
<pre class="pre"><span class="blue1"><strong><em>#!/usr/bin/env ruby</em></strong></span></pre>
</div>
<p class="noindent">Using this for the shebang line gives the shell script shown in <a href="ch01.xhtml#ch01ex07">Listing 1.7</a>.</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex07"><strong>Listing 1.7:</strong> A “hello, world” shell script.<br/><em>hello</em></p>
<p class="codelink"><a href="ch01_images.xhtml#f0014-01" id="f0014-01a">Click here to view code image</a></p>
<pre><span class="blue1"><strong><em>#!/usr/bin/env ruby</em></strong></span>

<strong>puts</strong> <span class="red-s"><strong>"hello, world!"</strong></span></pre>
</div>
<p class="indent">We could execute this file directly using the <code><span class="green"><strong>ruby</strong></span></code> command as in <a href="ch01.xhtml#sec1_3">Section 1.3</a>, but a true shell script should be executable without the use of an auxiliary program. (That’s what the shebang line is for.) Instead, we’ll follow the second of the two steps mentioned above and make the file itself executable <span epub:type="pagebreak" id="page_15"></span>using the <code><span class="green"><strong>chmod</strong></span></code> (“change mode”) command combined with <code><span class="green"><strong>+x</strong></span></code> (“plus executable”):</p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>chmod +x hello</strong></pre>
</div>
<p class="indent">At this point, the file should be executable, and we can execute it by preceding the command with <code><span class="green"><strong>./</strong></span></code>, which tells our system to look in the current directory (dot = <code><span class="green"><strong>.</strong></span></code>) for the executable file. (Putting the <code><span class="green"><strong>hello</strong></span></code> script on the <span class="blue">PATH</span>, so that it can be called from any directory, is left as an exercise.) The result looks like this:</p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>./hello</strong>
<span class="green"><strong>hello, world!</strong></span></pre>
</div>
<p class="noindent">Success! We’ve now written a working Ruby shell script suitable for extension and elaboration. As mentioned briefly above, we’ll see an example of a real-life utility script in <a href="ch09.xhtml#sec9_3">Section 9.3</a>.</p>
<p class="indent">Throughout the rest of this tutorial, we’ll mainly use irb for initial investigations, but the eventual goal will almost always be to create a file (either pure code or HTML) containing Ruby.</p>
<section>
<h4 class="h4" id="sec1_4_1">1.4.1 Exercises</h4>
<ol class="num">
<li><p class="num">By moving the file or changing your system’s configuration, add the <code><span class="green"><strong>hello</strong></span></code> script to your environment’s PATH. (You may find the <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">steps</a> in <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em> helpful.) Confirm that you can run <code><span class="green"><strong>hello</strong></span></code> without prepending <code><span class="green"><strong>./</strong></span></code> to the command name. <em>Note</em>: If you have a conflicting <code><span class="green"><strong>hello</strong></span></code> program from following <em><a href="https://www.learnenough.com/javascript">Learn Enough JavaScript to Be Dangerous</a></em>, I suggest replacing it—thus demonstrating the principle that the file’s name is the user interface, and the implementation can change language without affecting users.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec1_5"><span epub:type="pagebreak" id="page_16"></span>1.5 Ruby in a Web Browser</h3>
<p class="noindent">Although originally designed for shell scripting, Ruby’s flexibility and expressiveness led Danish programmer <a href="http://david.heinemeierhansson.com/">David Heinemeier Hansson</a> (often known as “DHH” for short) to choose it to implement a project-management application called <a href="https://basecamp.com/">Basecamp</a>. From Basecamp, DHH extracted a general-purpose framework for making dynamic web applications, which he named <a href="https://rubyonrails.org/">Ruby on Rails</a> (a satirical reference to a heavyweight <a href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</a> framework called “<a href="https://struts.apache.org/">Struts</a>”). Due in large part to the success of the Rails framework, Ruby has since become a major player in web development. In recognition of this, our final example of a “hello, world” program will be a live web application, written in the simple but powerful <em><a href="http://sinatrarb.com/">Sinatra</a></em> micro-framework (<a href="ch01.xhtml#ch01fig03">Figure 1.3</a>).<sup><a id="fn1_4" href="ch01.xhtml#fn1_4a">4</a></sup></p>
<p class="footnote"><sup><a id="fn1_4a" href="ch01.xhtml#fn1_4">4</a></sup>Image courtesy of UtCon Collection/Alamy Stock Photo.</p>
<figure class="figure" id="ch01fig03">
<img src="graphics/f0017-01.jpg" alt="Images" width="826" height="748"/>
<figcaption>
<p class="title-f">Figure 1.3: <a href="https://en.wikipedia.org/wiki/Frank_Sinatra">Frank Sinatra</a>, notable both for his mellifluous singing voice and his astonishing skill at web development.</p>
</figcaption>
</figure>
<p class="indent">We’ll begin by installing a couple of self-contained pieces of Ruby software, known as <em>Ruby gems</em>. First, we’ll do a little preparation by adding some configuration settings to prevent the time-consuming installation of local Ruby documentation, which needs to be done only once per system (definitely don’t worry about trying to understand this command):</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0016-01" id="f0016-01a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <span class="green1"> <strong>echo</strong></span> <span class="red-s"><strong>"gem: --no-document"</strong></span> <strong>&gt;&gt; ~/.gemrc</strong></pre>
</div>
<p class="noindent">Now we’re ready to install the <code>sinatra</code> gem (together with a web server called <code>puma</code>) using the <span class="green1"><strong><code>gem</code></strong></span> command, which is installed automatically as part of Ruby:</p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span>  <strong>gem install sinatra -v</strong>  <span class="gray"><strong>2</strong></span><strong>.2.2</strong>
<span class="blue"><strong>$</strong></span>  <strong>gem install puma    -v</strong>  <span class="gray"><strong>5</strong></span><strong>.6.5</strong></pre>
</div>
<p class="noindent">Believe it or not, those two commands install all of the software needed to run a simple but full-strength web application on our local system (where “local” might refer to the cloud if you’re using the <a href="https://aws.amazon.com/cloud9/">cloud IDE</a> recommended in <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>).<span epub:type="pagebreak" id="page_17"></span></p>
<figure class="figure" id="ch01fig04">
<img src="graphics/f0018-01.jpg" alt="Images" width="891" height="334"/>
<figcaption>
<p class="title-f">Figure 1.4: A sample program from the Sinatra homepage.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_18"></span>We’ll put our “hello, world” app in a file called <code><span class="green"><strong>hello_app.rb</strong></span></code>:</p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>touch hello_app.rb</strong></pre>
</div>
<p class="noindent">The code itself closely parallels the program in <a href="ch01.xhtml#ch01fig04">Figure 1.4</a>, as seen in <a href="ch01.xhtml#ch01ex08">Listing 1.8</a>. (If you’re wondering about the use of both single-quoted strings in <a href="ch01.xhtml#ch01ex08">Listing 1.8</a> and the double-quoted strings we saw in <a href="ch01.xhtml#sec1_2">Section 1.2</a>, you’re ahead of the game; we’ll learn the difference between the two in <a href="ch02.xhtml#ch02">Chapter 2</a>.)</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex08"><strong>Listing 1.8:</strong> A “hello, world” web app.<br/><strong><code><em>ruby_tutorial/hello_app.rb</em></code></strong></p>
<p class="codelink"><a href="ch01_images.xhtml#f0018-02" id="f0018-02a">Click here to view code image</a></p>
<pre><span class="green1"><strong>require</strong></span> <span class="red-s"><strong>'sinatra'</strong></span>

<strong>get</strong> <span class="red-s"><strong>'/'</strong></span> <span class="green1"><strong>do</strong></span>
  <span class="red-s"><strong>'hello, world!'</strong></span>
<span class="green1"><strong>end</strong></span></pre>
</div>
<p class="noindent">We’ll cover the techniques in <a href="ch01.xhtml#ch01ex08">Listing 1.8</a> in more detail starting in <a href="ch05.xhtml#sec5_4">Section 5.4</a>, but the basic idea is that it defines the behavior for the <em>root URL</em> / when responding to an ordinary browser request (known as <strong><code>GET</code></strong>). The response itself <span epub:type="pagebreak" id="page_19"></span>is the required “hello, world!” string, which will be returned to the browser as a (very simple) web page.</p>
<p class="indent">To run the web application in <a href="ch01.xhtml#ch01ex08">Listing 1.8</a>, all we need to do is call the <code><span class="green"><strong>hello_app.rb</strong></span></code> file using the same <code><span class="green"><strong>ruby</strong></span></code> command we used in <a href="ch01.xhtml#sec1_3">Section 1.3</a>; the <code>sinatra</code> gem magically takes care of the rest (<a href="ch01.xhtml#ch01ex09">Listing 1.9</a>).</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex09"><strong>Listing 1.9:</strong> Running the Sinatra app with <code><span class="green"><strong>ruby</strong></span></code>.</p>
<p class="codelink"><a href="ch01_images.xhtml#f0019-01" id="f0019-01a">Click here to view code image</a></p>
<pre><span class="bg-y"><span class="blue"><strong>$</strong></span> <strong>ruby hello_app.rb</strong></span>
<span class="green"><strong>== Sinatra has taken the stage on 4567 for development with</strong></span>
<span class="green"><strong>Maximum connections set to 1024</strong></span>
<span class="bg-y"><span class="green"><strong>Listening on localhost:4567, CTRL+C to stop</strong></span></span></pre>
</div>
<p class="noindent">Here I’ve shown the output on my system, which runs a local web server on <a href="https://www.learnenough.com/r/learn_enough_css/struct-layout/jekyll/installing_and_running_jekyll#sec-installing_and_running_jekyll">port number</a> 4567 by default. This means you can view the app by visiting <span class="blue">localhost:4567</span> in your browser. As seen in <a href="ch01.xhtml#ch01fig05">Figure 1.5</a>, the effect on the cloud IDE is slightly different, but the idea is basically the same, and in either case the result should look something like <a href="ch01.xhtml#ch01fig06">Figure 1.6</a>.</p>
<figure class="figure" id="ch01fig05">
<img src="graphics/f0020-01.jpg" alt="Images" width="878" height="678"/>
<figcaption>
<p class="title-f">Figure 1.5: The “local” server running on the cloud IDE.</p>
</figcaption>
</figure>
<figure class="figure" id="ch01fig06">
<img src="graphics/f0021-01.jpg" alt="Images" width="878" height="679"/>
<figcaption>
<p class="title-f">Figure 1.6: The hello app running locally.</p>
</figcaption>
</figure>
<p class="indent">It’s worth noting that using Ruby to run a Sinatra app as in <a href="ch01.xhtml#ch01ex09">Listing 1.9</a> suffers from a major inconvenience: Seeing the effect of changes to the code requires quitting and restarting the server. This is fine for a quick change, but quickly becomes impractical for larger projects. We’ll see how to get around this restriction using the <code>rerun</code> gem starting in <a href="ch10.xhtml#sec10_1">Section 10.1</a>.</p>
<section>
<h4 class="h4" id="sec1_5_1">1.5.1 Deployment</h4>
<p class="noindent">Now that we’ve got our app running locally, we’re ready to deploy it to a production environment. This used to be practically impossible to do in a beginning tutorial, but nowadays we can do it using a great hosting platform called <a href="https://www.heroku.com/">Heroku</a>. There’s a bit of overhead to deploy something the first time, but deploying <a href="https://en.wikipedia.org/wiki/Vote_early_and_vote_often">early and often</a> is a core part of the Learn Enough philosophy of <em>shipping</em> (<a href="ch01.xhtml#box1_3">Box 1.3</a>). Moreover, a simple app like “hello, world” is the best kind of app for first-time deployment, because there’s so much less that can go wrong.<span epub:type="pagebreak" id="page_20"></span><span epub:type="pagebreak" id="page_21"></span></p>
<aside epub:type="sidebar" class="sidebar1" id="box1_3">
<p class="sb-title"><span epub:type="pagebreak" id="page_22"></span>Box 1.3. Real Artists Ship</p>
<p class="indent">As legendary Apple cofounder Steve Jobs once said: <em>Real artists ship.</em> What he meant was that, as tempting as it is to privately polish in perpetuity, makers must <em>ship</em> their work—that is, actually finish it and get it out into the world. This can be scary, because shipping means exposing your work not only to fans but also to critics. “What if people don’t like what I’ve made?” <em>Real artists ship.</em></p>
<p class="indent">It’s important to understand that shipping is a separate skill from making. Many makers get good at making things but never learn to ship. To keep this from happening to us, we’ll follow the practice started in <em><span class="blue">Learn Enough Git to Be Dangerous</span></em> and ship several things in this tutorial. Shipping the “hello, world” app in this section is only the beginning!</p>
</aside>
<p class="indent">As with the GitHub Pages deployment option used in previous tutorials (<em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em> and <em><a href="https://www.learnenough.com/javascript">Learn Enough JavaScript to Be Dangerous</a></em> among them), our first step is to put our project under version control with Git (as <a href="https://www.learnenough.com/git-tutorial#sec-installation_and_setup">covered</a> in <em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em>, which you should consult now if your system isn’t already configured for Git):</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0022-01" id="f0022-01a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>git init</strong>
<span class="blue"><strong>$</strong></span> <strong>git add -A</strong>
<span class="blue"><strong>$</strong></span> <strong>git commit -m</strong> <span class="red-s"><strong>"Initialize repository"</strong></span></pre>
</div>
<p class="indent">Although not strictly necessary, it’s a good idea to push any newly initialized repository up to a remote backup. As in previous Learn Enough tutorials, we’ll use GitHub for this purpose (<a href="ch01.xhtml#ch01fig07">Figure 1.7</a>).<sup><a id="fn1_5" href="ch01.xhtml#fn1_5a">5</a></sup></p>
<p class="footnote"><sup><a id="fn1_5a" href="ch01.xhtml#fn1_5">5</a></sup>Previous versions of this tutorial used <a href="https://gitlab.com/">GitLab</a> instead of GitHub because at the time private repos at GitHub weren’t free. Since videos are harder to update than text, the screencasts that accompany this book still use GitLab, but the steps for GitHub are much the same (and are covered in several other Learn Enough tutorials, including <em>Learn Enough Git to Be Dangerous</em>). As usual, use your technical sophistication (<a href="ch01.xhtml#box1_1">Box 1.1</a>) to resolve any discrepancies.</p>
<figure class="figure" id="ch01fig07">
<img src="graphics/f0023-01.jpg" alt="Images" width="878" height="681"/>
<figcaption>
<p class="title-f">Figure 1.7: Creating a new repository at GitHub.</p>
</figcaption>
</figure>
<p class="indent">Because web apps sometimes include sensitive information like passwords or API keys, I like to err on the side of caution and use a <em>private</em> repository. Accordingly, be sure to select the Private option when creating the new repository at GitHub, as shown in <a href="ch01.xhtml#ch01fig08">Figure 1.8</a>.<span epub:type="pagebreak" id="page_23"></span></p>
<figure class="figure" id="ch01fig08">
<img src="graphics/f0024-01.jpg" alt="Images" width="879" height="714"/>
<figcaption>
<p class="title-f">Figure 1.8: Using a private repo.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_24"></span>Next, configure your local system with the remote repository and push it up (taking care to fill in <code><span class="green"><strong>&lt;username&gt;</strong></span></code> with your GitHub username and using a <a href="https://www.learnenough.com/git">GitHub personal access token</a> when prompted for a password):</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0024-02" id="f0024-02a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>git remote add origin https://github.com/&lt;username&gt;/ruby_tutorial.git</strong>
<span class="blue"><strong>$</strong></span> <strong>git push -u origin main</strong></pre>
</div>
<p class="noindent">Because videos are relatively hard to update, the screencasts that accompany <span epub:type="pagebreak" id="page_25"></span>this book use <code><span class="green"><strong>master</strong></span></code>, which was the default branch name for the first 15+ years of Git’s existence, but the text has been updated to use <code><span class="green"><strong>main</strong></span></code>, which is the current preferred default. See the Learn Enough blog post “<a href="https://news.learnenough.com/default-git-branch-name-with-learn-enough-and-the-rails-tutorial">Default Git Branch Name with Learn Enough and the Rails Tutorial</a>” for more information.</p>
<p class="indent">Next you’ll have to create and configure a new Heroku account if you don’t already have one. The first step is to <a href="https://signup.heroku.com/">sign up for Heroku</a>. As part of this, you should set up <a href="https://devcenter.heroku.com/articles/multi-factor-authentication">Multi-Factor Authentication</a> on your account.</p>
<p class="indent">The next step is to check to see if your system already has the Heroku command-line client installed:</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0025-01" id="f0025-01a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>heroku --version</strong>    <span class="blue1"><strong><em># will work only if heroku is installed</em></strong></span>
<span class="green"><strong>heroku: command not found</strong></span></pre>
</div>
<p class="noindent">This will display the current version number if the <code><span class="green"><strong>heroku</strong></span></code> command-line interface (CLI) is available, but on most systems it will be necessary to install the <a href="https://toolbelt.heroku.com/">Heroku CLI</a> by hand.<sup><a id="fn1_6" href="ch01.xhtml#fn1_6a">6</a></sup> In particular, if you’re working on the cloud IDE, you can install Heroku using the command shown in <a href="ch01.xhtml#ch01ex010">Listing 1.10</a>.</p>
<p class="footnote"><sup><a id="fn1_6a" href="ch01.xhtml#fn1_6">6</a></sup>toolbelt.heroku.com</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex010"><strong>Listing 1.10:</strong> The command to install Heroku on the cloud IDE.</p>
<p class="codelink"><a href="ch01_images.xhtml#f0025-02" id="f0025-02a">Click here to view code image</a></p>
<pre><span class="blue"><strong>$</strong></span> <span class="green1"><strong>source</strong></span> <strong>&lt;</strong> <span class="gray"><strong>(</strong></span><strong>curl -sL https://cdn.learnenough.com/heroku_install</strong><span class="gray"><strong>)</strong></span></pre>
</div>
<p class="noindent">After running the command in <a href="ch01.xhtml#ch01ex010">Listing 1.10</a>, you should now be able to verify the installation by displaying the current version number (details may vary):</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0025-03" id="f0025-03a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>heroku --version</strong>
<span class="green"><strong>heroku/7.59.2 linux-x64 node-v12.21.0</strong></span></pre>
</div>
<p class="indent">Once you’ve verified that the Heroku command-line interface is installed, the next step is to use the <code><span class="green"><strong>heroku</strong></span></code> command to log in to your account. If you’re using a native development environment, simply type <code><span class="green"><strong>heroku</strong></span></code> at the command line, which will automatically spawn a browser and let you log in with your Heroku email and password:</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0026-02" id="f0026-02a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>heroku login</strong>        <span class="blue1"><strong><em># on a native system but not on the cloud IDE</em></strong></span>
<span class="blue"><strong>$</strong></span> <span class="blue1"><em><strong># Spawns a browser window. Log in with your email and Heroku password.</strong></em></span></pre>
</div>
<p class="indent">If you’re using the cloud IDE, you need to pass the <code><span class="green"><strong>--interactive</strong></span></code> option, which prevents the <code><span class="green"><strong>heroku</strong></span></code> command from trying to spawn a browser (which wouldn’t work in the cloud). You also won’t be able to log in using your regular Heroku password; instead, you’ll have to create an <em>API Key</em> using the interface on your <a href="https://dashboard.heroku.com/account">Heroku Account page</a> (<a href="ch01.xhtml#ch01fig09">Figure 1.9</a>). Once you’ve followed that step (and saved the result somewhere safe), you can log in using your email and the Account Key as your password:<span epub:type="pagebreak" id="page_26"></span></p>
<figure class="figure" id="ch01fig09">
<img src="graphics/f0026-01.jpg" alt="Images" width="862" height="82"/>
<figcaption>
<p class="title-f">Figure 1.9: The API key at Heroku.</p>
</figcaption>
</figure>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0026-03" id="f0026-03a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>heroku login --interactive</strong>    <span class="blue1"><strong><em># on the cloud IDE</em></strong></span>
<span class="green"><strong>Email: &lt;your email&gt;</strong></span>
<span class="green"><strong>Password: &lt;your API Key, NOT your Heroku password&gt;</strong></span></pre>
</div>
<p class="indent">After you’ve logged in, you can use the <code><span class="green"><strong>heroku create</strong></span></code> command to create a place on the Heroku servers for the sample app to live (<a href="ch01.xhtml#ch01ex011">Listing 1.11</a>).</p>
<p class="indent">Finally, use the <code><span class="green"><strong>heroku create</strong></span></code> command to create a place on the Heroku servers for the sample app to live (<a href="ch01.xhtml#ch01ex011">Listing 1.11</a>).</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex011"><strong>Listing 1.11:</strong> Creating a new application at Heroku.</p>
<p class="codelink"><a href="ch01_images.xhtml#f0026-04" id="f0026-04a">Click here to view code image</a></p>
<pre><span class="blue"><strong>$</strong></span> <strong>heroku create</strong>
<span class="green"><strong>Creating app... done, <img src="graphics/f0026-05.jpg" alt="Images" width="15" height="14"/> damp-depths-3</strong></span>
<span class="green"><strong>https://damp-depths-3.herokuapp.com/ | https://git.heroku.com/damp-depths-3.git</strong></span></pre>
</div>
<p class="noindent"><span epub:type="pagebreak" id="page_27"></span>The <code><span class="green"><strong>heroku</strong></span></code> command creates a new subdomain just for our application, available for immediate viewing. There’s nothing there yet, though, so let’s get busy deploying.</p>
<p class="indent">The final steps involve some configuration that you can practically <a href="https://devcenter.heroku.com/articles/rack#sinatra">copy</a> (with only minor modifications) from the Heroku documentation. We need only two more files, a “<a href="https://rack.github.io/">Rackup</a>” (<code><span class="green"><strong>.ru</strong></span></code>) file called <code><span class="green"><strong>config.ru</strong></span></code> and a <code><span class="green"><strong>Gemfile</strong></span></code> specifying which gems our app uses (in this case, <code>sinatra</code> and <code>puma</code>, which is the production-grade web server that we saw briefly in <a href="ch01.xhtml#sec1_5">Section 1.5</a>):</p>
<div class="sidebar">
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>touch config.ru Gemfile</strong></pre>
</div>
<p class="noindent">Using your favorite <a href="https://www.learnenough.com/text-editor">text editor</a>, fill these files with the contents shown in <a href="ch01.xhtml#ch01ex012">Listing 1.12</a> and <a href="ch01.xhtml#ch01ex013">Listing 1.13</a>.</p>
<div class="ex-box">
<p class="ex-caption" id="ch01ex012"><strong>Listing 1.12:</strong> The Rack configuration file.<br/><code><em>ruby_tutorial/config.ru</em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#f0027-02" id="f0027-02a">Click here to view code image</a></p>
<pre><span class="green1"><strong>require</strong></span> <span class="red-s"><strong>'./hello_app'</strong></span>
<strong>run</strong> <span class="brown"><strong>Sinatra</strong></span><span class="gray"><strong>::</strong></span><span class="brown"><strong>Application</strong></span></pre>
</div>
<div class="ex-box">
<p class="ex-caption" id="ch01ex013"><strong>Listing 1.13:</strong> The hello app <code><span class="green"><strong>Gemfile</strong></span></code>.<br/><code><em>ruby_tutorial/Gemfile</em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#f0027-03" id="f0027-03a">Click here to view code image</a></p>
<pre><strong>source</strong> <span class="red-s"><strong>'https://rubygems.org'</strong></span>

<strong>ruby</strong> <span class="red-s"><strong>'3.1.2'</strong></span>   <span class="blue1"><strong><em># Change this line if you're using a different Ruby version.</em></strong></span>

<strong>gem</strong> <span class="red-s"><strong>'sinatra'</strong></span><strong>,</strong> <span class="red-s"> <strong>'2.2.2'</strong></span>
<strong>gem</strong> <span class="red-s"><strong>'puma'</strong></span><strong>,</strong>     <span class="red-s"><strong>'5.6.5'</strong></span></pre>
</div>
<span epub:type="pagebreak" id="page_28"></span>
<p class="indent">Now we’re almost ready to deploy. We first need to <em>bundle</em> our gems (well, gem) using <em><a href="https://bundler.io/">Bundler</a></em>, and then add the files to Git:</p>
<div class="sidebar">
<p class="codelink"><a href="ch01_images.xhtml#f0028-01" id="f0028-01a">Click here to view code image</a></p>
<pre class="pre"><span class="blue"><strong>$</strong></span> <strong>gem install bundler -v</strong> <span class="gray"><strong>2</strong></span><strong>.3.10</strong>
<span class="blue"><strong>$</strong></span> <strong>bundle _2.3.10_ install</strong>
<span class="blue"><strong>$</strong></span> <strong>bundle _2.3.10_ lock --add-platform x86_64-linux</strong>
<span class="blue"><strong>$</strong></span> <strong>git add -A</strong>
<span class="blue"><strong>$</strong></span> <strong>git commit -m</strong> <span class="red-s"><strong>"Add deployment configuration"</strong></span></pre>
</div>
<p class="noindent">Note that the first three lines include an exact Bundler version number (2.3.10) for maximum compatibility. The third line may or may not be necessary depending on the exact system you’re using, but in any case it does no harm to include it.</p>
<p class="indent">Finally, we can deploy to Heroku with a simple <code><span class="green"><strong>git push</strong></span></code>:</p>
<div class="sidebar">
<pre><span class="blue"><strong>$</strong></span> <strong>git push heroku main</strong></pre>
</div>
<p class="noindent">That’s it! Once the deployment is complete, our hello app is running in production (<a href="ch01.xhtml#ch01fig10">Figure 1.10</a>). (<em>Note</em>: Heroku displays the Web URL of the app upon deployment, but you can run <code><span class="green"><strong>heroku apps:info</strong></span></code> at any time to see it again.)</p>
<figure class="figure" id="ch01fig10">
<img src="graphics/f0029-01.jpg" alt="Images" width="879" height="679"/>
<figcaption>
<p class="title-f">Figure 1.10: The hello app running in production.</p>
</figcaption>
</figure>
<p class="indent">“<a href="https://www.youtube.com/watch?v=xos2MnVxe-c">It’s alive</a>!” (<a href="ch01.xhtml#ch01fig11">Figure 1.11</a>).<sup><a id="fn1_7" href="ch01.xhtml#fn1_7a">7</a></sup></p>
<p class="footnote"><sup><a id="fn1_7a" href="ch01.xhtml#fn1_7">7</a></sup>Image courtesy of Niday Picture Library/Alamy Stock Photo.</p>
<figure class="figure" id="ch01fig11">
<img src="graphics/f0030-01.jpg" alt="Images" width="891" height="891"/>
<figcaption>
<p class="title-f">Figure 1.11: Bringing a site to life is easier than it used to be.</p>
</figcaption>
</figure>
<p class="indent">Although there were quite a few steps involved here, being able to deploy a real site so early is nothing short of miraculous. It may be a simple app, but it’s a real one, and being able to deploy it to production is an enormous step.</p>
</section>
<section>
<h4 class="h4" id="sec1_5_2">1.5.2 Exercises</h4>
<ol class="num">
<li><p class="num">Change “hello, world!” to “goodbye, world!” in <code><span class="green"><strong>hello_app.rb</strong></span></code>. Does the change display right away? What about after restarting the local server?</p></li>
<li><p class="num">Commit your “goodbye, world!” changes and deploy the results to Heroku. Confirm that you can use <code><span class="green"><strong>git push heroku</strong></span></code> (omitting the branch name <code><span class="green"><strong>main</strong></span></code>) to complete the deployment.<span epub:type="pagebreak" id="page_29"></span><span epub:type="pagebreak" id="page_30"></span></p></li>
</ol>
</section>
</section>
</section>
</div>
</div>
</body>
</html>