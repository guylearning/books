<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough Python to Be Dangerous: Software Development, Flask Web Apps, and Beginning Data Science with Python</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780138051051.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="h2" id="ch10"><span epub:type="pagebreak" id="page_255"></span>Chapter 10</h2>
<h2 class="h2a">A Live Web Application</h2>
<p class="noindent">This chapter develops a dynamic web application in Python using the same Flask framework introduced in <a href="ch01.xhtml#sec1_5">Section 1.5</a> and applied further in <a href="ch05.xhtml#sec5_2">Section 5.2</a>. Although simple, Flask is not a toy—it’s a production-ready web framework used by companies like Netflix, Lyft, and reddit. Flask also serves as excellent lightweight preparation for a more complex framework like Django. By the end of this chapter, you’ll basically understand how web apps work, including layouts (<a href="ch10.xhtml#sec10_3">Section 10.3</a>), templates (<a href="ch10.xhtml#sec10_4">Section 10.4</a>), testing, and deployment.<sup><a id="fn10_1a" href="ch10.xhtml#fn10_1">1</a></sup></p>
<p class="footnote"><a id="fn10_1" href="ch10.xhtml#fn10_1a">1.</a> The main additional subject to learn is how to store and retrieve information using a database, which represents a new technology but doesn’t involve any fundamentally new principles. You can use databases both with Flask and with a fuller-featured framework like Django.</p>
<p class="indent">Our example web app will put the custom Python package developed in <a href="ch08.xhtml#ch08">Chapter 8</a> to good use through the development of a web-based <em>palindrome detector</em>. Along the way, we’ll learn how to create dynamic content using <em>Python templates</em>.</p>
<p class="indent">Detecting palindromes from the Web requires using a back-end web application to handle <em>form submission</em>, a task at which Flask excels. Our palindrome app will also feature two other pages—Home and About—which will give us an opportunity to learn how to use a Flask-based site layout. As part of this, we’ll apply and extend the work in <a href="ch08.xhtml#ch08">Chapter 8</a> to write automated tests for our app.</p>
<p class="indent">Finally, as in <a href="ch01.xhtml#sec1_5">Section 1.5</a>, we will also deploy our full palindrome app to the live Web. We’ll end with pointers to further resources for Python, Flask, and other topics like JavaScript and Django.</p>
<span epub:type="pagebreak" id="page_256"></span>
<section>
<h3 class="h3" id="sec10_1">10.1 Setup</h3>
<p class="noindent">Our first step is to set up our app as a proof-of-concept and deploy it to production. We’ll start by making a directory for it:</p>
<p class="codelink"><a href="ch10_images.xhtml#f256-01" id="f256-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>$</strong></span> <span class="pd_green">cd</span> ~/repos               <span class="pd_blue1"><em># cd ~/environments/repos on the cloud IDE</em></span>
<span class="pd_blue"><strong>$</strong></span> mkdir palindrome_app
<span class="pd_blue"><strong>$</strong></span> <span class="pd_green">cd</span> palindrome_app/</code></pre>
<p class="indent">Next, we’ll configure our system for Flask development and make a subdirectory for the palindrome detector itself:</p>
<p class="codelink"><a href="ch10_images.xhtml#f256-02" id="f256-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>$</strong></span> python3 -m venv venv
<span class="pd_blue"><strong>$</strong></span> <span class="pd_green">source</span> venv/bin/activate
<span class="pd_blue"><strong>(venv) $</strong></span> pip install --upgrade pip
<span class="pd_blue"><strong>(venv) $</strong></span> pip install <span class="pd_blue">Flas</span><span class="pd_gray">k==</span>2.2.2
<span class="pd_blue"><strong>(venv) $</strong></span> mkdir palindrome_detector
<span class="pd_blue"><strong>(venv) $</strong></span> touch palindrome_detector/__init__.py
<span class="pd_blue"><strong>(venv) $</strong></span> touch setup.py
<span class="pd_blue"><strong>(venv) $</strong></span> touch MANIFEST.in</code></pre>
<p class="noindent">This directory structure broadly parallels the official Flask tutorial, and allows for more sophisticated design practices (such as templates and testing) than the “hello, world” app from <a href="ch01.xhtml#sec1_5">Section 1.5</a> (which was just a single file in a directory used for other things as well).</p>
<p class="indent">As part of the app setup, we also need to fill a couple of setup files. Note in particular that, as of this writing, the Flask documentation includes <span class="pd_green-d"><code><strong>setup.py</strong></code></span> and <span class="pd_green-d"><code><strong>MANIFEST.in</strong></code></span> files (<a href="ch10.xhtml#ch10list1">Listing 10.1</a> and <a href="ch10.xhtml#ch10list2">Listing 10.2</a>) rather than following the “best practice” of consolidating configuration settings in <span class="pd_green-d"><code><strong>pyproject.toml</strong></code></span> (as we did in <a href="ch08.xhtml#ch08">Chapter 8</a>); practical experience shows that deviating from official documentation, especially when deploying applications, is most unwise, but beware that Flask’s own convention may have changed since this writing. Also, don’t worry if you don’t understand it, because neither do I; as with reading the documentation, selective ignorance is definitely part of technical sophistication (<a href="ch01.xhtml#ch1box2">Box 1.2</a>).</p>
<span epub:type="pagebreak" id="page_257"></span>
<p class="listing" id="ch10list1"><strong>Listing 10.1:</strong> A setup file.<br/><code><em>setup.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f257-01" id="f257-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>setuptools</strong></span> <span class="pd_green"><strong>import</strong></span> find_packages, setup

setup(
    name<span class="pd_gray">=</span><span class="pd_red">'palindrome_detector'</span>,
    version<span class="pd_gray">=</span><span class="pd_red">'1.0.0'</span>,
    packages<span class="pd_gray">=</span>find_packages(),
include_package_data<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>,
    zip_safe<span class="pd_gray">=</span><span class="pd_green"><strong>False</strong></span>,
install_requires<span class="pd_gray">=</span>[
       <span class="pd_red">'flask'</span>,
   ],
)</code></pre>
</div>
<p class="listing" id="ch10list2"><strong>Listing 10.2:</strong> A manifest file.<br/><code><em>MANIFEST.in</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f257-02" id="f257-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>graft palindrome_detector<span class="pd_gray">/</span>static
graft palindrome_detector<span class="pd_gray">/</span>templates
<span class="pd_green"><strong>global</strong></span><span class="pd_gray">-</span>exclude <span class="pd_gray">*.</span>pyc</code></pre>
</div>
<p class="indent">To get started with the app itself, let’s write “hello, world!”, as shown in <a href="ch10.xhtml#ch10list3">Listing 10.3</a>.<sup><a id="fn10_2a" href="ch10.xhtml#fn10_2">2</a></sup> Most of <a href="ch10.xhtml#ch10list3">Listing 10.3</a> is Flask boilerplate code, again drawn largely from the official documentation, so don’t worry about the details. Incidentally, the <span class="pd_green-d"><code><strong>@app.route("/")</strong></code></span> syntax right before the function definition is called a <em>decorator</em>, which has many uses in Python in addition to defining Flask routes.</p>
<p class="footnote"><a id="fn10_2" href="ch10.xhtml#fn10_2a">2.</a> The <span class="pd_green-d"><code><strong>os</strong></code></span> package includes utilities for dealing with the underlying operating system (OS).</p>
<p class="listing" id="ch10list3"><strong>Listing 10.3:</strong> Writing “hello, world!” in Flask.</p>
<p class="codelink"><a href="ch10_images.xhtml#f257-03" id="f257-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>flask</strong></span> <span class="pd_green"><strong>import</strong></span> Flask


<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">create_app</span>(test_config<span class="pd_gray">=</span><span class="pd_green"><strong>None</strong></span>):


<span epub:type="pagebreak" id="page_258"></span>    <span class="pd_red"><em>"""Create and configure the app."""</em></span>
    app <span class="pd_gray">=</span> Flask<span class="pd_blue">(__name__</span>, instance_relative_config<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>)

    <span class="pd_green"><strong>if</strong></span> test_config <span class="pd_pink"><strong>is</strong></span> <span class="pd_green"><strong>None</strong></span>:
        <span class="pd_blue1"><em># Load the instance config, if it exists, when not testing.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_pyfile(<span class="pd_red">"config.py"</span>, silent<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>)
    <span class="pd_green"><strong>else</strong></span>:
        <span class="pd_blue1"><em># Load the test config if passed in.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_mapping(test_config)

    <span class="pd_blue1"><em># Ensure the instance folder exists.</em></span>
    <span class="pd_green"><strong>try</strong></span>:
        os.makedirs(app<span class="pd_gray">.</span>instance_path)
    <span class="pd_green"><strong>except</strong></span> <span class="pd_lred"><strong>OSError</strong></span>:
        <span class="pd_green"><strong>pass</strong></span>

<span class="b-y">    <span class="pd_pink">@app</span>.route(<span class="pd_red">"/"</span>)</span>
<span class="b-y">    <span class="pd_green">def</span> <span class="pd_nila">index</span>():</span>
<span class="b-y">        <span class="pd_green">return</span> <span class="pd_red">"hello, world!"</span></span>

    <span class="pd_green"><strong>return</strong></span> app

app <span class="pd_gray">=</span> create_app()</code></pre>
</div>
<p class="indent">Then run the app using the <span class="pd_green-d"><code><strong>flask</strong></code></span> command (<a href="ch10.xhtml#ch10list4">Listing 10.4</a>).</p>
<p class="listing" id="ch10list4"><strong>Listing 10.4:</strong> Running the Flask app.</p>
<p class="codelink"><a href="ch10_images.xhtml#f258-01" id="f258-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> flask --app palindrome_detector --debug run
<span class="pd_green-d">* Running on http://127.0.0.1:5000/</span></code></pre>
</div>
<p class="noindent">The result of visiting 127.0.0.1:5000/ appears in <a href="ch10.xhtml#ch10fig1">Figure 10.1</a>.</p>
<figure class="image-c" id="ch10fig1">
<img src="graphics/10fig01.jpg" alt="images" width="725" height="554"/>
<figcaption>
<p class="title-f"><strong>Figure 10.1:</strong> Our initial app.</p>
</figcaption>
</figure>
<p class="indent">Finally, following our practice to deploy early and often, we’ll put our project under version control with Git in preparation for deploying to Fly.io. As in <a href="ch01.xhtml#sec1_5_1">Section 1.5.1</a>, we need a <span class="pd_green-d"><code><strong>.gitignore</strong></code></span> file to tell Git which files and directories to ignore (<a href="ch10.xhtml#ch10list5">Listing 10.5</a>).</p>
<span epub:type="pagebreak" id="page_259"></span>
<p class="listing" id="ch10list5"><strong>Listing 10.5:</strong> Ignoring certain files and directories.<br/><code><em>.gitignore</em></code></p>
<div class="box1">
<pre class="pre"><code>venv/

*.pyc
__pycache__/

instance/

.pytest_cache/
.coverage
htmlcov/

dist/
build/
*.egg-info/

.DS_Store</code></pre>
</div>
<p class="noindent"><span epub:type="pagebreak" id="page_260"></span>Next, we’ll initialize the repository:</p>
<p class="codelink"><a href="ch10_images.xhtml#f260-01" id="f260-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> git init
<span class="pd_blue"><strong>(venv) $</strong></span> git add -A
<span class="pd_blue"><strong>(venv) $</strong></span> git commit -m <span class="pd_red">"Initialize repository"</span></code></pre>
<p class="noindent">I suggest setting up a new repository at GitHub at this time as well.</p>
<p class="indent">Also as in <a href="ch01.xhtml#sec1_5_1">Section 1.5.1</a>, we’ll install the Gunicorn server:</p>
<p class="codelink"><a href="ch10_images.xhtml#f260-02" id="f260-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> pip install <span class="pd_blue">gunicorn</span><span class="pd_gray">==20</span>.1.0</code></pre>
<p class="indent">Then we’ll create <span class="pd_green-d"><code><strong>requirements.txt</strong></code></span> for the sake of Fly.io (<a href="ch10.xhtml#ch10list6">Listing 10.6</a>).</p>
<p class="listing" id="ch10list6"><strong>Listing 10.6:</strong> Specifying the requirements for our app.<br/><code><em>requirements.txt</em></code></p>
<div class="box1">
<pre class="pre"><code>click==8.1.3
Flask==2.2.2
gunicorn==20.1.0
itsdangerous==2.1.2
Jinja2==3.1.2
MarkupSafe==2.1.1
Werkzeug==2.2.2</code></pre>
</div>
<p class="indent">Now log in (<a href="ch10.xhtml#ch10list7">Listing 10.7</a>) and “launch” the app to create the production configuration (<a href="ch10.xhtml#ch10list8">Listing 10.8</a>). Edit the generated <span class="pd_green-d"><code><strong>Procfile</strong></code></span> to use the name of the palindrome app (<a href="ch10.xhtml#ch10list9">Listing 10.9</a>).</p>
<p class="listing" id="ch10list7"><strong>Listing 10.7:</strong> Signing in to Fly.io.</p>
<p class="codelink"><a href="ch10_images.xhtml#f260-03" id="f260-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> flyctl auth login --interactive</code></pre>
</div>
<p class="listing" id="ch10list8"><strong>Listing 10.8:</strong> “Launching” the app (which is just local configuration).</p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> flyctl launch</code></pre>
</div>
<p class="listing" id="ch10list9"><strong>Listing 10.9:</strong> <code><em>Procfile</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f260-04" id="f260-04a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>web: gunicorn palindrome_detector:app</code></pre>
</div>
<p class="indent"><span epub:type="pagebreak" id="page_261"></span>At this point, we’re nearly ready to deploy to production. The only issue is that you’re likely to have an app already defined from <a href="ch01.xhtml#sec1_5_1">Section 1.5.1</a>, and as of this writing Fly.io allows only one app when using its free tier. As a result, you will probably have to delete the old app, which you can find on your Fly.io dashboard (<a href="ch10.xhtml#ch10fig2">Figure 10.2</a>): Click app name &gt; Settings &gt; Delete app. (You can reuse the builder, though, so there is no need to delete that as well.)</p>
<figure class="image-c" id="ch10fig2">
<img src="graphics/10fig02.jpg" alt="images" width="725" height="327"/>
<figcaption>
<p class="title-f"><strong>Figure 10.2:</strong> Deleting an app at Fly.io.</p>
</figcaption>
</figure>
<p class="indent">I recommend you commit the configuration changes to Git (and continue making commits and pushes throughout this chapter):</p>
<p class="codelink"><a href="ch10_images.xhtml#f261-01" id="f261-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> git add -A
<span class="pd_blue"><strong>(venv) $</strong></span> git commit -m <span class="pd_red">"Add configuration"</span></code></pre>
<p class="noindent">We’re now ready for the actual deployment:</p>
<p class="codelink"><a href="ch10_images.xhtml#f261-02" id="f261-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> flyctl deploy
<span class="pd_blue"><strong>(venv) $</strong></span> flyctl open    <span class="pd_blue1"><em># won't work on the cloud IDE, so use displayed URL</em></span></code></pre>
<p class="noindent">The result is a working app in production, as seen in <a href="ch10.xhtml#ch10fig3">Figure 10.3</a>. Although for brevity I’ll omit further deployments until <a href="ch10.xhtml#sec10_5_1">Section 10.5.1</a>, I recommend deploying regularly as you work through the chapter to turn up any production issues as quickly as possible.</p>
<span epub:type="pagebreak" id="page_262"></span>
<figure class="image-c" id="ch10fig3">
<img src="graphics/10fig03.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.3:</strong> Our initial app in production.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec10_1_1">10.1.1 Exercise</h4>
<ol class="number">
<li><p class="number">There’s a nice trick for installing all of an app’s requirements from a generated <span class="pd_green-d"><code><strong>requirements.txt</strong></code></span> file using <span class="pd_green-d"><code><strong>pip -r</strong></code></span>. Confirm that the sequence shown in <a href="ch10.xhtml#ch10list10">Listing 10.10</a> results in a restored and working app.</p></li>
</ol>
<p class="listing" id="ch10list10"><strong>Listing 10.10:</strong> Tearing down and rebuilding the app environment.</p>
<p class="codelink"><a href="ch10_images.xhtml#f262-01" id="f262-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> deactivate
<span class="pd_blue"><strong>$</strong></span> rm -rf venv/
<span class="pd_blue"><strong>$</strong></span> python3 -m venv venv
<span class="pd_blue"><strong>$</strong></span> <span class="pd_green">source</span> venv/bin/activate
<span class="pd_blue"><strong>(venv) $</strong></span> pip install -r requirements.txt
<span class="pd_blue"><strong>(venv) $</strong></span> flask --app palindrome_detector --debug run
<span class="pd_green">* Running on http://127.0.0.1:5000/</span></code></pre>
</div>
<span epub:type="pagebreak" id="page_263"></span>
</section>
</section>
<section>
<h3 class="h3" id="sec10_2">10.2 Site Pages</h3>
<p class="noindent">Now that we’ve taken care of all the overhead involved in setting up and deploying the palindrome app, we’re in a position to make rapid progress toward our final application. We’ll start by making three pages for our site: Home, About, and Palindrome Detector. In contrast to our previous Flask apps, which have operated by simply returning strings in response to <code>GET</code> requests, for our full app we’ll use a more powerful technique known as <em>templates</em>. Initially, these templates will consist of static HTML, but we’ll add code to eliminate duplication in <a href="ch10.xhtml#sec10_3">Section 10.3</a> and then add dynamic content starting in <a href="ch10.xhtml#sec10_4">Section 10.4</a>.</p>
<p class="indent">In preparation for filling in the site pages, let’s create the (currently empty) template files at the command line, which should be located in a directory called <span class="pd_green-d"><code><strong>templates</strong></code></span> inside the <span class="pd_green-d"><code><strong>palindrome_detector</strong></code></span> app directory:</p>
<p class="codelink"><a href="ch10_images.xhtml#f263-01" id="f263-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> mkdir palindrome_detector/templates
<span class="pd_blue"><strong>(venv) $</strong></span> <span class="pd_green">cd</span> palindrome_detector/templates
<span class="pd_blue"><strong>(venv) $</strong></span> touch index.html about.html palindrome.html
<span class="pd_blue"><strong>(venv) $</strong></span> <span class="pd_green">cd</span> -</code></pre>
<p class="noindent">(As noted (<a href="https://www.learnenough.com/command-line-tutorial/directories#secnavigating_directories">https://www.learnenough.com/command-line-tutorial/directories#secnavigating_directories</a>) in <em>Learn Enough Command Line to Be Dangerous</em> (<a href="https://www.learnenough.com/command-line">https://www.learnenough.com/command-line</a>), the <span class="pd_green-d"><code><strong>cd -</strong></code></span> command changes to the previous directory, whichever it was; in this case, it’s <span class="pd_green-d"><code><strong>palindrome_app</strong></code></span>, i.e., the base directory for our web application.)</p>
<p class="indent">Initially, these templates will actually just be static HTML, but we’ll see starting in <a href="ch10.xhtml#sec10_4">Section 10.4</a> how to use them to generate HTML dynamically. The way to render a template inside a Flask app is with the <span class="pd_green-d"><code><strong>render_template</strong></code></span> function. For example, to render the index page on the root URL /, we can write</p>
<p class="codelink"><a href="ch10_images.xhtml#f263-02" id="f263-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/"</span>)
<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">index</span>():
    <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"index.html"</span>)</code></pre>
<p class="noindent">This code causes Flask to look for <span class="pd_green-d"><code><strong>index.html</strong></code></span> in the <span class="pd_green-d"><code><strong>templates</strong></code></span> directory.</p>
<p class="indent">Because the code to render all three templates is basically the same, we’ll add them all at the same time, as shown in <a href="ch10.xhtml#ch10list11">Listing 10.11</a>. Note that we’ve added an extra statement to import <span class="pd_green-d"><code><strong>render_template</strong></code></span> from the <span class="pd_green-d"><code><strong>flask</strong></code></span> package in addition to the Flask class itself.</p>
<span epub:type="pagebreak" id="page_264"></span>
<p class="listing" id="ch10list11"><strong>Listing 10.11:</strong> Rendering three templates.<br/><code><em>palindrome_app/palindrome_detector/__init__.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f264-01" id="f264-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="b-y"><span class="pd_green">from</span> <span class="pd_nila">flask</span> <span class="pd_green">import</span> Flask, render_template</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">create_app</span>(test_config<span class="pd_gray">=</span><span class="pd_green"><strong>None</strong></span>):
    <span class="pd_red"><em>"""Create and configure the app."""</em></span>
    app <span class="pd_gray">=</span> Flask<span class="pd_blue">(__name__</span>, instance_relative_config<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>)
    <span class="pd_gray">.</span>
    <span class="pd_gray">.</span>
    <span class="pd_gray">.</span>

<span class="b-y">    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/"</span>)</span>
<span class="b-y">    <span class="pd_green">def</span> <span class="pd_nila">index</span>():</span>
<span class="b-y">        <span class="pd_green">return</span> render_template(<span class="pd_red">"index.html"</span>)</span>

<span class="b-y">    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/about"</span>)</span>
<span class="b-y">    <span class="pd_green">def</span> <span class="pd_nila">about</span>():</span>
<span class="b-y">        <span class="pd_green">return</span> render_template(<span class="pd_red">"about.html"</span>)</span>

<span class="b-y">    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/palindrome"</span>)</span>
<span class="b-y">    <span class="pd_green">def</span> <span class="pd_nila">palindrome</span>():</span>
<span class="b-y">        <span class="pd_green">return</span> render_template(<span class="pd_red">"palindrome.html"</span>)</span>

    <span class="pd_green"><strong>return</strong></span> app

app <span class="pd_gray">=</span> create_app()</code></pre>
</div>
<p class="noindent">The file in <a href="ch10.xhtml#ch10list11">Listing 10.11</a> is in effect a <em>controller</em>, which coordinates between different parts of the application, defines the URLs (or <em>routes</em>) supported by the app, responds to requests, etc. The templates, meanwhile, are sometimes called <em>views</em>, which determine the HTML that actually gets returned to the browser. Together, the views and controllers are two-thirds of the <em>Model-View-Controller</em> architecture (<a href="https://www.railstutorial.org/book/beginning#sec-mvc">https://www.railstutorial.org/book/beginning#sec-mvc</a>) for developing web applications, also known as <em>MVC</em>.</p>
<p class="indent">The next step is to fill the three template files with HTML; this is straightforward but tedious, so I suggest you copy and paste from <a href="ch10.xhtml#ch10list12">Listing 10.12</a>, <a href="ch10.xhtml#ch10list13">Listing 10.13</a>, and <a href="ch10.xhtml#ch10list14">Listing 10.14</a>. In case you’re not reading this online, note that you can find the source for these and all other listings at the reference site mentioned briefly in <a href="ch01.xhtml#ch01">Chapter 1</a>: <a href="https://github.com/learnenough/learn_enough_python_code_listings">https://github.com/learnenough/learn_enough_python_code_listings</a>. By the way, the indentation of the material inside the <span class="pd_green-d"><code><strong>body</strong></code></span> tags is at the wrong depth, but we’ll see in <a href="ch10.xhtml#sec10_3">Section 10.3</a> why this is. Also note that we use two spaces for indentation, <span epub:type="pagebreak" id="page_265"></span>which is common in HTML markup, rather than the four spaces traditionally used in Python code.</p>
<p class="indent">It’s worth noting that the hyperlink reference (<span class="pd_green-d"><code><strong>href</strong></code></span>) URLs are hard-coded, like this:</p>
<p class="codelink"><a href="ch10_images.xhtml#f265-01" id="f265-01a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;</code></pre>
<p class="noindent">This is fine for small applications like the one in this chapter, but for a more powerful (but also more complex) approach, see the Flask documentation on <span class="pd_green-d"><code><strong>url_for</strong></code></span> (<a href="https://flask.palletsprojects.com/en/2.2.x/api/#flask.Flask.url_for">https://flask.palletsprojects.com/en/2.2.x/api/#flask.Flask.url_for</a>) and this helpful Stack Overflow comment (<a href="https://stackoverflow.com/questions/7478366/create-dynamic-urls-in-flask-with-url-for/35936261#35936261">https://stackoverflow.com/questions/7478366/create-dynamic-urls-in-flask-with-url-for/35936261#35936261</a>) on the subject.</p>
<p class="listing" id="ch10list12"><strong>Listing 10.12:</strong> The initial Home (index) view.<br/><code><em>palindrome_detector/templates/index.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f265-02" id="f265-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;

  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Sample Flask App&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;
    This is the sample Flask app for
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.learnenough.com/python-tutorial"</span>&gt;&lt;<span class="pd_green"><strong>em</strong></span>&gt;Learn Enough Python
    to Be Dangerous&lt;/<span class="pd_green"><strong>em</strong></span>&gt;&lt;/<span class="pd_green"><strong>a</strong></span>&gt;. Learn more on the &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/about"</span>&gt;About&lt;/<span class="pd_green"><strong>a</strong></span>&gt; page.
  &lt;/<span class="pd_green"><strong>p</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;
    Click the &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://en.wikipedia.org/wiki/Sator_Square"</span>&gt;Sator
    Square&lt;/<span class="pd_green"><strong>a</strong></span>&gt; below to run the custom &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/palindrome"</span>&gt;Palindrome
    Detector&lt;/<span class="pd_green"><strong>a</strong></span>&gt;.
  &lt;/<span class="pd_green"><strong>p</strong></span>&gt;

<span epub:type="pagebreak" id="page_266"></span>  &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"sator-square"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/palindrome"</span>&gt;
    &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/sator_square.jpg"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Sator Square"</span>&gt;
  &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="listing" id="ch10list13"><strong>Listing 10.13:</strong> The initial About template.<br/><code><em>palindrome_detector/templates/about.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f266-01" id="f266-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;

  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;About&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;
    This site is the final application in
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.learnenough.com/python-tutorial"</span>&gt;&lt;<span class="pd_green"><strong>em</strong></span>&gt;Learn Enough Python
    to Be Dangerous&lt;/<span class="pd_green"><strong>em</strong></span>&gt;&lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    by &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.michaelhartl.com/"</span>&gt;Michael Hartl&lt;/<span class="pd_green"><strong>a</strong></span>&gt;,
    a tutorial introduction to the
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.python.org/"</span>&gt;Python programming language&lt;/<span class="pd_green"><strong>a</strong></span>&gt; that
    is part of
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.learnenough.com/"</span>&gt;LearnEnough.com&lt;/<span class="pd_green"><strong>a</strong></span>&gt;.
  &lt;/<span class="pd_green"><strong>p</strong></span>&gt;
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<span epub:type="pagebreak" id="page_267"></span>
<p class="listing" id="ch10list14"><strong>Listing 10.14:</strong> The initial Palindrome Detector template.<br/><code><em>palindrome_detector/templates/palindrome.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f267-01" id="f267-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;

  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Detector&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;This will be the palindrome detector.&lt;/<span class="pd_green"><strong>p</strong></span>&gt;

      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="indent">Visiting 127.0.0.1:5000 causes Flask to serve up the default (index) page, as shown in <a href="ch10.xhtml#ch10fig4">Figure 10.4</a>. To get to the About page, we can type 127.0.0.1:5000/about into the browser address bar, as seen in <a href="ch10.xhtml#ch10fig5">Figure 10.5</a>.</p>
<figure class="image-c" id="ch10fig4">
<img src="graphics/10fig04.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.4:</strong> The initial Home page.</p>
</figcaption>
</figure>
<figure class="image-c" id="ch10fig5">
<img src="graphics/10fig05.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.5:</strong> The initial About page.</p>
</figcaption>
</figure>
<p class="indent"><a href="ch10.xhtml#ch10fig4">Figure 10.4</a> and <a href="ch10.xhtml#ch10fig5">Figure 10.5</a> show that the pages are basically working, but <a href="ch10.xhtml#ch10list12">Listing 10.12</a> and subsequent listings include both images and a CSS file, which aren’t currently present on the local system. We can change this situation by downloading the needed files from the Learn Enough CDN and putting them in the <span class="pd_green-d"><code><strong>static</strong></code></span> directory, which is a standard choice for such static assets.</p>
<p class="indent">The way to do this is to use <span class="pd_green-d"><code><strong>curl</strong></code></span> to fetch a <em>tarball</em>, which is similar to a ZIP file and is common on Unix-compatible systems:</p>
<p class="codelink"><a href="ch10_images.xhtml#f267-02" id="f267-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> curl -OL https://cdn.learnenough.com/le_python_palindrome_static.tar.gz</code></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_268"></span>This kind of file is created by <span class="pd_green-d"><code><strong>tar</strong></code></span>, or “tape archive”, whose name is an old-school throwback to the time when external tapes were routinely used for large backups. Meanwhile, the <span class="pd_green-d"><code><strong>gz</strong></code></span> extension refers to the important <em>gzip</em> method for compressing files.</p>
<p class="indent">The way to unzip the file is to use <span class="pd_green-d"><code><strong>tar zxvf</strong></code></span>, which stands for “<strong>t</strong>ape <strong>ar</strong>chive g<strong>z</strong>ip e<strong>x</strong>tract <strong>v</strong>erbose <strong>f</strong>ile” (as noted briefly in <a href="ch08.xhtml#sec8_5_2">Section 8.5.2</a>, the backslash <span class="pd_green-d"><code><strong>\</strong></code></span> is a <em>continuation character</em> and should be typed literally, but the right angle bracket <span class="pd_green-d"><code><strong>&gt;</strong></code></span> should be added by your shell program automatically and should not be typed):<sup><a id="fn10_3a" href="ch10.xhtml#fn10_3">3</a></sup></p>
<p class="footnote"><a id="fn10_3" href="ch10.xhtml#fn10_3a">3.</a> I created this tarball using the command <span class="pd_green-d"><code><strong>tar zcf &lt;filename&gt;.tar.gz</strong></code></span>, where <span class="pd_green-d"><code><strong>c</strong></code></span> stands for <strong>c</strong>reate.</p>
<p class="codelink"><a href="ch10_images.xhtml#f268-01" id="f268-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="b-y"><span class="pd_blue"><strong>(venv) $</strong></span> tar zxvf le_python_palindrome_static.tar.gz \</span>
<span class="b-y"><span class="pd_blue"><strong>&gt;</strong></span> --directory palindrome_detector/</span>

<span epub:type="pagebreak" id="page_269"></span><span class="pd_green">x static/</span>
<span class="pd_green">x static/static/images/</span>
<span class="pd_green">x static/static/stylesheets/</span>
<span class="pd_green">x static/static/stylesheets/main.css</span>
<span class="pd_green">x static/static/images/sator_square.jpg</span>
<span class="pd_green">x static/static/images/logo_b.png</span>
<span class="b-y"><span class="pd_blue"><strong>(venv) $</strong></span> rm -f le_python_palindrome_static.tar.gz</span></code></pre>
<p class="noindent">With experience, you may prefer to omit the <span class="pd_green-d"><code><strong>v</strong></code></span> flag, but I suggest using verbose output initially so that you can see what’s going on during the extraction process. By the way, note that <span class="pd_green-d"><code><strong>tar</strong></code></span> flags are just letters by themselves, with no preceding hyphens as in most other Unix commands. On many systems, you can in fact use hyphens, as in <span class="pd_green-d"><code><strong>tar -z -x -v -f &lt;filename&gt;</strong></code></span>, but for reasons unknown to me the usual convention with <span class="pd_green-d"><code><strong>tar</strong></code></span> is to omit them.</p>
<p class="indent"><span epub:type="pagebreak" id="page_270"></span>As seen from the verbose output above, unzipping the file has created a <span class="pd_green-d"><code><strong>static</strong></code></span> directory:</p>
<p class="codelink"><a href="ch10_images.xhtml#f270-01" id="f270-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> ls palindrome_detector/static
<span class="pd_green">images      stylesheets</span></code></pre>
<p class="indent">Refreshing the About page confirms that the logo image and CSS are now working (<a href="ch10.xhtml#ch10fig6">Figure 10.6</a>). The improvement on the Home page is even more dramatic, as seen in <a href="ch10.xhtml#ch10fig7">Figure 10.7</a>.</p>
<figure class="image-c" id="ch10fig6">
<img src="graphics/10fig06.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.6:</strong> A nicer-looking About page.</p>
</figcaption>
</figure>
<figure class="image-c" id="ch10fig7">
<img src="graphics/10fig07.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.7:</strong> A much-improved Home page.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec10_2_1">10.2.1 Exercises</h4>
<ol class="number">
<li><p class="number">Visit the /palindrome URL and confirm that the CSS and images are working.</p></li>
<li><p class="number">Make a commit and deploy the changes.</p></li>
</ol>
<span epub:type="pagebreak" id="page_271"></span>
</section>
</section>
<section>
<h3 class="h3" id="sec10_3">10.3 Layouts</h3>
<p class="noindent">At this point, our app is looking pretty good, but there are two significant blemishes: The HTML code for the three pages is highly repetitive, and navigating by hand from page to page is rather cumbersome. We’ll fix the first blemish in this section, and the second in <a href="ch10.xhtml#sec10_4">Section 10.4</a>. (And of course our app doesn’t yet detect palindromes, which is the subject of <a href="ch10.xhtml#sec10_5">Section 10.5</a>.)</p>
<p class="indent">If you followed <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> (<a href="https://www.learnenough.com/css-and-layout">https://www.learnenough.com/css-and-layout</a>), you’ll know that the <em>Layout</em> in the title referred to page layout generally—using Cascading Style Sheets to move elements around on the page, align them properly, etc.—but we also saw (<a href="https://www.learnenough.com/css-and-layout-tutorial/struct-layout#cha-struct-layout">https://www.learnenough.com/css-and-layout-tutorial/struct-layout#cha-struct-layout</a>) that doing this properly requires defining <em>layout templates</em> that capture common patterns and eliminate duplication.</p>
<p class="indent"><span epub:type="pagebreak" id="page_272"></span>In the present case, each of our site’s pages has the same basic structure, as shown in <a href="ch10.xhtml#ch10list15">Listing 10.15</a>.</p>
<p class="listing" id="ch10list15"><strong>Listing 10.15:</strong> The HTML structure of our site’s pages.</p>
<p class="codelink"><a href="ch10_images.xhtml#f272-01" id="f272-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;
<span class="b-y">        <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>page-specific content</em></span> <span class="pd_blue1">--&gt;</span></span>
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="noindent">Everything except the page-specific content (indicated by the highlighted HTML comment) is the same on each page. In <em>Learn Enough CSS &amp; Layout to Be Dangerous</em>, we eliminated this duplication using Jekyll templates (<a href="https://www.learnenough.com/css-and-layout-tutorial/struct-layout#sec-jekyll-templates">https://www.learnenough.com/css-and-layout-tutorial/struct-layout#sec-jekyll-templates</a>); in this tutorial, we’ll use the <em>Jinja templating engine</em> instead, which is the default template system for Flask.</p>
<p class="indent">Right now, our site is currently working, in the sense that each page has the proper content at this stage of development. We’re about to make a change that involves moving around and deleting a bunch of HTML, and we’d like to do this without breaking the site. Does that sound like something we’ve seen before?</p>
<p class="indent">It does indeed. This is exactly the kind of problem we faced in <a href="ch08.xhtml#ch08">Chapter 8</a> when we developed and then refactored the palindrome package. In that case, we wrote automated tests to catch any regressions, and in this case we’re going to do the same. (I started making websites long before automated testing of web applications was possible, much less the norm, and believe me, automated tests are a <em>huge</em> improvement over testing web apps by hand.)</p>
<p class="indent"><span epub:type="pagebreak" id="page_273"></span>To get started, we’ll add <span class="pd_green-d"><code><strong>pytest</strong></code></span> as we did in <a href="ch08.xhtml#sec8_1">Section 8.1</a>:</p>
<p class="codelink"><a href="ch10_images.xhtml#f273-01" id="f273-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> pip install <span class="pd_blue">pytest</span><span class="pd_gray">==7</span>.1.3</code></pre>
<p class="noindent">(By design, our tests will be as simple as possible; for more sophisticated tests, see the pytest-flask project (<a href="https://pytest-flask.readthedocs.io/en/latest/index.html">https://pytest-flask.readthedocs.io/en/latest/index.html</a>).)</p>
<p class="indent">In order to get our tests to work, we have to install our app locally as an editable Python package. Without the installation, you’ll probably get an error that looks like this:</p>
<p class="codelink"><a href="ch10_images.xhtml#f273-02" id="f273-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_green-d">E    ModuleNotFoundError: No module named 'palindrome_detector'</span></code></pre>
<p class="noindent">To prevent this, run the same command as in <a href="ch08.xhtml#ch8list18">Listing 8.18</a>, shown again in <a href="ch10.xhtml#ch10list16">Listing 10.16</a>.</p>
<p class="listing" id="ch10list16"><strong>Listing 10.16:</strong> Installing the app as an editable package.</p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>$</strong></span> pip install -e .</code></pre>
</div>
<p class="indent">We’ll put the tests themselves in a <span class="pd_green-d"><code><strong>tests</strong></code></span> directory, with one test file to start:</p>
<p class="codelink"><a href="ch10_images.xhtml#f273-03" id="f273-03a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> mkdir tests
<span class="pd_blue"><strong>(venv) $</strong></span> touch tests/test_site_pages.py</code></pre>
<p class="noindent">We’ll add a second test file in <a href="ch10.xhtml#sec10_5_1">Section 10.5.1</a>.</p>
<p class="indent">Our key tool in writing tests for our web app is the <span class="pd_green-d"><code><strong>client</strong></code></span> object, which has a <span class="pd_green-d"><code><strong>get()</strong></code></span> method that issues a <code>GET</code> request to a URL, thereby simulating visiting the corresponding page in a web browser. The result of such a request is a <span class="pd_green-d"><code><strong>response</strong></code></span> object, which has a variety of useful attributes, including <span class="pd_green-d"><code><strong>status_code</strong></code></span> (indicating the HTTP response code returned by the request) and <span class="pd_green-d"><code><strong>text</strong></code></span> (which contains the text of the HTML returned by our application). We can define such a <span class="pd_green-d"><code><strong>client</strong></code></span> object in the standard configuration file <span class="pd_green-d"><code><strong>conftest.py</strong></code></span>:</p>
<p class="codelink"><a href="ch10_images.xhtml#f273-04" id="f273-04a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> touch tests/conftest.py</code></pre>
<p class="noindent">The code itself appears in <a href="ch10.xhtml#ch10list17">Listing 10.17</a>. (As with the rest of the configuration code in this chapter, <a href="ch10.xhtml#ch10list17">Listing 10.17</a> is simply adapted from the Flask documentation.)</p>
<span epub:type="pagebreak" id="page_274"></span>
<p class="listing" id="ch10list17"><strong>Listing 10.17:</strong> Creating the <span class="pd_green-d"><code><strong>client</strong></code></span> object.<br/><code><em>tests/conftest.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f274-01" id="f274-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>pytest</strong></span>

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>palindrome_detector</strong></span> <span class="pd_green"><strong>import</strong></span> create_app


<span class="pd_pink">@pytest</span><span class="pd_gray">.</span>fixture
<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">app</span>():
    <span class="pd_green"><strong>return</strong></span> create_app()

<span class="pd_pink">@pytest</span><span class="pd_gray">.</span>fixture
<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">client</span>(app):
    <span class="pd_green"><strong>return</strong></span> app<span class="pd_gray">.</span>test_client()</code></pre>
</div>
<p class="indent">We’ll start with super-basic tests making sure that the app serves up <em>something</em>, as indicated by the response code <code>200 (OK)</code>, which we can do like this:</p>
<p class="codelink"><a href="ch10_images.xhtml#f274-02" id="f274-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span></code></pre>
<p class="noindent">Here we use the <span class="pd_green-d"><code><strong>get()</strong></code></span> method in the test to issue a <code>GET</code> request to the root URL /, verifying using the <span class="pd_green-d"><code><strong>assert</strong></code></span> function introduced in <a href="ch08.xhtml#ch08">Chapter 8</a> that the code is correct.</p>
<p class="indent">Applying the above discussion to the About and Palindrome Detector pages as well, we arrive at our initial test suite, shown in <a href="ch10.xhtml#ch10list18">Listing 10.18</a>.</p>
<p class="listing" id="ch10list18"><strong>Listing 10.18:</strong> Our initial test suite. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>tests/test_site_pages.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f274-03" id="f274-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_about</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span></code></pre>
</div>
<p class="indent"><span epub:type="pagebreak" id="page_275"></span>Because the tests in <a href="ch10.xhtml#ch10list18">Listing 10.18</a> are for code that’s already working, the test suite should be <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list19"><strong>Listing 10.19:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f275-01" id="f275-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 3 passed in 0.01s ===============================</span></code></pre>
</div>
<p class="indent">The tests in <a href="ch10.xhtml#ch10list18">Listing 10.18</a> are a fine start, but they really only check if the pages are there at all. It would be nice to have a slightly more stringent test of the HTML content, though not <em>too</em> stringent—we don’t want our tests to make it hard to make changes in the future. As a middle ground, we’ll check that each page in the site has a <span class="pd_green-d"><code><strong>title</strong></code></span> tag and an <span class="pd_green-d"><code><strong>h1</strong></code></span> tag somewhere in the document.</p>
<p class="indent">Although more sophisticated techniques are certainly possible,<sup><a id="fn10_4a" href="ch10.xhtml#fn10_4">4</a></sup> we’ll take the simplest approach that works and apply the <span class="pd_green-d"><code><strong>in</strong></code></span> operator introduced in <a href="ch02.xhtml#sec2_5">Section 2.5</a> to the <span class="pd_green-d"><code><strong>response.text</strong></code></span> attribute. For example, to check for a <span class="pd_green-d"><code><strong>&lt;title&gt;</strong></code></span> tag, we can use this:<sup><a id="fn10_5a" href="ch10.xhtml#fn10_5">5</a></sup></p>
<p class="footnote"><a id="fn10_4" href="ch10.xhtml#fn10_4a">4.</a> For example, we could use the Beautiful Soup package from <a href="ch09.xhtml#sec9_3">Section 9.3</a> to parse the HTML and make a <span class="pd_green-d"><code><strong>doc</strong></code></span> object for use in the tests.</p>
<p class="footnote"><a id="fn10_5" href="ch10.xhtml#fn10_5a">5.</a> This assertion would still pass even if <span class="pd_green-d"><code><strong>&lt;title&gt;</strong></code></span> appeared in a random spot on the page and not as a true title, but this is unlikely enough that the current technique is fine to demonstrate the main principles. As noted, a more sophisticated approach using a proper HTML parser is also possible and would be a good idea to use for more advanced applications.</p>
<p class="codelink"><a href="ch10_images.xhtml#f275-02" id="f275-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;title&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text</code></pre>
<p class="noindent">Adding such code for both <span class="pd_green-d"><code><strong>title</strong></code></span> and <span class="pd_green-d"><code><strong>h1</strong></code></span> tags to the test for each page in our site yields the updated test suite shown in <a href="ch10.xhtml#ch10list20">Listing 10.20</a>.</p>
<p class="listing" id="ch10list20"><strong>Listing 10.20:</strong> Adding assertions for the presence of some HTML tags. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>tests/test_site_pages.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f275-03" id="f275-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span epub:type="pagebreak" id="page_276"></span><span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;title&gt;"</span> <span class="pd_pink">in</span> response.text</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink">in</span> response.text</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_about</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;title&gt;"</span> <span class="pd_pink">in</span> response.text</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink">in</span> response.text</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;title&gt;"</span> <span class="pd_pink">in</span> response.text</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink">in</span> response.text</span></code></pre>
</div>
<p class="noindent">By the way, some programmers adopt the convention of only ever having one assertion per test, whereas in <a href="ch10.xhtml#ch10list20">Listing 10.20</a> we have two. In my experience, the overhead associated with setting up the right state (e.g., duplicating the calls to <span class="pd_green-d"><code><strong>get()</strong></code></span>) makes this convention inconvenient, and I’ve never run into any trouble from including multiple assertions in a test.</p>
<p class="indent">The tests in <a href="ch10.xhtml#ch10list20">Listing 10.20</a> should now be <span class="smallcaps"><span class="pd_green-g">GREEN</span></span> as required:</p>
<p class="listing" id="ch10list21"><strong>Listing 10.21:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f276-01" id="f276-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 3 passed in 0.01s ===============================</span></code></pre>
</div>
<p class="indent">At this point, we’re ready to use a Jinja template to eliminate duplication. Our first step is to define a layout template for the repeated code:</p>
<p class="codelink"><a href="ch10_images.xhtml#f276-02" id="f276-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> touch palindrome_detector/templates/layout.html</code></pre>
<p class="noindent">The contents of <span class="pd_green-d"><code><strong>layout.html</strong></code></span> are the common HTML structure identified in <a href="ch10.xhtml#ch10list15">Listing 10.15</a> combined with the special <span class="pd_green-d"><code><strong>block</strong></code></span> function supplied by the Jinja template system. This involves replacing the HTML comment</p>
<span epub:type="pagebreak" id="page_277"></span>
<p class="codelink"><a href="ch10_images.xhtml#f277-01" id="f277-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue1"><em>&lt;!-- page-specific content --&gt;</em></span></code></pre>
<p class="noindent">in <a href="ch10.xhtml#ch10list15">Listing 10.15</a> with the Jinja code</p>
<p class="codelink"><a href="ch10_images.xhtml#f277-02" id="f277-02a">Click here to view code image</a></p>
<pre class="pre1"><code>{<span class="pd_gray">%</span> block content <span class="pd_gray">%</span>}{<span class="pd_gray">%</span> endblock %}</code></pre>
<p class="noindent">The <span class="pd_green-d"><code><strong>{% ... %}</strong></code></span> syntax is used by Jinja to indicate code inside an HTML document.<sup><a id="fn10_6a" href="ch10.xhtml#fn10_6">6</a></sup> This particular code inserts the text in a variable called <span class="pd_green-d"><code><strong>content</strong></code></span> (which we’ll define for each page in just a moment). The resulting template appears as in <a href="ch10.xhtml#ch10list22">Listing 10.22</a>.</p>
<p class="footnote"><a id="fn10_6" href="ch10.xhtml#fn10_6a">6.</a> This syntax is commonly used among template languages. For example, the same syntax is used by the Liquid template language used in <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> in combination with the Jekyll static site generator.</p>
<p class="listing" id="ch10list22"><strong>Listing 10.22:</strong> A layout with shared HTML structure.<br/><code><em>palindrome_detector/templates/layout.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f277-03" id="f277-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;
<span class="b-y">        {% block content %}{% endblock %}</span>
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="indent">At this point, we can remove the shared material from our pages, leaving only the core content, as shown in <a href="ch10.xhtml#ch10list23">Listing 10.23</a>, <a href="ch10.xhtml#ch10list24">Listing 10.24</a>, and <a href="ch10.xhtml#ch10list25">Listing 10.25</a>. (This is why the body content wasn’t fully indented in <a href="ch10.xhtml#ch10list12">Listing 10.12</a> and the other templates <span epub:type="pagebreak" id="page_278"></span>in <a href="ch10.xhtml#sec10_2">Section 10.2</a>.) <a href="ch10.xhtml#ch10list23">Listing 10.23</a> and subsequent listings use the Jinja function <span class="pd_green-d"><code><strong>extends</strong></code></span> to tell the system to use the template <span class="pd_green-d"><code><strong>layout.html</strong></code></span>, and then <span class="pd_green-d"><code><strong>{% block content %}</strong></code></span> defines the content to be inserted in <a href="ch10.xhtml#ch10list22">Listing 10.22</a>.</p>
<p class="listing" id="ch10list23"><strong>Listing 10.23:</strong> The core Home (index) view.<br/><code><em>palindrome_detector/templates/index.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f278-01" id="f278-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="b-y">{% extends "layout.html" %}</span>

<span class="b-y">{% block content %}</span>
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Sample Flask App&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;
    This is the sample Flask app for
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.learnenough.com/python-tutorial"</span>&gt;&lt;<span class="pd_green"><strong>em</strong></span>&gt;Learn Enough Python
    to Be Dangerous&lt;/<span class="pd_green"><strong>em</strong></span>&gt;&lt;/<span class="pd_green"><strong>a</strong></span>&gt;. Learn more on the &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/about"</span>&gt;About&lt;/<span class="pd_green"><strong>a</strong></span>&gt; page.
  &lt;/<span class="pd_green"><strong>p</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;
    Click the &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://en.wikipedia.org/wiki/Sator_Square"</span>&gt;Sator
    Square&lt;/<span class="pd_green"><strong>a</strong></span>&gt; below to run the custom &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/palindrome"</span>&gt;Palindrome
    Detector&lt;/<span class="pd_green"><strong>a</strong></span>&gt;.
  &lt;/<span class="pd_green"><strong>p</strong></span>&gt;

  &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"sator-square"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/palindrome"</span>&gt;
    &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/sator_square.jpg"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Sator Square"</span>&gt;
  &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
<span class="b-y">{% endblock %}</span></code></pre>
</div>
<p class="listing" id="ch10list24"><strong>Listing 10.24:</strong> The core About view.<br/><code><em>palindrome_detector/templates/about.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f278-02" id="f278-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;About&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;
    This site is the final application in
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.learnenough.com/python-tutorial"</span>&gt;&lt;<span class="pd_green"><strong>em</strong></span>&gt;Learn Enough Python
    to Be Dangerous&lt;/<span class="pd_green"><strong>em</strong></span>&gt;&lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    by &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.michaelhartl.com/"</span>&gt;Michael Hartl&lt;/<span class="pd_green"><strong>a</strong></span>&gt;,
    a tutorial introduction to the
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.python.org/"</span>&gt;Python programming language&lt;/<span class="pd_green"><strong>a</strong></span>&gt; that
<span epub:type="pagebreak" id="page_279"></span>    is part of
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://www.learnenough.com/"</span>&gt;LearnEnough.com&lt;/<span class="pd_green"><strong>a</strong></span>&gt;.
  &lt;/<span class="pd_green"><strong>p</strong></span>&gt;
{% endblock %}</code></pre>
</div>
<p class="listing" id="ch10list25"><strong>Listing 10.25:</strong> The core Palindrome Detector view.<br/><code><em>palindrome_detector/templates/palindrome.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f279-01" id="f279-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Detector&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>p</strong></span>&gt;This will be the palindrome detector.&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
{% endblock %}</code></pre>
</div>
<p class="indent">Assuming we did everything right in the steps above, our tests should still be <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list26"><strong>Listing 10.26:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f279-02" id="f279-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 3 passed in 0.01s ===============================</span></code></pre>
</div>
<p class="noindent">A quick check in the browser confirms that things are working as expected (<a href="ch10.xhtml#ch10fig8">Figure 10.8</a>).</p>
<p class="indent">But of course many things could have gone wrong in the refactoring we just did, and our test suite would have caught the problem immediately. Moreover, it would catch errors even on pages we didn’t happen to check; for example, <a href="ch10.xhtml#ch10fig8">Figure 10.8</a> shows the index page, but how do we know the About page is working as well? The answer is that we don’t, and the test suite saves us the trouble of checking every page in the site. As you might guess, this practice becomes increasingly valuable as the complexity of a site grows.</p>
<span epub:type="pagebreak" id="page_280"></span>
<figure class="image-c" id="ch10fig8">
<img src="graphics/10fig08.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.8:</strong> Our Home page, now created using a layout.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec10_3_1">10.3.1 Exercises</h4>
<ol class="number">
<li><p class="number">As you can confirm by running the source of any page through an HTML validator, the current pages are valid HTML, but there’s a warning with a suggestion to add a <span class="pd_green-d"><code><strong>lang</strong></code></span> (language) attribute to the <span class="pd_green-d"><code><strong>html</strong></code></span> tag. Add the attribute <span class="pd_green-d"><code><strong>lang="en"</strong></code></span> (for “English”) to the <span class="pd_green-d"><code><strong>html</strong></code></span> tag in <a href="ch10.xhtml#ch10list22">Listing 10.22</a> and confirm using a web inspector that it appears correctly on all three pages.</p></li>
<li><p class="number">Make a commit and deploy the changes.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec10_4">10.4 Template Engine</h3>
<p class="noindent">Now that we’ve defined a proper layout, in this section we’ll use the Jinja template language (first seen in <a href="ch10.xhtml#ch10list22">Listing 10.22</a>) to add a couple of nice refinements to our site: <em>variable titles</em> and <em>navigation</em>. Variable titles are HTML <span class="pd_green-d"><code><strong>title</strong></code></span> tag contents that vary from <span epub:type="pagebreak" id="page_281"></span>page to page, giving each page a nice polish of customization. Navigation, meanwhile, saves us the hassle of having to type each subpage in by hand—certainly not the kind of user experience we’re trying to create.</p>
<section>
<h4 class="h4" id="sec10_4_1">10.4.1 Variable Titles</h4>
<p class="noindent">Our variable titles will combine a <em>base title</em>, which is the same on each page, with a piece that varies based on the page’s name. In particular, for our Home, About, and Palindrome Detector pages, we want the titles to look something like this:</p>
<p class="codelink"><a href="ch10_images.xhtml#f281-01" id="f281-01a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | Home&lt;/<span class="pd_green"><strong>title</strong></span>&gt;</code></pre>
<p class="codelink"><a href="ch10_images.xhtml#f281-02" id="f281-02a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | About&lt;/<span class="pd_green"><strong>title</strong></span>&gt;</code></pre>
<p class="codelink"><a href="ch10_images.xhtml#f281-03" id="f281-03a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | Palindrome Detector&lt;/<span class="pd_green"><strong>title</strong></span>&gt;</code></pre>
<p class="noindent">Our strategy has three steps:</p>
<ol class="number">
<li><p class="number">Write <span class="smallcaps"><span class="pd_green-g">GREEN</span></span> tests for the current page title.</p></li>
<li><p class="number">Write <span class="smallcaps"><span class="pd_redred">RED</span></span> tests for the variable titles.</p></li>
<li><p class="number">Get to <span class="smallcaps"><span class="pd_green-g">GREEN</span></span> by adding the variable component of the title.</p></li>
</ol>
<p class="noindent">Note that Steps 2 &amp; 3 constitute test-driven development. And indeed writing the tests for the variable title is easier than getting them to pass, which is one of the cases for TDD described in <a href="ch08.xhtml#ch8box1">Box 8.1</a>.</p>
<p class="indent">To get started with Step 1, we’ll modify the <span class="pd_green-d"><code><strong>title</strong></code></span> assertions defined in <a href="ch10.xhtml#ch10list20">Listing 10.20</a> to include the current base title. For convenience in the next step, we’ll define a <span class="pd_green-d"><code><strong>base_title</strong></code></span> variable and use interpolation to form the title using</p>
<p class="codelink"><a href="ch10_images.xhtml#f281-04" id="f281-04a">Click here to view code image</a></p>
<pre class="pre1"><code>base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
title <span class="pd_gray">=</span> <span class="pd_red">f"&lt;title&gt;</span><span class="pd_lpink"><strong>{</strong></span>base_title<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">&lt;/title&gt;"</span></code></pre>
<p class="noindent">and then assert that the title appears in the response text. The result for all three site pages appears in <a href="ch10.xhtml#ch10list27">Listing 10.27</a>.</p>
<span epub:type="pagebreak" id="page_282"></span>
<p class="listing" id="ch10list27"><strong>Listing 10.27:</strong> Adding assertions for the base title content. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>tests/test_site_pages.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f282-01" id="f282-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    base_title = <span class="pd_red">"Learn Enough Python Sample App"</span></span>
<span class="b-y">    title = <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">}&lt;/title&gt;"</span></span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response.text</span>
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_about</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    base_title = <span class="pd_red">"Learn Enough Python Sample App"</span></span>
<span class="b-y">    title = <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">}&lt;/title&gt;"</span></span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response.text</span>
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    base_title = <span class="pd_red">"Learn Enough Python Sample App"</span></span>
<span class="b-y">    title = <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">}&lt;/title&gt;"</span></span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response.text</span>
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text</code></pre>
</div>
<p class="noindent">Note that there is a lot of repetition in <a href="ch10.xhtml#ch10list27">Listing 10.27</a>. Some of this repetition will disappear when we add the variable component to the titles; eliminating the rest of the repetition is left as an exercise (<a href="ch10.xhtml#sec10_4_3">Section 10.4.3</a>).</p>
<p class="indent">As required for tests of working code, the test suite is currently <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list28"><strong>Listing 10.28:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f282-02" id="f282-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 3 passed in 0.01s ===============================</span></code></pre>
</div>
<p class="indent">Now we’re ready for Step 2. All we need to do is add the vertical bar <span class="pd_green-d"><code><strong>|</strong></code></span> and the page-specific titles, as shown in <a href="ch10.xhtml#ch10list29">Listing 10.29</a>.</p>
<span epub:type="pagebreak" id="page_283"></span>
<p class="listing" id="ch10list29"><strong>Listing 10.29:</strong> Adding assertions for the variable title content. <span class="pd_redred"><span class="smallcaps">RED</span></span><br/><code><em>tests/test_site_pages.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f283-01" id="f283-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
    base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
<span class="b-y">    title = <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">} | Home&lt;/title&gt;"</span></span>
    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_about</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
    base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
<span class="b-y">    title = <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">} | About&lt;/title&gt;"</span></span>
    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
    base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
<span class="b-y">    title = <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">} | Palindrome Detector&lt;/title&gt;"</span> </span>
    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text</code></pre>
</div>
<p class="noindent">Because we haven’t updated the application code, the tests are now <span class="smallcaps"><span class="pd_redred">RED</span></span>:</p>
<p class="listing" id="ch10list30"><strong>Listing 10.30:</strong> <span class="pd_redred"><span class="smallcaps">RED</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f283-02" id="f283-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py FFF                                             [100%]</span>

<span class="pd_green-d">=================================== FAILURES ===================================</span>
<span class="pd_green-d">__________________________________ test_index __________________________________</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">=========================== short test summary info ============================</span>
<span class="pd_green-d">FAILED tests/test_site_pages.py::test_index - assert '&lt;title&gt;Learn Enough Pyt...</span>
<span class="pd_green-d">FAILED tests/test_site_pages.py::test_about - assert '&lt;title&gt;Learn Enough Pyt...</span>
<span class="pd_green-d">FAILED tests/test_site_pages.py::test_palindrome - assert '&lt;title&gt;Learn Enoug...</span>
<span class="pd_green-d">============================== 3 failed in 0.03s ===============================</span></code></pre>
</div>
<p class="indent"><span epub:type="pagebreak" id="page_284"></span>Now for Step 3. The trick is to pass a different <span class="pd_green-d"><code><strong>page_title</strong></code></span> option from each of our app’s functions and then render the result on the page layout. The way Jinja templates work is that we can pass a keyword argument (<a href="ch05.xhtml#sec5_1_2">Section 5.1.2</a>) to the template using</p>
<p class="codelink"><a href="ch10_images.xhtml#f284-01" id="f284-01a">Click here to view code image</a></p>
<pre class="pre1"><code>render_template(<span class="pd_red">"index.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"Home"</span>)</code></pre>
<p class="noindent">and automatically get access to a variable called <span class="pd_green-d"><code><strong>page_title</strong></code></span> in the template (in this case, with the value <span class="pd_green-d"><code><strong>"Home"</strong></code></span>). The result for our desired variable titles appears in <a href="ch10.xhtml#ch10list31">Listing 10.31</a>.</p>
<p class="listing" id="ch10list31"><strong>Listing 10.31:</strong> Adding <span class="pd_green-d"><code><strong>page_title</strong></code></span> variables to each page. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_app/palindrome_detector/__init__.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f284-02" id="f284-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>flask</strong></span> <span class="pd_green"><strong>import</strong></span> Flask, render_template


<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">create_app</span>(test_config<span class="pd_gray">=</span><span class="pd_green"><strong>None</strong></span>):
    <span class="pd_red"><em>"""Create and configure the app."""</em></span>
    app <span class="pd_gray">=</span> Flask<span class="pd_blue">(__name__</span>, instance_relative_config<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>)

    <span class="pd_green"><strong>if</strong></span> test_config <span class="pd_pink"><strong>is</strong></span> <span class="pd_green"><strong>None</strong></span>:
        <span class="pd_blue1"><em># Load the instance config, if it exists, when not testing.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_pyfile(<span class="pd_red">"config.py"</span>, silen<span class="pd_gray">t=</span><span class="pd_green"><strong>True</strong></span>)
    <span class="pd_green"><strong>else</strong></span>:
        <span class="pd_blue1"><em># Load the test config if passed in.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_mapping(test_config)

    <span class="pd_blue1"><em># Ensure the instance folder exists.</em></span>
    <span class="pd_green"><strong>try</strong></span>:
        os<span class="pd_gray">.</span>makedirs(app<span class="pd_gray">.</span>instance_path)
    <span class="pd_green"><strong>except</strong></span> <span class="pd_lred"><strong>OSError</strong></span>:
        <span class="pd_green"><strong>pass</strong></span>

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">index</span>():
<span class="b-y">        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"index.html"</span>, page_title=<span class="pd_red">"Home"</span>)</span>

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">about</span>():
<span class="b-y">        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"about.html"</span>, page_title=<span class="pd_red">"About"</span>)</span>

<span epub:type="pagebreak" id="page_285"></span>    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">palindrome</span>():
<span class="b-y">        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"palindrome.html"</span>,</span>
<span class="b-y">                               page_title=<span class="pd_red">"Palindrome Detector"</span>)</span>

    <span class="pd_green"><strong>return</strong></span> app

app <span class="pd_gray">=</span> create_app()</code></pre>
</div>
<p class="indent">Once we have a variable inside a template using the code in <a href="ch10.xhtml#ch10list31">Listing 10.31</a>, we can insert it using the special syntax <span class="pd_green-d"><code><strong>{{ ... }}</strong></code></span> used by Jinja templates:<sup><a id="fn10_7a" href="ch10.xhtml#fn10_7">7</a></sup></p>
<p class="footnote"><a id="fn10_7" href="ch10.xhtml#fn10_7a">7.</a> As with <span class="pd_green-d"><code><strong>{% ... }%</strong></code></span>, the <span class="pd_green-d"><code><strong>{{ ... }}</strong></code></span> syntax is commonly used in other templating systems as well, such as Liquid and Mustache.</p>
<pre class="pre1"><code>{{ page_title }}</code></pre>
<p class="noindent">This tells Jinja to insert the contents of <span class="pd_green-d"><code><strong>page_title</strong></code></span> into the HTML template at that location. In particular, this means we can add the variable component of the title using the code shown in <a href="ch10.xhtml#ch10list32">Listing 10.32</a>.</p>
<p class="listing" id="ch10list32"><strong>Listing 10.32:</strong> Adding a variable component to the title. <span class="pd_redred"><span class="smallcaps">RED</span></span><br/><code><em>palindrome_detector/templates/layout.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f285-01" id="f285-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    <span class="b-y">&lt;<span class="pd_green">title</span>&gt;Learn Enough Python Sample App | {{ page_title }}&lt;<span class="pd_green">/titl</span>e&gt;</span>
    .
    .
    .</code></pre>
</div>
<p class="noindent">When <span class="pd_green-d"><code><strong>page_title</strong></code></span> is <span class="pd_green-d"><code><strong>"Home"</strong></code></span>, the layout title will become</p>
<p class="codelink"><a href="ch10_images.xhtml#f285-02" id="f285-02a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | Home&lt;/<span class="pd_green"><strong>title</strong></span>&gt;</code></pre>
<p class="noindent">and so on for the other variable titles.</p>
<p class="indent">Because the variable title in <a href="ch10.xhtml#ch10list31">Listing 10.31</a> matches the ones in the test from <a href="ch10.xhtml#ch10list29">Listing 10.29</a>, our test suite should be <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<span epub:type="pagebreak" id="page_286"></span>
<p class="listing" id="ch10list33"><strong>Listing 10.33:</strong> <span class="smallcaps"><span class="pd_green-g">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f286-01" id="f286-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 3 passed in 0.01s ===============================</span></code></pre>
</div>
<p class="noindent">Success! We’ve managed to add variable titles to our application using TDD and we’ve confirmed that they’re working without even touching a browser.</p>
<p class="indent">Of course, it’s probably a good idea to double-check in the browser anyway, just to make sure (<a href="ch10.xhtml#ch10fig9">Figure 10.9</a>).</p>
<figure class="image-c" id="ch10fig9">
<img src="graphics/10fig09.jpg" alt="images" width="725" height="546"/>
<figcaption>
<p class="title-f"><strong>Figure 10.9:</strong> Confirming the correct variable titles in the browser.</p>
</figcaption>
</figure>
<span epub:type="pagebreak" id="page_287"></span>
</section>
<section>
<h4 class="h4" id="sec10_4_2">10.4.2 Site Navigation</h4>
<p class="noindent">Now that we have a proper layout file, adding navigation to every page is easy. The nav code appears in <a href="ch10.xhtml#ch10list34">Listing 10.34</a>, with the result shown in <a href="ch10.xhtml#ch10fig10">Figure 10.10</a>.</p>
<figure class="image-c" id="ch10fig10">
<img src="graphics/10fig10.jpg" alt="images" width="725" height="546"/>
<figcaption>
<p class="title-f"><strong>Figure 10.10:</strong> The site navigation.</p>
</figcaption>
</figure>
<p class="listing" id="ch10list34"><strong>Listing 10.34:</strong> Adding site navigation.<br/><code><em>palindrome_detector/templates/layout.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f287-01" id="f287-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | {{ page_title }}&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
<span class="b-y">      &lt;<span class="pd_green">header</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header"</span>&gt;</span>
<span class="b-y">        &lt;<span class="pd_green">nav</span>&gt;</span>
<span class="b-y">          &lt;<span class="pd_green">ul</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-nav"</span>&gt;</span>
<span class="b-y">            &lt;<span class="pd_green">li</span>&gt;&lt;<span class="pd_green">a</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span>&gt;Home&lt;<span class="pd_green">/</span>a&gt;&lt;<span class="pd_green">/l</span>i&gt;</span>
<span class="b-y">            &lt;<span class="pd_green">li</span>&gt;&lt;<span class="pd_green">a</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/palindrome"</span>&gt;Is It a Palindrome?&lt;<span class="pd_green">/</span>a&gt;&lt;<span class="pd_green">/l</span>i&gt;</span>
<span class="b-y">            &lt;<span class="pd_green">li</span>&gt;&lt;<span class="pd_green">a</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/about"</span>&gt;About&lt;<span class="pd_green">/</span>a&gt;&lt;<span class="pd_green">/l</span>i&gt;</span>
<span class="b-y">          &lt;/<span class="pd_green">ul</span>&gt;</span>
<span class="b-y">        &lt;/<span class="pd_green">nav</span>&gt;</span>
<span class="b-y">      &lt;/<span class="pd_green">header</span>&gt;</span>
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;
        {% block content %}{% endblock %}
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="indent">As a final flourish, we’ll factor the navigation from <a href="ch10.xhtml#ch10list34">Listing 10.34</a> into a separate template, sometimes called a <em>partial template</em> (or <em>partial</em> for short) because it represents only a partial page. This will lead to a nicely clean and tidy layout page.</p>
<p class="indent">Because this involves refactoring the site, we’ll add a simple test (per <a href="ch08.xhtml#ch8box1">Box 8.1</a>) to catch any regressions. Because the navigation appears on the site layout, we can use <span epub:type="pagebreak" id="page_288"></span>any page to test for its presence, and for convenience we’ll use the index page. As shown in <a href="ch10.xhtml#ch10list35">Listing 10.35</a>, all we need to do is assert the existence of a <span class="pd_green-d"><code><strong>nav</strong></code></span> tag.</p>
<p class="listing" id="ch10list35"><strong>Listing 10.35:</strong> Testing the navigation. <span class="smallcaps"><span class="pd_green-g">GREEN</span></span><br/><code><em>tests/test_site_pages.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f288-01" id="f288-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
    base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
    title <span class="pd_gray">=</span> <span class="pd_red">f"&lt;title&gt;</span><span class="pd_pink">{</span>base_title<span class="pd_pink">}</span> <span class="pd_red">| Home&lt;/title&gt;"</span>
    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response.text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response.text
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;nav&gt;"</span> <span class="pd_pink">in</span> response.text</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_about</span>(client):
    response = client<span class="pd_gray">.</span>get(<span class="pd_red">"/about"</span>)
<span epub:type="pagebreak" id="page_289"></span>    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
    base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
    title <span class="pd_gray">=</span> <span class="pd_red">f"&lt;title&gt;</span><span class="pd_lpink"><strong>{</strong></span>base_title<span class="pd_lpink"><strong>}</strong></span> <span class="pd_red">| About&lt;/title&gt;"</span>
    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
    base_title <span class="pd_gray">=</span> <span class="pd_red">"Learn Enough Python Sample App"</span>
    title <span class="pd_gray">=</span> <span class="pd_red">f"&lt;title&gt;</span><span class="pd_lpink"><strong>{</strong></span>base_title<span class="pd_lpink"><strong>}</strong></span> <span class="pd_red">| Palindrome Detector&lt;/title&gt;"</span>
    <span class="pd_green"><strong>assert</strong></span> title <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text</code></pre>
</div>
<p class="noindent">Because the nav was already added, the tests should be <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list36"><strong>Listing 10.36:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f289-01" id="f289-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>(venv) $ pytest
============================= test session starts ==============================
collected 3 items

tests/test_site_pages.py ...                                             [100%]

============================== 3 passed in 0.01s ===============================</code></pre>
</div>
<p class="indent">It’s a good practice to watch the tests change to <span class="smallcaps"><span class="pd_redred">RED</span></span> to make sure we’re testing the right thing, so we’ll start by cutting the navigation (<a href="ch10.xhtml#ch10list37">Listing 10.37</a>) and pasting it into a separate file, which we’ll call <span class="pd_green-d"><code><strong>navigation.html</strong></code></span> (<a href="ch10.xhtml#ch10list38">Listing 10.38</a>):</p>
<p class="codelink"><a href="ch10_images.xhtml#f289-02" id="f289-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> touch palindrome_detector/templates/navigation.html</code></pre>
<p class="listing" id="ch10list37"><strong>Listing 10.37:</strong> Cutting the navigation. <span class="pd_redred"><span class="smallcaps">RED</span></span><br/><code><em>palindrome_detector/templates/layout.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f289-03" id="f289-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | {{ page_title }}&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
<span epub:type="pagebreak" id="page_290"></span>          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    <span class="pd_green"><strong>&lt;/a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;

      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;
        {% block content %}{% endblock %}
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="listing" id="ch10list38"><strong>Listing 10.38:</strong> Adding a navigation partial template. <span class="pd_redred"><span class="smallcaps">RED</span></span><br/><code><em>palindrome_detector/templates/navigation.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f290-01" id="f290-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>&lt;<span class="pd_green"><strong>header</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header"</span>&gt;
  &lt;<span class="pd_green"><strong>nav</strong></span>&gt;
    &lt;<span class="pd_green"><strong>ul</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-nav"</span>&gt;
      &lt;<span class="pd_green"><strong>li</strong></span>&gt;&lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span>&gt;Home&lt;/<span class="pd_green"><strong>a</strong></span>&gt;&lt;/<span class="pd_green"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green"><strong>li</strong></span>&gt;&lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/palindrome"</span>&gt;Is It a Palindrome?&lt;/<span class="pd_green"><strong>a</strong></span>&gt;&lt;/<span class="pd_green"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green"><strong>li</strong></span>&gt;&lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/about"</span>&gt;About&lt;/<span class="pd_green"><strong>a</strong></span>&gt;&lt;/<span class="pd_green"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>ul</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>nav</strong></span>&gt;
&lt;/<span class="pd_green"><strong>header</strong></span>&gt;</code></pre>
</div>
<p class="indent">You should confirm that the tests are now <span class="smallcaps"><span class="pd_redred">RED</span></span>:</p>
<p class="listing" id="ch10list39"><strong>Listing 10.39:</strong> <span class="pd_redred"><span class="smallcaps">RED</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f290-02" id="f290-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py F..                                             [100%]</span>

<span class="pd_green-d">=================================== FAILURES ===================================</span>
<span class="pd_green-d">__________________________________ test_index __________________________________ </span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">=========================== short test summary info ============================</span>
<span epub:type="pagebreak" id="page_291"></span><span class="pd_green-d">FAILED tests/test_site_pages.py::test_index - assert '&lt;nav&gt;' in '&lt;!DOCTYPE ht...</span>
<span class="pd_green-d">========================= 1 failed, 2 passed in 0.03s ==========================</span></code></pre>
</div>
<p class="indent">To restore the navigation, we can use Jinja’s template language to <span class="pd_green-d"><code><strong>include</strong></code></span> the navigation partial:</p>
<p class="codelink"><a href="ch10_images.xhtml#f291-01" id="f291-01a">Click here to view code image</a></p>
<pre class="pre1"><code>{% include "navigation.html" %}</code></pre>
<p class="noindent">This code automatically looks for a file called <span class="pd_green-d"><code><strong>navigation.html</strong></code></span> in the <span class="pd_green-d"><code><strong>palindrome_detector/templates/</strong></code></span> directory, evaluates the result, and inserts the return value where it was called.</p>
<p class="indent">Putting this code into the layout gives <a href="ch10.xhtml#ch10list40">Listing 10.40</a>.</p>
<p class="listing" id="ch10list40"><strong>Listing 10.40:</strong> Evaluating the nav partial in the layout. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_detector/templates/layout.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f291-02" id="f291-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_dorange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green"><strong>meta</strong></span> <span class="pd_lgreen">charset</span><span class="pd_gray">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green"><strong>title</strong></span>&gt;Learn Enough Python Sample App | {{ page_title }}&lt;/<span class="pd_green"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"text/css"</span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/static/stylesheets/main.css"</span>&gt;
    &lt;<span class="pd_green"><strong>link</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"https://fonts.googleapis.com/css?family=Open+Sans:300,400"</span>
          <span class="pd_lgreen">rel</span><span class="pd_gray">=</span><span class="pd_red">"stylesheet"</span>&gt;
  &lt;/<span class="pd_green"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green"><strong>a</strong></span> <span class="pd_lgreen">href</span><span class="pd_gray">=</span><span class="pd_red">"/"</span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"header-logo"</span>&gt;
      &lt;<span class="pd_green"><strong>img</strong></span> <span class="pd_lgreen">src</span><span class="pd_gray">=</span><span class="pd_red">"/static/images/logo_b.png"</span> <span class="pd_lgreen">alt</span><span class="pd_gray">=</span><span class="pd_red">"Learn Enough logo"</span>&gt;
    &lt;/<span class="pd_green"><strong>a</strong></span>&gt;
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"container"</span>&gt;
<span class="b-y">      {% include "navigation.html" %}</span>
      &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"content"</span>&gt;
        {% block content %}{% endblock %}
      &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green"><strong>html</strong></span>&gt;</code></pre>
</div>
<p class="indent">With the code in <a href="ch10.xhtml#ch10list40">Listing 10.40</a>, our test suite is once again <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list41"><strong>Listing 10.41:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f291-03" id="f291-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span epub:type="pagebreak" id="page_292"></span><span class="pd_green-d">collected 3 items</span>

<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 3 passed in 0.01s ===============================</span></code></pre>
</div>
<p class="noindent">A quick click over to the About page confirms that the navigation is working (<a href="ch10.xhtml#ch10fig11">Figure 10.11</a>). Sweet!</p>
<figure class="image-c" id="ch10fig11">
<img src="graphics/10fig11.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.11:</strong> The navigation menu on the About page.</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec10_4_3">10.4.3 Exercises</h4>
<ol class="number">
<li><p class="number">We can eliminate some duplication in <a href="ch10.xhtml#ch10list29">Listing 10.29</a> by creating a function that returns the base title, as shown in <a href="ch10.xhtml#ch10list42">Listing 10.42</a>. Confirm that this code still gives a <span class="pd_green-g"><span class="smallcaps">GREEN</span></span> test suite.</p></li>
<li><p class="number">Make a commit and deploy the changes.</p></li>
</ol>
<span epub:type="pagebreak" id="page_293"></span>
<p class="listing" id="ch10list42"><strong>Listing 10.42:</strong> Adding a <span class="pd_green-d"><code><strong>full_title</strong></code></span> method to eliminate some duplication. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>tests/test_site_pages.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f293-01" id="f293-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_index</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> full_title(<span class="pd_red">"Home"</span>) <span class="pd_pink"><strong>in</strong></span> response.text</span>
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;nav&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_about</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> full_title(<span class="pd_red">"About"</span>) <span class="pd_pink"><strong>in</strong></span> response.text</span>
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> response<span class="pd_gray">.</span>status_code <span class="pd_gray">== 200</span>
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> full_title(<span class="pd_red">"Palindrome Detector"</span>) <span class="pd_pink"><strong>in</strong></span> response.text</span>
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">"&lt;h1&gt;"</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="b-y">def full_title(variable_title):</span>
<span class="b-y">    <span class="pd_red"><em>"""Return the full title."""</em></span></span>
<span class="b-y">    base_title = <span class="pd_red">"Learn Enough Python Sample App"</span></span>
<span class="b-y">    <span class="pd_green"><strong>return</strong></span> <span class="pd_red">f"&lt;title&gt;{</span>base_title<span class="pd_red">} |</span> {variable_title<span class="pd_red">}&lt;/title&gt;"</span></span></code></pre>
</div>
</section>
</section>
<section>
<h3 class="h3" id="sec10_5">10.5 Palindrome Detector</h3>
<p class="noindent">In this section, we’ll complete the sample Flask app by adding a working palindrome detector. This will involve putting the Python package developed in <a href="ch08.xhtml#ch08">Chapter 8</a> to good use. And if you haven’t followed <em>Learn Enough Ruby to Be Dangerous</em> (<a href="https://www.learnenough.com/ruby">https://www.learnenough.com/ruby</a>) yet, we’ll also see the first truly working HTML <em>form</em> in the Learn Enough introductory sequence (<a href="https://www.learnenough.com/courses">https://www.learnenough.com/courses</a>).</p>
<p class="indent">Our first step is to add a palindrome package so that we can detect palindromes. I recommend using the one you created and published in <a href="ch08.xhtml#ch08">Chapter 8</a>:</p>
<p class="codelink"><a href="ch10_images.xhtml#f293-02" id="f293-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> pip install palindrome_YOUR_USERNAME \
<span class="pd_blue">&gt;</span> --index-url https://test.pypi.org/simple/</code></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_294"></span>If for any reason you didn’t complete that step, you can use mine instead:</p>
<p class="codelink"><a href="ch10_images.xhtml#f294-01" id="f294-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> pip install palindrome_mhartl --index-url https://test.pypi.org/simple/</code></pre>
<p class="noindent">At this point, we can include the palindrome package in our app (<a href="ch10.xhtml#ch10list43">Listing 10.43</a>).</p>
<p class="listing" id="ch10list43"><strong>Listing 10.43:</strong> Adding <span class="pd_green-d"><code><strong>request</strong></code></span> and <span class="pd_green-d"><code><strong>Phrase</strong></code></span> to the app.<br/><code><em>palindrome_app/palindrome_detector/__init__.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f294-02" id="f294-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="b-y"><span class="pd_green">from</span> <span class="pd_nila">flask</span> <span class="pd_green">import</span> Flask, render_template, request</span>

<span class="b-y"><span class="pd_green">from</span> <span class="pd_nila">palindrome_mhartl.phrase</span> <span class="pd_green">import</span> Phrase</span>

<span class="pd_gray">.</span>
<span class="pd_gray">. </span>
<span class="pd_gray">.</span></code></pre>
</div>
<p class="noindent">Note that we’ve added <span class="pd_green-d"><code><strong>request</strong></code></span> from the <span class="pd_green-d"><code><strong>flask</strong></code></span> package, which we’ll be using in this section to handle form submissions.</p>
<p class="indent">Since we’ll be deploying the app to production, we should also update the app requirements to include the palindrome detector. The result for one version of my particular detector is shown in <a href="ch01.xhtml#ch1list15">Listing 1.15</a>, though you are encouraged to use your own. Also note that <a href="ch10.xhtml#ch10list44">Listing 10.44</a> includes an extra line so that Fly.io knows to look for packages at the Test Python Package Index as well as the regular index.</p>
<p class="listing" id="ch10list44"><strong>Listing 10.44:</strong> Adding a Test Python Package Index lookup URL.<br/><code><em>requirements.txt</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f294-03" id="f294-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="b-y">--extra-index-url https://testpypi.python.org/pypi</span>
<span class="b-y">palindrome_mhartl==0.0.12</span>
click==8.1.3
Flask==2.2.2
.
.
.</code></pre>
</div>
<p class="indent">With that prep work done, we’re now ready to add a form to our Palindrome Detector page, which is currently just a placeholder (<a href="ch10.xhtml#ch10fig12">Figure 10.12</a>). The form consists <span epub:type="pagebreak" id="page_295"></span>of three principal parts: a <span class="pd_green-d"><code><strong>form</strong></code></span> tag to define the form, a <span class="pd_green-d"><code><strong>textarea</strong></code></span> for entering a phrase, and a <span class="pd_green-d"><code><strong>button</strong></code></span> for submitting the phrase to the server.</p>
<figure class="image-c" id="ch10fig12">
<img src="graphics/10fig12.jpg" alt="images" width="725" height="560"/>
<figcaption>
<p class="title-f"><strong>Figure 10.12:</strong> The current state of the palindrome page.</p>
</figcaption>
</figure>
<p class="indent">Let’s work inside out. The <span class="pd_green-d"><code><strong>button</strong></code></span> has two attributes—a CSS class for styling and a <span class="pd_green-d"><code><strong>type</strong></code></span> indicating that it’s designed to submit information:</p>
<p class="codelink"><a href="ch10_images.xhtml#f295-01" id="f295-01a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>button</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"form-submit"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"submit"</span>&gt;Is it a palindrome?&lt;/<span class="pd_green"><strong>button</strong></span>&gt;</code></pre>
<p class="noindent">The <span class="pd_green-d"><code><strong>textarea</strong></code></span> has three attributes—a <span class="pd_green-d"><code><strong>name</strong></code></span> attribute, which as we’ll see in a moment passes important information back to the server, along with <span class="pd_green-d"><code><strong>rows</strong></code></span> and <span class="pd_green-d"><code><strong>cols</strong></code></span> to define the size of the textarea box:</p>
<p class="codelink"><a href="ch10_images.xhtml#f295-02" id="f295-02a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>textarea</strong></span> <span class="pd_lgreen">name</span><span class="pd_gray">=</span><span class="pd_red">"phrase"</span> <span class="pd_lgreen">rows</span><span class="pd_gray">=</span><span class="pd_red">"10"</span> <span class="pd_lgreen">cols</span><span class="pd_gray">=</span><span class="pd_red">"60"</span>&gt;&lt;/<span class="pd_green"><strong>textarea</strong></span>&gt;</code></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_296"></span>The <span class="pd_green-d"><code><strong>textarea</strong></code></span> tag’s content is the default text displayed in the browser, which in this case is just blank.</p>
<p class="indent">Finally, the <span class="pd_green-d"><code><strong>form</strong></code></span> tag itself has three attributes—a CSS <span class="pd_green-d"><code><strong>id</strong></code></span>, which isn’t used here but is conventional to include; an <span class="pd_green-d"><code><strong>action</strong></code></span>, which specifies the action to take when submitting the form; and a <span class="pd_green-d"><code><strong>method</strong></code></span> indicating the HTTP request method to use (in this case, <code>POST</code>):</p>
<p class="codelink"><a href="ch10_images.xhtml#f296-01" id="f296-01a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>form</strong></span> <span class="pd_lgreen">id</span><span class="pd_gray">=</span><span class="pd_red">"palindrome_tester"</span> <span class="pd_lgreen">action</span><span class="pd_gray">=</span><span class="pd_red">"/check"</span> <span class="pd_lgreen">method</span><span class="pd_gray">=</span><span class="pd_red">"post"</span>&gt;</code></pre>
<p class="indent">Putting the above discussion together (and adding a <span class="pd_green-d"><code><strong>br</strong></code></span> tag to add a line break) yields the form shown in <a href="ch10.xhtml#ch10list45">Listing 10.45</a>. Our updated Palindrome Detector page appears in <a href="ch10.xhtml#ch10fig13">Figure 10.13</a>.</p>
<figure class="image-c" id="ch10fig13">
<img src="graphics/10fig13.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.13:</strong> The new palindrome form.</p>
</figcaption>
</figure>
<p class="listing" id="ch10list45"><strong>Listing 10.45:</strong> Adding a form to the palindrome page.<br/><code><em>palindrome_detector/templates/palindrome.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f296-02" id="f296-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Detector&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  &lt;<span class="pd_green"><strong>form</strong></span> <span class="pd_lgreen">id</span><span class="pd_gray">=</span><span class="pd_red">"palindrome_tester"</span> <span class="pd_lgreen">action</span><span class="pd_gray">=</span><span class="pd_red">"/check"</span> <span class="pd_lgreen">method</span><span class="pd_gray">=</span><span class="pd_red">"post"</span>&gt;
    &lt;<span class="pd_green"><strong>textarea</strong></span> <span class="pd_lgreen">name</span><span class="pd_gray">=</span><span class="pd_red">"phrase"</span> <span class="pd_lgreen">rows</span><span class="pd_gray">=</span><span class="pd_red">"10"</span> <span class="pd_lgreen">cols</span><span class="pd_gray">=</span><span class="pd_red">"60"</span>&gt;&lt;/<span class="pd_green"><strong>textarea</strong></span>&gt;
    &lt;<span class="pd_green"><strong>br</strong></span>&gt;
    &lt;<span class="pd_green"><strong>button</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"form-submit"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"submit"</span>&gt;Is it a palindrome?&lt;/<span class="pd_green"><strong>button</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>form</strong></span>&gt;
{% endblock %}</code></pre>
</div>
<p class="indent">The form in <a href="ch10.xhtml#ch10list45">Listing 10.45</a> is, apart from cosmetic details, identical to the analogous form (<a href="https://www.learnenough.com/javascript-tutorial/dom_manipulation#code-form_tag">https://www.learnenough.com/javascript-tutorial/dom_manipulation#code-form_tag</a>) developed in <em>Learn Enough JavaScript to Be Dangerous</em> (<a href="https://www.learnenough.com/javascript">https://www.learnenough.com/javascript</a>):</p>
<p class="codelink"><a href="ch10_images.xhtml#f296-03" id="f296-03a">Click here to view code image</a></p>
<pre class="pre1"><code>&lt;<span class="pd_green"><strong>form</strong></span> <span class="pd_lgreen">id</span><span class="pd_gray">=</span><span class="pd_red">"palindromeTester"</span>&gt;
  &lt;<span class="pd_green"><strong>textarea</strong></span> <span class="pd_lgreen">name</span><span class="pd_gray">=</span><span class="pd_red">"phrase"</span> <span class="pd_lgreen">rows</span><span class="pd_gray">=</span><span class="pd_red">"10"</span> <span class="pd_lgreen">cols</span><span class="pd_gray">=</span><span class="pd_red">"30"</span>&gt;&lt;/<span class="pd_green"><strong>textarea</strong></span>&gt;
  &lt;<span class="pd_green"><strong>br</strong></span>&gt;
  &lt;<span class="pd_green"><strong>button</strong></span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"submit"</span>&gt;Is it a palindrome?&lt;/<span class="pd_green"><strong>button</strong></span>&gt;
&lt;/<span class="pd_green"><strong>form</strong></span>&gt;</code></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_297"></span>In that case, though, we “cheated” by using a JavaScript event listener to intercept (<a href="https://www.learnenough.com/javascript-tutorial/dom_manipulation#codeform_event_target">https://www.learnenough.com/javascript-tutorial/dom_manipulation#codeform_event_target</a>) the submit request from the form, and no information ever got sent from the client (browser) to the server. (It’s important to understand that, when developing web applications on a local computer, the client and server are the same physical machine, but in general they are different.)</p>
<p class="indent">This time, we won’t cheat: The request will really go all the way to the server, which means we’ll have to handle the <strong><code>POST</code></strong> request on the back-end. By default, a Flask function responds to <strong><code>GET</code></strong> requests, but we can arrange to respond to <strong><code>POST</code></strong> requests instead using the <span class="pd_green-d"><code><strong>method</strong></code></span> keyword argument with value equal to a tuple of the methods to respond to. Because there’s only one method in this case (namely, <strong><code>POST</code></strong>), we have to use the trailing-comma syntax mentioned in <a href="ch03.xhtml#sec3_6">Section 3.6</a> for a tuple of one element:</p>
<span epub:type="pagebreak" id="page_298"></span>
<p class="codelink"><a href="ch10_images.xhtml#f298-01" id="f298-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/check"</span>, methods<span class="pd_gray">=</span>(<span class="pd_red">"POST"</span>,))
<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">check</span>():
    <span class="pd_blue1"><em># Do something to handle the submission</em></span></code></pre>
<p class="noindent">Here the name of the URL path, <span class="pd_green-d"><code><strong>/check</strong></code></span>, matches the value of the <span class="pd_green-d"><code><strong>action</strong></code></span> parameter in the form (<a href="ch10.xhtml#ch10list45">Listing 10.45</a>).</p>
<p class="indent">It turns out that the <span class="pd_green-d"><code><strong>request</strong></code></span> include in <a href="ch10.xhtml#ch10list43">Listing 10.43</a> has a <span class="pd_green-d"><code><strong>form</strong></code></span> attribute that contains useful information, so let’s <span class="pd_green-d"><code><strong>return</strong></code></span> it as shown in <a href="ch10.xhtml#ch10list46">Listing 10.46</a> and then submit the form to see what happens (<a href="ch10.xhtml#ch10fig14">Figure 10.14</a>).</p>
<figure class="image-c" id="ch10fig14">
<img src="graphics/10fig14.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.14:</strong> The result of submitting a form.</p>
</figcaption>
</figure>
<p class="listing" id="ch10list46"><strong>Listing 10.46:</strong> Investigating the effects of a form submission.<br/><code><em>palindrome_app/palindrome_detector/__init__.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f298-02" id="f298-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>flask</strong></span> <span class="pd_green"><strong>import</strong></span> Flask, render_template, request

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>palindrome_mhartl.phrase</strong></span> <span class="pd_green"><strong>import</strong></span> Phrase


<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">create_app</span>(test_config<span class="pd_gray">=</span><span class="pd_green"><strong>None</strong></span>):
    <span class="pd_gray">.</span>
    <span class="pd_gray">.</span>
    <span class="pd_gray">.</span>
    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">index</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"index.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"Home"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">about</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"about.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"About"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">palindrome</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"palindrome.html"</span>,
                               page_title<span class="pd_gray">=</span><span class="pd_red">"Palindrome Detector"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/check"</span>, method<span class="pd_gray">s</span>=(<span class="pd_red">"POST"</span>,))
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">check</span>():
<span class="b-y">            <span class="pd_green"><strong>return</strong></span> request.form</span>

    <span class="pd_green"><strong>return</strong></span> app

app <span class="pd_gray">=</span> create_app()</code></pre>
</div>
<p class="indent"><span epub:type="pagebreak" id="page_299"></span>As seen in <a href="ch10.xhtml#ch10fig14">Figure 10.14</a>, <span class="pd_green-d"><code><strong>request.form</strong></code></span> is a dictionary (<a href="ch04.xhtml#sec4_4">Section 4.4</a>), with key <span class="pd_green-d"><code><strong>"phrase"</strong></code></span> and value <span class="pd_green-d"><code><strong>"Madam, I’m Adam."</strong></code></span>:</p>
<pre class="pre1"><code>{
  <span class="pd_red">"phrase"</span>: <span class="pd_red">"Madam, I'm Adam."</span>
}</code></pre>
<p class="noindent">This dictionary is created automatically by Flask according to the key–value pairs in the form (<a href="ch10.xhtml#ch10list45">Listing 10.45</a>). In this case, we have only one such pair, with key given by the <span class="pd_green-d"><code><strong>name</strong></code></span> attribute of the <span class="pd_green-d"><code><strong>textarea</strong></code></span> (<span class="pd_green-d"><code><strong>"phrase"</strong></code></span>) and value given by the string entered by the user. This means that we can use the code</p>
<p class="codelink"><a href="ch10_images.xhtml#f299-01" id="f299-01a">Click here to view code image</a></p>
<pre class="pre1"><code>phrase <span class="pd_gray">=</span> request<span class="pd_gray">.</span>form[<span class="pd_red">"phrase"</span>]</code></pre>
<p class="noindent">to extract the value of the phrase.</p>
<p class="indent"><span epub:type="pagebreak" id="page_300"></span>Now that we know about the existence and contents of <span class="pd_green-d"><code><strong>request.form</strong></code></span>, we can use <span class="pd_green-d"><code><strong>ispalindrome()</strong></code></span> to detect palindromes as in previous chapters. In plain Python, this would look something like <a href="ch10.xhtml#ch10list47">Listing 10.47</a>.</p>
<p class="listing" id="ch10list47"><strong>Listing 10.47:</strong> What our palindrome results might look like in plain Python.</p>
<p class="codelink"><a href="ch10_images.xhtml#f300-01" id="f300-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>if</strong></span> Phrase(phrase)<span class="pd_gray">.</span>ispalindrome():
    <span class="pd_green">print</span>(<span class="pd_red">f'"</span><span class="pd_lpink"><strong>{</strong></span>phrase<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">" is a palindrome!"</span>
<span class="pd_green"><strong>else</strong></span>:
    <span class="pd_green">print</span>(<span class="pd_red">f'"</span><span class="pd_lpink"><strong>{</strong></span>phrase<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">" isn</span><span class="pd_orange"><strong>\'</strong></span><span class="pd_red">t a palindrome."</span></code></pre>
</div>
<p class="indent">We can do the same basic thing in our web application using the Jinja template language, only using <span class="pd_green-d"><code><strong>{{ ... }}</strong></code></span> instead of interpolation and surrounding any other code in <span class="pd_green-d"><code><strong>{% ... %}</strong></code></span> tags, as shown schematically in <a href="ch10.xhtml#ch10list48">Listing 10.48</a>.</p>
<p class="listing" id="ch10list48"><strong>Listing 10.48:</strong> Schematic code for the palindrome result.</p>
<p class="codelink"><a href="ch10_images.xhtml#f300-02" id="f300-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% if Phrase(phrase).ispalindrome() %}
   "{{ phrase }}" is a palindrome!
{% else %}
   "{{ phrase }}" isn't a palindrome.
{% endif %}</code></pre>
</div>
<p class="indent">Let’s create a template file called <span class="pd_green-d"><code><strong>result.html</strong></code></span> to display our results:</p>
<p class="codelink"><a href="ch10_images.xhtml#f300-03" id="f300-03a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> touch palindrome_detector/templates/result.html</code></pre>
<p class="noindent">The template code itself is an expanded version of <a href="ch10.xhtml#ch10list48">Listing 10.48</a> with a few more HTML tags for a better appearance, as shown in <a href="ch10.xhtml#ch10list49">Listing 10.49</a>.</p>
<p class="listing" id="ch10list49"><strong>Listing 10.49:</strong> Displaying the palindrome result with Jinja.<br/><code><em>palindrome_detector/templates/result.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f300-04" id="f300-04a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Result&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  {% if Phrase(phrase).ispalindrome() %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-success"</span>&gt;

<span epub:type="pagebreak" id="page_301"></span>      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" is a palindrome!&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% else %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-fail"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" isn't a palindrome.&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% endif %}
{% endblock %}</code></pre>
</div>
<p class="indent">All that’s left now is handling the submission, putting the value of <span class="pd_green-d"><code><strong>request.form</strong></code></span> in <span class="pd_green-d"><code><strong>phrase</strong></code></span>, and rendering the result. We can create a <span class="pd_green-d"><code><strong>phrase</strong></code></span> variable in the template using the same keyword trick we used in <a href="ch10.xhtml#ch10list31">Listing 10.31</a> to create <span class="pd_green-d"><code><strong>page_title</strong></code></span>, and we can pass the <span class="pd_green-d"><code><strong>Phrase</strong></code></span> class the same way as well. Using <span class="pd_green-d"><code><strong>render_template</strong></code></span> as usual to render the template <span class="pd_green-d"><code><strong>result.html</strong></code></span> gives the code shown in <a href="ch10.xhtml#ch10list50">Listing 10.50</a>.</p>
<p class="listing" id="ch10list50"><strong>Listing 10.50:</strong> Handling a palindrome form submission.<br/><code><em>palindrome_app/palindrome_detector/__init__.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f301-01" id="f301-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>flask</strong></span> <span class="pd_green"><strong>import</strong></span> Flask, render_template, request

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>palindrome_mhartl.phrase</strong></span> <span class="pd_green"><strong>import</strong></span> Phrase


<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">create_app</span>(test_config<span class="pd_gray">=</span><span class="pd_green"><strong>None</strong></span>):
    <span class="pd_red"><em>"""Create and configure the app."""</em></span>
    app <span class="pd_gray">=</span> Flask<span class="pd_blue">(__name__</span>, instance_relative_config<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>)

    <span class="pd_green"><strong>if</strong></span> test_config <span class="pd_pink"><strong>is</strong></span> <span class="pd_green"><strong>None</strong></span>:
        <span class="pd_blue1"><em># Load the instance config, if it exists, when not testing.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_pyfile(<span class="pd_red">"config.py"</span>, silen<span class="pd_gray">t=</span><span class="pd_green"><strong>True</strong></span>)
    <span class="pd_green"><strong>else</strong></span>:
        <span class="pd_blue1"><em># Load the test config if passed in.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_mapping(test_config)

    <span class="pd_blue1"><em># Ensure the instance folder exists.</em></span>
    <span class="pd_green"><strong>try</strong></span>:
        os<span class="pd_gray">.</span>makedirs(app<span class="pd_gray">.</span>instance_path)
    <span class="pd_green"><strong>except</strong></span> <span class="pd_lred"><strong>OSError</strong></span>:
        <span class="pd_green"><strong>pass</strong></span>

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">index</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"index.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"Home"</span>)

<span epub:type="pagebreak" id="page_302"></span>    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">about</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"about.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"About"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">palindrome</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"palindrome.html"</span>,
                               page_title<span class="pd_gray">=</span><span class="pd_red">"Palindrome Detector"</span>)
<span class="b-y">    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/check"</span>, methods=(<span class="pd_red">"POST"</span>,))</span>
<span class="b-y">    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">check</span>():</span>
<span class="b-y">        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"result.html"</span>,</span>
<span class="b-y">                               Phrase=Phrase,</span>
<span class="b-y">                               phrase=request.form[<span class="pd_red">"phrase"</span>])</span>

    <span class="pd_green"><strong>return</strong></span> app

app <span class="pd_gray">=</span> create_app()</code></pre>
</div>
<p class="noindent">The code in <a href="ch10.xhtml#ch10list49">Listing 10.49</a> is the most straightforward translation of the Python code from <a href="ch10.xhtml#ch10list47">Listing 10.47</a>, but it involves passing a full <span class="pd_green-d"><code><strong>Phrase</strong></code></span> class to the template in <a href="ch10.xhtml#ch10list50">Listing 10.50</a>. Many developers prefer to pass only variables to templates, and we’ll refactor the code to use this convention in <a href="ch10.xhtml#sec10_5_1">Section 10.5.1</a>.</p>
<p class="indent">At this point, our palindrome detector should be working! The result of submitting a non-palindrome is shown in <a href="ch10.xhtml#ch10fig15">Figure 10.15</a>.</p>
<figure class="image-c" id="ch10fig15">
<img src="graphics/10fig15.jpg" alt="images" width="725" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 10.15:</strong> The result for a non-palindrome.</p>
</figcaption>
</figure>
<p class="indent">Now let’s see if our detector can correctly identify one of the most ancient palindromes, the so-called Sator Square first found in the ruins of Pompeii (<a href="ch10.xhtml#ch10fig16">Figure 10.16</a><sup><a id="fn10_8a" href="ch10.xhtml#fn10_8">8</a></sup>). (Authorities differ on the exact meaning of the Latin words in the square, but the likeliest translation is “The sower [farmer] Arepo holds the wheels with effort.”)</p>
<figure class="image-c" id="ch10fig16">
<img src="graphics/10fig16.jpg" alt="images" width="375" height="372"/>
<figcaption>
<p class="title-f"><strong>Figure 10.16:</strong> A Latin palindrome from the lost city of Pompeii.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn10_8" href="ch10.xhtml#fn10_8a">8.</a> Image courtesy of CPA Media Pte Ltd/Alamy Stock Photo.</p>
<p class="indent">Entering the text “SATOR AREPO TENET OPERA ROTAS” (<a href="ch10.xhtml#ch10fig17">Figure 10.17</a>) and submitting it leads to the result shown in <a href="ch10.xhtml#ch10fig18">Figure 10.18</a>. It works!</p>
<figure class="image-c" id="ch10fig17">
<img src="graphics/10fig17.jpg" alt="images" width="600" height="480"/>
<figcaption>
<p class="title-f"><strong>Figure 10.17:</strong> A Latin palindrome?</p>
</figcaption>
</figure>
<figure class="image-c" id="ch10fig18">
<img src="graphics/10fig18.jpg" alt="images" width="600" height="356"/>
<figcaption>
<p class="title-f"><strong>Figure 10.18:</strong> A Latin palindrome!</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec10_5_1">10.5.1 Form Tests</h4>
<p class="noindent">Our application is now working, but note that testing a <em>second</em> palindrome requires clicking on “IS IT A PALINDROME?” It would be more convenient if we included the same submission form on the result page as well.</p>
<p class="indent"><span epub:type="pagebreak" id="page_303"></span>To do this, we’ll first add a simple test for the presence of a <span class="pd_green-d"><code><strong>form</strong></code></span> tag on the palindrome page. Because the tests we’ll be adding are specific to that page, we’ll create a new test file to contain them:</p>
<p class="codelink"><a href="ch10_images.xhtml#f303-01" id="f303-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> touch tests/test_palindrome.py</code></pre>
<p class="noindent">The test itself is closely analogous to the <span class="pd_green-d"><code><strong>h1</strong></code></span> and <span class="pd_green-d"><code><strong>title</strong></code></span> test in <a href="ch10.xhtml#ch10list20">Listing 10.20</a>, as shown in <a href="ch10.xhtml#ch10list51">Listing 10.51</a>. Note that we’ve defined a <span class="pd_green-d"><code><strong>form_tag()</strong></code></span> helper function in anticipation of testing for the form on the result page as well (compare with the <span class="pd_green-d"><code><strong>full_title()</strong></code></span> helper in <a href="ch10.xhtml#ch10list42">Listing 10.42</a>).</p>
<span epub:type="pagebreak" id="page_304"></span>
<span epub:type="pagebreak" id="page_305"></span>
<p class="listing" id="ch10list51"><strong>Listing 10.51:</strong> Testing for the presence of a form tag. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>tests/test_palindrome.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f305-01" id="f305-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome_page</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> form_tag() <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">form_tag</span>():
    <span class="pd_green"><strong>return</strong></span> <span class="pd_red">'&lt;form id="palindrome_tester" action="/check" method="post"&gt;'</span></code></pre>
</div>
<p class="indent">Now we’ll add tests for the existing form submission for both non-palindromes and palindromes. Just as <span class="pd_green-d"><code><strong>get()</strong></code></span> in tests issues a <strong><code>GET</code></strong> request, <span class="pd_green-d"><code><strong>post()</strong></code></span> in tests issues a <code><strong>POST</strong></code> request. The first argument of <span class="pd_green-d"><code><strong>post()</strong></code></span> is the URL, and the second is the <span class="pd_green-d"><code><strong>data</strong></code></span> hash (which gives rise to the contents of <span class="pd_green-d"><code><strong>response.form</strong></code></span>):</p>
<p class="codelink"><a href="ch10_images.xhtml#f305-02" id="f305-02a">Click here to view code image</a></p>
<pre class="pre1"><code>client<span class="pd_gray">.</span>post(<span class="pd_red">"/check"</span>, data<span class="pd_gray">=</span>{<span class="pd_red">"phrase"</span>: <span class="pd_red">"Not a palindrome"</span>})</code></pre>
<p class="indent">To test the response, we’ll verify that the text in the page’s paragraph tag includes the right result. Taking the ideas above and applying them to both non-palindromes and palindromes gives the tests shown in <a href="ch10.xhtml#ch10list52">Listing 10.52</a>.</p>
<span epub:type="pagebreak" id="page_306"></span>
<p class="listing" id="ch10list52"><strong>Listing 10.52:</strong> Adding tests for form submission. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>tests/test_palindrome.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f306-01" id="f306-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome_page</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> form_tag() <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_non_palindrome_submission</span>(client):
    phrase <span class="pd_gray">=</span> <span class="pd_red">"Not a palindrome."</span>
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>post(<span class="pd_red">"/check"</span>, dat<span class="pd_gray">a</span>=<span class="pd_red">{"phrase"</span>: phrase})
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">f'&lt;p&gt;"</span><span class="pd_lpink"><strong>{</strong></span>phrase<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">" isn</span><span class="pd_orange"><strong>\'</strong></span><span class="pd_red">t a palindrome.&lt;/p&gt;'</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome_submission</span>(client):
    phrase <span class="pd_gray">=</span> <span class="pd_red">"Sator Arepo tenet opera rotas."</span>
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>post(<span class="pd_red">"/check"</span>, dat<span class="pd_gray">a</span>=<span class="pd_red">{"phrase"</span>: phrase})
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">f'&lt;p&gt;"</span><span class="pd_lpink"><strong>{</strong></span>phrase<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">" is a palindrome!&lt;/p&gt;'</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">form_tag</span>():
    <span class="pd_green"><strong>return</strong></span> <span class="pd_red">'&lt;form id="palindrome_tester" action="/check" method="post"&gt;'</span></code></pre>
</div>
<p class="noindent">(Be careful when using sample phrases that contain non-alphanumeric characters like quotes or apostrophes; by default, Jinja escapes these out in ways that make them very difficult to test, which is why <a href="ch10.xhtml#ch10list52">Listing 10.52</a> uses the Sator Square palindrome instead of, say, <span class="pd_green-d"><code><strong>Madam, I'm Adam</strong></code></span>. To see what the escaped HTML looks like in the latter case, you can temporarily set <span class="pd_green-d"><code><strong>phrase</strong></code></span> to <span class="pd_green-d"><code><strong>Madam, I'm Adam</strong></code></span> and then include <span class="pd_green-d"><code><strong>print(response.text)</strong></code></span> in the test to output the result.)</p>
<p class="indent">Because we were testing existing functionality, the tests in <a href="ch10.xhtml#ch10list52">Listing 10.52</a> should already be <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list53"><strong>Listing 10.53:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f306-02" id="f306-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 6 items</span>

<span class="pd_green-d">tests/test_palindrome.py ...                                             [ 50%]</span>
<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 6 passed in 0.03s ===============================</span></code></pre>
</div>
<p class="indent">As a capstone to our development, we’ll now add a form on the result page using the <span class="smallcaps"><span class="pd_redred">RED</span></span>, <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>, refactor cycle that is a hallmark of TDD. Since there is only one <span epub:type="pagebreak" id="page_307"></span>result template, it doesn’t matter if we test the palindrome or non-palindrome page, so we’ll choose the latter without loss of generality. All we need to do is add a <span class="pd_green-d"><code><strong>form</strong></code></span> test identical to the one in <a href="ch10.xhtml#ch10list51">Listing 10.51</a>, as shown in <a href="ch10.xhtml#ch10list54">Listing 10.54</a>.</p>
<p class="listing" id="ch10list54"><strong>Listing 10.54:</strong> Adding a test for a form on the result page. <span class="pd_redred"><span class="smallcaps">RED</span></span><br/><code><em>tests/test_palindrome.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f307-01" id="f307-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome_page</span>(client):
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>get(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>assert</strong></span> form_tag() <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_non_palindrome_submission</span>(client):
    phrase <span class="pd_gray">=</span> <span class="pd_red">"Not a palindrome."</span>
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>post(<span class="pd_red">"/check"</span>, dat<span class="pd_gray">a</span>=<span class="pd_red">{"phrase"</span>: phrase})
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">f'&lt;p&gt;"</span><span class="pd_lpink"><strong>{</strong></span>phrase<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">" isn</span><span class="pd_orange"><strong>\'</strong></span><span class="pd_red">t a palindrome.&lt;/p&gt;'</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text
<span class="b-y">    <span class="pd_green"><strong>assert</strong></span> form_tag() <span class="pd_pink"><strong>in</strong></span> response.text</span>

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">test_palindrome_submission</span>(client):
    phrase <span class="pd_gray">=</span> <span class="pd_red">"Sator Arepo tenet opera rotas."</span>
    response <span class="pd_gray">=</span> client<span class="pd_gray">.</span>post(<span class="pd_red">"/check"</span>, dat<span class="pd_gray">a</span>=<span class="pd_red">{"phrase"</span>: phrase})
    <span class="pd_green"><strong>assert</strong></span> <span class="pd_red">f'&lt;p&gt;"</span><span class="pd_lpink"><strong>{</strong></span>phrase<span class="pd_lpink"><strong>}</strong></span><span class="pd_red">" is a palindrome!&lt;/p&gt;'</span> <span class="pd_pink"><strong>in</strong></span> response<span class="pd_gray">.</span>text

<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">form_tag</span>():
    <span class="pd_green"><strong>return</strong></span> <span class="pd_red">'&lt;form id="palindrome_tester" action="/check" method="post"&gt;'</span></code></pre>
</div>
<p class="noindent">As required, the test suite is now <span class="smallcaps"><span class="pd_redred">RED</span></span>:</p>
<p class="listing" id="ch10list55"><strong>Listing 10.55:</strong> <span class="pd_redred"><span class="smallcaps">RED</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f307-02" id="f307-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 6 items</span>

<span class="pd_green-d">tests/test_palindrome.py .FF                                             [ 50%]</span>
<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">=================================== FAILURES ===================================</span>
<span class="pd_green-d">________________________ test_non_palindrome_submission ________________________</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">.</span>
<span class="pd_green-d">=========================== short test summary info ============================</span>
<span class="pd_green-d">FAILED tests/test_palindrome.py::test_non_palindrome_submission - assert '&lt;fo...</span>
<span class="pd_green-d">FAILED tests/test_palindrome.py::test_palindrome_submission - assert '&lt;form i...</span>
<span class="pd_green-d">========================= 2 failed, 4 passed in 0.04s ==========================</span></code></pre>
</div>
<p class="indent"><span epub:type="pagebreak" id="page_308"></span>We can get the tests to <span class="smallcaps"><span class="pd_green-g">GREEN</span></span> again by copying the form from <span class="pd_green-d"><code><strong>palindrome.html</strong></code></span> and pasting it into <span class="pd_green-d"><code><strong>result.html</strong></code></span>, as shown in <a href="ch10.xhtml#ch10list56">Listing 10.56</a>.</p>
<p class="listing" id="ch10list56"><strong>Listing 10.56:</strong> Adding a form to the result page. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_detector/templates/result.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f308-01" id="f308-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Result&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  {% if Phrase(phrase).ispalindrome() %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-success"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" is a palindrome!&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% else %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-fail"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" isn't a palindrome.&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% endif %}

  &lt;<span class="pd_green"><strong>form</strong></span> <span class="pd_lgreen">id</span><span class="pd_gray">=</span><span class="pd_red">"palindrome_tester"</span> <span class="pd_lgreen">action</span><span class="pd_gray">=</span><span class="pd_red">"/check"</span> <span class="pd_lgreen">method</span><span class="pd_gray">=</span><span class="pd_red">"post"</span>&gt;
    &lt;<span class="pd_green"><strong>textarea</strong></span> <span class="pd_lgreen">name</span><span class="pd_gray">=</span><span class="pd_red">"phrase"</span> <span class="pd_lgreen">rows</span><span class="pd_gray">=</span><span class="pd_red">"10"</span> <span class="pd_lgreen">cols</span><span class="pd_gray">=</span><span class="pd_red">"60"</span>&gt;&lt;/<span class="pd_green"><strong>textarea</strong></span>&gt;
    &lt;<span class="pd_green"><strong>br</strong></span>&gt;
    &lt;<span class="pd_green"><strong>button</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"form-submit"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"submit"</span>&gt;Is it a palindrome?&lt;/<span class="pd_green"><strong>button</strong></span>&gt;
  &lt;/<span class="pd_green"><strong>form</strong></span>&gt;
{% endblock %}</code></pre>
</div>
<p class="noindent">This gets our tests to <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list57"><strong>Listing 10.57:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f308-02" id="f308-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 6 items</span>

<span class="pd_green-d">tests/test_palindrome.py ...                                             [ 50%]</span>
<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 6 passed in 0.03s ===============================</span></code></pre>
</div>
<p class="indent">That copy-and-paste should have set your programmer Spidey-sense tingling, though: It’s repetition! Pasting in content is a clear violation of the Don’t Repeat <span epub:type="pagebreak" id="page_309"></span>Yourself (DRY) principle. Happily, we saw how to eliminate such duplication in the case of the site navigation by refactoring the code to use a partial (<a href="ch10.xhtml#ch10list40">Listing 10.40</a>), which we can apply to this case as well. As with the nav, we’ll first create a separate file for the form HTML:</p>
<p class="codelink"><a href="ch10_images.xhtml#f309-01" id="f309-01a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> touch palindrome_detector/templates/palindrome_form.html</code></pre>
<p class="noindent">Then we can fill it with the form (<a href="ch10.xhtml#ch10list58">Listing 10.58</a>), while replacing the form with a Jinja template <span class="pd_green-d"><code><strong>include</strong></code></span> on the result page (<a href="ch10.xhtml#ch10list59">Listing 10.59</a>) and on the main palindrome page itself (<a href="ch10.xhtml#ch10list60">Listing 10.60</a>).</p>
<p class="listing" id="ch10list58"><strong>Listing 10.58:</strong> A partial for the palindrome form. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_detector/templates/palindrome_form.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f309-02" id="f309-02a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>&lt;<span class="pd_green"><strong>form</strong></span> <span class="pd_lgreen">id</span><span class="pd_gray">=</span><span class="pd_red">"palindrome_tester"</span> <span class="pd_lgreen">action</span><span class="pd_gray">=</span><span class="pd_red">"/check"</span> <span class="pd_lgreen">method</span><span class="pd_gray">=</span><span class="pd_red">"post"</span>&gt;
  &lt;<span class="pd_green"><strong>textarea</strong></span> <span class="pd_lgreen">name</span><span class="pd_gray">=</span><span class="pd_red">"phrase"</span> <span class="pd_lgreen">rows</span><span class="pd_gray">=</span><span class="pd_red">"10"</span> <span class="pd_lgreen">cols</span><span class="pd_gray">=</span><span class="pd_red">"60"</span>&gt;&lt;/<span class="pd_green"><strong>textarea</strong></span>&gt;
  &lt;<span class="pd_green"><strong>br</strong></span>&gt;
  &lt;<span class="pd_green"><strong>button</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"form-submit"</span> <span class="pd_lgreen">type</span><span class="pd_gray">=</span><span class="pd_red">"submit"</span>&gt;Is it a palindrome?&lt;/<span class="pd_green"><strong>button</strong></span>&gt;
&lt;/<span class="pd_green"><strong>form</strong></span>&gt;</code></pre>
</div>
<p class="listing" id="ch10list59"><strong>Listing 10.59:</strong> Rendering the form template on the result page. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_detector/templates/result.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f309-03" id="f309-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Result&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

  {% if Phrase(phrase).ispalindrome() %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-success"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" is a palindrome!&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% else %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-fail"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" isn't a palindrome.&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% endif %}

  &lt;<span class="pd_green"><strong>h2</strong></span>&gt;Try another one!&lt;/<span class="pd_green"><strong>h2</strong></span>&gt;
<span class="b-y">  {% include "palindrome_form.html" %}</span>
{% endblock %}</code></pre>
</div>
<span epub:type="pagebreak" id="page_310"></span>
<p class="listing" id="ch10list60"><strong>Listing 10.60:</strong> Rendering the form template on the main palindrome page. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_detector/templates/palindrome.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f310-01" id="f310-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Detector&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

<span class="b-y">  {% include "palindrome_form.html" %}</span>
{% endblock %}</code></pre>
</div>
<p class="indent">As a final refactoring, we’ll adopt the convention of only passing variables (rather than, say, classes) to Jinja templates, as discussed immediately after <a href="ch10.xhtml#ch10list50">Listing 10.50</a>. To do this, we’ll define an <span class="pd_green-d"><code><strong>is_palindrome</strong></code></span> variable as follows:</p>
<p class="codelink"><a href="ch10_images.xhtml#f310-02" id="f310-02a">Click here to view code image</a></p>
<pre class="pre1"><code>phrase <span class="pd_gray">=</span> request<span class="pd_gray">.</span>form<span class="pd_red">["phrase"</span>]
is_palindrome <span class="pd_gray">=</span> Phrase(phrase)<span class="pd_gray">.</span>ispalindrome()</code></pre>
<p class="noindent">We’ll then pass these variables to the template, where we’ll use this simplified <span class="pd_green-d"><code><strong>if</strong></code></span> statement:</p>
<pre class="pre1"><code>{% if is_palindrome %}</code></pre>
<p class="noindent">The results appear in <a href="ch10.xhtml#ch10list61">Listing 10.61</a> and <a href="ch10.xhtml#ch10list62">Listing 10.62</a>.</p>
<p class="listing" id="ch10list61"><strong>Listing 10.61:</strong> Passing only a variable to the template. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_app/palindrome_detector/__init__.py</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f310-03" id="f310-03a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_green"><strong>import</strong></span> <span class="pd_nila"><strong>os</strong></span>

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>flask</strong></span> <span class="pd_green"><strong>import</strong></span> Flask, render_template, request

<span class="pd_green"><strong>from</strong></span> <span class="pd_nila"><strong>palindrome_mhartl.phrase</strong></span> <span class="pd_green"><strong>import</strong></span> Phrase


<span class="pd_green"><strong>def</strong></span> <span class="pd_nila">create_app</span>(test_config<span class="pd_gray">=</span><span class="pd_green"><strong>None</strong></span>):
    <span class="pd_red"><em>"""Create and configure the app."""</em></span>
    app <span class="pd_gray">=</span> Flask<span class="pd_blue">(__name__</span>, instance_relative_config<span class="pd_gray">=</span><span class="pd_green"><strong>True</strong></span>)

    <span class="pd_green"><strong>if</strong></span> test_config <span class="pd_pink"><strong>is</strong></span> <span class="pd_green"><strong>None</strong></span>:
        <span class="pd_blue1"><em># Load the instance config, if it exists, when not testing.</em></span>
        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_pyfile(<span class="pd_red">"config.py"</span>, silen<span class="pd_gray">t=</span><span class="pd_green"><strong>True</strong></span>)
    <span class="pd_green"><strong>else</strong></span>:
        <span class="pd_blue1"><em># Load the test config if passed in.</em></span>
<span epub:type="pagebreak" id="page_311"></span>        app<span class="pd_gray">.</span>config<span class="pd_gray">.</span>from_mapping(test_config)

    <span class="pd_blue1"><em># Ensure the instance folder exists.</em></span>
    <span class="pd_green"><strong>try</strong></span>:
        os<span class="pd_gray">.</span>makedirs(app<span class="pd_gray">.</span>instance_path)
    <span class="pd_green"><strong>except</strong></span> <span class="pd_lred"><strong>OSError</strong></span>:
        <span class="pd_green"><strong>pass</strong></span>

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">index</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"index.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"Home"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/about"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">about</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"about.html"</span>, page_title<span class="pd_gray">=</span><span class="pd_red">"About"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/palindrome"</span>)
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">palindrome</span>():
        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"palindrome.html"</span>,
                               page_title<span class="pd_gray">=</span><span class="pd_red">"Palindrome Detector"</span>)

    <span class="pd_pink">@app</span><span class="pd_gray">.</span>route(<span class="pd_red">"/check"</span>, method<span class="pd_gray">s</span>=(<span class="pd_red">"POST"</span>,))
    <span class="pd_green"><strong>def</strong></span> <span class="pd_nila">check</span>():
<span class="b-y">        phrase = request.form<span class="pd_red">["phrase"</span>]</span>
<span class="b-y">        is_palindrome = Phrase(phrase).ispalindrome()</span>
<span class="b-y">        <span class="pd_green"><strong>return</strong></span> render_template(<span class="pd_red">"result.html"</span>,</span>
<span class="b-y">                                phrase=phrase,</span>
<span class="b-y">                                is_palindrome=is_palindrome)</span>

    <span class="pd_green"><strong>return</strong></span> app

app <span class="pd_gray">=</span> create_app()</code></pre>
</div>
<p class="listing" id="ch10list62"><strong>Listing 10.62:</strong> Using a boolean variable in the template. <span class="pd_green-g"><span class="smallcaps">GREEN</span></span><br/><code><em>palindrome_detector/templates/result.html</em></code></p>
<p class="codelink"><a href="ch10_images.xhtml#f311-01" id="f311-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code>{% extends "layout.html" %}

{% block content %}
  &lt;<span class="pd_green"><strong>h1</strong></span>&gt;Palindrome Result&lt;/<span class="pd_green"><strong>h1</strong></span>&gt;

<span class="b-y">  {% if is_palindrome %}</span>
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-success"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" is a palindrome!&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
  {% else %}
    &lt;<span class="pd_green"><strong>div</strong></span> <span class="pd_lgreen">class</span><span class="pd_gray">=</span><span class="pd_red">"result result-fail"</span>&gt;
      &lt;<span class="pd_green"><strong>p</strong></span>&gt;"{{ phrase }}" isn't a palindrome.&lt;/<span class="pd_green"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green"><strong>div</strong></span>&gt;
<span epub:type="pagebreak" id="page_312"></span>  {% endif %}

  &lt;<span class="pd_green"><strong>h2</strong></span>&gt;Try another one!&lt;/<span class="pd_green"><strong>h2</strong></span>&gt;

  {% include "palindrome_form.html" %}
{% endblock %}</code></pre>
</div>
<p class="indent">As required for a refactoring, the tests are still <span class="smallcaps"><span class="pd_green-g">GREEN</span></span>:</p>
<p class="listing" id="ch10list63"><strong>Listing 10.63:</strong> <span class="pd_green-g"><span class="smallcaps">GREEN</span></span></p>
<p class="codelink"><a href="ch10_images.xhtml#f312-01" id="f312-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pytest
<span class="pd_green-d">============================= test session starts ==============================</span>
<span class="pd_green-d">collected 6 items</span>

<span class="pd_green-d">tests/test_palindrome.py ...                                             [ 50%]</span>
<span class="pd_green-d">tests/test_site_pages.py ...                                             [100%]</span>

<span class="pd_green-d">============================== 6 passed in 0.03s ===============================</span></code></pre>
</div>
<p class="noindent">Submitting the Sator Square palindrome shows that the form on the result page is rendering properly, as shown in <a href="ch10.xhtml#ch10fig19">Figure 10.19</a>.</p>
<figure class="image-c" id="ch10fig19">
<img src="graphics/10fig19.jpg" alt="images" width="600" height="652"/>
<figcaption>
<p class="title-f"><strong>Figure 10.19:</strong> The form on the result page.</p>
</figcaption>
</figure>
<p class="indent">Filling the textarea with one of my favorite looooong palindromes (<a href="ch10.xhtml#ch10fig20">Figure 10.20</a>) gives the result shown in <a href="ch10.xhtml#ch10fig21">Figure 10.21</a>.<sup><a id="fn10_9a" href="ch10.xhtml#fn10_9">9</a></sup></p>
<figure class="image-c" id="ch10fig20">
<img src="graphics/10fig20.jpg" alt="images" width="600" height="650"/>
<figcaption>
<p class="title-f"><strong>Figure 10.20:</strong> Entering a long string in the form’s textarea field.</p>
</figcaption>
</figure>
<figure class="image-c" id="ch10fig21">
<img src="graphics/10fig21.jpg" alt="images" width="600" height="743"/>
<figcaption>
<p class="title-f"><strong>Figure 10.21:</strong> That long string is a palindrome!</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn10_9" href="ch10.xhtml#fn10_9a">9.</a> The amazingly long palindrome in <a href="ch10.xhtml#ch10fig20">Figure 10.20</a> was created in 1983 by pioneering computer scientist Guy Steele with the aid of a custom program.</p>
<p class="indent">And with that—“A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal—Panama!”—we’re done with our palindrome detector web application. Whew!</p>
<p class="indent">The only thing left is to commit and deploy:</p>
<p class="codelink"><a href="ch10_images.xhtml#f312-02" id="f312-02a">Click here to view code image</a></p>
<pre class="pre1"><code><span class="pd_blue"><strong>(venv) $</strong></span> git add -A
<span class="pd_blue"><strong>(venv) $</strong></span> git commit -am <span class="pd_red">"Finish working palindrome detector"</span>
<span class="pd_blue"><strong>(venv) $</strong></span> flyctl deploy</code></pre>
<p class="noindent">The result is a palindrome application working in production (<a href="ch10.xhtml#ch10fig22">Figure 10.22</a>)!<sup><a id="fn10_10a" href="ch10.xhtml#fn10_10">10</a></sup></p>
<figure class="image-c" id="ch10fig22">
<img src="graphics/10fig22.jpg" alt="images" width="725" height="558"/>
<figcaption>
<p class="title-f"><strong>Figure 10.22:</strong> Our palindrome detector working on the live Web.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn10_10" href="ch10.xhtml#fn10_10a">10.</a> To learn how to host a Fly.io site using a custom domain, see the article on custom domains with Fly (<a href="https://fly.io/docs/app-guides/custom-domains-with-fly/">https://fly.io/docs/app-guides/custom-domains-with-fly/</a>).</p>
<span epub:type="pagebreak" id="page_313"></span>
</section>
<section>
<h4 class="h4" id="sec10_5_2">10.5.2 Exercises</h4>
<ol class="number">
<li><p class="number">Confirm by submitting an empty textarea that the palindrome detector currently returns <span class="pd_green-d"><code><strong>True</strong></code></span> for the empty string, which is a flaw in the palindrome package itself. What happens if you submit a bunch of spaces?</p></li>
<li><p class="number">In the palindrome package, write tests asserting that the empty string and a string of spaces <em>aren’t</em> palindromes (<span class="pd_red"><span class="smallcaps">RED</span></span>). Then write the application code necessary to get the tests to <span class="pd_green"><span class="smallcaps">GREEN</span></span>. (It’s worth noting that the <span class="pd_green-d"><code><strong>processed_content()</strong></code></span> method already filters out spaces, so in the application code you need only consider the case of the empty string, whose boolean value is <span class="pd_green-d"><code><strong>False</strong></code></span> (<a href="ch02.xhtml#sec2_4_2">Section 2.4.2</a>).) Bump <span epub:type="pagebreak" id="page_314"></span>the version number and publish your package as in <a href="ch08.xhtml#sec8_5_1">Section 8.5.1</a>. (You can refer to my version (<a href="https://github.com/mhartl/python_package_tutorial">https://github.com/mhartl/python_package_tutorial</a>) if you’d like some help.)</p></li>
<li><p class="number">Upgrade the test package in your web app directory using <a href="ch10.xhtml#ch10list64">Listing 10.64</a> as a template and confirm that it’s working by submitting empty and blank phrases in the browser. (Recall that you should type the continuation character <span class="pd_green-d"><code><strong>\</strong></code></span> in <a href="ch10.xhtml#ch10list64">Listing 10.64</a> but not the right angle bracket <span class="pd_green-d"><code><strong>&gt;</strong></code></span> since the latter will be inserted automatically by your shell program.)</p></li>
<li><p class="number">Make a commit and deploy the changes. Confirm the correct behavior in the live app.</p></li>
</ol>
<span epub:type="pagebreak" id="page_315"></span>
<p class="listing" id="ch10list64"><strong>Listing 10.64:</strong> Upgrading the test package.</p>
<p class="codelink"><a href="ch10_images.xhtml#f315-01" id="f315-01a">Click here to view code image</a></p>
<div class="box1">
<pre class="pre"><code><span class="pd_blue"><strong>(venv) $</strong></span> pip install --upgrade palindrome_YOUR_USERNAME_HERE <span class="pd_dorange">\</span>
<span class="pd_blue"><strong>&gt;</strong></span> --index-url https://test.pypi.org/simple/</code></pre>
</div>
<span epub:type="pagebreak" id="page_316"></span>
</section>
</section>
<section>
<h3 class="h3" id="sec10_6">10.6 Conclusion</h3>
<p class="noindent">Congratulations! You now know enough Python to be <em>dangerous</em>.</p>
<p class="indent">There is one more challenge, should you choose to accept it: <a href="ch11.xhtml#ch11">Chapter 11</a> on data science. This chapter is a bit specialized, and strictly speaking it can be considered optional. It introduces some valuable techniques, though, and reinforces other parts of the book, so I recommend giving it a try.</p>
<p class="indent">For more about Python (and programming generally), I recommend these fine resources:</p>
<ul class="sq">
<li><p class="bull">Replit’s 100 days of code: This is a guided introduction to Python programming using Replit’s amazing collaborative browser-based IDE.</p></li>
<li><p class="bull"><span epub:type="pagebreak" id="page_317"></span>Practical Python Programming by Dave Beazley: I’ve long been a huge fan of Beazely’s <em>Python Essential Reference</em> and highly recommend his (free) online course.</p></li>
<li><p class="bull"><em>Learn Python the Hard Way</em> by Zed Shaw: This exercise- and syntax-heavy approach is an excellent complement to the breadth-first, narrative approach taken in this tutorial. <em>Fun fact</em>: Zed Shaw’s “Learn Code the Hard Way” brand was a direct inspiration for “Learn Enough to Be Dangerous” (<a href="https://www.learnenough.com/">https://www.learnenough.com/</a>).</p></li>
<li><p class="bull"><em>Python Crash Course</em> and <em>Automate the Boring Stuff with Python</em> from No Starch Press: Both of these books are good follow-ons to <em>Learn Enough Python to Be Dangerous</em>; the former (by Eric Matthes) has more detailed coverage of Python syntax while the latter (by Al Sweigart) includes a great many applications of Python programming to everyday computer tasks.</p></li>
<li><p class="bull"><em>Captain Code</em> by Ben Forta and Shmuel Forta: Although this book is principally aimed at children, many adult readers have reported enjoying it as well.</p></li>
<li><p class="bull">Finally, for people who want the most solid foundation possible in technical sophistication, Learn Enough All Access (<a href="https://www.learnenough.com/all-access">https://www.learnenough.com/all-access</a>) is a subscription service that has special online versions of all the Learn Enough books and over 40 hours of streaming video tutorials, including <em>Learn Enough Python to Be Dangerous</em>, <em>Learn Enough Ruby to Be Dangerous</em>, and the full <em>Ruby on Rails Tutorial</em> (<a href="https://www.railstutorial.org/">https://www.railstutorial.org/</a>). We hope you’ll check it out!</p></li>
</ul>
<p class="indent">The material in this chapter is also excellent preparation for learning more about Flask, for which the Flask documentation is a good resource, and for learning web development with Django. If you’d like to go the Django route, the Django documentation is an excellent place to start. If you end up wanting to learn more about web development generally, I also recommend following <em>Learn Enough JavaScript to Be Dangerous</em> since JavaScript is the only language that can be executed inside web browsers. In addition, <em>Learn Enough Python to Be Dangerous</em> is excellent preparation for <em>Learn Enough Ruby to Be Dangerous</em>, which (like <em>Learn Enough JavaScript to Be Dangerous</em>) broadly follows the same outline as this tutorial, and is also great preparation for the <em>Ruby on Rails Tutorial</em>.<span epub:type="pagebreak" id="page_318"></span></p>
</section>
</section>
</div>
</div>
</body>
</html>