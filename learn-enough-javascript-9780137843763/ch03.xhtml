<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough JavaScript to Be Dangerous: Write Programs, Publish Packages, and Develop Interactive Websites with JavaScript</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137843879.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="chap-num" id="ch03"><span epub:type="pagebreak" id="page_55"></span>Chapter 3</h2>
<h2 class="chap-title">Arrays</h2>
<p class="noindent">In <a href="ch02.xhtml#ch02">Chapter 2</a>, we saw that strings can be thought of as sequences of characters in a particular order. In this chapter, we’ll learn about the <em>array</em> data type, which is the general JavaScript container for arbitrary elements in a particular order. We’ll start by explicitly connecting strings and arrays via the String <span class="pd_green"><code><strong>split</strong></code></span> method (<a href="ch03.xhtml#ch3lev1">Section 3.1</a>), and then learn about various array methods throughout the rest of the chapter.</p>
<section>
<h3 class="h3" id="ch3lev1">3.1 Splitting</h3>
<p class="noindent">So far we’ve spent a lot of time understanding strings, and there’s a natural way to get from strings to arrays via the <span class="pd_green"><code><strong>split</strong></code></span> method:</p>
<p class="codelink"><a href="ch03_images.xhtml#c055pro01" id="c055pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_red">"ant bat cat"</span>.split(<span class="pd_red">"  "</span>);     <span class="pd_blue1"><em>// Split a string into a three-element array.</em></span>
[ <span class="pd_red">'ant'</span>, <span class="pd_red">'bat'</span>, <span class="pd_red">'cat'</span> ]</pre>
<p class="noindent">We see from this result that <span class="pd_green"><code><strong>split</strong></code></span> returns a list of the strings that are separated from each other by a space in the original string.</p>
<p class="indent">Splitting on space is one of the most common operations, but we can split on nearly anything else as well:</p>
<p class="codelink"><a href="ch03_images.xhtml#c055pro02" id="c055pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_red">"ant,bat,cat"</span>.split(<span class="pd_red">","</span>);
[ <span class="pd_red">'ant'</span>, <span class="pd_red">'bat'</span>, <span class="pd_red">'cat'</span> ]
<span class="gray">&gt;</span> <span class="pd_red">"ant, bat, cat"</span>.split(<span class="pd_red">", "</span>);
[ <span class="pd_red">'ant'</span>, <span class="pd_red">'bat'</span>, <span class="pd_red">'cat'</span> ]
<span class="gray">&gt;</span> <span class="pd_red">"antheybatheycat"</span>.split(<span class="pd_red">"hey"</span>);
[ <span class="pd_red">'ant'</span>, <span class="pd_red">'bat'</span>, <span class="pd_red">'cat'</span> ]</pre>
<p class="indent"><span epub:type="pagebreak" id="page_56"></span>We can even split a string into its component characters by splitting on the empty string:</p>
<p class="codelink"><a href="ch03_images.xhtml#c056pro01" id="c056pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_red">"badger"</span>.split(<span class="pd_red">""</span>)
[ <span class="pd_red">'b'</span>, <span class="pd_red">'a'</span>, <span class="pd_red">'d'</span>, <span class="pd_red">'g'</span>, <span class="pd_red">'e'</span>, <span class="pd_red">'r'</span> ]</pre>
<p class="noindent">We’ll put this basic technique to good use in <a href="ch05.xhtml#ch5lev3">Section 5.3</a> (and we’ll also discover it has an important limitation).</p>
<p class="indent">Finally, it’s worth noting that splitting supports <em>regular expressions</em>, which are covered in <a href="ch04.xhtml#ch4lev3">Section 4.3</a>.</p>
<section>
<h4 class="h4" id="ch3lev1sec1">3.1.1 Exercises</h4>
<ol class="number">
<li><p class="number">Assign <span class="pd_green"><code><strong>a</strong></code></span> to the result of splitting the string “A man, a plan, a canal, Panama” on comma-space. How many elements does the resulting array have?</p></li>
<li><p class="number">Can you guess the method to reverse <span class="pd_green"><code><strong>a</strong></code></span> in place? (<a href="https://www.google.com/search?q=javascript+reverse+array">Google around</a> if necessary.)</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="ch3lev2">3.2 Array Access</h3>
<p class="noindent">Having connected strings with arrays via the <span class="pd_green"><code><strong>split</strong></code></span> method, we’ll now discover a second close connection as well. Let’s start by assigning a variable to an array of characters created using <span class="pd_green"><code><strong>split</strong></code></span>:</p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_green1"><strong>let</strong></span> a <span class="gray">=</span> <span class="pd_red">"badger"</span>.split(<span class="pd_red">""</span>);</pre>
<p class="noindent">We can access particular elements of <span class="pd_green"><code><strong>a</strong></code></span> using a bracket notation that’s common to a huge number of different languages, as seen in <a href="ch03.xhtml#ch3list1">Listing 3.1</a>.</p>
<p class="listing" id="ch3list1"><strong>Listing 3.1:</strong> Array access with the bracket notation.</p>
<pre class="pre2"><span class="gray">&gt;</span> a[<span class="gray">0</span>];
<span class="pd_red">'b'</span>
<span class="gray">&gt;</span> a[<span class="gray">1</span>];
<span class="pd_red">'a'</span>
<span class="gray">&gt;</span> a[<span class="gray">2</span>];
<span class="pd_red">'d'</span></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_57"></span>Does <a href="ch03.xhtml#ch3list1">Listing 3.1</a> look a little familiar? It’s the same basic relationship between characters and numerical index that we saw with the <span class="pd_green"><code><strong>String#charAt</strong></code></span> method in <a href="ch02.xhtml#ch2list16">Listing 2.16</a>. (The notation in the previous sentence indicates that <span class="pd_green"><code><strong>charAt</strong></code></span> is an <em>instance method</em>, i.e., a method on string instances.) In fact, the bracket notation actually works directly on strings:</p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_red">"badger"</span>[<span class="gray">0</span>];
<span class="pd_red">'b'</span>
<span class="gray">&gt;</span> <span class="pd_red">"badger"</span>[<span class="gray">1</span>];
<span class="pd_red">'a'</span></pre>
<p class="indent">We see from <a href="ch03.xhtml#ch3list1">Listing 3.1</a> that, as with strings, arrays are <em>zero-offset</em>, meaning that the “first” element has index <span class="pd_green"><code><strong>0</strong></code></span>, the second has index <span class="pd_green"><code><strong>1</strong></code></span>, and so on. This convention can be confusing, and in fact it’s common to refer to the initial element for zero-offset arrays as the “<a href="https://en.wikipedia.org/wiki/0th">zeroth</a>” element as a reminder that the indexing starts at <span class="pd_green"><code><strong>0</strong></code></span>. This convention can also be confusing when using multiple languages (some of which start array indexing at <span class="pd_green"><code><strong>1</strong></code></span>), as illustrated in the <a href="https://xkcd.com/">xkcd</a> comic strip “<a href="https://m.xkcd.com/163/">Donald Knuth</a>” (<a href="https://m.xkcd.com/163/">https://m.xkcd.com/163/</a>).<sup><a id="ch3fn-1" href="ch03.xhtml#ch3fn_1">1</a></sup></p>
<p class="footnote"><a id="ch3fn_1" href="ch03.xhtml#ch3fn-1">1</a>. This particular xkcd strip takes its name from renowned computer scientist <a href="https://en.wikipedia.org/wiki/Donald_knuth">Donald Knuth</a> (pronounced “kuh-NOOTH”), author of <em><a href="https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming">The Art of Computer Programming</a></em> and creator of the TEX typesetting system used to prepare many technical documents, including this one.</p>
<p class="indent">So far we’ve dealt exclusively with arrays of characters, but JavaScript arrays can contain all kinds of elements:</p>
<p class="codelink"><a href="ch03_images.xhtml#c057pro02" id="c057pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> a <span class="gray">=</span> [<span class="pd_red">"badger"</span>, <span class="gray">42</span>, soliloquy.includes(<span class="pd_red">"To be"</span>)];
[ <span class="pd_red">'badger</span>', <span class="gray">42</span>, <span class="pd_green1"><strong>true</strong></span> ]
<span class="gray">&gt;</span> a[<span class="gray">2</span>];
<span class="pd_green1"><strong>true</strong></span>
<span class="gray">&gt;</span> a[<span class="gray">3</span>];
<span class="pd_green1"><strong>undefined</strong></span></pre>
<p class="noindent">We see here that the square bracket access notation works as usual for an array of mixed types, which shouldn’t come as a surprise. We also see that trying to access an array index outside of the defined range returns <span class="pd_green"><code><strong>undefined</strong></code></span> (a value which we saw before in the context of <span class="pd_green"><code><strong>console.log</strong></code></span> (<a href="ch02.xhtml#ch2fig4">Figure 2.4</a>)). This might be a surprise if you have previous programming experience, since many languages raise an error if you try to access an element that’s out of range, but JavaScript is more tolerant in this regard.</p>
<section>
<h4 class="h4" id="ch3lev2sec1"><span epub:type="pagebreak" id="page_58"></span>3.2.1 Exercises</h4>
<ol class="number">
<li><p class="number">Write a <span class="pd_green"><code><strong>for</strong></code></span> loop to print out the characters obtained from splitting “honey badger” on the empty string.</p></li>
<li><p class="number">See if you can guess the value of <span class="pd_green"><code><strong>undefined</strong></code></span> in a boolean context. Use <span class="pd_green"><code><strong>!!</strong></code></span> to confirm.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="ch3lev3">3.3 Array Slicing</h3>
<p class="noindent">In addition to supporting the bracket notation described in <a href="ch03.xhtml#ch3lev2">Section 3.2</a>, JavaScript supports a technique known as <em>array slicing</em> for accessing multiple elements at a time. In anticipation of learning to <em>sort</em> in <a href="ch03.xhtml#ch3lev4">Section 3.4</a>, let’s redefine our array <span class="pd_green"><code><strong>a</strong></code></span> to have purely numerical elements:</p>
<pre class="pre1"><span class="gray">&gt;</span> a <span class="gray">=</span> [<span class="gray">42</span>, <span class="gray">8</span>, <span class="gray">17</span>, <span class="gray">99</span>];
[ <span class="gray">42</span>, <span class="gray">8</span>, <span class="gray">17</span>, <span class="gray">99</span> ]</pre>
<p class="indent">The simplest way to slice an array is to provide only one argument, which returns all the elements in the array from that index on. For example, for an array with four elements, <span class="pd_green"><code><strong>slice(1)</strong></code></span> returns the second, third, and fourth ones (recall that the “first” or zeroth element has index <span class="pd_green"><code><strong>0</strong></code></span>):</p>
<pre class="pre1"><span class="gray">&gt;</span> a.slice(<span class="gray">1</span>);
[ <span class="gray">8</span>, <span class="gray">17</span>, <span class="gray">99</span> ]</pre>
<p class="noindent">We can also slice from one index to another:</p>
<pre class="pre1"><span class="gray">&gt;</span> a.slice(<span class="gray">1</span>, <span class="gray">3</span>);
[ <span class="gray">8</span>, <span class="gray">17</span> ]</pre>
<p class="indent">Slicing gives us an easy way to perform a common task, which is to access the last element in an array. Arrays, like strings, have a <span class="pd_green"><code><strong>length</strong></code></span> property, so we could find the last element like this:</p>
<pre class="pre1"><span class="gray">&gt;</span> a.length;
<span class="gray">4</span>
<span class="gray">&gt;</span> a[a.length<span class="gray">-1</span>];
<span class="gray">99</span></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_59"></span>This can get a little messy if the variable name is long, though, which often happens in bigger projects that have lots of variables:</p>
<p class="codelink"><a href="ch03_images.xhtml#c059pro01" id="c059pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_green1"><strong>let</strong></span> aMuchLongerArrayName <span class="gray">=</span> a;
<span class="gray">&gt;</span> aMuchLongerArrayName[aMuchLongerArrayName.length <span class="gray">- 1</span>];
<span class="gray">99</span></pre>
<p class="noindent">This leads us to a second method for picking off the last element, which is to use <span class="pd_green"><code><strong>slice</strong></code></span> with a <em>negative</em> number, which counts from the end:</p>
<p class="codelink"><a href="ch03_images.xhtml#c059pro02" id="c059pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> aMuchLongerArrayName.slice(<span class="gray">-1</span>);
[ <span class="gray">99</span> ]</pre>
<p class="noindent">This is an array with one element, so we can select the element itself using the bracket notation:</p>
<p class="codelink"><a href="ch03_images.xhtml#c059pro03" id="c059pro03a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> aMuchLongerArrayName.slice(<span class="gray">-1</span>)[<span class="gray">0</span>];
<span class="gray">99</span></pre>
<p class="indent">A final common case is where we want to access the final element and remove it at the same time. We’ll cover the method for doing this in <a href="ch03.xhtml#ch3lev4sec2">Section 3.4.2</a>.</p>
<section>
<h4 class="h4" id="ch3lev3sec1">3.3.1 Exercises</h4>
<ol class="number">
<li><p class="number">Define an array with the numbers 1 through 10. Use slicing and <span class="pd_green"><code><strong>length</strong></code></span> to select the third element through the third-to-last. Accomplish the same task using a negative index.</p></li>
<li><p class="number">Show that strings also support the <span class="pd_green"><code><strong>slice</strong></code></span> method by selecting just <span class="pd_green"><code><strong>bat</strong></code></span> from the string <span class="pd_green"><code><strong>"ant bat cat"</strong></code></span>. (You might have to experiment a little to get the indices just right.)</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="ch3lev4">3.4 More Array Methods</h3>
<p class="noindent">In addition to the <span class="pd_green"><code><strong>slice</strong></code></span> method seen in <a href="ch03.xhtml#ch3lev3">Section 3.3</a>, arrays respond to a wealth of other methods. As usual, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">documentation</a> (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a>) is a good place to go for details.</p>
<p class="indent"><span epub:type="pagebreak" id="page_60"></span>As with strings, arrays respond to an <span class="pd_green"><code><strong>includes</strong></code></span> method to test for element inclusion:</p>
<p class="codelink"><a href="ch03_images.xhtml#c060pro01" id="c060pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> a;
[ <span class="gray">42</span>, <span class="gray">8</span>, <span class="gray">17</span>, <span class="gray">99</span> ]
<span class="gray">&gt;</span> a.includes(<span class="gray">42</span>);       <span class="pd_blue1"><em>// Test for element inclusion.</em></span>
<span class="pd_green1"><strong>true</strong></span>
<span class="gray">&gt;</span> a.includes(<span class="pd_red">"foo"</span>);
<span class="pd_green1"><strong>false</strong></span></pre>
<section>
<h4 class="h4" id="ch3lev4sec1">3.4.1 Sorting and Reversing</h4>
<p class="noindent">You can also sort an array in place—an excellent trick that in <a href="https://en.wiktionary.org/wiki/ye#Etymology_2">ye</a> <a href="https://en.wiktionary.org/wiki/olden#English">olden</a> days of C often required a custom implementation. In JavaScript, we just call <span class="pd_green"><code><strong>sort()</strong></code></span>:</p>
<p class="codelink"><a href="ch03_images.xhtml#c060pro02" id="c060pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> a.sort();
[ <span class="gray">17</span>, <span class="gray">42</span>, <span class="gray">8</span>, <span class="gray">99</span> ]
<span class="gray">&gt;</span> a;                     <span class="pd_blue1"><em>// `a` has changed as the result of `sort()`.</em></span>
[ <span class="gray">17</span>, <span class="gray">42</span>, <span class="gray">8</span>, <span class="gray">99</span> ]</pre>
<p class="noindent">You might notice something strange here, which is that JavaScript has sorted the elements of the array not according to their numerical values, but rather “alphabetically”, so that <span class="pd_green"><code><strong>17</strong></code></span> comes before <span class="pd_green"><code><strong>8</strong></code></span> because <span class="pd_green"><code><strong>1</strong></code></span> comes before <span class="pd_green"><code><strong>8</strong></code></span> in the ordering scheme (<a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>) used by computers. (We’ll learn how to sort arrays numerically in <a href="ch05.xhtml#ch05">Chapter 5</a>.)</p>
<p class="indent">Another useful method—one we’ll put to good use in developing our palindrome theme starting in <a href="ch05.xhtml#ch5lev3">Section 5.3</a>—is the <span class="pd_green"><code><strong>reverse</strong></code></span> method:</p>
<p class="codelink"><a href="ch03_images.xhtml#c060pro03" id="c060pro03a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> a.reverse();
[ <span class="gray">99</span>, <span class="gray">8</span>, <span class="gray">42</span>, <span class="gray">17</span> ]
<span class="gray">&gt;</span> a;                  <span class="pd_blue1"><em>// Like `sort()`, `reverse()` mutates the array.</em></span>
[ <span class="gray">99</span>, <span class="gray">8</span>, <span class="gray">42</span>, <span class="gray">17</span> ]</pre>
<p class="noindent">As noted in the comment, methods like <span class="pd_green"><code><strong>a.sort()</strong></code></span> and <span class="pd_green"><code><strong>a.reverse()</strong></code></span> <em>mutate</em> the array, meaning they modify it as a side effect of performing their respective actions. This is the sort of behavior that varies from one programming language to the next, so be careful when using similar methods in other languages.</p>
</section>
<section>
<h4 class="h4" id="ch3lev4sec2"><span epub:type="pagebreak" id="page_61"></span>3.4.2 Pushing and Popping</h4>
<p class="noindent">One useful pair of array methods is <span class="pd_green"><code><strong>push</strong></code></span> and <span class="pd_green"><code><strong>pop</strong></code></span>; <span class="pd_green"><code><strong>push</strong></code></span> lets us append an element to the end of an array, while <span class="pd_green"><code><strong>pop</strong></code></span> removes it:</p>
<p class="codelink"><a href="ch03_images.xhtml#c061pro01" id="c061pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> a.push(<span class="gray">6</span>);                 <span class="pd_blue1"><em>// Pushing onto an array (returns new length)</em></span>
<span class="gray">5</span>
<span class="gray">&gt;</span> a;
[ <span class="gray">99</span>, <span class="gray">8</span>, <span class="gray">42</span>, <span class="gray">17</span>, <span class="gray">6</span> ]
<span class="gray">&gt;</span> a.push(<span class="pd_red">"foo"</span>);
<span class="gray">6</span>
<span class="gray">&gt;</span> a;
[ <span class="gray">99</span>, <span class="gray">8</span>, <span class="gray">42</span>, <span class="gray">17</span>, <span class="gray">6</span>, <span class="pd_red">'foo'</span> ]
<span class="gray">&gt;</span> a.pop();                   <span class="pd_blue1"><em>// `pop` returns the value itself</em></span>
<span class="pd_red">'foo'</span>
<span class="gray">&gt;</span> a.pop();
<span class="gray">6</span>
<span class="gray">&gt;</span> a;
[ <span class="gray">99</span>, <span class="gray">8</span>, <span class="gray">42</span>, <span class="gray">17</span> ]</pre>
<p class="noindent">As noted in the comments, <span class="pd_green"><code><strong>pop</strong></code></span> returns the value of the final element (while removing it as a side effect), but <span class="pd_green"><code><strong>push</strong></code></span> (somewhat counter-intuitively) returns the <em>length</em> of the new array. As of this writing, I don’t know why (and <a href="https://stackoverflow.com/questions/34259126/why-does-array-prototype-push-return-the-new-length-instead-of-something-more-us">neither does Stack Overflow</a>).</p>
<p class="indent">We are now in a position to appreciate the comment made in <a href="ch03.xhtml#ch3lev3">Section 3.3</a> about obtaining the last element of the array, as long as we don’t mind mutating it:</p>
<p class="codelink"><a href="ch03_images.xhtml#c061pro02" id="c061pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> <span class="pd_green1"><strong>let</strong></span> lastElement <span class="gray">=</span> a.pop();
<span class="gray">&gt;</span> lastElement;
<span class="gray">17</span>
<span class="gray">&gt;</span> a;
[ <span class="gray">99</span>, <span class="gray">8</span>, <span class="gray">42</span> ]
<span class="gray">&gt;</span> <span class="pd_green1"><strong>let</strong></span> theAnswerToLifeTheUniverseAndEverything <span class="gray">=</span> a.pop();</pre>
</section>
<section>
<h4 class="h4" id="ch3lev4sec3">3.4.3 Undoing a Split</h4>
<p class="noindent">A final example of an array method, one that brings us full circle from <a href="ch03.xhtml#ch3lev1">Section 3.1</a>, is <span class="pd_green"><code><strong>join</strong></code></span>. Just as <span class="pd_green"><code><strong>split</strong></code></span> splits a string into array elements, <span class="pd_green"><code><strong>join</strong></code></span> joins array elements into a string (<a href="ch03.xhtml#ch3list2">Listing 3.2</a>).</p>
<p class="listing" id="ch3list2"><span epub:type="pagebreak" id="page_62"></span><strong>Listing 3.2:</strong> Different ways to join.</p>
<p class="codelink"><a href="ch03_images.xhtml#c03lis02" id="c03lis02a">Click here to view code image</a></p>
<pre class="pre2"><span class="gray">&gt;</span> a <span class="gray">=</span> [<span class="pd_red">"ant"</span>, <span class="pd_red">"bat"</span>, <span class="pd_red">"cat"</span>, <span class="gray">42</span>];
[ <span class="pd_red">'ant'</span>, <span class="pd_red">'bat'</span>, <span class="pd_red">'cat'</span>, <span class="gray">42</span> ]
<span class="gray">&gt;</span> a.join();                      <span class="pd_blue1"><em>// Join on default (comma).</em></span>
<span class="pd_red">'ant,bat,cat,42'</span>
<span class="gray">&gt;</span> a.join(<span class="pd_red">",  "</span>);                 <span class="pd_blue1"><em>// Join on comma-space.</em></span>
<span class="pd_red">'ant, bat, cat, 42'</span>
<span class="gray">&gt;</span> a.join(<span class="pd_red">" -- "</span>);                <span class="pd_blue1"><em>// Join on double dashes.</em></span>
<span class="pd_red">'ant -- bat -- cat -- 42'</span>
<span class="gray">&gt;</span> a.join(<span class="pd_red">""</span>);                    <span class="pd_blue1"><em>// Join on empty space.</em></span>
<span class="pd_red">'antbatcat42'</span></pre>
<p class="noindent">Note that <span class="pd_green"><code><strong>42</strong></code></span>, which is an integer, is automatically converted to a string in the join.</p>
</section>
<section>
<h4 class="h4" id="ch3lev4sec4">3.4.4 Exercises</h4>
<ol class="number">
<li><p class="number">The <span class="pd_green"><code><strong>split</strong></code></span> and <span class="pd_green"><code><strong>join</strong></code></span> methods are almost inverse operations, but not quite. In particular, confirm using <span class="pd_green"><code><strong>==</strong></code></span> (<em>not</em> <span class="pd_green"><code><strong>===</strong></code></span>) that <span class="pd_green"><code><strong>a.join(" ").split(" ")</strong></code></span> in <a href="ch03.xhtml#ch3list2">Listing 3.2</a> is <em>not</em> the same as <span class="pd_green"><code><strong>a</strong></code></span>. Why not?</p></li>
<li><p class="number">Using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">array documentation</a>, figure out how to push onto or pop off the <em>front</em> of an array. <em>Hint</em>: The names aren’t intuitive at all, so you might have to work a bit.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="ch3lev5">3.5 Array Iteration</h3>
<p class="noindent">One of the most common tasks with arrays is iterating through their elements and performing an operation with each one. This might sound familiar, since we solved the exact same problem with strings in <a href="ch02.xhtml#ch2lev6">Section 2.6</a>, and indeed the solution is virtually the same. All we need to do is adapt the <span class="pd_green"><code><strong>for</strong></code></span> loop from <a href="ch02.xhtml#ch2list18">Listing 2.18</a> to arrays.</p>
<p class="indent">We could get there in one step fairly easily, but the connection is even clearer if we first rewrite the string <span class="pd_green"><code><strong>for</strong></code></span> loop using the bracket access notation, which (as we saw in <a href="ch03.xhtml#ch3lev2">Section 3.2</a>) works on strings as well. The result for the <span class="pd_green"><code><strong>soliloquy</strong></code></span> string defined in <a href="ch02.xhtml#ch2list15">Listing 2.15</a> is shown in <a href="ch03.xhtml#ch3list3">Listing 3.3</a>.</p>
<p class="listing" id="ch3list3"><span epub:type="pagebreak" id="page_63"></span><strong>Listing 3.3:</strong> Combining string access and a <span class="pd_green"><code><strong>for</strong></code></span> loop.</p>
<p class="codelink"><a href="ch03_images.xhtml#c03lis03" id="c03lis03a">Click here to view code image</a></p>
<pre class="pre2"><span class="gray">&gt;</span> <span class="pd_green1"><strong>for</strong></span> (<span class="pd_green1"><strong>let</strong></span> i <span class="gray">= 0</span>; i <span class="gray">&lt;</span> soliloquy.length; i<span class="gray">++</span>) {
  console.log(soliloquy[i]);
}
T
o

b
e
.
.
.
t
i
o
n
<span class="gray">:</span></pre>
<p class="noindent">The result in <a href="ch03.xhtml#ch3list3">Listing 3.3</a> is exactly the same as that shown in <a href="ch02.xhtml#ch2list18">Listing 2.18</a>.</p>
<p class="indent">The application of this pattern to arrays should now be clear. All we need to do is replace <span class="pd_green"><code><strong>soliloquy</strong></code></span> with <span class="pd_green"><code><strong>a</strong></code></span>, as shown in <a href="ch03.xhtml#ch3list4">Listing 3.4</a>; the rest of the code is identical.</p>
<p class="listing" id="ch3list4"><strong>Listing 3.4:</strong> Combining array access and a <span class="pd_green"><code><strong>for</strong></code></span> loop.</p>
<p class="codelink"><a href="ch03_images.xhtml#c03lis04" id="c03lis04a">Click here to view code image</a></p>
<pre class="pre2"><span class="gray">&gt;</span> <span class="pd_green1"><strong>for</strong></span> (<span class="pd_green1"><strong>let</strong></span> i <span class="gray">= 0</span>; i <span class="gray">&lt;</span> a.length; i<span class="gray">++</span>) {
    console.log(a[i]);
  }
ant
bat
cat
<span class="gray">42</span></pre>
<p class="indent">One thing worth noting here is that the iteration index variable <span class="pd_green"><code><strong>i</strong></code></span> appears in both <span class="pd_green"><code><strong>for</strong></code></span> loops. As you may recall if you completed the exercises in <a href="ch02.xhtml#ch2lev2sec2">Section 2.2.2</a>, redefining a variable that’s already been declared with <span class="pd_green"><code><strong>let</strong></code></span> generally results in an error. Why were we able to reuse <span class="pd_green"><code><strong>i</strong></code></span> in this context?</p>
<p class="indent">The answer is that in the context of a <span class="pd_green"><code><strong>for</strong></code></span> loop the <em><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)">scope</a></em> of the variable is restricted to the loop, and disappears when the loop is finished.</p>
<p class="indent"><span epub:type="pagebreak" id="page_64"></span>That’s convenient, but it’s not the best way to iterate through arrays, and Mike Vanier still wouldn’t be happy (<a href="ch03.xhtml#ch3fig1">Figure 3.1</a>). We’ll see a cleaner method for iterating through arrays in <a href="ch05.xhtml#ch5lev4">Section 5.4</a>, and a way of avoiding iteration entirely in <a href="ch06.xhtml#ch06">Chapter 6</a>.</p>
<figure class="figure" id="ch3fig1">
<img src="graphics/03fig01.jpg" alt="images" width="192" height="194"/>
<figcaption>
<p class="title-f"><strong>Figure 3.1:</strong> Mike Vanier is still annoyed by typing out <span class="pd_green"><code><strong>for</strong></code></span> loops.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="ch3lev5sec1">3.5.1 Exercises</h4>
<ol class="number">
<li><p class="number">Show that the identifier <span class="pd_green"><code><strong>i</strong></code></span> is undefined both before and after a <span class="pd_green"><code><strong>for</strong></code></span> loop executes. (You might have to exit and re-enter the Node console.)</p></li>
<li><p class="number">Define an accumulator variable <span class="pd_green"><code><strong>total</strong></code></span> and combine it with a loop to add all the elements of <a href="ch03.xhtml#ch3list4">Listing 3.4</a>. You can use the code in <a href="ch03.xhtml#ch3list5">Listing 3.5</a> to get started (just replace the comment with the proper code). How does the value of <span class="pd_green"><code><strong>total</strong></code></span> compare to <span class="pd_green"><code><strong>a.join("")</strong></code></span>?</p></li>
</ol>
<p class="listing" id="ch3list5"><strong>Listing 3.5:</strong> Skeleton for calculating a total.</p>
<p class="codelink"><a href="ch03_images.xhtml#c03lis05" id="c03lis05a">Click here to view code image</a></p>
<pre class="pre2"><span class="gray">&gt;</span> <span class="pd_green1"><strong>let</strong></span> total <span class="gray">=</span> <span class="pd_red">""</span>;
<span class="pd_red">&gt;</span> <span class="pd_green1"><strong>for</strong></span> (<span class="pd_green1"><strong>let</strong></span> i <span class="gray">= 0</span>; i <span class="gray">&lt;</span> a.length; i<span class="gray">++</span>) {
    <span class="pd_blue1"><em>// set total equal to the running total plus the current element</em></span>
  }</pre>
</section>
</section>
</section>
</div>
</div>
</body>
</html>