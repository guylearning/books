<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough JavaScript to Be Dangerous: Write Programs, Publish Packages, and Develop Interactive Websites with JavaScript</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137843879.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="chap-num" id="ch01"><span epub:type="pagebreak" id="page_1"></span>Chapter 1</h2>
<h2 class="chap-title">Hello, World!</h2>
<p class="noindent">As the only language that can be executed inside web browsers, <em>JavaScript</em> is an essential part of every programmer’s toolkit. <em>Learn Enough JavaScript to Be Dangerous</em> is designed to get you started writing practical and modern JavaScript programs as fast as possible, using the latest JavaScript technologies (including <a href="https://nodejs.org/en/">Node.js</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla">ES6</a>), with a focus on the real tools used every day by software developers.</p>
<p class="indent">Unlike most JavaScript tutorials, we’ll be treating JavaScript as a <em>general-purpose</em> programming language right from the start, so our examples won’t be confined to the browser. The result is a practical <a href="https://www.learnenough.com/tutorial-writing-tutorial">narrative introduction</a> (<a href="https://www.learnenough.com/tutorial-writing-tutorial">https://www.learnenough.com/tutorial-writing-tutorial</a>) to JavaScript—a perfect complement both to <a href="https://www.codecademy.com/">in-browser coding tutorials</a> and to the voluminous but hard-to-navigate JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">reference material</a> on the Web.</p>
<p class="indent">You won’t learn everything there is to know about JavaScript—that would take thousands of pages and centuries of effort—but you will learn enough JavaScript to be <em>dangerous</em> (<a href="ch01.xhtml#ch1fig1">Figure 1.1</a>).<sup><a id="ch1fn-1" href="ch01.xhtml#ch1fn_1">1</a></sup></p>
<p class="footnote"><a id="ch1fn_1" href="ch01.xhtml#ch1fn-1">1</a>. Image courtesy of Kirk Fisher/Shutterstock.</p>
<figure class="figure" id="ch1fig1">
<img src="graphics/01fig01.jpg" alt="images" width="725" height="484"/>
<figcaption>
<p class="title-f"><strong>Figure 1.1:</strong> JavaScript knowledge, like Rome, <a href="https://en.wiktionary.org/wiki/Rome_wasn%27t_built_in_a_day">wasn’t built in a day</a>.</p>
</figcaption>
</figure>
<p class="indent">There are no programming prerequisites for <em>Learn Enough JavaScript to Be Dangerous</em>, although it certainly won’t hurt if you’ve programmed before. What is important is that you’ve started developing your <em>technical sophistication</em> (<a href="ch01.xhtml#ch1box1">Box 1.1</a>), either on your own or using the preceding <a href="https://www.learnenough.com/courses">Learn Enough tutorials</a> (<a href="https://www.learnenough.com/courses">https://www.learnenough.com/courses</a>). These tutorials include the following, which together make a good list of prerequisites for this book:</p>
<span epub:type="pagebreak" id="page_2"></span>
<ol class="number">
<li><p class="number"><em><a href="https://www.learnenough.com/command-line">Learn Enough Command Line to Be Dangerous</a></em> (<a href="https://www.learnenough.com/command-line">https://www.learnenough.com/command-line</a>)</p></li>
<li><p class="number"><em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em> (<a href="https://www.learnenough.com/text-editor">https://www.learnenough.com/text-editor</a>)</p></li>
<li><p class="number"><em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em> (<a href="https://www.learnenough.com/git">https://www.learnenough.com/git</a>)</p></li>
<li><p class="number"><em><a href="https://www.learnenough.com/html">Learn Enough HTML to Be Dangerous</a></em> (<a href="https://www.learnenough.com/html">https://www.learnenough.com/html</a>)</p></li>
<li><p class="number"><em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em> (<a href="https://www.learnenough.com/css-and-layout">https://www.learnenough.com/css-and-layout</a>)</p></li>
</ol>
<aside epub:type="sidebar" class="sidebar1">
<header>
<h1 epub:type="title" class="sb-title1" id="ch1box1"><strong>Box 1.1: Technical Sophistication</strong></h1>
</header>
<p class="box-no">An essential aspect of using computers is the ability to figure things out and troubleshoot on your own, a skill we at <a href="https://www.learnenough.com/">Learn Enough</a> (<a href="https://www.learnenough.com/">https://www.learnenough.com/</a>) call <em>technical sophistication</em>.</p>
<p class="box-ind"><span epub:type="pagebreak" id="page_3"></span>Developing technical sophistication means not only following systematic tutorials like <em><a href="https://www.learnenough.com/command-line">Learn Enough Command Line to Be Dangerous</a></em>, <em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em>, <em><a href="https://www.learnenough.com/html">Learn Enough HTML to Be Dangerous</a></em>, and <em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em>, but also knowing when it’s time to break free of a structured presentation and just start Googling around for a solution.</p>
<p class="box-ind"><em>Learn Enough JavaScript to Be Dangerous</em> will give us ample opportunity to practice this essential technical skill.</p>
<p class="box-ind">In particular, as alluded to above, there is a wealth of JavaScript reference material on the Web, but it can be hard to use unless you already know basically what you’re doing. One goal of this tutorial is to be the key that unlocks the documentation. This will include lots of pointers to my favorite JavaScript source, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">Mozilla Developer Network (MDN) Web Docs</a> (or just “MDN” for short).</p>
<p class="box-ind">Especially as the exposition gets more advanced, I’ll also frequently include the exact web searches I used to figure out how to accomplish the particular task at hand. For example, how do you use JavaScript to return all elements on a page that match, say, a particular CSS class? Like this: <a href="https://www.google.com/search?q=javascript+css+class+return+all+elements">javascript css class return all elements</a>.</p>
</aside>
<p class="indent">In order to learn enough JavaScript to be dangerous, we’ll begin at the beginning with a series of simple “<a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">hello, world</a>” programs using several different techniques (<a href="ch01.xhtml#ch01">Chapter 1</a>), including an introduction to <em>Node.js</em>, a fast and widely used execution environment for JavaScript programs. In line with the Learn Enough philosophy of always doing things “for real”, even as early as <a href="ch01.xhtml#ch01">Chapter 1</a> we’ll deploy a (very simple) dynamic JavaScript application to the live Web.</p>
<p class="indent">After mastering “hello, world”, we’ll take a tour of some JavaScript <em>objects</em>, including strings (<a href="ch02.xhtml#ch02">Chapter 2</a>), arrays (<a href="ch03.xhtml#ch03">Chapter 3</a>), and other native objects (<a href="ch04.xhtml#ch04">Chapter 4</a>). Taken together, these chapters constitute a gentle introduction to <em>object-oriented programming</em> with JavaScript.</p>
<p class="indent">In <a href="ch05.xhtml#ch05">Chapter 5</a>, we’ll learn the basics of <em>functions</em>, an essential subject for virtually every programming language. We’ll then apply this knowledge to an elegant and powerful style of coding called <em>functional programming</em> (<a href="ch06.xhtml#ch06">Chapter 6</a>).</p>
<p class="indent">Having covered the basics of built-in JavaScript objects, in <a href="ch07.xhtml#ch07">Chapter 7</a> we’ll learn how to make objects of our own. In particular, we’ll define an object for a <em>phrase</em>, and then develop a method for determining whether or not the phrase is a <em>palindrome</em> (the same read forward and backward).</p>
<p class="indent">Our initial palindrome implementation will be rather rudimentary, but we’ll extend it in <a href="ch08.xhtml#ch08">Chapter 8</a> using a powerful technique called <em>test-driven development</em> (TDD). <span epub:type="pagebreak" id="page_4"></span>In the process, we’ll learn more about testing generally, as well as how to create and publish a self-contained software package called an <em>NPM module</em> (and thereby join the large and growing ecosystem of software packages managed by <em>npm</em>, the <a href="https://www.npmjs.com/">Node Package Manager</a>).</p>
<p class="indent">In <a href="ch09.xhtml#ch09">Chapter 9</a>, we’ll apply our new NPM module to a JavaScript web application: a site for detecting palindromes. This will give us a chance to learn about <em>events</em> and <em>DOM manipulation</em>. We’ll start with the simplest possible implementation, and then add several extensions of steadily increasing sophistication, including <em>alerts</em>, <em>prompts</em>, and an example of an HTML <em>form</em>.</p>
<p class="indent">In <a href="ch10.xhtml#ch10">Chapter 10</a>, we’ll learn how to write nontrivial <em>shell scripts</em> using JavaScript, a much-neglected topic that underscores JavaScript’s growing importance as a general-purpose programming language. Examples include reading from both files and URLs, with a final example showing how to manipulate a downloaded file as if it were an HTML web page.</p>
<p class="indent">In <a href="ch11.xhtml#ch11">Chapter 11</a>, we’ll apply the techniques from <a href="ch09.xhtml#ch09">Chapters 9</a> and <a href="ch10.xhtml#ch10">10</a> to a real, industrial-grade website. In particular, we’ll extend the sample application from <em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em> to add a functional <em>image gallery</em> that dynamically changes images, CSS classes, and page text in response to user clicks. (We’ll be using Git to <a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone"><em>clone</em></a> a repository directly, so you’ll be able to build and deploy the image gallery even if you haven’t completed <em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em>.)</p>
<p class="indent">In most cases, typing in code examples by hand is the most effective way to learn, but sometimes copying and pasting is more practical. To make the latter more convenient, all code listings from this book are available online at the <a href="https://github.com/learnenough/learn_enough_javascript_code_listings">following URL</a>:</p>
<p class="codelink"><a href="ch01_images.xhtml#c004pro01" id="c004pro01a">Click here to view code image</a></p>
<pre class="pre1">https://github.com/learnenough/learn_enough_javascript_code_listings</pre>
<p class="indent">Although full-blown web development with a dynamically rendered frontend and a database back end is beyond the scope of this book, by the end of <em>Learn Enough JavaScript to Be Dangerous</em> you’ll have a solid foundation on which to build such skills. We’ll end the tutorial with pointers to additional resources for extending your JavaScript knowledge further, as well as to further Learn Enough tutorials for full-stack web development—specifically, using <em>Ruby</em> (via <em>Sinatra</em>) and <em>Ruby on Rails</em>, for which a background in JavaScript is <a href="https://medium.com/@hpux/rails-5-1-loves-javascript-a1d84d5318b">excellent preparation</a>.</p>
<section>
<h3 class="h3" id="ch1lev1"><span epub:type="pagebreak" id="page_5"></span>1.1 Introduction to JavaScript</h3>
<p class="noindent">JavaScript was originally developed by computer scientist <a href="https://en.wikipedia.org/wiki/Brendan_Eich">Brendan Eich</a> for <a href="https://en.wikipedia.org/wiki/Netscape_Navigator">Netscape Navigator</a>, the first commercial web browser, under the name “LiveScript” (<a href="ch01.xhtml#ch1box2">Box 1.2</a>). The original use of JavaScript is still its main use—namely, “making cool things happen on web pages”, typically via manipulation of the Document Object Model (DOM) <a href="https://www.learnenough.com/r/css_and_layout/introduction/start_stylin#sec-start_stylin">introduced</a> in <em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em>. In recent years, though, JavaScript’s role has expanded significantly, and it is now often used as a back-end and general-purpose programming language as well.</p>
<aside epub:type="sidebar" class="sidebar1">
<header>
<h1 epub:type="title" class="sb-title1" id="ch1box2"><strong>Box 1.2: What’s in a Name?</strong></h1>
</header>
<p class="poem"><em>What’s in a name? that which we call a rose</em></p>
<p class="poem"><em>By any other name would smell as sweet;</em></p>
<p class="poemr">—William Shakespeare, <em><a href="http://shakespeare.mit.edu/romeo_juliet/">Romeo and Juliet</a></em> <a href="http://shakespeare.mit.edu/romeo_juliet/romeo_juliet.2.2.html#45">2.2.45–46</a></p>
<p class="box-ind">What we now call <em>JavaScript</em> was originally called “LiveScript” by its creators at Netscape, but at the time of its planned release there was an enormous amount of hype about <em><a href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</a></em>, a language developed by <a href="https://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems</a>. In an attempt to capitalize on this hype, Netscape changed LiveScript’s name to “JavaScript”—thereby causing endless confusion for developers wondering what it has to do with Java. (The answer is: nothing.)</p>
<p class="box-ind">Later on, a standardized version of JavaScript called <em><a href="https://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a></em> (pronounced ECK-muh-script) was created in an effort to improve cross-browser compatibility. <a href="https://m.xkcd.com/1475/">Technically</a>, what most people call “JavaScript” is more properly called “ECMAScript”, with JavaScript being only ECMAScript’s most common implementation, but in this tutorial we follow the common convention of using “JavaScript” to refer to the language in general. The main exception to this rule is our occasional use of contracted names like “ES6”, which refers to the sixth edition of ECMAScript (a particularly large and important update, adding many useful features to the ECMAScript/JavaScript standard).</p>
<p class="box-ind">Finally, it’s worth noting that the misspelling “Javascript”, with a lowercase “s”, is extremely common, to the point of being borderline acceptable, even in <a href="https://medium.com/@hpux/rails-5-1-loves-javascript-a1d84d5318b">relatively formal contexts</a>. I frankly find the “Javascript” spelling to be more appealing than the rather pedantic official version, but it is technically wrong, so in this tutorial we’ll stick with “JavaScript”, and be <a href="https://www.youtube.com/watch?v=hou0lU8WMgo">technically correct</a>.</p>
</aside>
<p class="indent"><span epub:type="pagebreak" id="page_6"></span>In order to give you the best broad-range introduction to programming with JavaScript, <em>Learn Enough JavaScript to Be Dangerous</em> uses four main methods:</p>
<ol class="number">
<li><p class="number">Front-end JavaScript programs running in the user’s browser</p></li>
<li><p class="number">An interactive prompt with a Node.js Read-Evaluate-Print Loop (REPL)</p></li>
<li><p class="number">Standalone JavaScript files (including the <a href="https://www.npmjs.com/">Node Package Manager</a>)</p></li>
<li><p class="number">Shell scripts (as <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">introduced</a> (<a href="https://www.learnenough.com/text-editor-tutorial/advanced_text_editing#sec-writing_an_executable_script">https://www.learnenough.com/text-editor-tutorial/advanced_text_editing#sec-writing_an_executable_script</a>) in <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em>)</p></li>
</ol>
<p class="indent">We’ll begin our study of JavaScript with four variations on the time-honored theme of a “<a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">hello, world</a>” program, a tradition that dates back to the <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program#History">early days</a> of the <a href="https://en.wikipedia.org/wiki/C_(programming_language)">C programming language</a>. The main purpose of “hello, world” is to confirm that our system is correctly configured to execute a simple program that prints the string <span class="pd_green"><code><strong>hello, world!</strong></code></span> (or some close variant) to the screen. By design, the program is simple, allowing us to focus on the challenge of getting the program to run in the first place.</p>
<p class="indent">Since the original and still most common application of JavaScript is to write programs that execute on the Web, we’ll start by writing (and deploying!) a program to display a greeting in a web browser. We’ll then write a series of three programs using the JavaScript execution system <a href="https://en.wikipedia.org/wiki/Node.js">Node.js</a>: first in the Node <a href="https://en.wikipedia.org/wiki/Read-eval-print_loop">REPL</a>, then in a JavaScript library file called <span class="pd_green"><code><strong>hello.js</strong></code></span>, and finally in an executable shell script called <span class="pd_green"><code><strong>hello</strong></code></span>.</p>
<p class="indent">Throughout what follows, I’ll assume that you have access to a Unix-compatible system like macOS, Linux, or the <a href="https://www.learnenough.com/dev-environment-tutorial#sec-cloud_ide">Cloud9 IDE</a> (<a href="https://www.learnenough.com/dev-environment-tutorial#sec-cloud_ide">https://www.learnenough.com/dev-environment-tutorial#sec-cloud_ide</a>), as described in the free tutorial <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em> (<a href="https://www.learnenough.com/dev-environment">https://www.learnenough.com/dev-environment</a>). If you don’t have access to such a system, it’s recommended that you follow <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em> before proceeding. (If you use the cloud IDE, I recommend creating a <a href="https://www.learnenough.com/dev-environment-tutorial#fig-cloud9_page_aws">development environment</a> (<a href="https://www.learnenough.com/dev-environment-tutorial#fig-cloud9_page_aws">https://www.learnenough.com/dev-environment-tutorial#fig-cloud9_page_aws</a>) called <span class="pd_green"><code><strong>javascript-tutorial</strong></code></span>.)</p>
<p class="indent"><em>Note for Mac users</em>: Although it shouldn’t matter in <em>Learn Enough JavaScript to Be Dangerous</em>, it is recommended that you use the Bourne-again shell (Bash) rather than the default Z shell to complete this tutorial. To switch your shell to Bash, run <span epub:type="pagebreak" id="page_7"></span><span class="pd_green"><code><strong>chsh -s /bin/bash</strong></code></span> at the command line, enter your password, and restart your terminal program. Any resulting alert messages are safe to ignore. See the Learn Enough blog post “<a href="https://news.learnenough.com/macos-bash-zshell">Using Z Shell on Macs with the Learn Enough Tutorials</a>” (<a href="https://news.learnenough.com/macos-bash-zshell">https://news.learnenough.com/macos-bash-zshell</a>) for more information.</p>
</section>
<section>
<h3 class="h3" id="ch1lev2">1.2 JS in a Web Browser</h3>
<p class="noindent">Even though JavaScript is increasingly used as a general-purpose programming language, it still thrives in its native habitat of the web browser. Accordingly, our first “hello, world” program involves displaying a notification, or <em>alert</em>, created by JavaScript code on a web page.</p>
<p class="indent">We’ll begin by making a directory for this tutorial using <span class="pd_green"><code><strong>mkdir -p</strong></code></span> (which creates intermediate directories as necessary),<sup><a id="ch1fn-2" href="ch01.xhtml#ch1fn_2">2</a></sup> along with an HTML index file using the <span class="pd_green"><code><strong>touch</strong></code></span> command:<sup><a id="ch1fn-3" href="ch01.xhtml#ch1fn_3">3</a></sup></p>
<p class="footnote"><a id="ch1fn_2" href="ch01.xhtml#ch1fn-2">2</a>. If you’re using the cloud IDE recommended in <em><a href="https://www.learnenough.com/dev-environment">Learn Enough Dev Environment to Be Dangerous</a></em>, I suggest replacing the home directory <span class="pd_green"><code><strong>~</strong></code></span> with the directory <span class="pd_green"><code><strong>~/environment</strong></code></span>, though the tutorial should work the same either way.</p>
<p class="footnote"><a id="ch1fn_3" href="ch01.xhtml#ch1fn-3">3</a>. You can find coverage of Unix commands like these in <em><a href="https://www.learnenough.com/command-line">Learn Enough Command Line to Be Dangerous</a></em>.</p>
<p class="codelink"><a href="ch01_images.xhtml#c007pro01" id="c007pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> mkdir -p ~/repos/js_tutorial
<span class="pd_blue"><strong>$</strong></span> <span class="pd_green">cd</span> ~/repos/js_tutorial
<span class="pd_blue"><strong>$</strong></span> touch index.html</pre>
<p class="indent">Next, we’ll follow the practice <a href="https://www.learnenough.com/r/learn_enough_git/getting_started/initializing_the_repo#sec-initializing_the_repo">introduced</a> (<a href="https://www.learnenough.com/git-tutorial/getting_started#sec-initializing_the_repo">https://www.learnenough.com/git-tutorial/getting_started#sec-initializing_the_repo</a>) in <em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em> and put our project under version control with Git:</p>
<p class="codelink"><a href="ch01_images.xhtml#c007pro02" id="c007pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> git init
<span class="pd_blue"><strong>$</strong></span> git add -A
<span class="pd_blue"><strong>$</strong></span> git commit -m <span class="pd_red">"Initialize repository"</span></pre>
<p class="indent">At this point, we’re ready to make our first edit. We’ll start in familiar territory by adding a simple HTML skeleton (without JavaScript) to our index page, as shown in <a href="ch01.xhtml#ch1list1">Listing 1.1</a>. The result appears in <a href="ch01.xhtml#ch1fig2">Figure 1.2</a>.</p>
<figure class="figure" id="ch1fig2">
<img src="graphics/01fig02.jpg" alt="images" width="715" height="544"/>
<figcaption>
<p class="title-f"><strong>Figure 1.2:</strong> Our initial static index page.</p>
</figcaption>
</figure>
<p class="listing" id="ch1list1"><span epub:type="pagebreak" id="page_8"></span><strong>Listing 1.1:</strong> An HTML skeleton.<br/><code><em><a href="http://index.html">index.html</a></em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#c01lis01" id="c01lis01a">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>title</strong></span>&gt;Learn Enough JavaScript&lt;/<span class="pd_green1"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="g1">charset=</span><span class="pd_red">"utf-8"</span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h1</strong></span>&gt;Hello, world!&lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>p</strong></span>&gt;This page includes an alert written in JavaScript.&lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_9"></span>This page’s paragraph is a little lie, because we haven’t yet added any JavaScript. Let’s change that by putting in a <span class="pd_green"><code><strong>script</strong></code></span> tag containing a single command:</p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>script</strong></span>&gt;
  alert(<span class="pd_red">"hello, world!"</span>);
&lt;/<span class="pd_green1"><strong>script</strong></span>&gt;</pre>
<p class="noindent">Here we’ve used <span class="pd_green"><code><strong>alert</strong></code></span>, which is a JavaScript <em>function</em>, a piece of code that takes in arguments and performs some task with them. As shown in <a href="ch01.xhtml#ch1fig3">Figure 1.3</a>, the anatomy of a JavaScript function call is the function’s name, an open parenthesis, zero or more arguments, a closing parenthesis, and a semicolon to end the line. (We’ll learn more about functions, including how to define our own, in <a href="ch05.xhtml#ch05">Chapter 5</a>.)</p>
<figure class="figure" id="ch1fig3">
<img src="graphics/01fig03.jpg" alt="images" width="729" height="222"/>
<figcaption>
<p class="title-f"><strong>Figure 1.3:</strong> The anatomy of a JavaScript function call.</p>
</figcaption>
</figure>
<p class="indent">In this case, <span class="pd_green"><code><strong>alert</strong></code></span> takes in a <em>string</em> (<a href="ch02.xhtml#ch02">Chapter 2</a>) and displays it as an alert in the browser. To see this in action, let’s add the <span class="pd_green"><code><strong>alert</strong></code></span> code to our index page, as shown in <a href="ch01.xhtml#ch1list2">Listing 1.2</a>. Technically, we could place the <span class="pd_green"><code><strong>script</strong></code></span> tag anywhere on our page, but it’s conventional to place it in the <span class="pd_green"><code><strong>head</strong></code></span> of the document (especially when including external JavaScript files, as we’ll see in <a href="ch05.xhtml#ch5lev2">Section 5.2</a>).</p>
<p class="listing" id="ch1list2"><strong>Listing 1.2:</strong> “Hello, world!” in JavaScript.<br/><code><em><a href="http://index.html">index.html</a></em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#c01lis02" id="c01lis02a">Click here to view code image</a></p>
<pre class="pre2"><em><span class="pd_orange">&lt;!DOCTYPE html&gt;</span></em>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>title</strong></span>&gt;Learn Enough JavaScript&lt;/<span class="pd_green1"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="g1">charset</span><span class="gray">=</span><span class="pd_red">"utf-8"</span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>script</strong></span>&gt;</span>
<span class="bg1">      alert(<span class="pd_red">"hello, world!"</span>);</span>
<span epub:type="pagebreak" id="page_10"></span><span class="bg1">    &lt;/<span class="pd_green2"><strong>script</strong></span>&gt;</span>
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h1</strong></span>&gt;Hello, world!&lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>p</strong></span>&gt;This page includes an alert written in JavaScript.&lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent">Upon refreshing the page, our browser now displays a friendly greeting (<a href="ch01.xhtml#ch1fig4">Figure 1.4</a>).</p>
<figure class="figure" id="ch1fig4">
<img src="graphics/01fig04.jpg" alt="images" width="723" height="551"/>
<figcaption>
<p class="title-f"><strong>Figure 1.4:</strong> <a href="https://www.learnenough.com/html">The result of a “hello, world!” alert</a>.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="ch1lev2sec1">1.2.1 Deployment</h4>
<p class="noindent">As a final step, let’s deploy our incredibly fancy JavaScript app to the live Web. Our technique is the same one covered in <em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em>, <em><a href="https://www.learnenough.com/html">Learn Enough <span epub:type="pagebreak" id="page_11"></span>HTML to Be Dangerous</a></em>, and <em><a href="https://www.learnenough.com/css-and-layout">Learn Enough CSS &amp; Layout to Be Dangerous</a></em>, namely, a free site hosted at <a href="https://pages.github.com/">GitHub Pages</a>.</p>
<p class="indent">Deploying at even this early stage is a powerful proof-of-concept—all kidding aside about our “incredibly fancy” app, we really are deploying a live website, which was an enormously difficult step only a few years ago, and yet now we can do it in seconds.</p>
<p class="indent">First, let’s commit the changes made in <a href="ch01.xhtml#ch1list2">Listing 1.2</a>:</p>
<p class="codelink"><a href="ch01_images.xhtml#c011pro01" id="c011pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> git commit -am <span class="pd_red">"Add a JavaScript 'hello, world'"</span></pre>
<p class="noindent">The next step is to create a new remote repository at GitHub, as shown in <a href="ch01.xhtml#ch1fig5">Figure 1.5</a>. (If any of these steps are unfamiliar, consult <em><a href="https://www.learnenough.com/git">Learn Enough Git to Be Dangerous</a></em> for details.)</p>
<figure class="figure" id="ch1fig5">
<img src="graphics/01fig05.jpg" alt="images" width="729" height="560"/>
<figcaption>
<p class="title-f"><strong>Figure 1.5:</strong> Creating a new repository at GitHub.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_12"></span>Next, configure your local system with the remote repository and push it up (taking care to fill in <span class="pd_green"><code><strong>&lt;username&gt;</strong></code></span> with your GitHub username and using a <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">GitHub personal access token</a> when prompted for a password) and then push it up:</p>
<p class="codelink"><a href="ch01_images.xhtml#c012pro01" id="c012pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> git remote add origin https://github.com/&lt;username&gt;/js_tutorial.git
<span class="pd_blue"><strong>$</strong></span> git push -u origin main</pre>
<p class="noindent">Because videos are relatively hard to update, the screencasts that accompany this book use <span class="pd_green"><code><strong>master</strong></code></span>, which was the default branch name for the first 15+ years of Git’s existence, but the text has been updated to use <span class="pd_green"><code><strong>main</strong></code></span>, which is the current preferred default. See the Learn Enough blog post “Default Git Branch Name with Learn Enough and the Rails Tutorial” (<a href="https://news.learnenough.com/default-git-branch-name-with-learn-enough-and-the-rails-tutorial">https://news.learnenough.com/default-git-branch-name-with-learn-enough-and-the-rails-tutorial</a>) for more information.</p>
<p class="indent">To complete the deployment, all we need to do is edit the Settings (<a href="ch01.xhtml#ch1fig6">Figure 1.6</a>) and configure our site to be served off the <span class="pd_green"><code><strong>main</strong></code></span> branch by GitHub Pages, as shown in <a href="ch01.xhtml#ch1fig7">Figures 1.7</a> and <a href="ch01.xhtml#ch1fig8">1.8</a>.</p>
<figure class="figure" id="ch1fig6">
<img src="graphics/01fig06.jpg" alt="images" width="712" height="520"/>
<figcaption>
<p class="title-f"><strong>Figure 1.6:</strong> Editing the settings for a GitHub repository.</p>
</figcaption>
</figure>
<figure class="figure" id="ch1fig7">
<img src="graphics/01fig07.jpg" alt="images" width="707" height="537"/>
<figcaption>
<p class="title-f"><strong>Figure 1.7:</strong> Serving our website from the <span class="pd_green"><code><strong>main</strong></code></span> branch.</p>
</figcaption>
</figure>
<figure class="figure" id="ch1fig8">
<img src="graphics/01fig08.jpg" alt="images" width="719" height="533"/>
<figcaption>
<p class="title-f"><strong>Figure 1.8:</strong> Saving the new GitHub Pages settings.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_13"></span>With that, you can now visit your site at the following URL:<sup><a id="ch1fn-4" href="ch01.xhtml#ch1fn_4">4</a></sup></p>
<p class="footnote"><a id="ch1fn_4" href="ch01.xhtml#ch1fn-4">4</a>. To learn how to host a GitHub Pages site using a custom domain, see the free tutorial <em><a href="https://www.learnenough.com/custom-domains">Learn Enough Custom Domains to Be Dangerous</a></em> (<a href="https://www.learnenough.com/custom-domains">https://www.learnenough.com/custom-domains</a>).</p>
<p class="codelink"><a href="ch01_images.xhtml#c013pro01" id="c013pro01a">Click here to view code image</a></p>
<pre class="pre1">https://&lt;username&gt;.github.io/js_tutorial</pre>
<p class="noindent">The result should be the same “hello, world!” greeting seen in <a href="ch01.xhtml#ch1fig4">Figure 1.4</a>, except now on the live Web (<a href="ch01.xhtml#ch1fig9">Figure 1.9</a>). “<a href="https://www.youtube.com/watch?v=xos2MnVxe-c">It’s alive!</a>” (<a href="ch01.xhtml#ch1fig10">Figure 1.10</a>).<sup><a id="ch1fn-5" href="ch01.xhtml#ch1fn_5">5</a></sup></p>
<p class="footnote"><a id="ch1fn_5" href="ch01.xhtml#ch1fn-5">5</a>. Image courtesy of Niday Picture Library/Alamy Stock Photo.</p>
<figure class="figure" id="ch1fig9">
<img src="graphics/01fig09.jpg" alt="images" width="722" height="543"/>
<figcaption>
<p class="title-f"><strong>Figure 1.9:</strong> A JavaScript “hello, world!” page on the live Web.</p>
</figcaption>
</figure>
<figure class="figure" id="ch1fig10">
<img src="graphics/01fig10.jpg" alt="images" width="240" height="305"/>
<figcaption>
<p class="title-f"><strong>Figure 1.10:</strong> Bringing a site to life is easier than it used to be.</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="ch1lev2sec2">1.2.2 Exercise</h4>
<ol class="number">
<li><p class="number">What happens if you put a second alert after the first one?</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="ch1lev3"><span epub:type="pagebreak" id="page_14"></span>1.3 JS in a REPL</h3>
<p class="noindent">Our next two closely related examples of a “hello, world” program involve a Read-Eval-Print Loop, or <em>REPL</em> (pronounced “repple”). A REPL is a program that <strong>read</strong>s input, <strong>eval</strong>uates it, <strong>print</strong>s out the result (if any), and then <strong>loop</strong>s back to the read step. Most modern programming languages provide a REPL, and JavaScript is no exception. In fact, as hinted above, it actually provides two.</p>
<section>
<h4 class="h4" id="ch1lev3sec1">1.3.1 Browser Console</h4>
<p class="noindent">Our first example of a REPL is the browser <em>console</em>, which is available in most modern browsers as part of the standard suite of developer tools. Whether these tools are available by default depends on the browser you use; they’re included automatically <span epub:type="pagebreak" id="page_15"></span><span epub:type="pagebreak" id="page_16"></span>in Google Chrome, for example, but in Safari they have to be <a href="https://developer.apple.com/safari/tools/">installed</a>. Use your technical sophistication (<a href="ch01.xhtml#ch1box1">Box 1.1</a>) to figure out the setup for your browser of choice.</p>
<p class="indent">The developer tools can typically be accessed by right-clicking (or Ctrl-clicking) in your browser window and selecting Inspect Element to open the web inspector (<a href="ch01.xhtml#ch1fig11">Figure 1.11</a>). The result should look something like <a href="ch01.xhtml#ch1fig12">Figure 1.12</a>.</p>
<figure class="figure" id="ch1fig11">
<img src="graphics/01fig11.jpg" alt="images" width="580" height="445"/>
<figcaption>
<p class="title-f"><strong>Figure 1.11:</strong> Activating the developer tools via Inspect Element.</p>
</figcaption>
</figure>
<figure class="figure" id="ch1fig12">
<img src="graphics/01fig12.jpg" alt="images" width="722" height="549"/>
<figcaption>
<p class="title-f"><strong>Figure 1.12:</strong> The browser developer tools.</p>
</figcaption>
</figure>
<p class="indent">At this point, we’re ready to access the console by clicking on the corresponding tab in the developer tools, as shown in <a href="ch01.xhtml#ch1fig13">Figure 1.13</a>. As we’ll see in <a href="ch05.xhtml#ch5lev2">Section 5.2</a>, the console is a valuable debugging tool, as it has access to the full DOM and other aspects of our application’s environment, as well as displaying any warnings or errors that might affect our application. In particular, note that <a href="ch01.xhtml#ch1fig13">Figure 1.13</a> shows a warning <span epub:type="pagebreak" id="page_17"></span>(regarding a missing <span class="pd_green"><code><strong>favicon.ico</strong></code></span> file); knowing when you can and can’t safely ignore such warnings is a hallmark of technical sophistication. (In this case, it’s safe to ignore. In addition, your setup may or may not show the exact same error. Is that a problem?)</p>
<figure class="figure" id="ch1fig13">
<img src="graphics/01fig13.jpg" alt="images" width="723" height="551"/>
<figcaption>
<p class="title-f"><strong>Figure 1.13:</strong> The interactive JavaScript console.</p>
</figcaption>
</figure>
<p class="indent">We’re finally ready to write our “hello, world” program using the console REPL. Our method is to use <span class="pd_green"><code><strong>console</strong></code></span>, which is a JavaScript <em>object</em> that represents the console and its associated data, functions, etc. In particular, the <span class="pd_green"><code><strong>console</strong></code></span> object has a function called <span class="pd_green"><code><strong>log</strong></code></span>, which prints out (“logs”) its argument to the screen. We can access it using a “dot” notation that has become standard across a wide variety of <em>object-oriented</em> languages, as seen in <a href="ch01.xhtml#ch1list3">Listing 1.3</a>.</p>
<p class="listing" id="ch1list3"><span epub:type="pagebreak" id="page_18"></span><strong>Listing 1.3:</strong> A “hello, world” command in the console.</p>
<p class="codelink"><a href="ch01_images.xhtml#c01lis03" id="c01lis03a">Click here to view code image</a></p>
<pre class="pre2"><span class="gray">&gt;</span> console.log(<span class="pd_red">"hello, world!"</span>);</pre>
<p class="noindent">In the context of objects, a function like <span class="pd_green"><code><strong>log</strong></code></span> called using the dot notation is often called a <em>method</em>.</p>
<p class="indent">At this point, you should type the <span class="pd_green"><code><strong>console.log</strong></code></span> command into your browser console, noting that the <span class="pd_green"><code><strong>&gt;</strong></code></span> in <a href="ch01.xhtml#ch1list3">Listing 1.3</a> represents the console prompt itself, and shouldn’t be typed literally. The result should resemble <a href="ch01.xhtml#ch1fig14">Figure 1.14</a>. (We’ll explain the meaning of <span class="pd_green"><code><strong>undefined</strong></code></span> in <a href="ch02.xhtml#ch2lev3">Section 2.3</a>.)</p>
<figure class="figure" id="ch1fig14">
<img src="graphics/01fig14.jpg" alt="images" width="729" height="164"/>
<figcaption>
<p class="title-f"><strong>Figure 1.14:</strong> Printing out “hello, world!” in the browser console.</p>
</figcaption>
</figure>
<p class="indent">Alert readers (no pun intended) might have noticed that the command in <a href="ch01.xhtml#ch1list3">Listing 1.3</a> includes a terminating semicolon (<a href="ch01.xhtml#ch1fig3">Figure 1.3</a>), whereas the command shown in <a href="ch01.xhtml#ch1fig14">Figure 1.14</a> doesn’t. This discrepancy is included in order to show that <span epub:type="pagebreak" id="page_19"></span>the two commands work the same, and it is common to omit the semicolon when using an interactive console. For consistency, we’ll generally include the semicolon throughout the rest of this tutorial (even in consoles), but it’s good to be aware of both conventions in case you see something different in other people’s code.</p>
</section>
<section>
<h4 class="h4" id="ch1lev3sec2">1.3.2 Node Prompt</h4>
<p class="noindent">Every web browser in the known Universe can execute JavaScript programs, but part of treating JavaScript as a general-purpose programming language means running it at the command line as well. This means installing and using a command-line program capable of evaluating JavaScript programs, and nowadays the most popular choice is abundantly clear: <a href="https://nodejs.org/en/">Node.js</a> (usually pronounced “node jay-ess”, and often called “Node” for short).</p>
<p class="indent">It’s possible that Node.js is already installed on your system. The easiest way to check is to use the <span class="pd_green"><code><strong>which</strong></code></span> command (as <a href="https://www.learnenough.com/r/learn_enough_command_line/inspecting_files/downloading_a_file#sec-downloading_a_file">described</a> (<a href="https://www.learnenough.com/command-line-tutorial/inspecting_files#sec-downloading_a_file">https://www.learnenough.com/command-line-tutorial/inspecting_files#sec-downloading_a_file</a>) in <em><a href="https://www.learnenough.com/command-line">Learn Enough Command Line to Be Dangerous</a></em>):</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> which node
<span class="pd_green1">/usr/local/bin/node</span></pre>
<p class="noindent">If the path to a <span class="pd_green"><code><strong>node</strong></code></span> executable is displayed, you’re good to go.</p>
<p class="indent">If Node isn’t present on your system, you should install it at this point. If you’re using a Macintosh with <a href="https://www.learnenough.com/dev-environment-tutorial#sec-homebrew">Homebrew</a> (<a href="https://www.learnenough.com/dev-environment-tutorial#sec-homebrew">https://www.learnenough.com/dev-environment-tutorial#sec-homebrew</a>) installed, you can run</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> brew install node</pre>
<p class="noindent"><span epub:type="pagebreak" id="page_20"></span>to get the latest version. If you already have it installed, run</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> brew upgrade node</pre>
<p class="noindent">instead.</p>
<p class="indent">Otherwise, go to the <a href="https://nodejs.org/">Node.js website</a> (<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>) and follow the download and installation instructions for your system.</p>
<p class="indent">Once it’s installed, running the Node.js REPL is easy—just run the <span class="pd_green"><code><strong>node</strong></code></span> command at the command line, as seen in <a href="ch01.xhtml#ch1list4">Listing 1.4</a>.</p>
<p class="listing" id="ch1list4"><strong>Listing 1.4:</strong> Bringing up the Node prompt at the command line.</p>
<pre class="pre2"><span class="pd_blue"><strong>$</strong></span> node
<span class="pd_green">&gt;</span></pre>
<p class="noindent">As with the browser console, <span class="pd_green"><code><strong>&gt;</strong></code></span> represents the Node prompt, and like the console it allows us to run commands interactively. (For simplicity, we’ll sometimes use “console” to refer either to the browser console or to the Node REPL.) In particular, to replicate the “hello, world” program from <a href="ch01.xhtml#ch1list3">Listing 1.3</a>, we can simply type the same command at the Node prompt, as follows:</p>
<p class="codelink"><a href="ch01_images.xhtml#c020pro01" id="c020pro01a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> console.log(<span class="pd_red">"hello, world!"</span>);
hello, world<span class="gray">!</span></pre>
<p class="noindent">(Depending on your system, you might see <span class="pd_green"><code><strong>undefined</strong></code></span> appear as well; we’ll discuss this detail in <a href="ch02.xhtml#ch2lev3">Section 2.3</a>.)</p>
<p class="indent">That’s it! In both the browser console and Node prompt, we can print “hello, world!” with this single command:</p>
<p class="codelink"><a href="ch01_images.xhtml#c020pro02" id="c020pro02a">Click here to view code image</a></p>
<pre class="pre1"><span class="gray">&gt;</span> console.log(<span class="pd_red">"hello, world!"</span>);</pre>
</section>
<section>
<h4 class="h4" id="ch1lev3sec3">1.3.3 Exercise</h4>
<ol class="number">
<li><p class="number">What happens if you run an <span class="pd_green"><code><strong>alert</strong></code></span> in the browser console? What about in the Node console?</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="ch1lev4"><span epub:type="pagebreak" id="page_21"></span>1.4 JS in a File</h3>
<p class="noindent">As convenient as it is to be able to explore JavaScript interactively, most Real Programming™ takes place in text files created with a text editor. In this section, we’ll show how to create and execute a JavaScript file with the same “hello, world” program we’ve discussed in the previous two sections. The result will be a simplified prototype of the reusable JavaScript files we’ll start learning about in <a href="ch05.xhtml#ch5lev2">Section 5.2</a>.</p>
<p class="indent">We’ll start by creating a JavaScript file (with a <span class="pd_green"><code><strong>.js</strong></code></span> file extension) for our <span class="pd_green"><code><strong>hello</strong></code></span> program:</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> touch hello.js</pre>
<p class="indent">Next, using our favorite <a href="https://learnenough.com/text-editor">text editor</a>, we’ll fill the file with the contents shown in <a href="ch01.xhtml#ch1list5">Listing 1.5</a>. Note that the code is exactly the same as in <a href="ch01.xhtml#ch1list3">Listing 1.3</a> and subsequent examples, with the difference being that in a JavaScript file there’s no command prompt <span class="pd_green"><code><strong>&gt;</strong></code></span>.</p>
<p class="listing" id="ch1list5"><strong>Listing 1.5:</strong> A “hello, world” program in a JavaScript file.<br/><code><em>hello.js</em></code></p>
<pre class="pre2">console.log(<span class="pd_red">"hello, world!"</span>);</pre>
<p class="indent">At this point, we’re ready to execute our program using the same <span class="pd_green"><code><strong>node</strong></code></span> command we used in <a href="ch01.xhtml#ch1list4">Listing 1.4</a> to bring up the Node prompt. The only difference is that this time we include an argument with the name of our file:</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> node hello.js
<span class="pd_green">hello, world!</span></pre>
<p class="noindent">As before, the result is to print “hello, world!”, this time to the terminal screen. (Inside the program, the return value of <span class="pd_green"><code><strong>console.log</strong></code></span> is <span class="pd_green"><code><strong>undefined</strong></code></span> as before, but it’s not displayed since, unlike with interactive prompts, return values aren’t displayed by command-line programs.)</p>
<p class="indent">Although this example is simple, it’s a huge step forward, as we’re now in the position to write JavaScript programs much longer than could comfortably fit in an interactive console or Node session.</p>
<section>
<h4 class="h4" id="ch1lev4sec1"><span epub:type="pagebreak" id="page_22"></span>1.4.1 Exercise</h4>
<ol class="number">
<li><p class="number">What happens if you give <span class="pd_green"><code><strong>console.log</strong></code></span> two arguments, as in <a href="ch01.xhtml#ch1list6">Listing 1.6</a>?</p></li>
</ol>
<p class="listing" id="ch1list6"><strong>Listing 1.6:</strong> Using two arguments.<br/><code><em>hello.js</em></code></p>
<p class="codelink"><a href="ch01_images.xhtml#c01lis06" id="c01lis06a">Click here to view code image</a></p>
<pre class="pre2">console.log(<span class="pd_red">"hello, world!"</span>, <span class="pd_red">"how's it going?"</span>);</pre>
</section>
</section>
<section>
<h3 class="h3" id="ch1lev5">1.5 JS in a Shell Script</h3>
<p class="noindent">Although the code in <a href="ch01.xhtml#ch1lev4">Section 1.4</a> is perfectly functional, when writing a program to be executed in the command line <a href="https://www.learnenough.com/r/learn_enough_command_line/basics/man_pages#sec-man_pages">shell</a> (<a href="https://www.learnenough.com/command-line-tutorial/basics#sec-man_pages">https://www.learnenough.com/command-line-tutorial/basics#sec-man_pages</a>) it’s often better to use an <em>executable script</em> of the sort <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">discussed</a> in <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em>. Now that JavaScript can be used so effectively outside the browser, it has joined more traditional “scripting languages” like Perl, Python, and Ruby as an excellent choice for writing such shell scripts.</p>
<p class="indent">Let’s see how to make an executable script using Node. We’ll start by creating a file called <span class="pd_green"><code><strong>hello</strong></code></span>:</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> touch hello</pre>
<p class="noindent">Note that we <em>didn’t</em> include the <span class="pd_green"><code><strong>.js</strong></code></span> extension—this is because the filename itself is the user interface, and there’s no reason to expose the implementation language to the user. Indeed, there’s a reason not to: By using the name <span class="pd_green"><code><strong>hello</strong></code></span>, we give ourselves the option to rewrite our script in a different language down the line, without changing the command our program’s users have to type. (Not that it matters in this simple case, but the principle should be clear. We’ll see a more realistic example in <a href="ch10.xhtml#ch10lev3">Section 10.3</a>.)</p>
<p class="indent">There are two steps to writing a working script. The first is to use the same command we’ve seen before (<a href="ch01.xhtml#ch1list5">Listing 1.5</a>), preceded by a “<a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">shebang</a>” line telling our system to use <span class="pd_green"><code><strong>node</strong></code></span> to execute the script.</p>
<p class="indent">The exact shebang line is system-dependent; you can find the proper executable path for your system by running the <span class="pd_green"><code><strong>which</strong></code></span> command:</p>
<pre class="pre1"><span epub:type="pagebreak" id="page_23"></span><span class="pd_blue"><strong>$</strong></span> which node
<span class="pd_green1">/usr/local/bin/node</span></pre>
<p class="noindent">Using this command for the shebang line in the <span class="pd_green"><code><strong>hello</strong></code></span> file gives the shell script shown in <a href="ch01.xhtml#ch1list7">Listing 1.7</a>.</p>
<p class="listing" id="ch1list7"><strong>Listing 1.7:</strong> A “hello, world” shell script.<br/><code><em>hello</em></code></p>
<pre class="pre2"><span class="pd_blue1"><em>#!/usr/local/bin/node</em></span>

console.log(<span class="pd_red">"hello, world!"</span>);</pre>
<p class="indent">We could execute this file directly using the <span class="pd_green"><code><strong>node</strong></code></span> command as in <a href="ch01.xhtml#ch1lev4">Section 1.4</a>, but a true shell script should be executable without the use of an auxiliary program. (That’s what the shebang line is for.) Instead, we’ll follow the second of the two steps mentioned above and make the file itself executable using the <span class="pd_green"><code><strong>chmod</strong></code></span> (“change mode”) command combined with <span class="pd_green"><code><strong>+x</strong></code></span> (“plus executable”):</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> chmod +x hello</pre>
<p class="indent">At this point, the file should be executable, and we can execute it by preceding the command with <span class="pd_green"><code><strong>./</strong></code></span>, which tells our system to look in the current directory (dot = <span class="pd_green"><code><strong>.</strong></code></span>) for the executable file. (Putting the <span class="pd_green"><code><strong>hello</strong></code></span> script on the <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#code-export_path">PATH</a> (<a href="https://www.learnenough.com/text-editor-tutorial/advanced_text_editing#code-export_path">https://www.learnenough.com/text-editor-tutorial/advanced_text_editing#code-export_path</a>), so that it can be called from any directory, is left as an exercise.) The result looks like this:</p>
<pre class="pre1"><span class="pd_blue"><strong>$</strong></span> ./hello
<span class="pd_green1">hello, world!</span></pre>
<p class="noindent">Success! We’ve now written a working JavaScript shell script suitable for extension and elaboration. As mentioned briefly above, we’ll see an example of a real-life utility script in <a href="ch10.xhtml#ch10lev3">Section 10.3</a>.</p>
<p class="indent">Throughout the rest of this tutorial, we’ll mainly use the Node REPL for initial investigations, but the eventual goal will almost always be to create a file (either pure code or HTML) containing JavaScript.</p>
<section>
<h4 class="h4" id="ch1lev5sec1"><span epub:type="pagebreak" id="page_24"></span>1.5.1 Exercise</h4>
<ol class="number">
<li><p class="number">By moving the file or changing your system’s configuration, add the <span class="pd_green"><code><strong>hello</strong></code></span> script to your environment’s PATH. (You may find the <a href="https://www.learnenough.com/r/learn_enough_text_editor/advanced_text_editing/writing_an_executable_script#sec-writing_an_executable_script">steps</a> in <em><a href="https://www.learnenough.com/text-editor">Learn Enough Text Editor to Be Dangerous</a></em> helpful.) Confirm that you can run <span class="pd_green"><code><strong>hello</strong></code></span> without prepending <span class="pd_green"><code><strong>./</strong></code></span> to the command name.</p></li>
</ol>
</section>
</section>
</section>
</div>
</div>
</body>
</html>