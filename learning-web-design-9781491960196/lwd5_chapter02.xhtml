<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer047" class="ch02">
			<p id="_idParaDest-10" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor018"></a>2. How the Web Works</p>
		</div>
		<div id="_idContainer048" class="ch02">
			<h1 class="chapterLabel">2</h1>
		</div>
		<div id="_idContainer049" class="ch02">
			<h1 class="chapterTitle"><a id="_idTextAnchor019"></a><a id="_idTextAnchor020"></a>How the Web Works</h1>
		</div>
		<div id="_idContainer050" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In this chapter</p>
			<p class="chapterContents">An explanation of the web as it relates to the internet</p>
			<p class="chapterContents">The role of the server</p>
			<p class="chapterContents">The role of the browser</p>
			<p class="chapterContents">URLs and their components</p>
			<p class="chapterContents">The anatomy of a web page</p>
		</div>
		<div id="_idContainer077" class="ch02">
			<p class="body">I got started in <a id="_idIndexMarker128"></a>web design in early 1993—pretty close to the start of the web itself. That’s a quarter of a century ago (gasp!), but I still distinctly remember the first time I looked at a web page. It was difficult to tell where the information was coming from and how it all worked.</p>
			<p class="body">This chapter sorts out the pieces and introduces some basic terminology. We’ll start with the big picture and work down to specifics.</p>
			<h1 id="_idParaDest-11" class="HeadA"><a id="_idTextAnchor021"></a>The Internet Versus the Web</h1>
			<p class="body">No, it’s not a battle to the death, just an opportunity to point out the distinction between two words that are increasingly being used interchangeably. </p>
			<p class="body">The <span class="FirstTerm">internet</span> is <a id="_idIndexMarker129"></a>an international network of connected computers. No company owns the internet; it is a cooperative effort governed by a system of standards and rules. The purpose of connecting computers together, of course, is to share information. There are many ways information can be passed between computers, including email (POP3/IMAP/SMTP), file transfer (FTP), secure shell (SSH), and many more specialized modes upon which the internet is built. These standardized methods for transferring data or documents over a network are known <a id="_idIndexMarker130"></a>as <span class="FirstTerm">protocols</span>.</p>
			<p class="body">The<span class="FirstTerm"> web</span> (originally called the World Wide Web, thus the “www” in site addresses) is just one of the ways information can be shared over the internet. It is unique in that it allows documents to be linked to one another via <span class="FirstTerm">hypertext</span> links—<a id="_idIndexMarker131"></a>thus forming a huge “web” of connected information. The web uses a protocol <a id="_idIndexMarker132"></a>called <span class="FirstTerm">HTTP</span> (<span class="FirstTerm">HyperText Transfer Protocol</span>). That acronym should look familiar because it is the first four letters of nearly all website addresses, as we’ll discuss in an upcoming section.</p>
			<div>
				<div id="_idContainer051" class="callout">
					<p class="callout">The web is a subset of the internet. It is just one of many ways information can be transferred over networked computers.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer052" class="sidebar">
					<h5 class="SidebarTitle">A Brief History of the Web</h5>
					<p class="SidebarBody">The web was born in a<a id="_idIndexMarker133"></a> particle physics laboratory (CERN) in Geneva, Switzerland, in 1989. There a computer specialist named <a id="_idIndexMarker134"></a>Tim Berners-Lee first proposed a system of information management that used a “hypertext” process to link related documents over a network. He and his partner, <a id="_idIndexMarker135"></a>Robert Cailliau, created a prototype and released it for review. For the first several years, web pages were text-only. It’s difficult to believe that in 1992, the world had only about 50 web servers, total.</p>
					<p class="SidebarBody">The real boost to the web’s popularity came in 1992 when the first graphical <a id="_idIndexMarker136"></a>browser (NCSA Mosaic) was introduced, and the web broke out of the realm of scientific research into mass media. The ongoing development of web technologies is overseen by the <a id="_idIndexMarker137"></a>World Wide Web Consortium (W3C). </p>
					<p class="SidebarBody">If you want to dig deeper into the web’s history, check out the W3C’s History Archives at <a href="http://www.w3.org/History.html"><span class="URL-Email--Sidebar-">www.w3.org/History.html</span></a>.</p>
					<p class="SidebarBody">FUN FACT: If you look at that page, you’ll see a July 1993 entry for the first “WWW Wizards Workshop.” Although I did not attend that meeting, I <em class="Emphasis">did</em> design the commemorative t-shirt! </p>
				</div>
			</div>
			<h1 id="_idParaDest-12" class="HeadA"><a id="_idTextAnchor022"></a>Serving Up Your Information</h1>
			<p class="body">Let’s talk more about the computers that make up the internet. Because they “serve up” documents upon request, these computers are known <a id="_idIndexMarker138"></a>as <span class="FirstTerm">servers</span>. More accurately, the server is the software (not the computer itself) that allows the computer to communicate with other computers; however, it is common to use the word “server” to refer to the computer as well. The role of server software is to wait for a request for information, and then retrieve and send that information back as quickly as possible.</p>
			<p class="body">There’s nothing special about the computers themselves…picture anything from a high-powered Unix machine to a humble personal computer. It’s the server software that makes it all happen. In order for a computer to be part of the web, it must be running special web server software that allows it to handle <a id="_idIndexMarker139"></a><a id="_idIndexMarker140"></a><a id="_idIndexMarker141"></a>HyperText Transfer Protocol transactions. Web servers are also called <span class="FirstTerm">HTTP servers</span>. </p>
			<p class="body">There are many server software options out there, but the two most popular are <a id="_idIndexMarker142"></a><a id="_idIndexMarker143"></a>Apache (<span class="FirstTerm">open source</span> software) and <a id="_idIndexMarker144"></a><a id="_idIndexMarker145"></a><a id="_idIndexMarker146"></a>Microsoft Internet Information Services (IIS). Apache is freely available for <a id="_idIndexMarker147"></a>Unix-based computers and comes installed on <a id="_idIndexMarker148"></a>Macs running macOS. There is a <a id="_idIndexMarker149"></a>Windows version as well. Microsoft IIS is part of Microsoft’s family of server solutions.</p>
			<p class="body">Every computer and device (router, smartphone, car, etc.) connected to the internet is assigned a unique <a id="_idIndexMarker150"></a>numeric <span class="FirstTerm">IP address</span> (“IP” stands for “Internet Protocol”). For example, as I write this, the computer that hosts <a href="http://oreilly.com"><span class="URL-Email">oreilly.com </span></a>has the IP address 199.27.145.64. All those numbers can be dizzying, so fortunately, the <span class="FirstTerm">Domain Name System (DNS)</span> <a id="_idIndexMarker151"></a><a id="_idIndexMarker152"></a>was developed to allow us to refer to that server by <a id="_idIndexMarker153"></a>its <span class="FirstTerm">domain name</span>, “oreilly.com”, as well. The numeric IP address is useful for computer software, while the domain name is more accessible to humans. Matching the text domain names to their respective numeric IP addresses is the job of a <a id="_idIndexMarker154"></a>separate <span class="FirstTerm">DNS server</span>. If you think of an IP address as a telephone number, the DNS server would be the phonebook. </p>
			<p class="body">It is possible to configure your web server so that more than one domain name is mapped to a single IP address, allowing several sites to share a single server. </p>
			<div>
				<div id="_idContainer053" class="sidebar">
					<h5 class="SidebarSeries">TERMINOLOGY</h5>
					<h5 class="SidebarTitle">Open Source</h5>
					<p class="SidebarBody">Open source software is developed as a collaborative effort with the intent to make its source code available to other programmers for use and modification. Open source programs are usually free to use.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer054" class="sidebar">
					<h5 class="SidebarSeries">Terminology</h5>
					<h5 class="SidebarTitle">Intranets and Extranets</h5>
					<p class="SidebarBody">When you think of a website, you generally assume that it is accessible to anyone surfing the web. However, many organizations take advantage of the awesome information sharing and gathering power of websites to exchange information just within their own network. These special web-based networks are called <span class="FirstTerm">intranets</span>. <a id="_idIndexMarker155"></a>They are created and function like ordinary websites, but they use special security devices (called<a id="_idIndexMarker156"></a> <span class="FirstTerm">firewalls</span>) that prevent the outside world from seeing them. Intranets have lots of uses, such as sharing human resource information or providing access to inventory databases.</p>
					<p class="SidebarBody">An <span class="FirstTerm">extranet</span> is <a id="_idIndexMarker157"></a>like an intranet, but it allows access to select users outside of the organization. For example, a manufacturing company may provide its customers with passwords that allow them to check the status of their orders in the company’s orders database. Passwords determine which slice of the company’s information is accessible. </p>
				</div>
			</div>
			<h1 id="_idParaDest-13" class="HeadA"><a id="_idTextAnchor023"></a>A Word About Browsers</h1>
			<p class="body">We now know that the server does the servin’, but what about the other half of the equation? The software that does the requesting is called the <span class="FirstTerm">client</span>. People use desktop browsers, mobile browsers, and other assistive technologies (such as screen readers) as clients to access documents on the web. The server returns the documents for the browser (also referred to as the <span class="FirstTerm">user agent</span> in <a id="_idIndexMarker158"></a>technical circles) to display. </p>
			<div>
				<div id="_idContainer055" class="sidebar">
					<h5 class="SidebarSeries">Terminology</h5>
					<h5 class="SidebarTitle">Server-Side and Client-Side</h5>
					<p class="SidebarBody">Often in web <a id="_idIndexMarker159"></a><a id="_idIndexMarker160"></a><a id="_idIndexMarker161"></a>design, you’ll hear references to “client-side” or “server-side” applications. These terms are used to indicate which machine is doing the processing. <span class="FirstTerm">Client-side</span> applications run on the user’s machine (also referred to as the <span class="FirstTerm">frontend</span>), while <span class="FirstTerm">server-side</span> applications and functions use the processing power of the server computer (the <span class="FirstTerm">backend</span>).</p>
				</div>
			</div>
			<p class="body">The requests and responses are handled via <a id="_idIndexMarker162"></a>the HTTP protocol, mentioned earlier. Although we’ve been talking about “documents,” HTTP can be used to transfer images, movies, audio files, data, scripts, and all the other web resources that commonly make up websites and applications. </p>
			<p class="body">It is common to think of a browser as a window on a computer monitor with a web page displayed in it. These are known as graphical browsers or desktop browsers and for a long time, they were the only web-viewing game in town. The most popular desktop browsers as of this writing include Edge and Internet Explorer for Windows, Chrome, Firefox, and Safari, with Opera and Vivaldi bringing up the rear. </p>
			<p class="body">These days, however, more than half of web traffic comes from <a id="_idIndexMarker163"></a><a id="_idIndexMarker164"></a>mobile browsers on smartphones and tablets such as Safari on iOS, Android and Chrome browsers on Android devices, Opera Mini, and a myriad of other default and installable mobile browsers (see <a href="https://en.wikipedia.org/wiki/Mobile_browser"><span class="URL-Email">en.wikipedia.org/wiki/Mobile_browser</span></a> for a complete list). Navigating the web on a touch screen is the new normal. </p>
			<p class="body">It is also important to keep alternative web experiences in mind. Users with impaired sight may be listening to a web page read by a screen reader (or simply make their text extremely large). Users with limited mobility may use assistive <a id="_idIndexMarker165"></a>technology such as joysticks or voice commands to access links and enter content. The sites we build must be accessible and usable for all users, regardless of their browsing experiences.</p>
			<p class="body">The web is also finding its way onto smart TVs and gaming systems, where users access our pages with TV remotes or Xbox controllers. You never know where the web will pop up next!</p>
			<p class="body">The reality is that pages may look and perform differently from browser to browser. This is due to varying support for web technologies, varying device capabilities, and the users’ ability to set their own browsing preferences. It is the most challenging aspect of designing and developing for our medium.</p>
			<div>
				<div id="_idContainer057" class="sidebar">
					<h5 class="SidebarTitle">Browser Rendering Engines</h5>
					<p class="SidebarBody-2Col">The program that is responsible for converting HTML and CSS into what you see rendered on the screen is called a <span class="FirstTerm--Sidebar-">rendering engine</span> (also <span class="FirstTerm--Sidebar-">browser engine</span> or <span class="FirstTerm--Sidebar-">layout engine</span>). Browsers that you use on desktop computers and mobile devices are made up of rendering engines as well as other code used for their own user interfaces and functionality. Although I talk a lot about which browsers support particular functions in this book, I’m technically referring to the browser’s rendering engine. Various browsers often share a rendering engine; for example, the Blink engine powers Chrome, Opera, and a variety of Android browsers. <span class="Xref-Figure">Table 2-1</span> lists the rendering engines used by the most popular web browsers today. For more information, search Wikipedia.com for “Comparison of web browser engines” and “Comparison of web <a id="_idIndexMarker166"></a><a id="_idIndexMarker167"></a><a id="_idIndexMarker168"></a><a id="_idIndexMarker169"></a><a id="_idIndexMarker170"></a><a id="_idIndexMarker171"></a><a id="_idIndexMarker172"></a><a id="_idIndexMarker173"></a><a id="_idIndexMarker174"></a>browsers.”</p>
					<div>
						<div id="_idContainer056" class="contents">
							<table id="table001-1" class="Table">
								<colgroup>
									<col/>
									<col/>
								</colgroup>
								<thead>
									<tr class="Table">
										<td class="Table Table-Title Table-Head" colspan="2">
											<p class="TableTitle"><span class="Table-Label">Table 2-1.</span> Current browsers and their rendering engines</p>
										</td>
									</tr>
									<tr class="Table">
										<td class="Table Table-Head Table-Head">
											<p class="TableHeader">Browser</p>
										</td>
										<td class="Table Table-Head Table-Head">
											<p class="TableSubhead">Rendering engine</p>
										</td>
									</tr>
								</thead>
								<tbody>
									<tr class="Table">
										<td class="Table Table-Body-Left">
											<p class="TableBody">Chrome 28+</p>
										</td>
										<td class="Table Table-Body-Right">
											<p class="TableBody">Blink (forked from WebKit)</p>
										</td>
									</tr>
									<tr class="Table">
										<td class="Table Table-Body-Left">
											<p class="TableBody">Firefox (all)</p>
										</td>
										<td class="Table Table-Body-Right">
											<p class="TableBody">Gecko (except Firefox for iOS, which uses WebKit)</p>
										</td>
									</tr>
									<tr class="Table">
										<td class="Table Table-Body-Left">
											<p class="TableBody">Safari and Safari iOS (all)</p>
										</td>
										<td class="Table Table-Body-Right">
											<p class="TableBody">WebKit</p>
										</td>
									</tr>
									<tr class="Table">
										<td class="Table Table-Body-Left">
											<p class="TableBody">Internet Explorer 4–11</p>
										</td>
										<td class="Table Table-Body-Right">
											<p class="TableBody">Trident</p>
										</td>
									</tr>
									<tr class="Table">
										<td class="Table Table-Body-Left">
											<p class="TableBody">MS Edge (all)</p>
										</td>
										<td class="Table Table-Body-Right">
											<p class="TableBody">EdgeHTML (forked from Trident)</p>
										</td>
									</tr>
									<tr class="Table">
										<td class="Table Table-Body-Left">
											<p class="TableBody">Opera 15+</p>
										</td>
										<td class="Table Table-Body-Right">
											<p class="TableBody">Blink (forked from WebKit)</p>
										</td>
									</tr>
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
			<h1 id="_idParaDest-14" class="HeadA"><a id="_idTextAnchor024"></a>Web Page Addresses (URLs)</h1>
			<p class="body">Every page and resource on the web has its own special address called a <span class="FirstTerm">URL</span>, which stands for <span class="FirstTerm">Uniform Resource Locator</span>. It’s nearly impossible to get through a day without seeing a URL (pronounced “U-R-L,” not “erl”) plastered on the side of a bus, printed on a business card, or broadcast on a television commercial. Web addresses are fully integrated into modern vernacular.</p>
			<p class="body">Some URLs are short and sweet. Others may look like crazy strings of characters separated by dots (periods) and slashes, but each part has a specific purpose. Let’s pick one apart.</p>
			<div>
				<div id="_idContainer058" class="sidebar">
					<h5 class="SidebarTitle">URL Versus URI</h5>
					<p class="SidebarBody">The W3C and the development community are moving away from the <a id="_idIndexMarker175"></a><a id="_idIndexMarker176"></a><a id="_idIndexMarker177"></a>term URL (Uniform Resource Locator) and toward the more generic and technically accurate URI (Uniform Resource Identifier). On the street and even on the job, however, you’re still likely to hear URL.</p>
					<p class="SidebarBody">Here’s the skinny on URL versus URI: a URL is one type of a URI that identifies the resource by its location (the L in URL) on the network. The other type of URI is a <a id="_idIndexMarker178"></a><a id="_idIndexMarker179"></a>URN that identifies the resource by name or namespace (the N in URN). </p>
					<p class="SidebarBody">Because it is more familiar, I will be sticking with URL throughout this book. Just know that URLs are a subset of URIs, and the terms are often used interchangeably. </p>
					<p class="SidebarBody">If you like to geek out on this kind of thing, I refer you to the URI Wikipedia entry: <a href="http://en.wikipedia.org/wiki/Uniform_Resource_Identifier"><span class="URL-Email--Sidebar-">en.wikipedia.org/wiki/Uniform_Resource_Identifier</span></a>.</p>
				</div>
			</div>
			<h2 class="HeadB">The Parts of a URL</h2>
			<p class="body">A complete<a id="_idIndexMarker180"></a> URL is generally made up of three components: the <a id="_idIndexMarker181"></a>protocol, the site <a id="_idIndexMarker182"></a>name, and the <a id="_idIndexMarker183"></a><a id="_idIndexMarker184"></a><a id="_idIndexMarker185"></a><a id="_idIndexMarker186"></a><a id="_idIndexMarker187"></a>absolute path to the document or <a id="_idIndexMarker188"></a>resource, as shown in <span class="Xref-Figure">Figure 2-1</span>. </p>
			<div>
				<figure id="_idContainer060" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0201_urlparts.png" alt="" width="1321" height="275"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 2-1.</span> The parts of a URL</figcaption>
				</figure>
			</div>
			<p class="ListVariableTerm"><span class="Circle-Frame-Neg">1</span><span class="Literal-fc"> http://</span></p>
			<p class="ListVariable">The first thing the URL does is to define the protocol that will be used for that particular transaction. The letters “HTTP” let the server know to use HyperText Transfer Protocol, or get into “web mode.” You may also see a URL begin <a id="_idIndexMarker189"></a>with <span class="Literal-fc">https://</span>, which I explain in <a id="_idIndexMarker190"></a><a id="_idIndexMarker191"></a>the <span class="Xref">“HTTPS, The Secure Web Protocol”</span> sidebar.</p>
			<p class="ListVariableTerm"><span class="Circle-Frame-Neg">2</span><span class="Literal-fc"> www.example.com</span></p>
			<p class="ListVariable">The next portion of the URL identifies the website by its <a id="_idIndexMarker192"></a>domain name. In this example, the domain name is “example.com.” The “www.” part at the beginning is the particular hostname at that domain. The <a id="_idIndexMarker193"></a>hostname “www” has become a convention, but is not a rule. In fact, sometimes the hostname may be omitted. There can be more than one website at a domain (called<a id="_idIndexMarker194"></a> <span class="FirstTerm">subdomains</span>). For example, there might also be “development.example.com,” “clients.example.com,” and so on.</p>
			<p class="ListVariableTerm"><span class="Circle-Frame-Neg">3</span><span class="Literal-fc"> /2018/samples/first.html</span></p>
			<p class="ListVariable">This is the absolute path through directories on the server to the requested HTML document, <span class="Filename">first.html</span>. The words separated by <a id="_idIndexMarker195"></a>slashes are the <a id="_idIndexMarker196"></a>directory names, starting with the root directory of the host (as indicated by the initial <span class="Literal-fc">/</span>). Because the internet originally comprised computers running the <a id="_idIndexMarker197"></a>Unix operating system, our current way of doing things still follows Unix rules and conventions, hence the <span class="Literal-fc">/</span> separating directory names. </p>
			<p class="body">To sum it up, the URL in <span class="Xref-Figure">Figure 2-1</span> says it would like to use the HTTP protocol to connect to a web server on the internet called “www.example.com” and to request the document <span class="Filename">first.html</span>, located in the <span class="Filename">samples</span> directory, which is in the <span class="Filename">2018</span> directory.</p>
			<div>
				<div id="_idContainer061" class="sidebar">
					<h5 class="SidebarTitle">HTTPS, the Secure Web Protocol</h5>
					<p class="SidebarBody">If you look at the address bar while shopping online or using a banking site, you’ll notice that they use the HTTPS protocol. HTTPS, where “S” stands for “secure,” is a modification of HTTP that encrypts form information when it is sent between the user’s client and the server. Any web page that has form fields that accept text (such as a search bar or a login) should use HTTPS. </p>
					<p class="SidebarBody">As of this writing, around 60% of pages (and growing!) use HTTPS, and for good reason. Not only is it a good idea to keep your user’s data secure in transit, but Google is pushing along the transition to HTTPS with some serious incentives as well. If you have a site that accepts text input and you don’t use HTTPS, your site won’t rise as high in the Google search results. In addition, in Chrome, these sites are marked with “Not Secure” in the top bar of the browser. </p>
					<p class="SidebarBody">HTTPS works in tandem with another protocol, <a id="_idIndexMarker198"></a><a id="_idIndexMarker199"></a>SSL (for Secure Socket Layer), which needs to be enabled on the server for secure transactions to work. Hosting companies have options for enabling SSL, often for free.</p>
					<p class="SidebarBody">Keep in mind that HTTPS protects form data as it is sent to the server, but doesn’t do anything to make your site “secure” and safe from hackers.</p>
				</div>
			</div>
			<h2 class="HeadB">Simplified URLs</h2>
			<p class="body">Obviously, not every URL you see is so lengthy. To get to O’Reilly’s site, you’d expect to type <span class="Literal-fc">oreilly.com</span> instead of <span class="Literal-fc">http://www.oreilly.com/index.html</span>. Here’s why that works.</p>
			<h3 class="HeadC">Skipping the protocol </h3>
			<p class="body">Because nearly all web pages use the HyperText Transfer Protocol, the <span class="Literal-fc">http://</span> part is often just implied. This is the case when site names are advertised in print or on TV, as a way to keep the URL easy to remember. </p>
			<p class="body">Additionally, browsers are programmed to add <span class="Literal-fc">http://</span> automatically as a convenience to save you some keystrokes. It may seem like you’re leaving it out, but it is being sent to the server behind the scenes.</p>
			<p class="body">When we begin using URLs to create <a id="_idIndexMarker200"></a>hyperlinks in HTML documents in <a href="lwd5_chapter06.xhtml#_idTextAnchor076"><span class="Xref">Chapter </span><span class="Xref">6</span><span class="Xref">, Adding Links</span></a>, you’ll learn that it is necessary to include the protocol when making a link to a web page on another server.</p>
			<h3 class="HeadC">Pointing to default files</h3>
			<p class="body">Many addresses <a id="_idIndexMarker201"></a><a id="_idIndexMarker202"></a>do not include a filename, but simply point to a directory, like these:</p>
			<pre class="CodeFirst">http://www.oreilly.com <br/>http://www.jendesign.com/resume/</pre>
			<p class="body">When a server receives a request for a directory name rather than a specific file, it looks in that directory for a default document, typically named <span class="Filename">index.html</span>. So when someone types the previous URLs into his browser, what he’ll actually see is this:</p>
			<pre class="CodeFirst">http://www.oreilly.com<code class="CodeColor">/index.html </code><br/>http://www.jendesign.com/resume<code class="CodeColor">/index.html</code></pre>
			<p class="body">The name of the default file (also referred to as the <span class="FirstTerm">index file</span>) may vary, and depends on how the server is configured. In these examples, it is named <span class="Filename">index.html</span>, but some servers use the filename <span class="Filename">default.htm.</span> If your site uses server-side<a id="_idIndexMarker203"></a> programming to generate pages, the index file might be named <span class="Filename">index.php</span> or <span class="Filename">Default.aspx</span>. Just check with your server administrator or the tech support department at your hosting service to make sure you give your default file the proper name.</p>
			<p class="body">Another thing to notice is that in the first example, the original URL did not have a trailing slash to indicate it was a directory. If the slash is omitted, the server checks to see if the request is a file or a directory. If it is a directory, the server asks the browser to send the request again with a slash. In the end, the slash is included for directories, even if it isn’t included the first time it is entered (see <span class="Xref">Performance Tip</span>).</p>
			<div>
				<div id="_idContainer062" class="sidebar">
					<h5 class="SidebarSeries">PERFORMANCE Tip</h5>
					<p class="SidebarBody">If you want to minimize round-trips to the server, include slashes at the end of directory names in URLs in your links.</p>
				</div>
			</div>
			<p class="body">The index file is also useful for <a id="_idIndexMarker204"></a>security. Some servers (depending on their configuration) display the contents of the directory if the default file is not found. <span class="Xref-Figure">Figure 2-2</span> shows how the documents in the <span class="Filename">housepics</span> directory are exposed as the result of a missing default file. One way to prevent people from snooping around in your files is to be sure there is an index file in every directory. Your server administrator may also add other protections to prevent your directories from displaying in the browser.</p>
			<div>
				<figure id="_idContainer064" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0202_index.png" alt="" width="1338" height="1008"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 2-2.</span> Some servers display the contents of the directory if an index file is not found.</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-15" class="HeadA"><a id="_idTextAnchor025"></a>The Anatomy of a Web Page</h1>
			<p class="body">We’re all <a id="_idIndexMarker205"></a>familiar with what web pages look like in the browser window, but what’s happening “under the hood”? </p>
			<p class="body">At the top of <span class="Xref-Figure">Figure 2-3</span>, you see a minimal web page as it appears in a graphical browser. Although you see it as one coherent page, it is actually assembled from four separate files: an HTML document (<span class="Filename">index.html</span>), a style sheet (<span class="Filename">kitchen.css</span>), and two graphics (<span class="Filename">foods.png</span> and <span class="Filename">spoon.png</span>). The HTML document is running the show. </p>
			<div>
				<figure id="_idContainer066" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0203_kitchen.png" alt="" width="1824" height="2343"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 2-3.</span> The source file, style sheet, and images that make up a simple web page.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">HTML Documents</h2>
			<p class="body">You may be<a id="_idIndexMarker206"></a><a id="_idIndexMarker207"></a> <a id="_idIndexMarker208"></a>as surprised as I was to learn that the graphically rich and interactive pages we see on the web are generated by simple, text-only documents. The text file behind the scenes is referred to as <a id="_idIndexMarker209"></a>the <span class="FirstTerm">source document</span>.</p>
			<p class="body">Take a look at <span class="Filename">index.html</span>, the source document for the Jen’s Kitchen web page. You can see that it contains the text content of the page plus special <span class="FirstTerm">tags</span> (indicated with <a id="_idIndexMarker210"></a><a id="_idIndexMarker211"></a><a id="_idIndexMarker212"></a>angle brackets, <span class="Literal-fc">&lt;</span> and &gt;) that describe each element on the page. </p>
			<p class="body">Adding descriptive tags to a text document is known as “marking up” the document. Web pages use a markup language <a id="_idIndexMarker213"></a>called <span class="FirstTerm">HyperText Markup Language</span>, or HTML for short, which was created especially for documents with hypertext links. HTML defines dozens of text elements that make up documents such as headings, paragraphs, emphasized text, and of course, links. There are also elements that add information about the document (such as its title), media such as images and videos, and widgets for form inputs, just to name a few. </p>
			<p class="body">You can view the source for any web page. <span class="Xref-Figure">Exercise 2-1</span> gives you some prompts and pointers.</p>
			<p class="body">The version of HTML we use today is <a id="_idIndexMarker214"></a>HTML5. There have been several versions of HTML since its birth in 1989, and a few that are still in use today. There is a complete history of HTML, all its versions, and an overview of what makes HTML5 unique in <a href="lwd5_appendixD.xhtml#_idTextAnchor336"><span class="Xref">Appendix </span><span class="Xref">D</span><span class="Xref">, From HTML+ to HTML5</span></a>.</p>
			<div>
				<div id="_idContainer068" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">exercise 2-1.</span> View source</h6>
					<p class="SidebarBody">You can see the HTML file for any web page by viewing its source in a desktop browser. Most modern browsers keep the View Source function with the developer tools and typically open the source document in a separate window or in a developer’s panel at the bottom of the current window.</p>
					<div>
						<div id="_idContainer067" class="note">
							<h5 class="WarningHeader">WARNING</h5>
							<p class="note">Keep in mind that while learning from others’ work is fine, stealing other people’s code is poor form (or even illegal). If you want to use code as you see it, ask for permission and always give credit to those who did the work. </p>
						</div>
					</div>
					<p class="SidebarBody">Here’s where to find the View Source function on the major desktop browsers:</p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Safari:</strong> 	<span class="menu">Develop  </span><span class="menu">→ </span><span class="menu">Show  </span><span class="menu">→ </span><span class="menu">Page Source</span></p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Chrome:</strong> 	<span class="menu">View </span><span class="menu">→ </span><span class="menu">Developer </span><span class="menu">→ </span><span class="menu">View Source</span></p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Firefox:</strong>	<span class="menu">Tools </span><span class="menu">→ </span><span class="menu">Web Developer </span><span class="menu">→ </span><span class="menu">Page Source</span></p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">MS Edge:</strong> 	Right-click on the page and select <span class="menu">View Source</span>. If you do not see that option in the context menu, you may need to turn it on in the Developer Settings. Open a new browser window and type <span class="Literal-fc">about:flags</span> in the address bar. Under “Developer settings,” check “Show View source” and “Inspect element” in the context menu. Now when you go to a web page, you can right-click on the page and access the View Source function. You may also use the Ctrl+U keyboard shortcut or F12 key. </p>
					<ol>
						<li class="SidebarListNumber">With the browser of your choice, enter this URL into your browser:<pre class="SidebarCodeFirst">www.learningwebdesign.com/5e/kitchen.html</pre><pre class="SidebarCodeFirst">You should see the Jen’s Kitchen web page from <span class="Xref-Figure">Figure 2-3</span>.</pre></li>
						<li class="SidebarListNumber">Follow the directions for your browser listed above to view the source HTML document for the Jen’s Kitchen page. It should be the same as shown in the figure.</li>
						<li class="SidebarListNumber">To view a page that is a little more complicated, take a look at the source for the <a href="http://www.learningwebdesign.com"><span class="URL-Email--Sidebar-">learningwebdesign.com</span></a> home page.</li>
						<li class="SidebarListNumber">The source for most sites is considerably more complicated. View the source of <a href="http://oreilly.com"><span class="URL-Email--Sidebar-">oreilly.com</span></a>. It’s got style sheets, scripts, inline SVG graphics…the works! Don’t worry if you don’t understand what’s going on. Much of it will look more familiar by the time you are done with this book.</li>
					</ol>
				</div>
			</div>
			<h2 class="HeadB">A Quick Introduction to HTML Markup</h2>
			<p class="body">You’ll be learning the nitty-gritty of markup in <a href="lwd5_chapter04.xhtml#_idTextAnchor041"><span class="Xref">Part II</span></a>, so I don’t want to bog you down with too much detail right now, but there are a few things I’d like to point out about how HTML works and how browsers interpret it. </p>
			<p class="body">Read through the HTML document in<em class="Emphasis"> </em><span class="Xref-Figure">Figure 2-3</span> and compare it to the browser results. It’s easy to see how the elements marked up with HTML tags in the source document correspond to what displays in the browser window. </p>
			<p class="body">First, you’ll notice that the text within <a id="_idIndexMarker215"></a><a id="_idIndexMarker216"></a>brackets (for example, <span class="Literal-fc">&lt;body&gt;</span> and <span class="Literal-fc">&lt;strong&gt;</span>) does not display in the final page. The browser displays only what’s between the tags—the content of the element. The markup is hidden. The tag provides the name of the HTML element—usually an abbreviation such as “h1” for “heading level 1,” or “em” for “emphasized text.”</p>
			<p class="body">Second, you’ll see that most of the HTML tags appear in pairs surrounding the content of the element. In our HTML document, <span class="Literal-fc">&lt;h1&gt;</span> indicates that the following text should be a first-level heading; <span class="Literal-fc">&lt;/h1&gt;</span> indicates the end of the heading. Some elements, <a id="_idIndexMarker217"></a><a id="_idIndexMarker218"></a>called <span class="FirstTerm">empty elements</span>, do not have content. In our sample, the <span class="Literal-fc">&lt;hr&gt;</span> tag indicates an empty element that tells the browser to “insert a horizontal rule here” as a thematic divider.</p>
			<p class="body">Because I was unfamiliar with computer programming when I first began writing HTML, it helped me to think of the tags and text as “beads on a string” that the browser interprets one by one, in sequence. For example, when the browser encounters an open bracket (<span class="Literal-fc">&lt;</span>), it assumes all of the following characters are part of the markup until it finds the closing bracket (<span class="Literal-fc">&gt;</span>). Similarly, it assumes all of the content following an opening <span class="Literal-fc">&lt;h1&gt;</span> tag is a heading until it encounters the closing <span class="Literal-fc">&lt;/h1&gt;</span> tag. This is the manner in which the <a id="_idIndexMarker219"></a><a id="_idIndexMarker220"></a><a id="_idIndexMarker221"></a>browser <span class="FirstTerm">parses</span> the HTML document. Understanding the browser’s method can be helpful when troubleshooting a misbehaving HTML document.</p>
			<h2 class="HeadB">Where Are the Pictures?</h2>
			<p class="body">Obviously, there are no pictures in the HTML file itself, so how do they get there when you view the final page? You can see in <span class="Xref-Figure">Figure 2-3</span> that each image is a separate file. The images are placed in the flow of the text with the HTML image <a id="_idIndexMarker222"></a>element (<span class="Literal-fc">img</span>), which tells the browser where to find the graphic (its URL). When the browser sees the <span class="Literal-fc">img</span> element, it makes another request to the server for the image file, and then places it in the content flow. </p>
			<p class="body">The browser also sends requests to the server for style sheets (like <span class="Filename">kitchen.css</span>), JavaScript files (<span class="Filename">.js</span>), and other embedded media like audio and videos. The browser software (or more specifically, its <a id="_idIndexMarker223"></a><a id="_idIndexMarker224"></a><a id="_idIndexMarker225"></a>rendering engine) brings the separate pieces together into the final page. </p>
			<p class="body">The assembly of the page generally happens in an instant, so it appears as though the whole page loads all at once. Over slow connections or if the page includes huge graphics or media files, the assembly process may be more apparent as images lag behind the text. The page may even need to be redrawn as new images, fonts, and style sheets arrive (although you can construct your pages in such a way that prevents this from happening).</p>
			<h2 class="HeadB">Adding a Little Style</h2>
			<p class="body">I want to direct your attention to one last key ingredient of our minimal page. Near the top of the HTML document there is <a id="_idIndexMarker226"></a><a id="_idIndexMarker227"></a>a <span class="Literal-fc">link</span> element that points to the style sheet document <span class="Filename">kitchen.css</span>. That style sheet includes a few lines of instructions for how the page should look in the browser. These are style instructions written according to the rules of <span class="FirstTerm">Cascading Style Sheets</span> (<span class="FirstTerm">CSS</span>). CSS allows designers to add visual style instructions (known as the <a id="_idIndexMarker228"></a>document’s <span class="FirstTerm">presentation</span>) to the marked-up text (the <a id="_idIndexMarker229"></a><a id="_idIndexMarker230"></a>document’s <span class="FirstTerm">structure</span>, in web design terminology). In <a href="lwd5_chapter11.xhtml#_idTextAnchor131"><span class="Xref">Part III</span></a>, you’ll get to know the power of Cascading Style Sheets.</p>
			<p class="body"><span class="Xref-Figure">Figure 2-4</span> shows the Jen’s Kitchen page without (top) and with (bottom) the style instructions. Browsers come equipped with default styles for every HTML element they support, so if an HTML document lacks custom style instructions, the browser will use its own. That’s what you see in the screenshot on the top. Even just a few style rules can make big improvements to the appearance of a page.</p>
			<div>
				<figure id="_idContainer070" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0204_styles-ebook.png" alt="" width="1338" height="375"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 2-4.</span> The Jen’s Kitchen page without (top) and with (bottom) custom style rules.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Adding Behaviors with JavaScript</h2>
			<p class="body">To make <a id="_idIndexMarker231"></a>elements on the page <em class="Emphasis">do</em> something, you use a scripting language called JavaScript (see <span class="Xref">Note</span>). There are no scripts on the Jen’s Kitchen page because I thought it best to keep things simple this early in the book, but know that JavaScript is an essential ingredient in modern websites. </p>
			<p class="body">Whereas HTML provides the structure and the CSS style sheet alters how things look, JavaScript adds a behavior component that controls how things work. Scripts may be standalone files on the server (with the <span class="Filename">.js</span> suffix) or be written out right in the document. They may be triggered to run immediately when the page loads or be triggered by something the user does, like click or hover on an element or enter something in a form field.</p>
			<p class="body">You’ll get a basic introduction to JavaScript in <a href="lwd5_chapter21.xhtml#_idTextAnchor266"><span class="Xref">Part IV</span></a> of this book.</p>
			<div>
				<div id="_idContainer071" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">JavaScript is not required for the interactivity of <a id="_idIndexMarker232"></a><a id="_idIndexMarker233"></a>links and web forms, which work using HTML<a id="_idIndexMarker234"></a> alone.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer072" class="sidebar">
					<h5 class="SidebarTitle">Static vs. Dynamic Sites</h5>
					<p class="SidebarBody">Static <a id="_idIndexMarker235"></a><a id="_idIndexMarker236"></a><a id="_idIndexMarker237"></a>websites consist of HTML files with fixed content that display the same information to every visitor. In other words, each page you see in the browser is a view of a single HTML file on the server. This book focuses on the creation of static web pages as they are straightforward and the best starting place for beginners.</p>
					<p class="SidebarBody">By contrast, <span class="FirstTerm--Sidebar-">dynamic websites</span> are generated with backend programming such as PHP or ASP. Each page is generated by the application on the fly. Dynamic sites access content and data from a database, and the final pages may be customized for each user. For extremely large sites with hundreds or thousands of pages, setting up and maintaining a dynamic site is considerably less work than creating and storing every page as a static HTML document individually. </p>
				</div>
			</div>
			<h1 id="_idParaDest-16" class="HeadA"><a id="_idTextAnchor026"></a>Putting It All Together</h1>
			<ol>
				<li class="ListNumber-Circle-Frame-Neg">To wrap <a id="_idIndexMarker238"></a>up our introduction to how the web works, let’s trace a typical stream of events that occurs with every web page that appears on your screen (<span class="Xref-Figure">Figure 2-5</span>). Request a web page by either typing its URL (for example, <span class="Filename">http://jenskitchensite.com</span>) directly in the browser or by clicking a link on a page. The URL contains the information needed to target a specific document on a specific web server on the internet. In this case, it points to the default file (<span class="Filename">index.html</span>) in the top directory.</li>
				<li class="ListNumber-Circle-Frame-Neg">Your browser sends an HTTP request to the server named in the URL and asks for the specific file. The request also includes information about what languages the user can read and what types of files the browser can accept. If the URL specifies a directory (not a file), it is the same as requesting the default file in that directory. </li>
				<li class="ListNumber-Circle-Frame-Neg">The server looks for the requested file and issues an HTTP response in the form of <a id="_idIndexMarker239"></a>an <span class="FirstTerm">HTTP header</span>. The header includes information about the file, like the last modified date, the length of the file, and its <a id="_idIndexMarker240"></a>Content-Type (for example, an <span class="Filename">.html</span> file has the content type “text/html”). <ol><li class="ListNumber_Indent" value="1">If the page cannot be found, the server returns an <a id="_idIndexMarker241"></a>error message. The message typically says “404 Not Found,” although more hospitable error messages may be provided. Other error types are possible as well (see the sidebar <span class="Xref">“HTTP Status Codes”</span>).<div id="_idContainer073" class="sidebar"><h5 class="SidebarTitle">HTTP Status Codes</h5><p class="SidebarBody">Servers issue <a id="_idIndexMarker242"></a><a id="_idIndexMarker243"></a>status codes in response to browser requests. The full list of status codes is quite long (you can read about them all at <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"><span class="URL-Email--Sidebar-">en.wikipedia.org/wiki/List_of_HTTP_status_codes</span></a>), but here are a few common responses: </p><p class="SidebarListSimpleFirst">200	OK</p><p class="SidebarListSimple">301	Moved Permanently</p><p class="SidebarListSimple">302	Moved Temporarily</p><p class="SidebarListSimple">404	Not Found</p><p class="SidebarListSimple">410	Gone (no longer available)</p><p class="SidebarListSimple">500 	Internal Server Error</p></div></li><li class="ListNumber_Indent">If the document <em class="Emphasis">is</em> found, the server retrieves the requested file and returns it to the browser<a id="_idTextAnchor027"></a>. If the site is dynamic, the server assembles the page from stored data before returning it to the browser.</li></ol></li>
				<li class="ListNumber-Circle-Frame-Neg">The browser <a id="_idIndexMarker244"></a><a id="_idIndexMarker245"></a><a id="_idIndexMarker246"></a>parses the HTML document. If the page contains images (indicated by the HTML <span class="Literal-fc">img</span> element) or other external resources like scripts or style sheets, the browser contacts the server again to request each resource specified in the markup.  </li>
				<li class="ListNumber-Circle-Frame-Neg">The browser inserts each image in the document flow where indicated by the <span class="Literal-fc">img</span> element, applies styles, and runs scripts. And <em class="Emphasis">voilà</em>! The assembled web page is displayed for your viewing pleasure. </li>
			</ol>
			<p class="body">I should note that I’ve depicted a traditional and simplified scenario here to tell you how web pages are put together. These days, it is common for web pages to be generated from <a id="_idIndexMarker247"></a><a id="_idIndexMarker248"></a>content management systems (CMSs) that keep content in databases and use templates to assemble the data into pages on the fly. In that case, in Step 3b, there is a more complicated process of assembling the file from various parts rather than just handing off an existing file. </p>
			<div>
				<figure id="_idContainer075" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0205_process.png" alt="" width="2025" height="2025"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 2-5.</span> How browsers display web pages.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer076" class="sidebar">
					<h5 class="SidebarTitle">Getting Your Pages on the Web</h5>
					<p class="SidebarBody">If you would like more information about <a id="_idIndexMarker249"></a><a id="_idIndexMarker250"></a>registering domain names and finding a server to host your site, download the article titled <span class="Xref--Sidebar-">“Getting Your Pages on the Web”</span> (PDF) at <a href="http://learningwebdesign.com/articles/"><span class="URL-Email--Sidebar-">learningwebdesign.com/articles/</span></a>. </p>
				</div>
			</div>
			<h1 id="_idParaDest-17" class="HeadA"><a id="_idTextAnchor028"></a>Test Yourself</h1>
			<p class="body">Let’s play a round of “Identify That Acronym!” The following are a few basic web terms mentioned in this chapter. Answers are in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix </span><span class="Xref">A</span></a>.</p>
			<table id="table002-1" class="table_invisible">
				<colgroup>
					<col/>
					<col/>
					<col/>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">1.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">HTML</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">a.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">Home of Mosaic, the first graphical browser</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">2.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">W3C </p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">b.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">The location of a web document or resource</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">3.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">CERN </p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">c.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">The markup language used to describe web content</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">4.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">CSS </p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">d.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">Matches domain names with numeric IP addresses</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">5.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">HTTP</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">e.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">A protocol for file transfer</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">6.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">IP</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">f.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">Protocol for transferring web documents on the internet</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">7.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">URL</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">g.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">The language used to instruct how web content looks </p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">8.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">NCSA</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">h.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">Particle physics lab where the web was born</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">9.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">DNS</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">i.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">Internet Protocol </p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="TableBody">10.</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">FTP</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">______</p>
						</td>
						<td class="table_invisible invisible">
							<p class="TableBody">j.</p>
						</td>
						<td class="table_invisible">
							<p class="TableBody">The organization that monitors web technologies</p>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>
</body>
</html>