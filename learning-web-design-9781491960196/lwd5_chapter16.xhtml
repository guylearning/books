<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer1008" class="ch16">
			<p id="_idParaDest-154" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor216"></a>16. CSS Layout with Flexbox and Grid</p>
		</div>
		<div id="_idContainer1009" class="ch16">
			<h1 class="chapterLabel">16</h1>
		</div>
		<div id="_idContainer1010" class="ch16">
			<h1 class="chapterTitle"><a id="_idTextAnchor217"></a><a id="_idTextAnchor218"></a>CSS Layout with Flexbox and Grid</h1>
		</div>
		<div id="_idContainer1011" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In this chapter</p>
			<p class="chapterContents">Flex containers and items</p>
			<p class="chapterContents">Flow direction and wrapping</p>
			<p class="chapterContents">Flex item alignment</p>
			<p class="chapterContents">Controlling item “flex”</p>
			<p class="chapterContents">Grid containers and items</p>
			<p class="chapterContents">Setting up a grid template</p>
			<p class="chapterContents">Placing items in the grid</p>
			<p class="chapterContents">Implicit grid features</p>
			<p class="chapterContents">Grid item alignment</p>
		</div>
		<div id="_idContainer1171" class="ch16">
			<p class="body">Get ready…this is a <em class="Emphasis">whopper</em> of a chapter! In it, you will learn about two important CSS page layout tools: </p>
			<ul>
				<li class="ListBullet">Flexbox for greater control over arranging items along one axis </li>
				<li class="ListBullet">Grid for honest-to-goodness grid-based layouts, like those print designers have used for decades</li>
			</ul>
			<p class="body">Each tool has its special purpose, but you can use them together to achieve layouts we’ve only dreamed of until now. For example, you could create the overall page structure with a grid and use a flexbox to tame the header and navigation elements. Use each technique for what it’s best suited for—you don’t have to choose just one. </p>
			<p class="body">Now that browsers have begun to support these techniques, designers and developers have true options for achieving sophisticated layouts with baked-in flexibility needed for dealing with a wide array of screen sizes. Once old browsers fade from use, we can kiss our old float layout hacks goodbye (in the meantime, they make decent fallbacks). </p>
			<p class="body">You may notice that this chapter is big. <em class="Emphasis">Really</em> big. That’s because the specs are overflowing with options and new concepts that require explanation and examples. It’s a lot to pack in your mind all at once, so I recommend treating it as two mini-chapters and spend some time getting up to speed with each technique individually. </p>
			<div>
				<div id="_idContainer1014" class="sidebar">
					<h5 class="SidebarTitle">Multicolumn Layout</h5>
					<p class="SidebarBody">A third CSS3 layout tool you may want to try is multicolumn layout. The <a id="_idIndexMarker2882"></a>Multi-column Layout Module (<a href="http://w3.org/TR/css-multicol-1"><span class="URL-Email--Sidebar-">w3.org/TR/css-multicol-1</span></a>) provides tools for pouring text content into a number of columns, as you might see in a newspaper (<span class="Xref-Figure">Figure 16-1</span>). It is designed to be flexible, allowing the widths and number of columns to automatically fit the available space.</p>
					<p class="SidebarBody">This chapter is already big enough, so I’ve put this lesson in an article, <span class="Xref--Sidebar-">“Multicolumn Layout”</span> (PDF), available at  <a href="http://learningwebdesign.com/articles/"><span class="URL-Email--Sidebar-">learningwebdesign.com/articles/</span></a>.</p>
					<div>
						<figure id="_idContainer1013" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1601_wide.png" alt="" width="1298" height="608"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-1.</span> An example of text formatted with the multicolumn properties.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h1 id="_idParaDest-155" class="HeadA"><a id="_idTextAnchor219"></a>Flexible Boxes with CSS Flexbox</h1>
			<p class="body">The CSS Flexible <a id="_idIndexMarker2883"></a>Box Layout Module (also known as simply <span class="FirstTerm">Flexbox</span>) gives designers and developers a handy tool for laying out components of web pages such as menu bars, product listings, galleries, and much more. </p>
			<p class="body">According to the spec, </p>
			<blockquote class="Quote">The defining aspect of flex layout is the ability to make the flex items “flex,” altering their width/height to fill the available space in the main dimension.</blockquote>
			<p class="body">That means it allows items to stretch or shrink inside their containers, preventing wasted space and overflow—a real plus for making layouts fit a variety of viewport sizes. Other advantages include the following:</p>
			<ul>
				<li class="ListBullet">The ability to make all neighboring items the same height</li>
				<li class="ListBullet">Easy horizontal and vertical centering (curiously elusive with old CSS methods) </li>
				<li class="ListBullet">The ability to change the order in which items display, independent of the source</li>
			</ul>
			<p class="body">The Flexbox layout model is incredibly robust, but because it was designed for maximum flexibility, it takes a little time to wrap your head around it (at least it did for me). Here’s how it helped me to think about it: when you tell an element to become a flexbox, all of its child elements line up on one axis, like beads on a string. The string may be horizontal, it may hang vertically, or it may even wrap onto multiple lines, but the beads are always on one string (or to use the proper term, one <span class="FirstTerm">axis</span>). If you want to line things up both horizontally <em class="Emphasis">and</em> vertically, that is the job of CSS Grid, which I’ll introduce in the next section of this chapter.</p>
			<p class="body">Before we dig in, I have a quick heads-up about browser support. All current browser versions support the latest W3C Flexible Box Layout Module spec; however, older browsers require prefixes and even different, outdated properties and values altogether. I’ll be sticking with the current standard properties to keep everything simple while you learn this for the first time, but know that production-ready style sheets may require more code. I’ll give you the nitty-gritty on browser support at the end of this section. </p>
			<div>
				<div id="_idContainer1015" class="sidebar">
					<h5 class="SidebarTitle">Flexbox Resources</h5>
					<p class="SidebarBody">You’ll learn all the ins and outs of Flexbox in this chapter, but it is always good to get a few perspectives and hands-on tutorials online. If you do a web search, be sure to limit your findings to 2015 posts and later, or you may come across outdated advice based on earlier spec versions. Following are some of the sites that I’ve found most useful or most entertaining:</p>
					<p class="SidebarListVariableTerm">A Complete Guide to Flexbox (<a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/"><span class="URL-Email--Sidebar-">css-tricks.com/snippets/css/a-guide-to-flexbox/</span></a>)</p>
					<p class="SidebarListVariable">This summary of Flexbox features by <a id="_idIndexMarker2884"></a>Chris Coyier is one of the most popular Flexbox references out there. Many developers just keep it open in a browser when they do Flexbox work.</p>
					<p class="SidebarListVariableTerm">Flexbox Froggy (<a href="http://flexboxfroggy.com/"><span class="URL-Email--Sidebar-">flexboxfroggy.com/</span></a>)</p>
					<p class="SidebarListVariable">Don’t miss this online game for learning Flexbox by helping colorful frogs make it back to their lily pads. </p>
					<p class="SidebarListVariableTerm">What the Flexbox?! (<a href="http://flexbox.io/"><span class="URL-Email--Sidebar-">flexbox.io/</span></a>)</p>
					<p class="SidebarListVariable">Wes <a id="_idIndexMarker2885"></a>Bos does a great job walking you through Flexbox properties as well as a few code projects in this free, 20-part video series. </p>
					<p class="SidebarListVariableTerm">Flexbox Playground (<a href="http://codepen.io/enxaneta/full/adLPwv/"><span class="URL-Email--Sidebar-">codepen.io/enxaneta/full/adLPwv/</span></a>)</p>
					<p class="SidebarListVariable">As the <a id="_idIndexMarker2886"></a>name says, this page by Gabi lets you play around with all of the Flexbox properties and values and see the results instantly. It’s a nice way to get familiar with what Flexbox can do. </p>
					<p class="SidebarListVariableTerm">Flexy Boxes (<a href="http://the-echoplex.net/flexyboxes/"><span class="URL-Email--Sidebar-">the-echoplex.net/flexyboxes/</span></a>)</p>
					<p class="SidebarListVariable">This is another Flexbox playground and code generator. </p>
				</div>
			</div>
			<h2 class="HeadB">Setting Up a Flexbox Container</h2>
			<p class="body">You’ve already <a id="_idIndexMarker2887"></a><a id="_idIndexMarker2888"></a>learned about the block layout mode for stacking elements in the normal flow and the inline mode for displaying content within it horizontally. Flexbox is another layout mode with its own behaviors. To turn on flexbox mode for an element, set its <span class="Literal-fc">display</span> property to <span class="Literal-fc">flex</span> or <span class="Literal-fc">inline-flex</span> (see <span class="Xref">Note</span>). It is <a id="_idIndexMarker2889"></a>now a <span class="FirstTerm">flex container</span>, and all of its direct child elements (whether they are <span class="Literal-fc">div</span>s, list items, paragraphs, etc.) <em class="Emphasis">automatically</em> become <span class="FirstTerm">flex items</span> in <a id="_idIndexMarker2890"></a>that container. The flex items (the beads) are laid out and aligned along <span class="FirstTerm">flex lines</span> (the <a id="_idIndexMarker2891"></a>string). </p>
			<div>
				<div id="_idContainer1016" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The <span class="Literal-Sidebar">inline-flex</span> value generates an inline-level flex container box. We’ll be focusing on the more commonly used <span class="Literal-Sidebar">flex</span> value in this chapter.</p>
				</div>
			</div>
			<p class="body"><span class="Xref-Figure">Figure 16-2</span> shows the effect of simply adding <span class="Literal-fc">display: flex</span> to a <span class="Literal-fc">div</span>, thus turning on the Flexbox switch. I’ve added a blue border to the container to make its boundaries clear. To save space, I am not showing purely cosmetic styles such as colors and fonts. </p>
			<p class="body"><span class="FigureLabel">The markup</span></p>
			<pre class="CodeFirst">&lt;div id="container"&gt;<br/>  &lt;div class="box box1"&gt;1&lt;/div&gt;<br/>  &lt;div class="box box2"&gt;2&lt;/div&gt;<br/>  &lt;div class="box box3"&gt;3&lt;/div&gt;<br/>  &lt;div class="box box4"&gt;4&lt;/div&gt;<br/>  &lt;div class="box box5"&gt;5&lt;/div&gt;<br/>&lt;/div&gt; </pre>
			<p class="body"><span class="FigureLabel">The STYLES</span></p>
			<pre class="CodeFirst">#container {<br/>	<code class="CodeColor">  display: flex;</code><br/>} </pre>
			<div>
				<figure id="_idContainer1018" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1602_flex.png" alt="" width="1321" height="988"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-2.</span> Applying the flex display mode turns the child elements into flex items that line up along one axis. You don’t need to do anything to the child elements themselves.</figcaption>
				</figure>
			</div>
			<p class="body">You can <a id="_idIndexMarker2892"></a><a id="_idIndexMarker2893"></a>see that the items have lined up in a row from left to right, which is the default Flexbox behavior if your page is in English or another language written in rows from left to right. That is because the default flexbox direction matches the direction of the language the page is written in. It would go from right to left by default in Hebrew or Arabic or in columns if the page is set with a vertical writing direction. Because it is not tied to one default direction, the terminology for specifying directions tends to be a little abstract. You’ll see what I mean when we talk about “flow” in the following section.</p>
			<p class="body">It is worth noting that you can turn any flex item into a flex container by setting its <span class="Literal-fc">display</span> to <span class="Literal-fc">flex</span>, resulting in<a id="_idIndexMarker2894"></a><a id="_idIndexMarker2895"></a> a <span class="FirstTerm">nested flexbox</span>. In fact, you’ll get to try that yourself in an upcoming exercise. Some Flexbox solutions use flexboxes nested several layers deep. </p>
			<div>
				<div id="_idContainer1019" class="sidebar">
					<h5 class="SidebarSeries">Flexbox fun facts</h5>
					<p class="SidebarBody">Here are a few things to know about Flexbox and flex item behavior:</p>
					<ul>
						<li class="SidebarListBullet"><span class="Literal-Sidebar">float</span>, <span class="Literal-Sidebar">clear</span>, <a id="_idIndexMarker2896"></a><a id="_idIndexMarker2897"></a><a id="_idIndexMarker2898"></a>multicolumn layout, and <span class="Literal-Sidebar">vertical-align</span> do not work with elements in flexbox mode.</li>
						<li class="SidebarListBullet">Margins do not <a id="_idIndexMarker2899"></a><a id="_idIndexMarker2900"></a>collapse in flexbox mode. The margin edges of items are placed at the start or end of the flex line and do not overlap the padding of the container. The margins on neighboring items add up.</li>
						<li class="SidebarListBullet">The spec recommends avoiding <a id="_idIndexMarker2901"></a><a id="_idIndexMarker2902"></a><a id="_idIndexMarker2903"></a><a id="_idIndexMarker2904"></a><a id="_idIndexMarker2905"></a>percentage values for margin and padding on flex items because of unpredictable results.</li>
					</ul>
				</div>
			</div>
			<h2 class="HeadB">Controlling the “Flow” Within the Container</h2>
			<p class="body">Once you <a id="_idIndexMarker2906"></a><a id="_idIndexMarker2907"></a>turn an element into a flex container, there are a few properties you can set on that container to control how items flow within it. The <span class="FirstTerm">flow</span> refers to the direction in which flex items are laid out as well as whether they are permitted to wrap onto additional lines.</p>
			<h3 class="HeadC">Specifying flow direction</h3>
			<p class="body">You may be happy <a id="_idIndexMarker2908"></a><a id="_idIndexMarker2909"></a>with items lining up in a row as shown in <span class="Xref-Figure">Figure 16-2</span>, but there are a few other options that are controllled with the <span class="Literal-fc">flex-direction</span> property.</p>
			<p class="RefNameCode-Left">flex-direction</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">row</span><span class="prop-label"> </span>| <span class="prop-code">column</span><span class="prop-label"> </span>| <span class="prop-code">row-reverse</span><span class="prop-label"> </span>| <span class="prop-code">column-reverse</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">row</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The default <a id="_idIndexMarker2910"></a>value is <span class="Literal-fc">row</span>, as we saw in the previous example (see the “<span class="Xref">Row and Column Direction”</span> sidebar). You can also specify that items get aligned vertically in a <span class="Literal-fc">column</span>. The other options, <span class="Literal-fc">row-reverse</span> and <span class="Literal-fc">column-reverse</span>, arrange items in the direction you would expect, but they start at the end and get filled in the opposite direction. <span class="Xref-Figure">Figure 16-3</span> shows the effects of each keyword as applied to our simple example. </p>
			<div>
				<div id="_idContainer1020" class="sidebar">
					<h5 class="SidebarTitle">Row and Column Direction</h5>
					<p class="SidebarBody">In writing systems with horizontal lines of text, the <span class="Literal-Sidebar">row</span> keyword lays items out horizontally, as we Westerners typically think of a “row.” Bear in mind that in vertically oriented languages, <span class="Literal-Sidebar">row</span> aligns items vertically, in keeping with the default direction of the writing system. Similarly, <span class="Literal-Sidebar">column</span> results in horizontally aligned items in vertical languages.</p>
					<p class="SidebarBody">This is a behavior worth knowing; however, because we are creating English language sites in this book, I’ll be sticking with the assumptions that row = horizontal and column = vertical throughout this chapter for simplicity’s sake. </p>
				</div>
			</div>
			<div>
				<figure id="_idContainer1022" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1603_direction.png" alt="" width="1321" height="858"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-3.</span> Examples of <span class="Literal-Sidebar">flex-direction</span> values <span class="Literal-Sidebar">row</span>, <span class="Literal-Sidebar">row-reverse</span>, <span class="Literal-Sidebar">column</span>, and <span class="Literal-Sidebar">column-reverse</span>.</figcaption>
				</figure>
			</div>
			<p class="body">Now that you’ve seen Flexbox in action, it’s a good time to familiarize yourself with the formal Flexbox terminology. Because the system is direction-agnostic, there are no references to “left,” “right,” “top,” or “bottom” in the property values. Instead, we talk about <a id="_idIndexMarker2911"></a><a id="_idIndexMarker2912"></a>the <span class="FirstTerm">main axis</span> and the <span class="FirstTerm">cross axis</span>. The main axis is the flow direction you’ve specified for the flex container. For primarily horizontal languages, when set to <span class="Literal-fc">row</span>, the main axis is horizontal; for <span class="Literal-fc">column</span>, the main axis is vertical (again, rows and columns are language-dependent, as explained earlier in the <span class="Xref">“Row and Column Direction”</span> sidebar). The cross axis is whatever direction is perpendicular to the main axis (vertical for <span class="Literal-fc">row</span>, horizontal for <span class="Literal-fc">column</span>). The parts of a flex container are illustrated in <span class="Xref-Figure">Figure 16-4</span>. </p>
			<div>
				<figure id="_idContainer1024" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1604_diagram.png" alt="" width="1321" height="1513"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-4.</span> The parts of a flex container.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1025" class="sidebar">
					<h5 class="SidebarSeries">Don’T Worry</h5>
					<p class="SidebarBody">Keeping the main and cross axes straight as you switch between rows and columns can feel like mental gymnastics and is one of the trickier things about using Flexbox. With practice, you’ll get used to it.</p>
				</div>
			</div>
			<p class="body">In addition to the axes, understanding the other parts of the Flexbox system makes the properties easier to learn. Both the main and cross axes have a start and an end, based on the direction in which the items flow.<a id="_idIndexMarker2913"></a><a id="_idIndexMarker2914"></a> The <span class="FirstTerm">main size</span> is the width (or height if it’s a column) of the container along the main axis, and the <span class="FirstTerm">cross size</span> is height (or width if it’s a column) along the cross axis.  </p>
			<h3 class="HeadC">Wrapping onto multiple lines</h3>
			<p class="body">If you have a<a id="_idIndexMarker2915"></a><a id="_idIndexMarker2916"></a> large or unknown number of flex items in a container and don’t want them to get all squished into the available space, you can allow them to break onto additional lines with the <span class="Literal-fc">flex-wrap</span> property.</p>
			<p class="RefNameCode-Left">flex-wrap</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">nowrap</span><span class="prop-label"> </span>| <span class="prop-code">wrap</span><span class="prop-label"> </span>| <span class="prop-code">wrap-reverse</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">nowrap</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">By default, items <a id="_idIndexMarker2917"></a>do the squish thing and do not wrap onto additional lines (<span class="Literal-fc">nowrap</span>). The <span class="Literal-fc">wrap</span> keyword turns on the ability to wrap onto multiple lines in the direction from cross start to cross end. For example, if the direction is row, then lines are positioned from the top down. </p>
			<p class="body"><span class="Literal-fc">wrap-reverse</span> breaks the elements onto multiple lines, but flows them in the opposite direction, from cross end to cross start (from the bottom up, in this case). It feels a little esoteric to me, but you never know when an occasion might arise to put it to use.</p>
			<p class="body">I’ve added more <span class="Literal-fc">div</span>s to our numbered flexbox example and I’ve given the flex items a width of 25% so that only four will fit across the width of the container. <span class="Xref-Figure">Figure 16-5</span> shows a comparison of the various wrap options when the <span class="Literal-fc">flex-direction</span> is the default <span class="Literal-fc">row</span>.</p>
			<div>
				<div id="_idContainer1026" class="contents">
					<p class="body"><span class="FigureLabel">The markup</span></p>
					<pre class="CodeFirst">&lt;div id="container"&gt;<br/>  &lt;div class="box box1"&gt;1&lt;/div&gt;<br/><span class="Code-Comment">  &lt;!-- more boxes here --&gt;</span> <br/>  &lt;div class="box box10"&gt;10&lt;/div&gt;<br/>&lt;/div&gt; </pre>
					<p class="body"><span class="FigureLabel">The Styles</span></p>
					<pre class="CodeFirst">#container { <br/>  display: flex;<br/>  flex-direction: row;<br/><code class="CodeColor">  flex-wrap: wrap;</code> <br/>} <br/>.box {<br/>  width: 25%;<br/>}</pre>
				</div>
			</div>
			<table id="table001-15" class="table_invisible_hide">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<p class="body"><span class="FigureLabel">The markup</span></p>
						</td>
						<td class="table_invisible_hide">
							<p class="body"><span class="FigureLabel">The Styles</span></p>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide"></td>
						<td class="table_invisible_hide"></td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="CodeFirst">&lt;div id="container"&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="CodeFirst">#container { </pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box1"&gt;1&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code">  display: flex;</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code"> <span class="Code-Comment"> &lt;!-- more boxes here --&gt;</span></pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code">  flex-direction: row;</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box10"&gt;10&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code"><code class="CodeColor">  flex-wrap: wrap;</code></pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">&lt;/div&gt; </pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code">} </pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide"></td>
						<td class="table_invisible_hide">
							<pre class="Code">.box {</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide"></td>
						<td class="table_invisible_hide">
							<pre class="Code"> width: 25%;</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide"></td>
						<td class="table_invisible_hide">
							<pre class="Code">}</pre>
						</td>
					</tr>
				</tbody>
			</table>
			<div>
				<figure id="_idContainer1028" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1605_wrap.png" alt="" width="1321" height="846"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-5.</span> Comparing the effects of <span class="Literal-Sidebar">nowrap</span>, <span class="Literal-Sidebar">wrap</span>, and <span class="Literal-Sidebar">wrap-reverse</span> keywords for <span class="Literal-Sidebar">flex-wrap</span>.</figcaption>
				</figure>
			</div>
			<p class="body">By default, when the <span class="Literal-fc">flex-direction</span> is set to <span class="Literal-fc">column</span>, the container expands to contain the height of the items. In order to see wrapping kick in, you need to set a height on the container, as I’ve done here. <span class="Xref-Figure">Figure 16-6</span> shows how wrapping works for each of the <span class="Literal-fc">flex-wrap</span> keywords. Notice that the items are still 25% the width of their parent container, so there is space left over between the columns.</p>
			<pre class="CodeFirst">#container {<br/>  display: flex;<br/>  <code class="CodeColor">height: 350px;</code><br/>  <code class="CodeColor">flex-direction: column;<br/>  flex-wrap: wrap;</code><br/>} <br/>.box {<br/>  width: 25%;<br/>}</pre>
			<div>
				<figure id="_idContainer1030" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1606_column_wrap.png" alt="" width="1321" height="1225"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-6.</span> Comparing <span class="Literal-Sidebar">nowrap</span>, <span class="Literal-Sidebar">wrap</span>, and <span class="Literal-Sidebar">wrap-reverse</span> when the items are in a column.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Putting it together with flex-flow</h3>
			<p class="body">The shorthand property <a id="_idIndexMarker2918"></a><a id="_idIndexMarker2919"></a><span class="Literal-fc">flex-flow</span> makes specifying <span class="Literal-fc">flex-direction</span> and <span class="Literal-fc">flex-wrap</span> short and sweet. Omitting one value results in the default value for its respective property, which means you can use <span class="Literal-fc">flex-flow</span> for either or both direction and wrap.</p>
			<p class="RefNameCode-Left">flex-flow</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">flex-direction</span><span class="prop-label">  </span><span class="prop-replace">flex-wrap</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">row nowrap</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">Using <span class="Literal-fc">flex-flow</span>, I could shorten the previous example (<span class="Xref-Figure">Figure 16-6</span>) like so:</p>
			<pre class="CodeFirst">#container {<br/>  display: flex;<br/>  height: 350px;<br/><code class="CodeColor">  flex-flow: column wrap;</code><br/>}</pre>
			<p class="body">You’ve only scratched the surface of Flexbox, but you’ve got what it takes to whip that ugly <span class="Literal-fc">nav</span> menu on the bakery page into shape in <span class="Xref-Figure">Exercise 16-1</span>.</p>
			<div>
				<div id="_idContainer1033" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 16-1.</span> Making a navigation bar with Flexbox</h6>
					<p class="SidebarBody">Open the most recent <a id="_idIndexMarker2920"></a>version of the style sheet for the bakery home page in a text editor. If you need a fresh start, you will find an updated copy of <span class="Filename--Sidebar-">bakery-styles.css</span> in the materials for <span class="Xref--Sidebar-">Chapter 16</span>. </p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Note:</strong> Be sure to use one of the Flexbox-supporting browsers listed at the end of this section.</p>
					<ol>
						<li class="SidebarListNumber">Open <span class="Filename--Sidebar-">bakery-styles.css</span> in a text editor and start by making the <span class="Literal-Sidebar">ul</span> element in the <span class="Literal-Sidebar">nav</span> element as neutral as possible:<pre class="SidebarCodeFirst">nav ul {<br/>  <code class="CodeColor">margin: 0;<br/>  padding: 0;<br/>  list-style-type: none;</code><br/>} </pre><p class="SidebarListItem_cont">Turn that <span class="Literal-Sidebar">ul</span> element into a flexbox by setting its <span class="Literal-Sidebar">display</span> to <span class="Literal-Sidebar">flex</span>. As a result, all of the <span class="Literal-Sidebar">li</span> elements become flex items. Because we want rows and no wrapping, the default values for <span class="Literal-Sidebar">flex-direction</span> and <span class="Literal-Sidebar">flex-wrap</span> are fine, so the properties can be omitted:</p><pre class="SidebarCodeFirst">nav ul {<br/>  …<br/>  <code class="CodeColor">display: flex;</code><br/>}</pre><p class="SidebarListItem_cont">Save the document and look at it in a browser. You should see that the links are lined up tightly in a row, which is an improvement, but we have more work to do. </p></li>
						<li class="SidebarListNumber">Now we can work on the appearance of the links. Start by making the <span class="Literal-Sidebar">a</span> elements in the <span class="Literal-Sidebar">nav</span> list items display as block elements instead of inline. Give them 1px rounded borders, padding within the borders (.5em top and bottom, 1em left and right), and .5em margins to give them space and to open up the brown navigation bar. <pre class="SidebarCodeFirst"><code class="CodeColor">nav ul li a {<br/>  display: block;<br/>  border: 1px solid;<br/>  border-radius: .5em;<br/>  padding: .5em 1em;<br/>  margin: .5em;<br/>} </code></pre></li>
						<li class="SidebarListNumber">We want the navigation menu to be centered in the width of the <span class="Literal-Sidebar">nav</span> section. I’m getting a little ahead here because we haven’t seen alignment properties yet, but this one is fairly intuitive. Consider it a preview of what’s coming up in the next section. Add the following declaration for the <span class="Literal-Sidebar">nav</span> <span class="Literal-Sidebar">ul</span> element:<pre class="SidebarCodeFirst">nav ul {<br/>  …<br/>  display: flex;<br/><code class="CodeColor">  justify-content: center;</code><br/>}</pre></li>
					</ol>
					<p class="SidebarBody"><span class="Xref-Figure">Figure 16-7</span> shows the way your navigation menu should look when you are finished.</p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">IMPORTANT:</strong> We’ll be using this version of the bakery site as the starting point for <span class="Xref-Figure">Exercise 16-6</span>, so save it and keep it for later.</p>
					<div>
						<figure id="_idContainer1032" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1607_ex1_nav.png" alt="" width="540" height="172"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-7.</span> The list of links is now styled as a horizontal menu bar.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h2 class="HeadB">Controlling the Alignment of Flex Items in the Container</h2>
			<p class="body">So far we’ve <a id="_idIndexMarker2921"></a><a id="_idIndexMarker2922"></a><a id="_idIndexMarker2923"></a>seen how to turn flexbox mode on, turning an element into a flex container and its children into flex items. We’ve also learned how to change the direction in which items flow, and allow them to wrap onto multiple lines. The remaining set of container properties affects the alignment of items along the main axis (<span class="Literal-fc">justify-content</span>) and cross axis (<span class="Literal-fc">align-items</span> and <span class="Literal-fc">align-content</span>).</p>
			<h3 class="HeadC">Aligning on the main axis </h3>
			<p class="body">By default, flex <a id="_idIndexMarker2924"></a>items are just as wide as they need to be to contain the element’s content, which means the container may potentially have space to spare on the flex line. We saw this back in <span class="Xref-Figure">Figure 16-2</span>. Also by default, the items flow in right next to each other from the “main start” (based on language direction and the direction of the flex line). </p>
			<p class="body">The <span class="Literal-fc">justify-content</span> property defines how extra space should be distributed around or between items that are inflexible or have reached their maximum size (see <span class="Xref">Note</span>). </p>
			<div>
				<div id="_idContainer1034" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">You can also distribute extra space along the main axis by making the flex items themselves wider to fill the available space. That is the job of the <span class="Literal-Sidebar">flex</span> properties, which we'll look at in a moment.</p>
				</div>
			</div>
			<p class="RefNameCode-Left">justify-content</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">flex-start </span>| <span class="prop-code">flex-end </span>| <span class="prop-code">center </span>| <span class="prop-code">space-between </span>| <span class="prop-code">space-around</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">flex-start</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">Apply <span class="Literal-fc">justify-content</span> <a id="_idIndexMarker2925"></a>to the flex container element because it controls spacing within the container itself: </p>
			<pre class="CodeFirst">#container {<br/>  display: flex;<br/><code class="CodeColor">  justify-content: flex-start;</code><br/>} </pre>
			<p class="body"><span class="Xref-Figure">Figure 16-8</span> shows how items align using each of the keyword values for <span class="Literal-fc">justify-content</span>. As you would expect, <span class="Literal-fc">flex-start</span> and <span class="Literal-fc">flex-end</span> position the line of items toward the start and end of the main axis, respectively, and <span class="Literal-fc">center</span> centers them. </p>
			<p class="body"><span class="Literal-fc">space-between</span> and <span class="Literal-fc">space-around</span> warrant a little more explanation. When <span class="Literal-fc">justify-content</span> is set to <span class="Literal-fc">space-between</span>, the first item is positioned at the start point, the last item goes at the end point, and the remaining space is distributed evenly between the remaining items. The <span class="Literal-fc">space-around</span> property adds an equal amount of space on the left and right side of each item, resulting in a doubling up of space between neighboring items. </p>
			<div>
				<div id="_idContainer1035" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">As new alignment keywords are added to the Grid Layout spec, they are available for Flexbox as well; however, because they are newer, they will be less well supported. Be sure to check the Flexbox spec for updates.</p>
				</div>
			</div>
			<div>
				<figure id="_idContainer1037" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1608_justifycontent.png" alt="" width="1321" height="696"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-8.</span> Options for aligning items along the main axis with <span class="Literal-Sidebar">justify-content</span>.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1038" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The <span class="Literal-Sidebar">justify-content</span> setting is applied <em class="Emphasis">after</em> margins have been calculated on items and after the way that items have been set to “flex” has been accounted for. If the <span class="Literal-Sidebar">flex</span> value for items allows them to grow to fill the container width, then <span class="Literal-Sidebar">justify-content</span> is not applicable.</p>
				</div>
			</div>
			<p class="body">When the direction is set to a column with a vertical main axis, the keywords work the same way; however, there needs to be an explicit container height with space left over in order for you to see the effect. I’ve changed the size of the text and set a height on the container element in <span class="Xref-Figure">Figure 16-9</span> to demonstrate the same keywords as applied to a vertical main axis.</p>
			<div>
				<figure id="_idContainer1040" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1609_justify_oolumn-ebook.png" alt="" width="1337" height="1575"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-9.</span> Options for aligning items along a vertical main axis (<span class="Literal-Sidebar">flex-direction</span> set to <span class="Literal-Sidebar">column</span>) with <span class="Literal-Sidebar">justify-content</span>. </figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Aligning on the cross axis </h3>
			<p class="body">That takes <a id="_idIndexMarker2926"></a>care of arranging things on the main axis, but you may also want to play around with alignment on the cross axis (up and down when the direction is <span class="Literal-fc">row</span>, left and right if the direction is <span class="Literal-fc">column</span>). Cross-axis alignment and stretching is the job of the <span class="Literal-fc">align-items</span> property. </p>
			<p class="RefNameCode-Left">align-items</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">flex-start</span> | <span class="prop-code">flex-end</span> | <span class="prop-code">center</span> | <span class="prop-code">baseline</span> | <span class="prop-code">stretch</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">stretch</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">I’ve demonstrated <a id="_idIndexMarker2927"></a>the various keyword values for <span class="Literal-fc">align-items</span> as it applies to rows in <span class="Xref-Figure">Figure 16-10</span>. In order to see the effect, you must specify the container height; otherwise, it expands just enough to contain the content with no extra space. I’ve given the container a height to show how items are positioned on the cross axis.</p>
			<div>
				<figure id="_idContainer1042" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1610_alignitems-ebook.png" alt="" width="1338" height="1183"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-10.</span> Aligning along the cross axis with <span class="Literal-Sidebar">align-items</span>.</figcaption>
				</figure>
			</div>
			<p class="body">Like <span class="Literal-fc">justify-content</span>, the <span class="Literal-fc">align-items</span> property applies to the flex container (that can be a little confusing because “items” is in the name).</p>
			<pre class="CodeFirst">#container {<br/>  display: flex;<br/>  flex-direction: row;<br/>  height: 200px;<br/>  <code class="CodeColor">align-items: flex-start;</code><br/>} </pre>
			<p class="body">The <span class="Literal-fc">flex-start</span>, <span class="Literal-fc">flex-end</span>, and <span class="Literal-fc">center</span> values should be familiar, only this time they refer to the start, end, and center of the cross axis. The <span class="Literal-fc">baseline</span> value aligns the baselines of the first lines of text, regardless of their size. It may be a good option for lining up elements with different text sizes, such as headlines and paragraphs across multiple items. Finally, <span class="Literal-fc">stretch</span>, which is the default, causes items to stretch until they fill the cross axis. </p>
			<p class="body">When the flex container’s direction is set to <span class="Literal-fc">column</span>, <span class="Literal-fc">align-items</span> aligns items left and right. Look back at <span class="Xref-Figure">Figures 16-2</span> and <span class="Xref-Figure">16-9</span> and you will see that when we set the items in a column and did not provide any alignment information, each item stretched to the full width of the cross axis because <span class="Literal-fc">stretch</span> is the default value.</p>
			<p class="body">If you’d like one or more items to override the cross-axis setting, use the <span class="Literal-fc">align-self</span> property on the individual item element(s). This is the first property we’ve seen that applies to an <em class="Emphasis">item</em>, not the container itself. <span class="Literal-fc">align-self</span> uses the same values as <span class="Literal-fc">align-items</span>; it just works on one item at a time. </p>
			<p class="RefNameCode-Left">align-self</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">flex-start</span> | <span class="prop-code">flex-end</span> | <span class="prop-code">center</span> | <span class="prop-code">baseline</span> | <span class="prop-code">stretch</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">stretch</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">In the following <a id="_idIndexMarker2928"></a>code and <span class="Xref-Figure">Figure 16-11</span>, the fourth box is set to align at the end of the cross axis, while the others have the default stretch behavior.</p>
			<pre class="CodeFirst">.box4 {<code class="CodeColor"> align-self: flex-end;</code> }</pre>
			<div>
				<figure id="_idContainer1044" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1611_alignself.png" alt="" width="1321" height="347"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-11.</span> Use <span class="Literal-Sidebar">align-self</span> to make one item override the cross-axis alignment of its container.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Aligning multiple lines</h3>
			<p class="body">The final alignment option, <span class="Literal-fc">align-content</span>, affects how multiple flex lines are spread out across the cross axis. This property applies only when <span class="Literal-fc">flex-wrap</span> is set to <span class="Literal-fc">wrap</span> or <span class="Literal-fc">wrap-reverse</span> and there are multiple lines to align. If the items are on a <a id="_idIndexMarker2929"></a>single line, it does nothing. </p>
			<div>
				<div id="_idContainer1045" class="callout">
					<p class="callout">align-content applies only when there are multiple wrapped flex lines.</p>
				</div>
			</div>
			<p class="RefNameCode-Left">align-content</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">flex-start</span> | <span class="prop-code">flex-end</span> | <span class="prop-code">center</span> | <span class="prop-code">space-around</span> | <span class="prop-code">space-between</span> | <span class="prop-code">stretch</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">stretch</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	multi-line flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">All of the values you see in the property listing should look familiar, and they work the way you would expect. This time, however, they apply to how extra space is distributed around multiple lines on the cross axis, as shown in <span class="Xref-Figure">Figure 16-12</span>.</p>
			<p class="body">Again, the <span class="Literal-fc">align-content</span> property applies to the flex container element. A height is required for the container as well, because without it the container would be just tall enough to accommodate the content and there would be no space left over.</p>
			<pre class="CodeFirst">#container {<br/>  display: flex;<br/>  flex-direction: row;<br/>  flex-wrap: wrap;<br/>  height: 350px;<br/>  <code class="CodeColor">align-content: flex-start;</code><br/>} <br/><br/>.box {<br/>  width: 25%;<br/>}</pre>
			<div>
				<figure id="_idContainer1047" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1612_align-content_WIDE.png" alt="" width="2025" height="786"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-12.</span> The <span class="Literal-Sidebar">align-content</span> property distributes space around multiple flex lines. It has no effect when flex items are in a single line.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Aligning items with margins</h3>
			<p class="body">As long as <a id="_idIndexMarker2930"></a><a id="_idIndexMarker2931"></a><a id="_idIndexMarker2932"></a>we’re talking about alignment, there is one good trick I’d like to show you that will be useful when you start laying out components with Flexbox. </p>
			<p class="body">Menu bars are ubiquitous on the web, and it is common for one element of the bar, such as a logo or a search field, to be set off visually from the others. You can use a margin to put the extra container space on a specified side or sides of a flex item, thus setting one item apart. This should be more clear with an example.</p>
			<p class="body">The menu in <span class="Xref-Figure">Figure 16-13</span> has a logo and four menu options. I’d like the logo to stay in the left corner but the options to stay over to the right, regardless of the width of the viewport.</p>
			<p class="body"><span class="FigureLabel">The markup</span></p>
			<pre class="CodeFirst">&lt;ul&gt;<br/>  &lt;li class="logo"&gt;&lt;img src="logo.png" alt="LoGoCo"&gt;&lt;/li&gt;<br/>  &lt;li&gt;About&lt;/li&gt;<br/>  &lt;li&gt;Blog&lt;/li&gt;<br/>  &lt;li&gt;Shop&lt;/li&gt;<br/>  &lt;li&gt;Contact&lt;/li&gt;<br/>&lt;/ul&gt; </pre>
			<p class="body"><span class="FigureLabel">The Styles</span></p>
			<pre class="CodeFirst">ul {<br/>  <code class="CodeColor">display: flex;<br/>  align-items: center;</code><br/>  background-color: #00af8f;<br/>  list-style: none; <span class="Code-Comment">/* removes bullets */</span><br/>   padding: .5em;<br/>  margin: 0; <br/>}<br/>li {<br/>  margin: 0 1em;<br/>}<br/><code class="CodeColor">li.logo {<br/>  margin-right: auto;<br/>}  </code></pre>
			<div>
				<figure id="_idContainer1049" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1613_margin.png" alt="" width="844" height="71"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-13.</span> Using a margin to adjust the space around flex items. In this example, the right margin of the logo item pushes the remaining items to the right. </figcaption>
				</figure>
			</div>
			<p class="body">I’ve turned the <a id="_idIndexMarker2933"></a><a id="_idIndexMarker2934"></a><a id="_idIndexMarker2935"></a>unordered list (<span class="Literal-fc">ul</span>) into a flex container, so its list items (<span class="Literal-fc">li</span>) are now flex items. By default, the items would stay together at the start of the main axis (on the left) with extra space on the right. Setting the right margin on the logo item to <span class="Literal-fc">auto</span> moves the extra space to the right of the logo, pushing the remaining items all the way to the right (the “main end”).</p>
			<div>
				<div id="_idContainer1050" class="note">
					<h5 class="WarningHeader">heads-up</h5>
					<p class="note">When you use <span class="Literal-Sidebar">margin: auto</span> on a flex item, the<a id="_idIndexMarker2936"></a> <span class="Literal-Sidebar">justify-content</span> property no longer has a visual effect because you’ve manually assigned a location for the extra space on the main axis.</p>
				</div>
			</div>
			<p class="body">This technique applies to a number of scenarios. If you want just the last item to appear on the right, set its left margin to <span class="Literal-fc">auto</span>. Want equal space around the center item in a list? Set both its left and right margins to <span class="Literal-fc">auto</span>. Want to push a button to the bottom of a column? Set the top margin of the last item to <span class="Literal-fc">auto</span>. The extra space in the container goes into the margin and pushes the neighboring items away. </p>
			<p class="body">We’ve covered a lot of territory, so it’s a good time to try out Flexbox in <span class="Xref-Figure">Exercise 16-2</span>.</p>
			<div>
				<div id="_idContainer1059" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 16-2.</span> A flexible online menu</h6>
					<p class="SidebarBody">Now it’s time for you to play around with Flexbox properties by using content a bit more complex than links in a menu bar. In this exercise, you’ll format a simple online menu with a number of menu items. As always, the materials are available at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a>.</p>
					<p class="SidebarBody">Open <span class="Filename--Sidebar-">flex-menu.html</span> in a text editor, and you’ll see that it has all of the content ready to go as well as an internal style sheet with styles for the cosmetic aspects of the menu (colors, fonts, borders, spacing, etc.).  Open the file in a browser, and the menu items should appear in a column because they are block elements. I put a border on the <span class="Literal-Sidebar">#menu</span> wrapper <span class="Literal-Sidebar">div</span> so you can visualize its boundaries. </p>
					<ol>
						<li class="SidebarListNumber" value="1">First, we’ll go for maximum impact with minimal effort by making the <span class="Literal-Sidebar">#menu</span> wrapper <span class="Literal-Sidebar">div</span> a flex container. There is already a rule for <span class="Literal-Sidebar">#menu</span>, so add this declaration to it:<pre class="SidebarCodeFirst">#menu {<br/>  border: 3px solid #783F27;<br/>  <code class="CodeColor">display: flex;</code><br/>}</pre><p class="SidebarListItem_cont">Save and reload the page in the browser, and BAM!…they’re in a row now! And because we haven’t added any other flex properties, they are demonstrating default flexbox behavior (<span class="Xref-Figure">Figure 16-14</span>):</p><ul><li class="SidebarListBullet--indent">Each item (defined by a <span class="Literal-Sidebar">section</span> element) is the full height of the <span class="Literal-Sidebar">#menu</span> container, regardless of its content.</li><li class="SidebarListBullet--indent">The sections have their widths set to 240 pixels, and that measurement is preserved by default. Depending on how wide your browser window is set, you may see content extending beyond the container and getting clipped off, as shown in the figure. <figure id="_idContainer1052" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1614_ex16-2.flex.png" alt="" width="1321" height="605"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-14.</span> The bistro menu in default flexbox mode. By default, the items stay in one row even though there is not enough room for them and content gets clipped.</figcaption></figure></li></ul></li>
						<li class="SidebarListNumber">By default, flex items appear in the writing direction (a row, left to right, in English). Add the <span class="Literal-Sidebar">flex-direction</span> property to the existing <span class="Literal-Sidebar">#menu</span> rule to try out some of the other values (<span class="Literal-Sidebar">row-reverse</span>, <span class="Literal-Sidebar">column</span>, <span class="Literal-Sidebar">column-reverse</span>). The items are numbered to make their order more apparent. <pre class="SidebarCodeFirst"><code class="CodeColor">flex-direction: row-reverse;</code></pre></li>
						<li class="SidebarListNumber">Set the <span class="Literal-Sidebar">flex-direction</span> back to <span class="Literal-Sidebar">row</span>, and let’s play around with the cross-axis alignment by using the <span class="Literal-Sidebar">align-items</span> property. Begin by setting it to <span class="Literal-Sidebar">flex-start</span> (<span class="Xref-Figure">Figure 16-15</span>). Save and reload, and see that the items all line up at the start of the cross axis (the top, in this case). Try some of the other values for <span class="Literal-Sidebar">align-items</span> (<span class="Literal-Sidebar">flex-end</span>, <span class="Literal-Sidebar">center</span>, <span class="Literal-Sidebar">baseline</span>, and <span class="Literal-Sidebar">stretch</span>) to get a feel for how each behaves.  <pre class="SidebarCodeFirst"><code class="CodeColor">align-items: flex-start;</code></pre><figure id="_idContainer1054" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1615_ex16-2_align.png" alt="" width="1337" height="390"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-15.</span> Using the <span class="Literal-fc">align-items</span> property to align the items at the start of the cross axis (<span class="Literal-Sidebar">flex-start</span>). </figcaption></figure></li>
						<li class="SidebarListNumber">When you are done experimenting, set <span class="Literal-Sidebar">align-items</span> back to <span class="Literal-Sidebar">stretch</span>. Instead of having all the items on one line and getting cropped by the edge of the browser, let’s have them wrap onto multiple lines by using the <span class="Literal-Sidebar">flex-wrap</span> property on the <span class="Literal-Sidebar">#menu</span> container: <pre class="SidebarCodeFirst"><code class="CodeColor">flex-wrap: wrap;</code></pre><p class="SidebarListItem_cont">Save the file and look at it in the browser (<span class="Xref-Figure">Figure 16-16</span>). Resize the browser window and watch the lines rewrap. Notice that each flex line is as tall as the tallest item in that row, but rows may have different heights based on item content.</p><figure id="_idContainer1056" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1616_ex16-2_wrap.png" alt="" width="982" height="709"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-16.</span> The menu with wrapping turned on.</figcaption></figure></li>
						<li class="SidebarListNumber">If you’d like, you can replace the <span class="Literal-Sidebar">flex-direction</span> and <span class="Literal-Sidebar">flex-wrap</span> declarations with a single <span class="Literal-Sidebar">flex-flow</span> declaration like so:<pre class="SidebarCodeFirst"><code class="CodeColor">flex-flow: row wrap;</code></pre></li>
						<li class="SidebarListNumber">By default, the items on each flex line are stacked toward the start of the main axis (the left). Try changing the main-axis alignment of items with the <span class="Literal-Sidebar">justify-content</span> property (again, applied to the <span class="Literal-Sidebar">#menu</span> flex container rule). I like how they look centered in the container, but check out the effect of the other values (<span class="Literal-Sidebar">flex-start</span>, <span class="Literal-Sidebar">flex-end</span>, <span class="Literal-Sidebar">space-between</span>, <span class="Literal-Sidebar">space-around</span>) as well.<pre class="SidebarCodeFirst"><code class="CodeColor">justify-content: center;</code></pre></li>
						<li class="SidebarListNumber">As a final tweak, let’s make the price buttons line up at the bottom of each menu item, which is possible if each item is also a flex container. Here, I’m making each item a nested flex container by setting its <span class="Literal-Sidebar">display</span> to <span class="Literal-Sidebar">flex</span> and specifying the direction as <span class="Literal-Sidebar">column</span> so they continue to stack up vertically. Now the <span class="Literal-Sidebar">h2</span> and <span class="Literal-Sidebar">p</span> elements become flex items within the <span class="Literal-Sidebar">section</span> flex container.<pre class="SidebarCodeFirst">section {<br/>  …<br/>  <code class="CodeColor">display: flex;<br/>  flex-direction: column;</code><br/>}</pre><p class="SidebarListItem_cont">When you reload the page in the browser, it looks about the same as when the sections were made up of block elements. The subtle difference is that now the neighboring margins between elements stack up and do not collapse. </p><p class="SidebarListItem_cont">Now push the paragraphs containing the prices to the bottom using the <span class="Literal-Sidebar">margin: auto</span> trick. Add this declaration to the existing style rule for elements with the class name “price.”</p><pre class="SidebarCodeFirst">.price {<br/>  …<br/>  <code class="CodeColor">margin-top: auto;</code><br/>}</pre></li>
					</ol>
					<p class="SidebarBody"><span class="Xref-Figure">Figure 16-17</span> shows the final state of the “Bistro Items to Go” menu with nested flexboxes. We’ll continue working on this file after we’ve learned the item-specific properties, so save it for later.</p>
					<div>
						<figure id="_idContainer1058" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1617_ex16-2_final.png" alt="" width="946" height="730"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-17.</span> The menu so far with wrapping flex items and aligned prices.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h2 class="HeadB">Determining How Items “Flex” in the Container</h2>
			<p class="body">One of the <a id="_idIndexMarker2937"></a><a id="_idIndexMarker2938"></a>great marvels of the flexbox model is that items resize, or <span class="FirstTerm">flex</span> to use the formal term, to fit the available space. It’s this flexibility that makes Flexbox such a powerful tool for designing for the wide array of screen and browser window sizes we encounter as web designers. The beauty is that the browser figures out the sizes on the fly, and that means less math for us! In this section, we’ll get to know the flex properties.</p>
			<p class="body">Earlier, you learned about the <span class="Literal-fc">justify-content</span> property, which distributes extra space in the container between and around items along the main axis. The concept of <span class="FirstTerm">flex</span> is concerned with how space is distributed <em class="Emphasis">within</em> items, growing or shrinking items as required to make them fit. </p>
			<p class="body">Flex is controlled with the <span class="Literal-fc">flex</span> property, which specifies how much an item can grow and shrink, and identifies its starting size. The full story is that <span class="Literal-fc">flex</span> is a shorthand property for <span class="Literal-fc">flex-grow</span>, <span class="Literal-fc">flex-shrink</span>, and <span class="Literal-fc">flex-basis</span>, but the spec strongly recommends that authors use the <span class="Literal-fc">flex</span> shorthand instead of individual properties in order to avoid conflicting default values and to ensure that authors consider all three aspects of <span class="Literal-fc">flex</span> for every instance.</p>
			<div>
				<div id="_idContainer1060" class="callout">
					<p class="callout">The flex properties apply to flex items, not the container.</p>
				</div>
			</div>
			<p class="RefNameCode-Left">flex</p>
			<p class="property"><span class="prop-label">Values:</span> 	none | '<span class="prop-replace">flex-grow   flex-shrink   flex-basis'</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	0 1 <span class="prop-code">auto</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The value for the <span class="Literal-fc">flex</span> property is typically three flex properties listed in this order:</p>
			<pre class="CodeFirst">flex: <span class="Replaceable">flex-grow flex-shrink flex-basis;</span></pre>
			<p class="body">For the <a id="_idIndexMarker2939"></a><span class="Literal-fc">flex-grow</span> and <span class="Literal-fc">flex-shrink</span> properties, the values 1 and 0 work like on/off switches, where 1 “turns on” or allows an item to grow or shrink, and 0 prevents it. The <span class="Literal-fc">flex-basis</span> property sets the starting dimensions, either to a specific size or a size based on the contents.</p>
			<p class="body">In this quick example, a list item starts at 200 pixels wide, is allowed to expand to fill extra space (1), but is not allowed to shrink (0) narrower than the original 200 pixels.</p>
			<pre class="CodeFirst">li {</pre>
			<pre class="Code"><code class="CodeColor">  flex: 1 0 200px;</code></pre>
			<pre class="Code">}</pre>
			<p class="body">That should give you the general idea. In this section, we’ll take a much closer look at growing, shrinking, and base size, in that order. </p>
			<p class="body">But first, it is important to note that <span class="Literal-fc">flex</span> and its component properties apply to flex <em class="Emphasis">items</em>, not the container. Keeping track of which properties go on the container and which go on items is one of the tricks of using Flexbox. See the <span class="Xref">“Flex Properties”</span> sidebar for a handy list of how the properties are divided.</p>
			<div>
				<div id="_idContainer1061" class="sidebar">
					<h5 class="SidebarSeries">At a Glance</h5>
					<h5 class="SidebarTitle">Flex Properties</h5>
					<p class="SidebarBody">Now that <a id="_idIndexMarker2940"></a><a id="_idIndexMarker2941"></a>you’ve been introduced to all the properties in the Flexible Box Module, it might be helpful to see at a glance which properties apply to containers and which are set on flex items.</p>
					<h5 class="sbHead">Container Properties</h5>
					<p class="SidebarBody">Apply these <a id="_idIndexMarker2942"></a><a id="_idIndexMarker2943"></a><a id="_idIndexMarker2944"></a><a id="_idIndexMarker2945"></a><a id="_idIndexMarker2946"></a><a id="_idIndexMarker2947"></a><a id="_idIndexMarker2948"></a><a id="_idIndexMarker2949"></a><a id="_idIndexMarker2950"></a>properties to the flex container:</p>
					<pre class="SidebarCode">display <br/>flex-flow<br/>  flex-direction<br/>  flex-wrap <br/>justify-content <br/>align-items <br/>align-content</pre>
					<h5 class="sbHead">Flex Item Properties</h5>
					<p class="SidebarBody">Apply these properties to flex items:</p>
					<pre class="SidebarCode">align-self <br/>flex  <br/>  flex-grow <br/>  flex-shrink <br/>  flex-basis <br/>order</pre>
				</div>
			</div>
			<h3 class="HeadC">Expanding items (flex-grow)</h3>
			<p class="body">The first value<a id="_idIndexMarker2951"></a> in the <span class="Literal-fc">flex</span> property specifies whether (and in what proportion) an item may stretch larger—in other words, its <span class="Literal-fc">flex-grow</span> value (see <span class="Xref">Note</span>). By default it is set to 0, which means an item is not permitted to grow wider than the size of its content or its specified width. Because items do not expand by default, the alignment properties have the opportunity to go into effect. If the extra space was taken up inside items, alignment wouldn’t work.</p>
			<div>
				<div id="_idContainer1062" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note"><span class="Literal-Sidebar">flex-grow</span> is the individual property that specifies how an item may expand. Authors are encouraged to use the shorthand <span class="Literal-Sidebar">flex</span> property instead.</p>
				</div>
			</div>
			<p class="RefNameCode-Left">flex-grow</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">number</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">0</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">If you set <a id="_idIndexMarker2952"></a>the <span class="Literal-fc">flex-grow</span> value for all the items in a container to 1, the browser takes whatever extra space is available along the main axis and applies it equally to each item, allowing them all to stretch the same amount. </p>
			<p class="body">Let’s take the simple box example from earlier in the chapter and see how it behaves with various flex settings applied. <span class="Xref-Figure">Figure 16-18</span> shows what happens when <span class="Literal-fc">flex-grow</span> is set to 1 for all box items (<span class="Literal-fc">flex-shrink</span> and <span class="Literal-fc">flex-basis</span> are left at their default values). Compare this to the same example with <span class="Literal-fc">flex-grow</span> set to the default 0 (this is the same behavior we observed in <span class="Xref-Figure">Figure 16-2</span>).</p>
			<div>
				<div id="_idContainer1063" class="contents">
					<p class="body"><span class="FigureLabel">The markup</span></p>
					<pre class="CodeFirst">&lt;div id="container"&gt;<br/>  &lt;div class="box box1"&gt;1&lt;/div&gt;<br/>  &lt;div class="box box2"&gt;2&lt;/div&gt;<br/>  &lt;div class="box box3"&gt;3&lt;/div&gt;<br/>  &lt;div class="box box4"&gt;4&lt;/div&gt;<br/>  &lt;div class="box box5"&gt;5&lt;/div&gt;<br/>&lt;/div&gt; </pre>
					<p class="body"><span class="FigureLabel">The Styles</span></p>
					<pre class="CodeFirst">.box {<br/>  …<br/>   flex: 1 1 auto;<br/>}</pre>
				</div>
			</div>
			<table id="table002-10" class="table_invisible_hide">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<p class="body"><span class="FigureLabel">The markup</span></p>
						</td>
						<td class="table_invisible_hide">
							<p class="body"><span class="FigureLabel">The Styles</span></p>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide"></td>
						<td class="table_invisible_hide"></td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="CodeFirst">&lt;div id="container"&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="CodeFirst">.box {</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box1"&gt;1&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code">  … 	</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box2"&gt;2&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code"><code class="CodeColor">  flex: 1 </code>1 auto;</pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box3"&gt;3&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide">
							<pre class="Code">} </pre>
						</td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box4"&gt;4&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide"></td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">  &lt;div class="box box5"&gt;5&lt;/div&gt;</pre>
						</td>
						<td class="table_invisible_hide"></td>
					</tr>
					<tr class="table_invisible_hide">
						<td class="table_invisible_hide">
							<pre class="Code">&lt;/div&gt; </pre>
						</td>
						<td class="table_invisible_hide"></td>
					</tr>
				</tbody>
			</table>
			<div>
				<figure id="_idContainer1065" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1618_flex-grow.png" alt="" width="1321" height="603"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-18.</span> When <span class="Literal-Sidebar">flex-grow</span> is set to 1, the extra space in the line is distributed into the items in equal portions, and they expand to fill the space at the same rate.</figcaption>
				</figure>
			</div>
			<p class="body">If you specify a higher <span class="Literal-fc">flex-grow</span> integer to an item, it acts as a ratio that applies more space within that item. For example, giving “box4” the value <span class="Literal-fc">flex-grow: 3</span> means that it receives three times the amount of space than the remaining items set to <span class="Literal-fc">flex-grow: 1</span>. <span class="Xref-Figure">Figure 16-19</span> shows the result. </p>
			<pre class="CodeFirst">.box4 {<br/><code class="CodeColor">   flex: 3 </code>1 auto;<br/>}</pre>
			<div>
				<figure id="_idContainer1067" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1619_flexgrow.png" alt="" width="1321" height="358"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-19.</span> Assigning a different amount <span class="Literal-Sidebar">flex-grow</span> to an individual item. Here “box4” was set to expand at three times the rate of the other items.</figcaption>
				</figure>
			</div>
			<p class="body">Notice that the resulting item is not three times as wide as the others; it just got three times the amount of space added to it. </p>
			<p class="body">If there’s not much space left over on the line, there’s a chance that each portion of space could be small enough that it would not add up to much difference. You may just need to play around with the <span class="Literal-fc">flex-grow</span> values and adjust the width of the browser until you get the effect you want.</p>
			<p class="body">Now that you have that concept down, shrinking should be straightforward because it is based on the same principle.</p>
			<h3 class="HeadC">Squishing items (flex-shrink)</h3>
			<p class="body">The second <span class="Literal-fc">flex</span> property value, <span class="Literal-fc">flex-shrink</span>, kicks in when the container is not wide enough to contain the items, resulting in a space deficit. It essentially takes away some space from within the items, shrinking them to fit, according <a id="_idIndexMarker2953"></a>to a specified ratio. </p>
			<p class="RefNameCode-Left">flex-shrink</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">number</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">1</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<div>
				<div id="_idContainer1068" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note"><span class="Literal-Sidebar">flex-shrink</span> is the individual property that specifies how an item may contract. Authors are encouraged to use the shorthand <span class="Literal-Sidebar">flex</span> property instead.</p>
				</div>
			</div>
			<p class="body">By default, the <span class="Literal-fc">flex-shrink</span> value is set to 1, which means if you do nothing, items shrink to fit at the same rate. When <span class="Literal-fc">flex-shrink</span> is 0, items are not permitted to shrink, and they may hang out of their container and out of view of the viewport. Finally, as in <span class="Literal-fc">flex-grow</span>, a higher integer works as a ratio. An item with a <span class="Literal-fc">flex-shrink</span> of 2 will shrink twice as fast as if it were set to 1. You will not generally need to specify a shrink ratio value. Just turning shrinking on (1) or off (0) should suffice. </p>
			<div>
				<div id="_idContainer1069" class="callout">
					<p class="callout">By default, items may shrink when the container is not wide enough (flex-shrink: 1).</p>
				</div>
			</div>
			<p class="body">Flex items stop shrinking when they reach their minimum size (defined by <span class="Literal-fc">min-width</span>/<span class="Literal-fc">min-height</span>). By default (when <span class="Literal-fc">min-width</span>/<span class="Literal-fc">min-height</span> is <span class="Literal-fc">auto</span>), this minimum is based on its <span class="Literal-fc">min-content</span> size. But it can easily be set to zero, or 12em, or any other length that seems useful. Watch for this effect when deeply nested items force a flex item to be wider than expected.</p>
			<p class="body">You will see the <span class="Literal-fc">flex-shrink</span> property in action in <span class="Xref-Figure">Figure 16-20</span> in the next section. </p>
			<h3 class="HeadC">Providing an initial size (flex-basis)</h3>
			<p class="body">The third <span class="Literal-fc">flex</span> <a id="_idIndexMarker2954"></a>value defines the starting size of the item before any wrapping, growing, or shrinking occurs (<span class="Literal-fc">flex-basis</span>). It may be used instead of the <span class="Literal-fc">width</span> property (or <span class="Literal-fc">height</span> property for columns) for flex items. </p>
			<p class="RefNameCode-Left">flex-basis</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">length</span> | <span class="prop-replace">percentage</span> | <span class="prop-code">content</span> | <span class="prop-code">auto</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">auto</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<div>
				<div id="_idContainer1070" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note"><span class="Literal-Sidebar">flex-basis</span> is the individual property that sets the initial size of the item. Authors are encouraged to use the shorthand <span class="Literal-Sidebar">flex</span> property instead.</p>
				</div>
			</div>
			<p class="body">In this example, <a id="_idIndexMarker2955"></a>the <span class="Literal-fc">flex-basis</span> of the boxes is set to 100 pixels (<span class="Xref-Figure">Figure 16-20</span>). The items are allowed to shrink smaller to fit in the available space (<span class="Literal-fc">flex-shrink: 1</span>), but they are not allowed to grow any wider (<span class="Literal-fc">flex-grow: 0</span>) than 100 pixels, leaving extra space in the container.</p>
			<pre class="CodeFirst">.box {<br/>  flex: 0 1 <code class="CodeColor">100px</code>;<br/>}</pre>
			<div>
				<figure id="_idContainer1072" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1620_flex-basis.png" alt="" width="1321" height="699"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-20.</span> Using <span class="Literal-Sidebar">flex-basis</span> to set the starting width for items.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1073" class="callout">
					<p class="callout">Flex settings override specified widths/heights for flex items.</p>
				</div>
			</div>
			<p class="body">By default, <span class="Literal-fc">flex-basis</span> is set to <span class="Literal-fc">auto</span>, which uses the specified <span class="Literal-fc">width</span>/<span class="Literal-fc">height</span> property values for the item size. If the item’s main size property (<span class="Literal-fc">width</span> or <span class="Literal-fc">height</span>) is not set or is <span class="Literal-fc">auto</span> (its default), <span class="Literal-fc">flex-basis</span> uses the content width. You can also explicitly set <span class="Literal-fc">flex-basis</span> to be the width of the content with the <span class="Literal-fc">content</span> keyword; however, that value is poorly supported as of this writing. </p>
			<p class="body">In this example, the flex basis for the boxes is set to 100 pixels because the <span class="Literal-fc">auto</span> value uses the value set by <span class="Literal-fc">width</span>. Items are allowed to grow, taking up any extra space in the container, but they are not allowed to shrink.</p>
			<pre class="CodeFirst">box {<br/>  width: 100px;<br/>  flex: 1 0 <code class="CodeColor">auto</code>;<br/>}</pre>
			<p class="body">When the browser goes about sizing a flex item, it consults the <span class="Literal-fc">flex-basis</span> value, compares it to the available space along the axis, and then adds or removes space from items according to their grow and shrink settings. It’s important to note that if you allow an item to grow or shrink, it could end up being narrower or wider than the length provided by <span class="Literal-fc">flex-basis</span> or <span class="Literal-fc">width</span>.</p>
			<h3 class="HeadC">Handy shortcut flex values</h3>
			<p class="body">The advantage to using the <span class="Literal-fc">flex</span> property is that there are some handy shortcut values that cover typical Flexbox scenarios. Curiously, some of the shortcut values override the defaults of the individual properties, which was confusing to me at first, but in the end it results in more predictable behaviors. When creating a flexbox component, see if one of these easy settings will do the trick:</p>
			<p class="ListVariableTerm"><span class="Literal-fc">flex: initial;</span> </p>
			<p class="ListVariable">This is the same as <span class="Literal-fc">flex: 0 1 auto</span>. It prevents the flex item from growing even when there is extra space, but allows it to shrink to fit in the container. The size is based on the specified <span class="Literal-fc">width</span>/<span class="Literal-fc">height</span> properties, defaulting to the size of the content. With the <span class="Literal-fc">initial</span> value, you can use <span class="Literal-fc">justify-content</span> for horizontal alignment.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">flex: auto; </span></p>
			<p class="ListVariable">This is the same as <span class="Literal-fc">flex: 1 1 auto</span>. It allows items to be fully flexible, growing or shrinking as needed. The size is based on the specified <span class="Literal-fc">width</span>/<span class="Literal-fc">height</span> properties.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">flex: none;</span></p>
			<p class="ListVariable">This is equivalent to <span class="Literal-fc">flex: 0 0 auto</span>. It creates a completely inflexible flex item while sizing it to the <span class="Literal-fc">width</span> and <span class="Literal-fc">height</span> properties. You can also use <span class="Literal-fc">justify-content</span> for alignment when flex is set to <span class="Literal-fc">none</span>.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">flex: </span><span class="Replaceable">integer</span><span class="Literal-fc">;</span></p>
			<p class="ListVariable">This is the same as <span class="Literal-fc">flex: </span><span class="Replaceable">integer</span><span class="Literal-fc"> 1 0px</span>. The result is a flexible item with a flex basis of 0, which means it has absolute flex (see the sidebar “<span class="Xref">Absolute Versus Relative Flex</span>”) and free space is allocated according to the flex number applied to items.</p>
			<p class="body">How are you doing? Are you hanging in there with all this Flexbox stuff? I know it’s a lot to take in at once. We have just one more Flexbox item property to cover before you get another chance to try it out yourself. </p>
			<div>
				<div id="_idContainer1076" class="sidebar">
					<h5 class="SidebarTitle">Absolute Versus Relative Flex</h5>
					<p class="SidebarBody">In <span class="Xref-Figure">Figure 16-19</span>, we saw how extra space is assigned to items based on their flex ratios. This is<a id="_idIndexMarker2956"></a><a id="_idIndexMarker2957"></a> called <span class="FirstTerm--Sidebar-">relative flex</span>, and it is how extra space is handled whenever the <span class="Literal-Sidebar">flex-basis</span> is set to any size other than zero (0), such as a particular <span class="Literal-Sidebar">width</span>/<span class="Literal-Sidebar">height</span> value or <span class="Literal-Sidebar">auto</span>.</p>
					<p class="SidebarBody">However, if you reduce the value of <span class="Literal-Sidebar">flex-basis</span> to 0, something interesting happens. With a basis of 0, the items get sized proportionally according to the flex ratios, which is known as <span class="FirstTerm--Sidebar-">absolute flex</span>. So with <span class="Literal-Sidebar">flex-basis: 0</span>, an item<a id="_idIndexMarker2958"></a> with a <span class="Literal-Sidebar">flex-grow</span> value of 2 <em class="Emphasis">would</em> be twice as wide as the items set to 1. Again, this kicks in only when the <span class="Literal-Sidebar">flex-basis</span> is 0.</p>
					<p class="SidebarBody">In practice it is recommended that you always include a unit after the 0, such as <span class="Literal-Sidebar">0px</span> or the preferred <span class="Literal-Sidebar">0%</span>. </p>
					<p class="SidebarBody">In this example of absolute flex, the first box is given a <span class="Literal-Sidebar">flex-grow</span> value of 2, and the fourth box has a <span class="Literal-Sidebar">flex-grow</span> value of 3 via the aforementioned shortcut <span class="Literal-Sidebar">flex: </span><span class="Replaceable-Sidebar">integer</span>. In <span class="Xref-Figure">Figure 16-21</span>, you can see that the resulting overall size of the boxes is in proportion to the <span class="Literal-Sidebar">flex-grow</span> values because the <span class="Literal-Sidebar">flex-basis</span> is set to 0.</p>
					<pre class="SidebarCodeFirst">.box {<br/>   <span class="Code-Comment">/* applied to all boxes */</span><br/>   flex: 1 0 <code class="CodeColor">0%</code>; <br/>}<br/>.box1 {<br/>  flex: <code class="CodeColor">2</code>; <span class="Code-Comment">/* shortcut value for flex: 2 1 0px */</span> <br/>}<br/>.box4 {<br/>  flex: <code class="CodeColor">3</code>; <span class="Code-Comment">/* shortcut value for flex: 3 1 0px */</span> <br/>}</pre>
					<div>
						<figure id="_idContainer1075" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1621_absolute.png" alt="" width="1298" height="429"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-21.</span> In absolute flex, boxes are sized according to the flex value ratios.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<div>
				<div id="_idContainer1077" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">I use Flexbox to format a responsive form in the “Styling Forms” section of <span class="Xref--Sidebar-">Chapter 19, More CSS Techniques</span>. Flex properties allow form fields to adapt to the available width, while labels are set to always stay the same size. Wrapping allows form fields to move below their labels on smaller screens. You’ve probably got Flexbox in your head right now, so it might be worth taking a look ahead.</p>
				</div>
			</div>
			<h2 class="HeadB">Changing the Order of Flex Items</h2>
			<p class="body">One of the <a id="_idIndexMarker2959"></a><a id="_idIndexMarker2960"></a><a id="_idIndexMarker2961"></a>killer features of Flexbox is the ability to display items in an order that differs from their order in the source (see the <span class="Xref">“When to Reorder (and When Not To)”</span> sidebar). That means you can change the layout order of elements by using CSS alone. This is a powerful tool for responsive design, allowing content from later in a document to be moved up on smaller screens.</p>
			<div>
				<div id="_idContainer1078" class="sidebar">
					<h5 class="SidebarTitle">When to Reorder (and When Not to) </h5>
					<p class="SidebarBody">Keep in mind that although convenient, reordering is only a visual display sleight-of-hand and should be used with discretion. Some points to remember:</p>
					<ul>
						<li class="SidebarListBullet">Although elements display in a different order for visual browsers, alternative devices such as screen readers still read the content in the order in which it appears in the source (although it is not 100% reliable in the real world). </li>
						<li class="SidebarListBullet">Reorder the source if there is a logical (rather than visual) reason for the reordering.</li>
						<li class="SidebarListBullet">Don’t use <span class="Literal-Sidebar">order</span> because it is more convenient.</li>
						<li class="SidebarListBullet">Use <span class="Literal-Sidebar">order</span> if the logical and visual order are <em class="Emphasis">intended</em> to be disjointed.</li>
					</ul>
				</div>
			</div>
			<p class="body">To change the order of items, apply the <span class="Literal-fc">order</span> property to the particular item(s) you wish to move.</p>
			<p class="RefNameCode-Left">order</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">integer</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">0</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	flex items and absolutely positioned children of flex containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The value of the <span class="Literal-fc">order</span> property is a positive or negative number that affects the item’s placement along the flex line. It is similar to the <span class="Literal-fc">z-index</span> property in that the specific number value doesn’t matter, only how it relates to other values. </p>
			<p class="body">By default, all items have an <span class="Literal-fc">order</span> value of zero (0). When items have the same <span class="Literal-fc">order</span> value, they are laid out in the order in which they appear in the HTML source. If they have <em class="Emphasis">different</em> <span class="Literal-fc">order</span> values, they are arranged from the lowest <span class="Literal-fc">order</span> value to the highest. </p>
			<p class="body">Going back to our colorful numbered box example, I’ve given <span class="Literal-fc">box3</span> an <span class="Literal-fc">order</span> value of 1. With a higher order value, it appears after all the items set to 0 (the default), as shown in <span class="Xref-Figure">Figure 16-22</span>.</p>
			<pre class="CodeFirst">.box3 {<br/><code class="CodeColor">  order: 1;</code><br/>}</pre>
			<div>
				<figure id="_idContainer1080" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1622_order.png" alt="" width="1321" height="274"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-22.</span> Changing the order of items with the <span class="Literal-Sidebar">order</span> property. Setting <span class="Literal-Sidebar">box3</span> to <span class="Literal-Sidebar">order: 1</span> makes it display after the rest.</figcaption>
				</figure>
			</div>
			<p class="body">When multiple items share the same <span class="Literal-fc">order</span> value, that group of value-sharing items (called an <span class="FirstTerm">ordinal group</span>) sticks together and displays in source order. What happens if I give <span class="Literal-fc">box2</span> an <span class="Literal-fc">order</span> value of 1 as well? Now both <span class="Literal-fc">box2</span> and <span class="Literal-fc">box3</span> have an <span class="Literal-fc">order</span> value of 1 (making them an ordinal group), and they get displayed in source order after all the items with the lower <span class="Literal-fc">order</span> value of 0 (<span class="Xref-Figure">Figure 16-23</span>).</p>
			<pre class="CodeFirst">.box2, .box3 {<br/><code class="CodeColor">  order: 1 </code><br/>}</pre>
			<div>
				<figure id="_idContainer1082" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1623_order-2-3.png" alt="" width="1321" height="300"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-23.</span> Setting <span class="Literal-Sidebar">box2</span> to <span class="Literal-Sidebar">order: 1</span> as well makes it display after the items with the default order of 0.</figcaption>
				</figure>
			</div>
			<p class="body">You can also use<a id="_idIndexMarker2962"></a> negative values for <span class="Literal-fc">order</span>. To continue with our example, I’ve given <span class="Literal-fc">box5</span> an order value of –1. Notice in <span class="Xref-Figure">Figure 16-24</span> that it doesn’t just move back one space; it moves before all of the items that still have <span class="Literal-fc">order</span> set to 0, which is a higher value than –1. </p>
			<pre class="CodeFirst">.box5 {<br/><code class="CodeColor">  order: -1 </code><br/>}</pre>
			<div>
				<figure id="_idContainer1084" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1624_order-1.png" alt="" width="1321" height="300"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-24.</span> Negative values display before items with the default order of 0.</figcaption>
				</figure>
			</div>
			<p class="body">I’ve used simple values of 1 and –1 in my examples, but I could have used 10008 or –649, and the result would be the same; the order goes from least value to greatest value. Number values don’t need to be in sequential order. </p>
			<p class="body">Now let’s take a look at how we can use <span class="Literal-fc">order</span> for something more useful than moving little boxes around in a line. Here is a simple document with a header, a main section consisting of an article and two aside elements, and a footer: </p>
			<pre class="CodeFirst">&lt;header&gt;…&lt;/header&gt;<br/>&lt;main&gt;<br/>  &lt;article&gt;&lt;h2&gt;Where It's At&lt;/h2&gt;&lt;/article&gt;<br/>  &lt;aside id="news"&gt;&lt;h2&gt;News&gt;&lt;/h2&gt;&lt;/aside&gt;<br/>  &lt;aside id="contact"&gt;&lt;h2&gt;Contact&lt;/h2&gt;&lt;aside&gt;<br/>&lt;/main&gt;<br/>&lt;footer&gt;…&lt;footer&gt;</pre>
			<p class="body">In the following CSS, I’ve made the <span class="Literal-fc">main</span> element a flexbox container so the <span class="Literal-fc">article</span> and <span class="Literal-fc">aside</span> elements line up in a row, creating three columns (<span class="Xref-Figure">Figure 16-25</span>). I set the <span class="Literal-fc">flex</span> factor for each item, allowing them to grow and shrink, and set their widths with <span class="Literal-fc">flex-basis</span>. Finally, I used the <span class="Literal-fc">order</span> property to specify the order in which I’d like them to appear. Notice that the Contact section is now first in the row, although it appears last in the source order. And, as an added bonus, all of the columns fill the height of the main container despite the amount of content in them.</p>
			<pre class="CodeFirst">main {<br/>  <code class="CodeColor">display: flex;</code><br/>}<br/>article {<br/>  <code class="CodeColor">flex: 1 1 50%;<br/>  order: 2;</code> <br/>}<br/>#news {<br/>  <code class="CodeColor">flex: 1 1 25%;<br/>  order: 3;</code><br/> }<br/>#contact {<br/>  <code class="CodeColor">flex: 1 1 25%;<br/>  order: 1;</code><br/>}</pre>
			<div>
				<figure id="_idContainer1086" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1625_columns.png" alt="" width="1193" height="637"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-25.</span> A columned layout using Flexbox. </figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1087" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Although you can create a full-page layout with Flexbox, the task is more appropriately handled with Grid Layout, which we’ll cover next. However, because Flexbox has better browser support than Grid Layout, it may be a suitable fallback. Flexbox is better suited for individual components on the page such as navigation, series of product “cards,” or anything that you want to put in a line. </p>
				</div>
			</div>
			<p class="body">That concludes our tour of Flexbox properties! In <span class="Xref-Figure">Exercise 16-3</span>, you can put some of the item-level properties to use in the bistro menu. When you are finished, come back for some tips on dealing with varying browser support in the next section.</p>
			<div>
				<div id="_idContainer1090" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 16-3.</span> Adjusting flex and order</h6>
					<p class="SidebarBody">The online menu is looking pretty good, but let’s put a few finishing touches on it. Open the <span class="Filename--Sidebar-">flex-menu.html</span> file as you left it at the end of <span class="Xref-Figure">Exercise 16-2</span>. </p>
					<ol>
						<li class="SidebarListNumber" value="1">Instead of having lots of empty space inside the menu container, we’ll make the items fill the available space. Because we want the items to be fully flexible, we can use the <span class="Literal-Sidebar">auto</span> value for <span class="Literal-Sidebar">flex</span> (the same as <span class="Literal-Sidebar">flex: 1 1 auto;</span>). Add this declaration to the <span class="Literal-Sidebar">section</span> rule to turn on the stretching behavior: <pre class="SidebarCodeFirst">section {<br/>  …<br/><code class="CodeColor">  flex: auto; </code><br/>}</pre></li>
						<li class="SidebarListNumber">OK, one last tweak: let’s make the photos appear at the top of each menu item. Because each section is a flex container, we can use the <span class="Literal-Sidebar">order</span> property to move its items around. In this case, select the paragraphs with the “photo” class name and give it a value less than the default 0. This will make the photo display first in the line (<span class="Xref-Figure">Figure 16-26</span>):<pre class="SidebarCodeFirst">.photo {<br/>  <code class="CodeColor">order: -1; </code><br/>}</pre></li>
					</ol>
					<p class="SidebarBody">If you want to get fancy, you can set the width of the <span class="Literal-Sidebar">img</span> elements to 100% so they always fill the width of the container. The little image I’ve provided gets quite blurry when it expands larger, so you can see how the responsive image techniques we covered in <span class="Xref--Sidebar-">Chapter 7, Adding Images</span>,<span class="Xref--Sidebar-"> </span>might be useful here. It’s not the best-looking web page in the world, but you got a chance to try out a lot of the Flexbox properties along the way.</p>
					<div>
						<figure id="_idContainer1089" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1626_ex16-4_final.png" alt="" width="988" height="875"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-26.</span> The final bistro menu with items flexing to fill the extra space and the photos moved to the top of each listing. </figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h2 class="HeadB">Browser Support for Flexbox</h2>
			<p class="body">The current <a id="_idIndexMarker2963"></a><a id="_idIndexMarker2964"></a>Flexible Box Layout Module became a stable Candidate Recommendation in 2012 (<a href="http://www.w3.org/TR/css-flexbox-1/"><span class="URL-Email">www.w3.org/TR/css-flexbox-1/</span></a>). The good news is that all major desktop and mobile browsers have supported the standard since 2015 and a few since as far back as 2013. That covers roughly 80–90% of users as of this writing according to <span class="URL-Email">CanIUse.com</span>. </p>
			<p class="body">The Flexbox specification went through a lot of big changes in its path to stabilization, and along the way, some older browsers implemented those old specs. The three main releases are as follows:</p>
			<p class="ListVariableTerm">Current version (2012)</p>
			<p class="ListVariable"><strong class="Emphasis_Bold">Syntax example:</strong> <span class="Literal-fc">display: flex;</span></p>
			<p class="ListVariable"><strong class="Emphasis_Bold">Supported by:</strong> IE11+, Edge 12+, Chrome 21-28 (<span class="Literal-fc">-webkit-</span>), Chrome 29+, Firefox 22–27 (<span class="Literal-fc">-moz-</span>, no wrapping), Firefox 28+, Safari 6–8 (<span class="Literal-fc">-webkit-</span>), Safari 9+, Opera 17+, Android 4.4+, iOS 7–8.4 (<span class="Literal-fc">-webkit-</span>), iOS 9.2+</p>
			<p class="ListVariableTerm">“Tweener” version (2011)</p>
			<p class="ListVariable">Syntax example:<span class="Literal-fc"> display: flexbox;</span></p>
			<p class="ListVariable">Supported by: IE10</p>
			<p class="ListVariableTerm">Old version (2009)</p>
			<p class="ListVariable">Syntax example:  <span class="Literal-fc">display: box;</span></p>
			<p class="ListVariable">Supported by: Chrome &lt;21, Safari 3.1–6, Firefox 2–21, iOS 3.2–6.1, Android 2.1–4.3</p>
			<p class="body">What you won’t find in these listings is Internet Explorer 9 and earlier, which lack Flexbox support altogether. </p>
			<p class="body">Ensuring Flexbox works on the maximum number of <a id="_idIndexMarker2965"></a>browsers requires a gnarly stack of prefixes and alternative properties, the details of which are too complicated to dive into here. It’s also not something you’d want to write out by hand anyway, but fortunately there are options. </p>
			<p class="body">You can use <a id="_idIndexMarker2966"></a>Autoprefixer to magically generate that gnarly stack for you automatically. As you’re learning and practicing your CSS skills, you can convert your styles online at <span class="URL-Email">autoprefixer.github.io</span>. Just paste in your styles, and it spits out the code (<span class="Xref-Figure">Figure 16-27</span>) that you can add to your style sheet. </p>
			<div>
				<div id="_idContainer1091" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note">Be aware that although Autoprefixer makes adding prefixes easier, it does not guarantee that your flexboxes will work seamlessly in all browsers. There are behavior differences that can be unpredictable, so be sure to test on all of your target browsers.</p>
				</div>
			</div>
			<div>
				<figure id="_idContainer1093" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1627_autoprefixer.png" alt="" width="1305" height="817"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-27.</span> The Autoprefixer site converts standard Flexbox styles into all the styles needed for full browser support.</figcaption>
				</figure>
			</div>
			<p class="body">When you are ready to bring your workflow to a professional level, you can include Autoprefixer as part of a “build step” that automates a lot of the development gruntwork. If you are using a CSS preprocessor such as SASS, you can also use “mixins” to manage tedious prefixes. We’ll look at build tools and preprocessors in <a href="lwd5_chapter20.xhtml#_idTextAnchor256"><span class="Xref">Chapter </span><span class="Xref">20</span><span class="Xref">, Modern Web Development Tools</span></a>. </p>
			<p class="body">You may still want to provide fallback styles for non-supporting browsers (floats, inline blocks, and table display values are all options). If that is the case, you can use a feature detection technique to determine whether the browser supports Flexbox. If the browser fails the test, it gets a fallback set of styles, while supporting browsers get the full Flexbox treatment. We’ll take a look at feature detection in <a href="lwd5_chapter19.xhtml#_idTextAnchor243"><span class="Xref">Chapter </span><span class="Xref">19</span></a>.</p>
			<div>
				<div id="_idContainer1094" class="sidebar">
					<h5 class="SidebarSeries">Online Resource</h5>
					<h5 class="SidebarTitle">Flexbugs</h5>
					<p class="SidebarBody">There are some <a id="_idIndexMarker2967"></a>buggy implementations of Flexbox out there. Lucky for us, <a id="_idIndexMarker2968"></a>Philip Walton has been gathering all of these bugs in a GitHub repository called Flexbugs. To see the bugs and workarounds for them, visit <a href="http://github.com/philipwalton/flexbugs"><span class="URL-Email--Sidebar-">github.com/philipwalton/flexbugs</span></a>.</p>
				</div>
			</div>
			<p class="body">One big layout technique down, one big layout technique to go! Are you still with me? We’ve covered a lot of nitty-gritty details, and if you’re like me, your head may be swimming. That’s why I’ve included <span class="Xref-Figure">Figure 16-28</span>. It has nothing to do with CSS layout, but I figured we could use a breather. In fact, why don’t you put down this book and take a little walk before taking on grids?</p>
			<div>
				<figure id="_idContainer1096" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1628_redpanda.png" alt="" width="1338" height="716"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-28.</span> This adorable red panda has nothing to do with CSS layout, but I figured we could use a breather before moving on to Grid Layout (photo by <a id="_idIndexMarker2969"></a>Teri Finn).</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-156" class="HeadA"><a id="_idTextAnchor220"></a>CSS Grid Layout</h1>
			<p class="body">At long last, we <a id="_idIndexMarker2970"></a>web designers and developers have a CSS module for using an underlying grid to achieve true page layout—and we only had to wait 25 years to get it! The CSS Grid Layout Module provides a system for laying out elements in rows <em class="Emphasis">and</em> columns (remember that Flexbox lays out elements on one axis only) in a way that can remain completely flexible to fit a variety of screen sizes or mimic a print page layout. You can use grids to create the sort of web page layouts that are familiar today, or get more sophisticated with typography and whitespace as <a id="_idIndexMarker2971"></a>Jen Simmons has done in her Lab demos (<span class="Xref-Figure">Figure 16-29</span>). You can also use a grid to format just a portion of a page, such as a gallery of images or products.</p>
			<div>
				<figure id="_idContainer1098" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1629_simmons-ebook.png" alt="" width="1338" height="575"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-29.</span> Examples of grid-based designs from <a id="_idIndexMarker2972"></a>Jen Simmons’s “Experimental Layout Lab” page (<a href="http://labs.jensimmons.com"><span class="URL-Email--Sidebar-">labs.jensimmons.com</span></a>).</figcaption>
				</figure>
			</div>
			<p class="body">In this section, I will give you a good head start on using Grid Layout; however, I should note that there will be a few stones left unturned that you can explore on your own.</p>
			<p class="body">The Grid Layout Module is one of the more complex specs in CSS, the finer points of which could fill a book. In fact, Eric Meyer has written that book: <span class="Citation">Grid Layout in CSS</span> (O’Reilly)(see <span class="Xref">Note</span>). I found that Eric helped me make practical sense of the dense language of the spec itself (which you will also want to reference at <a href="http://www.w3.org/TR/css-grid-1/"><span class="URL-Email">www.w3.org/TR/css-grid-1/</span></a>). I also highly recommend Grid expert Rachel Andrew’s book, <span class="Citation">The New CSS Layout</span> (A Book Apart) for a complete view of how we got to grid layouts and how to use them.</p>
			<div>
				<div id="_idContainer1099" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note"><span class="Citation--Sidebar-">CSS: The Definitive Guide, 4th edition </span>(O’Reilly), by <a id="_idIndexMarker2973"></a>Eric A. Meyer and <a id="_idIndexMarker2974"></a>Estelle Weyl, is a megavolume of everything you could ever want to know about CSS. It contains the entire <span class="Citation--Sidebar-">Grid Layout in CSS</span> book as a chapter.  </p>
				</div>
			</div>
			<p class="body">You will also find many great Grid resources online, which I will round up at the end of this section.</p>
			<h2 class="HeadB">The Obligatory Talk About Browser Support</h2>
			<p class="body">There’s great <a id="_idIndexMarker2975"></a><a id="_idIndexMarker2976"></a>and not-so-great news about browser support for Grid Layout. The great news is that Chrome 57+, Opera, Firefox 52+, Safari 10+, and iOS Safari 10+ all started supporting the Grid standard free and clear of browser prefixes in March 2017. Microsoft Edge added support in version 16 in 2017.</p>
			<p class="body">The not-so-great news is that in addition to lingering older versions of those browsers, no version of Internet Explorer supports the current Grid standard (see the <span class="Xref">Browser Support Note</span>). </p>
			<div>
				<div id="_idContainer1100" class="note">
					<h5 class="WarningHeader">Browser Support Note</h5>
					<p class="note">Internet Explorer versions 10 and 11 and MS Edge through 15 implemented an early draft of the Grid Layout Module, much of which has since been made obsolete. They should be treated as non-supporting browsers when it comes to the standard grid styles outlined in this chapter. However, if those Microsoft browsers are used by a significant share of your target audience, it is probably worth targeting them with an alternative version of your layout written in the older grid syntax they understand.</p>
				</div>
			</div>
			<p class="body">So, for the time being, you need to provide an alternative layout for non-supporting browsers by using Flexbox or old-fashioned floats (or the older Grid specification for IE and Edge &lt;15), depending on the browsers you need to target. A good way to get your Grid-based layouts to the browsers that can handle them is to use a <a id="_idIndexMarker2977"></a><a id="_idIndexMarker2978"></a>CSS Feature Query that checks for Grid support and provides the appropriate set of styles. Feature queries are discussed in detail in <a href="lwd5_chapter19.xhtml#_idTextAnchor243"><span class="Xref">Chapter </span><span class="Xref">19</span></a>. </p>
			<p class="body">Be sure to<a id="_idIndexMarker2979"></a> check <span class="URL-Email">CanIUse.com</span> for updated browser support information. Another good resource is the Browser Support page at the “Grid by Example” site, created by Rachel Andrew (<span class="URL-Email">gridbyexample.com/browsers</span>), where she posts browser support news as well as known bugs. </p>
			<h2 class="HeadB">How Grid Layout Works</h2>
			<p class="body">The process for <a id="_idIndexMarker2980"></a>using the CSS Grid Layout Module is fundamentally simple:</p>
			<ol>
				<li class="ListNumber" value="1"><strong class="Emphasis_Bold">Use the </strong><span class="Literal-fc">display</span><strong class="Emphasis_Bold"> property to turn an element into a grid container.</strong> The element’s <a id="_idIndexMarker2981"></a>children automatically become grid items.</li>
				<li class="ListNumber"><strong class="Emphasis_Bold">Set up the columns and rows for the grid.</strong> You can set them up explicitly and/or provide directions for how rows and columns should get created on the fly.</li>
				<li class="ListNumber"><strong class="Emphasis_Bold">Assign each grid item to an area on the grid.</strong> If you don’t assign them explicitly, they flow into the cells sequentially.</li>
			</ol>
			<p class="body">What makes Grid Layout complicated is that the spec provides <em class="Emphasis">so</em> many options for specifying every little thing. All those options are terrific for customizing production work, but they can feel cumbersome when you are learning Grids for the first time. In this chapter, I’ll set you up with a solid Grid toolbox to get started, which you can expand on your own as needed.</p>
			<h2 class="HeadB">Grid Terminology</h2>
			<p class="body">Before we<a id="_idIndexMarker2982"></a> <a id="_idIndexMarker2983"></a>dive into specific properties, you’ll need to be familiar with the basic parts and vocabulary of the Grid system. </p>
			<p class="body">Starting with the markup, the element that has the<a id="_idIndexMarker2984"></a> <span class="Literal-fc">display: grid</span> property applied to it becomes <a id="_idIndexMarker2985"></a>the <span class="FirstTerm">grid container</span> and defines the context for grid formatting. All of its direct child elements automatically <a id="_idIndexMarker2986"></a>become <span class="FirstTerm">grid items</span> that end up positioned in the grid. If you’ve just read the Flexbox section of this chapter, this children-become-items scheme should sound familiar.</p>
			<p class="body">The key words in that previous paragraph are “direct child,” as only those elements become grid items. Elements contained in those elements do not, so you cannot place them on the grid. You can, however, <a id="_idIndexMarker2987"></a><a id="_idIndexMarker2988"></a>nest a grid inside another grid if you need to apply a grid to a deeper level.  </p>
			<p class="body">The grid itself has a number of components, as pointed out in <span class="Xref-Figure">Figure 16-30</span>.</p>
			<div>
				<figure id="_idContainer1102" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1630_terms.png" alt="" width="1321" height="1072"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-30.</span> The parts of a CSS grid.</figcaption>
				</figure>
			</div>
			<p class="ListVariableTerm">Grid line</p>
			<p class="ListVariable">The horizontal and vertical dividing lines of the grid are <a id="_idIndexMarker2989"></a>called <span class="FirstTerm">grid lines</span>. </p>
			<p class="ListVariableTerm">Grid cell</p>
			<p class="ListVariable">The smallest unit of a <a id="_idIndexMarker2990"></a>grid is a <span class="FirstTerm">grid cell</span>, which is bordered by four adjacent grid lines with no grid lines running through it.</p>
			<p class="ListVariableTerm">Grid area</p>
			<p class="ListVariable">A <span class="FirstTerm">grid area</span> is a <a id="_idIndexMarker2991"></a>rectangular area made up of one or more adjacent grid cells. </p>
			<p class="ListVariableTerm">Grid track </p>
			<p class="ListVariable">The space between two adjacent grid lines <a id="_idIndexMarker2992"></a>is a <span class="FirstTerm">grid track</span>, which is a generic name for <a id="_idIndexMarker2993"></a><a id="_idIndexMarker2994"></a>a <span class="FirstTerm">grid column</span> or a <span class="FirstTerm">grid row</span>. Grid columns are said to go along <a id="_idIndexMarker2995"></a>the <span class="FirstTerm">block axis</span>, which is vertical (as block elements are stacked) for languages written horizontally. Grid rows follow <a id="_idIndexMarker2996"></a>the <span class="FirstTerm">inline</span> (horizontal) <span class="FirstTerm">axis</span>.</p>
			<p class="body">It is worth pointing out that the structure established for the grid is independent from the number of grid items in the container. You could place 4 grid items in a grid with 12 cells, leaving 8 of the cells as <a id="_idIndexMarker2997"></a>“whitespace.” That’s the beauty of grids. You can also set up a grid with fewer cells than grid items, and the browser adds cells to the grid to accommodate them. It’s a wonderfully flexible system.</p>
			<p class="body">Without further ado, it’s time to get into some code.</p>
			<h2 class="HeadB">Declaring Grid Display</h2>
			<p class="body">To turn an <a id="_idIndexMarker2998"></a>element <a id="_idIndexMarker2999"></a>into a grid container, set its <span class="Literal-fc">display</span> property<a id="_idIndexMarker3000"></a><a id="_idIndexMarker3001"></a> to <span class="Literal-fc">grid</span> or <span class="Literal-fc">inline-grid</span> (see <span class="Xref">Note</span>).</p>
			<div>
				<div id="_idContainer1103" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Inline grids function the same as block-level grids, but they can be used in the flow of content. In this section, I focus only on block-level grids. </p>
					<p class="note">As of this writing, work has begun on a Working Draft of CSS Grid Layout Module Level 2, which includes a “subgrid” mode that allows a nested grid to inherit its grid structure from its parent.</p>
				</div>
			</div>
			<p class="body">In this simple example, the <span class="Literal-fc">#layout</span> <span class="Literal-fc">div</span> becomes a grid container, and each of its children (<span class="Literal-fc">#one</span>, <span class="Literal-fc">#two</span>, <span class="Literal-fc">#three</span>, <span class="Literal-fc">#four</span>, and <span class="Literal-fc">#five</span>), therefore, is a grid item.</p>
			<p class="body"><span class="FigureLabel">The markup</span></p>
			<pre class="CodeFirst">&lt;div <code class="CodeColor">id="layout"</code>&gt;<br/>  &lt;div id="one"&gt;One&lt;/div&gt;<br/>  &lt;div id="two"&gt;Two&lt;/div&gt;<br/>  &lt;div id="three"&gt;Three&lt;/div&gt;<br/>  &lt;div id="four"&gt;Four&lt;/div&gt;<br/>  &lt;div id="five"&gt;Five&lt;/div&gt;<br/>&lt;/div&gt;</pre>
			<p class="body"><span class="FigureLabel">The styles</span></p>
			<pre class="CodeFirst">#layout {<br/>  <code class="CodeColor">display: grid;</code><br/>}</pre>
			<p class="body">That sets the stage (or to use the more accurate term, the <span class="FirstTerm">context</span>) for the grid. Now we can specify how many rows and columns we want and how wide they should be.</p>
			<h2 class="HeadB">Setting Up the Grid </h2>
			<p class="body">Because I <a id="_idIndexMarker3002"></a><a id="_idIndexMarker3003"></a><a id="_idIndexMarker3004"></a>don’t want to have to figure out cells and spans in my head, I’ve made a quick sketch of how I’d like my final grid to look (<span class="Xref-Figure">Figure 16-31</span>). A sketch is a good first step for working with grids. From the sketch, I can see that my layout requires three row tracks and three column tracks even though some of the content areas span over more than one cell. This is a pretty standard arrangement for a web page, and although I’m sticking with one-word content so we can focus on structure, you can imagine longer text content filling each area.</p>
			<div>
				<figure id="_idContainer1105" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1631_sketchtogrid.png" alt="" width="1321" height="1074"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-31.</span> A rough sketch for my grid-based page layout. The dotted lines in the bottom image show how many rows and columns the grid requires to create the layout structure.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1106" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">You probably noticed that this page layout with its header, footer, and three columns looks like the one we made using Flexbox in <span class="Xref-Figure">Figure 16-25</span>. And you’re right! It just goes to show that there may be several solutions for getting to an intended result. Once Grid Layout becomes solidly supported, it will be the clear winner for creating flexible, whole-page layouts like this one.</p>
				</div>
			</div>
			<h3 class="HeadC">Defining grid tracks</h3>
			<p class="body">To set up a <a id="_idIndexMarker3005"></a><a id="_idIndexMarker3006"></a>grid in CSS, specify the height of each row and the width of each column (see <span class="Xref">Note</span>) with the template properties, <span class="Literal-fc">grid-template-rows</span> and <span class="Literal-fc">grid-template-columns</span>, which get applied to the container element. </p>
			<div>
				<div id="_idContainer1107" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Like the Flexbox Module, the Grid Layout Module is dependent on the direction of the language in which the page is written. In this book, I will base grid terminology on the left-to-right, top-to-bottom writing direction.</p>
				</div>
			</div>
			<p class="RefNameCode-Left">grid-template-rows</p>
			<p class="RefNameCode-Left">grid-template-columns</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">none</span> | <span class="prop-replace">list of track sizes and optional line names</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">none</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The value of the <a id="_idIndexMarker3007"></a><a id="_idIndexMarker3008"></a><span class="Literal-fc">grid-template-rows</span> property is a list of the <em class="Emphasis">heights</em> for each row track in the grid. The value of the <span class="Literal-fc">grid-template-columns</span> is a list of the <em class="Emphasis">widths</em> for each column track. The number of track sizes determines the number of rows or columns. For example, if you provide four lengths for <span class="Literal-fc">grid-template-columns</span>, you get a grid that is initially divided into four columns.</p>
			<p class="body">You can also include names for the grid lines between tracks, which we’ll get to in a moment, but for now, let’s start off as simply as possible. </p>
			<div>
				<div id="_idContainer1108" class="sidebar">
					<h5 class="SidebarSeries">Cool tool tip</h5>
					<h5 class="SidebarTitle">Firefox CSS Grid Inspector and Layout Panel</h5>
					<p class="SidebarBody">Firefox 52+ includes a great developer tool called the CSS Grid Inspector that overlays a representation of the <a id="_idIndexMarker3009"></a><a id="_idIndexMarker3010"></a>grid structure for elements with their <span class="Literal-Sidebar">display</span> set to <span class="Literal-Sidebar">grid</span>. It’s what I used for the right screenshot in <span class="Xref-Figure">Figure 16-32</span>. To get to it, open the Inspector (<span class="menu">Tools </span><span class="menu">→</span><span class="menu"> Web Developer </span><span class="menu">→</span><span class="menu"> Inspector</span>). Find an element that is a grid and click the # icon, and you’ll see the grid overlaid on the page. </p>
					<p class="SidebarBody">You can also click the Layout tab to access the Layout Panel, which lists all the grid containers on the page and provides tools for analyzing grid lines and areas. It also has a box-model properties component so you can easily see the dimensions, padding, border, and margins for every grid-related element, and more. These visual tools make it easier to tweak your designs.</p>
					<p class="SidebarBody">As this book goes to press, the news is that similar grid layout development tools are coming to Chrome and Safari. The future looks bright for grid designers!</p>
				</div>
			</div>
			<h4 class="HeadD">Grid track sizes</h4>
			<p class="body">In the following example, I’ve added template properties to divide the <span class="Literal-fc">#layout</span> container into three columns and three rows with the sizes I designated in my original sketch (<span class="Xref-Figure">Figure 16-31</span>): </p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/><code class="CodeColor">  grid-template-rows: 100px 400px 100px;<br/>   grid-template-columns: 200px 500px 200px;</code><br/>}</pre>
			<p class="body">Let’s see what happens if I do a quick check of the grid so far in the browser. <span class="Xref-Figure">Figure 16-32</span> shows that by default, the grid items flow in order into the available grid cells. I’ve added background colors to the items so their boundaries are clear, and I used Firefox CSS <a id="_idIndexMarker3011"></a>Grid Inspector (right) to reveal the entire grid structure. </p>
			<p class="body">Because there are only five child elements in the <span class="Literal-fc">#layout</span> <span class="Literal-fc">div</span>, only the first five cells are filled. This <a id="_idIndexMarker3012"></a>automatic flowing behavior isn’t what I’m after for this grid, but it is useful for instances in which it is OK for content to pour into a grid sequentially, such as a gallery of images. Soon, we will place each of our items on this grid deliberately, but first, let’s look at the template property values in greater depth. </p>
			<div>
				<figure id="_idContainer1110" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1632_samplegrid.png" alt="" width="2025" height="746"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-32.</span> By default, grid items flow into the grid cells by rows.</figcaption>
				</figure>
			</div>
			<h4 class="HeadD">Grid line numbers and names</h4>
			<p class="body">When the <a id="_idIndexMarker3013"></a>browser creates a grid, it also automatically assigns each grid line a number that you can reference when positioning items. The grid line at the start of the grid track is 1, and lines are numbered sequentially from there. <span class="Xref-Figure">Figure 16-33</span> shows how the grid lines are numbered for our sample grid.</p>
			<div>
				<figure id="_idContainer1112" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1633_linenumbers.png" alt="" width="1321" height="721"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-33.</span> Grid lines are assigned numbers automatically.</figcaption>
				</figure>
			</div>
			<p class="body">The lines are numbered from the end of tracks as well, starting with –1, and numbers count back from there (–2, –3, etc.), as shown by the gray numbers in <span class="Xref-Figure">Figure 16-33</span>. Being able to target the end of a row or column without counting lines (or even knowing how many rows or columns there are) is a handy feature. You’ll come to love that –1.</p>
			<p class="body">But if you don’t like to keep track of numbers, you can also assign names to lines that may be more intuitive. In the following example, I’ve assigned names that correspond to how I will be using the grid in the final page. Line names are added within square brackets in the position they appear relative to the tracks.</p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/>  grid-template-rows: <code class="CodeColor">[header-start]</code> 100px <code class="CodeColor">[content-start]</code> 400px <code class="CodeColor">[footer-start]</code> 100px;<br/>   grid-template-columns: <code class="CodeColor">[ads]</code> 200px <code class="CodeColor">[main]</code> 500px <code class="CodeColor">[links]</code> 200px;<br/>}</pre>
			<p class="body">Based on this example, the grid line at the top of the grid can now be referred to as “header-start,” “1,” or “–4.” I could also name the line that comes after the first row track “header-end” even though I’ve already named it “content-start.” To give a line more than one name, just include all the names in the brackets, separated by spaces:</p>
			<pre class="CodeFirst">grid-template-rows: [header-start] 100px <code class="CodeColor">[header-end content-start]</code> 400px [footer-start] 100px; </pre>
			<p class="body">It is common for each grid line to end up with multiple names and numbers, and you can choose whichever is the easiest to use. We’ll be using these numbers and names to place items on the grid in a moment.</p>
			<h3 class="HeadC">Specifying track size values</h3>
			<p class="body">I provided all of <a id="_idIndexMarker3014"></a>the track sizes in my example in specific pixel lengths to make them easy to visualize, but fixed sizes are one of many options. They also don’t offer the kind of flexibility required in our multi-device world. The Grid Layout Module provides a <em class="Emphasis">whole bunch</em> of ways to specify track sizes, including old standbys like lengths (e.g., pixels or ems) and percentage values, but also some newer and Grid-specific values. I’m going to give you quick introductions to some useful Grid-specific values: the <span class="Literal-fc">fr</span> unit, the <a id="_idIndexMarker3015"></a><span class="Literal-fc">minmax()</span> function, <span class="Literal-fc">auto</span>, and the content-based values <span class="Literal-fc">min-content</span>/<span class="Literal-fc">max-content</span>. We’ll also look at functions that allow you to set up a repeating pattern of track widths: the <a id="_idIndexMarker3016"></a><span class="Literal-fc">repeat()</span> function with optional <span class="Literal-fc">auto-fill</span> and <span class="Literal-fc">auto-fit</span> values.</p>
			<div>
				<div id="_idContainer1113" class="sidebar">
					<h5 class="SidebarSeries">At a Glance</h5>
					<h5 class="SidebarTitle">Track Size Values</h5>
					<p class="SidebarBody">The Grid specification provides the following values for the <span class="Literal-Sidebar">grid-template-*</span> properties:</p>
					<ul>
						<li class="SidebarListBullet">Lengths (such as <a id="_idIndexMarker3017"></a><span class="Literal-Sidebar">px</span> or <a id="_idIndexMarker3018"></a><span class="Literal-Sidebar">em</span>)</li>
						<li class="SidebarListBullet">Percentage<a id="_idIndexMarker3019"></a> <a id="_idIndexMarker3020"></a>values (%)</li>
						<li class="SidebarListBullet">Fractional units (<span class="Literal-Sidebar">fr</span>)</li>
						<li class="SidebarListBullet"><span class="Literal-Sidebar">auto</span></li>
						<li class="SidebarListBullet"><span class="Literal-Sidebar">min-content</span>, <span class="Literal-Sidebar">max-content</span></li>
						<li class="SidebarListBullet"><span class="Literal-Sidebar">minmax()</span></li>
						<li class="SidebarListBullet"><span class="Literal-Sidebar">fit-content()</span></li>
					</ul>
				</div>
			</div>
			<h4 class="HeadD">Fractional units (flex factor) </h4>
			<p class="body">The Grid-specific <a id="_idIndexMarker3021"></a>fractional unit (<span class="Literal-fc">fr</span>) allows developers to create track widths that expand and contract depending on available space. To go back to the example, if I change the middle column from <span class="Literal-fc">500px</span> to <span class="Literal-fc">1fr</span>, the browser assigns all leftover space (after the 200-pixel column tracks are accommodated) to that column track (<span class="Xref-Figure">Figure 16-34</span>).</p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/>  grid-template-rows: 100px 400px 100px;<br/>   grid-template-columns: 200px <code class="CodeColor">1fr</code> 200px;<br/>}</pre>
			<div>
				<figure id="_idContainer1115" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1634_fr.png" alt="" width="1321" height="992"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-34.</span> When the middle column has a track size of 1fr, it takes up the remaining space in the browser window and flexes to adapt to the browser width.</figcaption>
				</figure>
			</div>
			<p class="body">The <span class="Literal-fc">fr</span> unit is great for combining fixed and flexible track widths, but I could also use all <span class="Literal-fc">fr</span> units to give all the columns proportional widths. In this example, all of the column widths flex according to the available browser width, but the middle column will always be twice the width of the side columns (see <span class="Xref">Note</span>).</p>
			<pre class="CodeFirst">grid-template-columns: <code class="CodeColor">1fr 2fr 1fr</code>;</pre>
			<div>
				<div id="_idContainer1116" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Technically, the browser adds up the <span class="Literal-Sidebar">fr</span> units (4 in our example), divides the leftover space into that many portions, and then assigns the portions based on the number of units specified. </p>
				</div>
			</div>
			<h4 class="HeadD">Minimum and maximum size range</h4>
			<p class="body">You can constrict the size range of a track by setting its minimum and maximum widths using the <span class="Literal-fc">minmax()</span> function in place of a specific track size. </p>
			<pre class="CodeFirst">grid-template-columns: 200px <code class="CodeColor">minmax(15em, 45em)</code> 200px;</pre>
			<p class="body">This rule sets the middle column to a width that is at least 15em but never wider than 45em. This method allows for flexibility but allows the author to set limits.</p>
			<div>
				<div id="_idContainer1117" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note"><span class="Literal-Sidebar">fr</span> units are not permitted as the minimum value in a <span class="Literal-Sidebar">minmax()</span> statement. </p>
				</div>
			</div>
			<h4 class="HeadD">Content-based sizing</h4>
			<p class="body">The <span class="Literal-fc">min-content</span>, <a id="_idIndexMarker3022"></a><a id="_idIndexMarker3023"></a><span class="Literal-fc">max-content</span>, and <span class="Literal-fc">auto</span> values size the track based on the size of the content within it (<span class="Xref-Figure">Figure 16-35</span>). </p>
			<div>
				<figure id="_idContainer1119" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1635_maxminwidth.png" alt="" width="1321" height="600"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-35.</span> The <span class="Literal-Sidebar">min-content</span> and <span class="Literal-Sidebar">max-content</span> track sizing values.</figcaption>
				</figure>
			</div>
			<p class="body">The <span class="Literal-fc">min-content</span> value is the <em class="Emphasis">smallest</em> that track can get without overflowing (by default, unless overridden by an explicit <span class="Literal-fc">min-width</span>). It is equivalent to the “largest unbreakable bit of content”—in other words, the width of the longest word or widest image. It may not be useful for items that contain normal paragraphs, but it may be useful in some cases when you don’t want the track larger than it needs to be. This example establishes three columns, with the right column sized just wide enough to hold the longest word or image: </p>
			<pre class="CodeFirst">grid-template-columns: 50px 1fr <code class="CodeColor">min-content</code>;</pre>
			<p class="body">The <span class="Literal-fc">max-content</span> property allots the maximum amount of space needed for the content, even if that means extending the track beyond the boundaries of the grid container. When used as a column width, the column track will be as wide as the widest content in that track <em class="Emphasis">without</em> line wrapping. That means if you have a paragraph, the track will be wide enough to contain the text set on one line. This makes <span class="Literal-fc">max-content</span> more appropriate for short phrases or navigation items when you don’t want their text to wrap (<span class="Literal-fc">auto</span> may work better because it allows wrapping if there’s not enough room).</p>
			<p class="body">Using the <span class="Literal-fc">auto</span> keyword for a track size is basically like handing the keys over to the browser. In general, it causes the track to be sized large enough to accommodate its content, while taking into consideration what other restrictions are in place.</p>
			<p class="body">In the <span class="Literal-fc">minmax()</span> function, the <span class="Literal-fc">auto</span> keyword behaves very similarly to either <span class="Literal-fc">min-content</span> or <span class="Literal-fc">max-content</span>, depending on whether you put it in the minimum or maximum slot. As a keyword on its own, it functions similarly to <span class="Literal-fc">minmax(min-content, max-content)</span>, allowing the track to squeeze as narrow as it can without anything overflowing, but grow to fit its content without wrapping if there’s enough space.</p>
			<p class="body">Unlike <span class="Literal-fc">max-content</span>, an <span class="Literal-fc">auto</span> maximum allows <span class="Literal-fc">align-content</span> and <span class="Literal-fc">justify-content</span> to stretch the track beyond the size of the content. As a minimum, it has a few more smarts than <span class="Literal-fc">min-content</span>—for example, using a specified <span class="Literal-fc">min-width</span> or <span class="Literal-fc">min-height</span> on an item (if any) instead of its <span class="Literal-fc">min-content</span> size, and ignoring the contents of any grid items with scrollbars. </p>
			<p class="body">If you want to size a track based on its content, but you’re not sure which keyword to use, start with <span class="Literal-fc">auto</span>.</p>
			<h3 class="HeadC">Repeating track sizes</h3>
			<p class="body">Say you have a <a id="_idIndexMarker3024"></a><a id="_idIndexMarker3025"></a>grid that has 10 columns with alternating column widths, like so:</p>
			<pre class="CodeFirst">grid-template-columns: 20px 1fr 20px 1fr 20px 1fr 20px 1fr 20px 1fr 20px 1fr;</pre>
			<p class="body">That’s kind of a bummer to have to type out (I know, I just did it), so the fine folks at the W3C have provided a nice shortcut in the form of the <a id="_idIndexMarker3026"></a><span class="Literal-fc">repeat()</span> function. In the previous example, the pattern “20px 1fr” repeats five times, which can be written as follows:</p>
			<pre class="CodeFirst">grid-template-columns: <code class="CodeColor">repeat(5, 20px 1fr)</code>;</pre>
			<p class="body">Much better, isn’t it? The first number indicates the number of repetitions, and the track sizes after the comma provide the pattern. You can use the <span class="Literal-fc">repeat()</span> notation in a longer sequence of track sizes—for example, if those 10 columns are sandwiched between two 200-pixel-wide columns at the start and end:</p>
			<pre class="CodeFirst">grid-template-columns: <code class="CodeColor">200px repeat(5, 20px 1fr) 200px</code>;</pre>
			<p class="body">You can also provide grid line<a id="_idIndexMarker3027"></a> names before and/or after each track size, and those <a id="_idIndexMarker3028"></a>names will be repeated in the pattern:</p>
			<pre class="CodeFirst">grid-template-rows: repeat(4, <code class="CodeColor">[date] 5em [event] 1fr</code>);</pre>
			<h4 class="HeadD">auto-fill and auto-fit</h4>
			<p class="body">In the previous <span class="Literal-fc">repeat()</span> examples, we told the browser how many times to repeat the provided pattern. You can also let the browser figure it out itself based on the available space by using the <span class="Literal-fc">auto-fill</span> and <span class="Literal-fc">auto-fit</span> values instead of an integer in <span class="Literal-fc">repeat()</span>. </p>
			<p class="body">For example, if I specify</p>
			<pre class="CodeFirst">grid-template-rows: repeat(<code class="CodeColor">auto-fill, 10em</code>);</pre>
			<p class="body">and the grid container is 35em tall, then the browser creates a row every 10 ems until it runs out of room, resulting in three rows. Even if there is only enough content to fill the first row, all three rows are created and the space is held in the layout.</p>
			<div>
				<div id="_idContainer1120" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note">You can only use one <span class="Literal-fc">repeat()</span> notation for a given declaration. You cannot use <a id="_idIndexMarker3029"></a><span class="Literal-Sidebar">fr</span> units with <span class="Literal-fc">repeat()</span>. Content-based keywords (<span class="Literal-fc">auto</span>, <span class="Literal-fc">min-content</span>, and <span class="Literal-fc">max-content</span>) cannot be used with <span class="Literal-fc">auto-fill</span> or <span class="Literal-fc">auto-fit</span>. Note that you can use <span class="Literal-fc">minmax()</span> notation inside <span class="Literal-fc">repeat()</span>, and you can use it with <span class="Literal-fc">fr</span>s and content-based keywords if they are in the max position with a min length..</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">auto-fit</span> value works similarly, except any tracks that do not have content get dropped from the layout. If there is leftover space, it is distributed according to the vertical (<span class="Literal-fc">align-content</span>) and horizontal (<span class="Literal-fc">justify-content</span>) alignment values provided (we’ll discuss alignment later in this section).</p>
			<h3 class="HeadC">Defining grid areas</h3>
			<p class="body">So far we’ve <a id="_idIndexMarker3030"></a><a id="_idIndexMarker3031"></a>been exploring how to divide a grid container into row and column tracks by using the <span class="Literal-fc">grid-template-columns</span> and <span class="Literal-fc">grid-template-rows</span> properties, and we’ve looked at many of the possible values for track dimensions. We’ve learned that you can assign names to individual grid lines to make them easy to refer to when placing items on the grid.</p>
			<p class="body">You can also assign names to <em class="Emphasis">areas</em> of the grid, which for some developers is an even more intuitive method than calling out specific lines. Remember that a grid area is made up of one or more cells in a rectangle (no L-shapes or other non-rectangular collections of cells). Naming grid areas is a little funky to implement, but provides nice shortcuts when you need them.</p>
			<p class="body">To assign names to grid areas, use the <span class="Literal-fc">grid-template-areas</span> property.</p>
			<p class="RefNameCode-Left">grid-template-areas</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">none</span> | <span class="prop-replace">series of area names</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">none</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The<a id="_idIndexMarker3032"></a> value of the property is a list of names provided for every cell in the grid, listed row by row, with each row in quotation marks. When neighboring cells share a name, they form a grid area with that name (see <span class="Xref">Bonus Grid Line Names</span> sidebar).</p>
			<div>
				<div id="_idContainer1121" class="sidebar">
					<h5 class="SidebarTitle">Bonus Grid Line Names</h5>
					<p class="SidebarBody">When you give an area a name with <span class="Literal-Sidebar">grid-template-areas</span>, as an added bonus, you get a set of automatically generated grid line names to go with it. For example, when you name an area “main”, the left and top grid lines of that area are automatically named “main-start,” and the right and bottom grid lines are named “main-end.”  You can use those line names when positioning items. </p>
					<p class="SidebarBody">The inverse is true as well. If you explicitly assign line names “portal-start” and “portal-end” around an area, you can use the area name “portal” to assign content to that area later, even if you haven’t defined it with <span class="Literal-Sidebar">grid-template-areas</span>. You can keep this shortcut in mind when naming grid lines, but it is not required. </p>
					<p class="SidebarBody">This is a prime example of the flexibility and complexity of the Grid Layout Module.</p>
				</div>
			</div>
			<p class="body">In the following example, I’ve given names to areas in the example grid we’ve been working on so far (<span class="Xref-Figure">Figure 16-36</span>). Notice that there is a cell name for each of the nine cells as they appear in each row. The row cell lists don’t need to be stacked as I’ve done here, but many developers find it helpful to line up the cell by names using character spaces to better visualize the grid structure.</p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/>  grid-template-rows: [header-start] 100px [content-start] 400px [footer-start] 100px;<br/>   grid-template-columns: [ads] 200px [main] 1fr [links] 200px;<br/><code class="CodeColor">  grid-template-areas:<br/>    "header  header  header"<br/>    "ads     main    links"<br/>    "footer  footer  footer";</code><br/>}</pre>
			<div>
				<figure id="_idContainer1123" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1636_areas.png" alt="" width="1321" height="471"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-36.</span> When neighboring cells have the same name, they form a named area that can be referenced later. </figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1124" class="note">
					<h5 class="WarningHeader">Heads-up</h5>
					<p class="note">Be sure that you place the cell names in a way that forms rectangles when they combine to identify a named area. No L-shapes or fragments.</p>
				</div>
			</div>
			<p class="body">If there are three columns in the grid, there must be three names provided for each row. If you want to leave a cell unnamed, type one or more periods (.) in its place as a space holder so that every cell is still accounted for. Again, a sketch of your grid with the areas identified will make it easier to plan out the <span class="Literal-fc">grid-template-areas</span> value.</p>
			<p class="body">Be aware that the track sizes are still coming from the <span class="Literal-fc">grid-template-columns</span> and <span class="Literal-fc">grid-template-rows</span> properties. The <span class="Literal-fc">grid-template-areas</span> property simply assigns names to the areas, making it easier to plop items in them later. </p>
			<h3 class="HeadC">The grid shorthand property</h3>
			<p class="body">Use the <a id="_idIndexMarker3033"></a><a id="_idIndexMarker3034"></a><span class="Literal-fc">grid</span> shorthand property to set values for <span class="Literal-fc">grid-template-rows</span>, <span class="Literal-fc">grid-template-columns</span>, and <span class="Literal-fc">grid-template-areas</span> with one style rule. Bear in mind that any properties you do not use will be reset to their defaults, as is the case for all shorthands.</p>
			<p class="RefNameCode-Left">grid</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">none</span> | <span class="prop-replace">row info / column info</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">none</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">In <span class="Literal-fc">grid</span>, the row values and column values are separated by a slash, with the row values appearing first: </p>
			<pre class="CodeFirst">grid: <span class="Replaceable">rows</span> / <span class="Replaceable">columns</span> </pre>
			<p class="body">It’s easier to grasp without the clutter of line and area names, so here is the shorthand declaration for our example grid with just the row and column track information:</p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/><code class="CodeColor">  grid: 100px 400px 100px / 200px 1fr 200px;</code><br/>}</pre>
			<p class="body">To include custom line names, add the names in brackets around their respective tracks, as we saw in the earlier named line example. </p>
			<p class="body">Including area names looks a little convoluted at first, but if you remember that you list cell names row by row, it makes sense that they appear with the other row information, before the slash. The complete order goes as follows:</p>
			<pre class="CodeFirst">[<span class="Replaceable">start line name</span>] "<span class="Replaceable">area names</span>" &lt;<span class="Replaceable">track size</span>&gt; [<span class="Replaceable">end line name</span>]</pre>
			<p class="body">The line names and area names are optional. Repeat this for each row in the grid, simply listing them one after another with no special character separating rows. You may find it helpful to stack them as I’ve done in the following example to help keep each row distinct. When the rows are done, add a slash, and list the column track information after it. Here’s a complete example of our grid written with the <span class="Literal-fc">grid</span> shorthand:</p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/><code class="CodeColor">  grid:<br/>     [header-start]  "header  header  header" 100px<br/>     [content-start] "ads     main    links"  400px<br/>     [footer-start]  "footer  footer  footer" 100px<br/>     /[ads] 200px [main] 1fr [links] 200px; </code><br/>}</pre>
			<p class="body">This expands to the following:</p>
			<pre class="CodeFirst">#layout {<br/>  display: grid;<br/>  grid-template-rows: [header-start] 100px [content-start] 400px [footer-start] 100px;<br/>   grid-template-columns: [ads] 200px [main] 1fr [links] 200px;<br/><code class="CodeColor">  </code>grid-template-areas:<br/>     "header  header  header"<br/>    "ads     main    links"<br/>    "footer  footer  footer" <br/>}</pre>
			<p class="body">There is also<a id="_idIndexMarker3035"></a> a <span class="Literal-fc">grid-template</span> property that works exactly like <span class="Literal-fc">grid</span>, but it may be used only with explicitly defined grids (as opposed to implicit grids, which I cover later). The Grid Layout spec strongly recommends that you use the <span class="Literal-fc">grid</span> shorthand instead of <span class="Literal-fc">grid-template</span> (see <span class="Xref">Note</span>) unless you specifically want the cascading behavior of <span class="Literal-fc">grid-template</span>.</p>
			<div>
				<div id="_idContainer1125" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The Grid experts I’ve talked to don’t tend to use <span class="Literal-Sidebar">grid</span> or <span class="Literal-Sidebar">grid-template</span> except for the simplest of grid structures. The code becomes overly complex, and one small slip can make the whole grid fall apart. For complicated grid structures, stick to separate properties for defining rows, columns, and areas.</p>
				</div>
			</div>
			<p class="body">I’m thinking that it’s a good time for you to put all of these grid setup styles to use in <span class="Xref-Figure">Exercise 16-4</span>.</p>
			<div>
				<div id="_idContainer1131" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 16-4.</span> Setting up a grid</h6>
					<p class="SidebarBody">In this exercise, we’ll set up the<a id="_idIndexMarker3036"></a> grid template for the page shown in <span class="Xref-Figure">Figure 16-37</span>. We’ll place the grid items into the grid in <span class="Xref-Figure">Exercise 16-5</span>, so for now just pay attention to setting up the rows and columns. </p>
					<div>
						<div id="_idContainer1126" class="note">
							<h5 class="noteHeader">NOTE</h5>
							<p class="note">You will need to use a browser that supports grids for this exercise. I am using Firefox in order to take advantage of the Grid Inspector tool. Supporting browsers are listed earlier in this section. See the <span class="Xref--Sidebar-">“</span><span class="Xref--Sidebar-"><a id="_idIndexMarker3037"></a><a id="_idIndexMarker3038"></a></span><span class="Xref--Sidebar-">Firefox Grid Inspector and Layout Panel”</span> sidebar for instructions on how to open the tool.</p>
						</div>
					</div>
					<p class="SidebarBody">This page is similar to the bakery page we’ve been working on, but it has a few more elements and whitespace to make things interesting. The starter document, <span class="Filename--Sidebar-">grid.html</span>, is provided with the exercise materials at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a>. Open it in a text editor, and you’ll see that all of the styles affecting the appearance of each element are provided. </p>
					<div>
						<figure id="_idContainer1128" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1637_ex16-4_grid.png" alt="" width="1321" height="746"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-37.</span>The Breads of the World page that we will create using Grid Layout. </figcaption>
						</figure>
					</div>
					<ol>
						<li class="SidebarListNumber" value="1">Start by turning the containing element, the <span class="Literal-Sidebar">#layout</span> <span class="Literal-Sidebar">div</span>, into a grid container by setting its display mode to “grid”:<pre class="SidebarCodeFirst">#layout {<br/>  …<br/><code class="CodeColor">  display: grid;</code><br/>}</pre></li>
						<li class="SidebarListNumber"><span class="Xref-Figure">Figure 16-37</span> shows the row and column tracks required to accommodate the content in the desired layout. Start by defining the rows as specified in the sketch, using the <span class="Literal-Sidebar">grid-template-rows</span> property. There should be five values, representing each of the five rows. (Spoiler alert: we’ll be tweaking these values when we get to the next exercise. This is just a starting point.)<pre class="SidebarCodeFirst">#layout {<br/>  …<br/>  display: grid;<br/><code class="CodeColor">  grid-template-rows: 3em 20px 150px 300px 5em;</code><br/>}</pre></li>
						<li class="SidebarListNumber">Do the same for the seven columns. Because I want the text column to grow and shrink with the available space, I’ve specified its width in fractional units (<span class="Literal-Sidebar">1fr</span>). The remaining columns create 150px-wide cells for three images and 20px of space before them. <p class="SidebarListItem_cont">You can write them all out like this:</p><pre class="SidebarCodeFirst">  <code class="CodeColor">grid-template-columns: 1fr 20px 150px 20px 150px 20px 150px;</code> </pre><p class="SidebarListItem_cont">However, because the last six columns are a repeating pattern, it would be easier to use the <span class="Literal-Sidebar">repeat()</span> function to repeat the spaces and figure columns three times:</p><pre class="SidebarCodeFirst"><code class="CodeColor">grid-template-columns:  1fr repeat(3, 20px 150px);</code> </pre></li>
						<li class="SidebarListNumber">Finally, let’s assign <a id="_idIndexMarker3039"></a>names to the grid lines that border the grid area where the <span class="Literal-Sidebar">main</span> content element should appear. The names give us some intuitive options for placing that item later. The main area starts at the third row track, so assign the name “main-start” to the grid line between the second and third row track measurements:<pre class="SidebarCodeFirst">grid-template-rows: 3em 20px <code class="CodeColor">[main-start]</code> 150px 300px 5em;</pre><p class="SidebarListItem_cont">The main area extends into the last row track, so assign the name “main-end” to the last grid line in the grid (after the last row track):</p><pre class="SidebarCodeFirst">grid-template-rows: 3em 20px [main-start] 150px 300px 5em <code class="CodeColor">[main-end]</code>;</pre></li>
						<li class="SidebarListNumber">Now do the same for the grid lines that mark the boundaries of the column track where the main content goes:<pre class="SidebarCodeFirst">grid-template-columns:  <code class="CodeColor">[main-start]</code> 1fr <code class="CodeColor">[main-end]</code> repeat(3, 20px 150px); </pre></li>
					</ol>
					<p class="SidebarBody">I’ve saved my work and looked at it in Firefox with the Grid Inspector turned on (<span class="Xref-Figure">Figure 16-38</span>). Because I haven’t specified where the grid items go, they flowed into the cells sequentially, making the mess you see in the figure. However, the grid overlay reveals that the structure of the grid looks solid. Save the file and hold on to it until the next exercise.</p>
					<div>
						<figure id="_idContainer1130" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1638_ex16-4_grid.png" alt="" width="1289" height="858"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-38</span><span class="FigureLabel">.</span> The grid items are not placed correctly yet, but the Firefox Grid Inspector shows that the grid is set up correctly. </figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h2 class="HeadB">Placing Grid Items</h2>
			<p class="body">Now that we’ve <a id="_idIndexMarker3040"></a><a id="_idIndexMarker3041"></a>covered all the ins and outs of setting up a grid, including giving ourselves handy line and area names, we can move on to assigning items to areas on the grid.</p>
			<p class="body">As we saw in <span class="Xref-Figure">Figures 16-32</span> and <span class="Xref-Figure">16-38</span>, without any explicit placement instruction, grid <a id="_idIndexMarker3042"></a>items flow into the available grid cells sequentially. That’s fine for some use cases, but let’s tell our grid items where to go!</p>
			<h3 class="HeadC">Positioning using lines</h3>
			<p class="body">One method<a id="_idIndexMarker3043"></a> for describing a grid item’s location on the grid is to specify the four lines bordering the target grid area with four properties that specify the start and end row lines and the start and end column lines. Apply these properties to the <a id="_idIndexMarker3044"></a><a id="_idIndexMarker3045"></a><a id="_idIndexMarker3046"></a><a id="_idIndexMarker3047"></a>individual grid item element you are positioning.</p>
			<p class="refNameCode">grid-row-start</p>
			<p class="refNameCode">grid-row-end</p>
			<p class="refNameCode">grid-column-start</p>
			<p class="refNameCode">grid-column-end</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">auto</span> |  <span class="prop-replace">grid line </span> |  <span class="prop-code">span</span><span class="prop-replace"> number </span> |  <span class="prop-code">span</span><span class="prop-replace"> ‘line name’ </span> |  <span class="prop-replace">number ‘line name’</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">auto</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">This set of properties provides a straightforward way to describe an element’s position on the grid by identifying either the name or number of the grid line on each border. As an alternative, you can provide just one line identifier and tell the item to <a id="_idIndexMarker3048"></a>“span” a certain number of cells. By default, an item occupies one track width, which is what you get with the <span class="Literal-fc">auto</span> keyword. </p>
			<p class="body">Getting back to our five-item example, I would like the first item to go in the top row and span across all three columns (<span class="Xref-Figure">Figure 16-39</span>). </p>
			<div>
				<figure id="_idContainer1133" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1639_itemplacement.png" alt="" width="1321" height="742"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-39</span><span class="FigureLabel">.</span> Positioning a grid item across the top row track in our sample grid.</figcaption>
				</figure>
			</div>
			<p class="body">One way to do this is to use the four line start/end properties and identify lines by their numbers like so:</p>
			<pre class="CodeFirst">#one {<br/>  <code class="CodeColor">grid-row-start: 1;<br/>  grid-row-end: 2;<br/>  grid-column-start: 1;<br/>  grid-column-end: 4;</code><br/>}</pre>
			<p class="body">Take a moment to compare this to the position of the header area back in <span class="Xref-Figure">Figure 16-36</span>. For <span class="Literal-fc">grid-row-start</span>, the 1 value refers to the first (top) line of the grid container. For <span class="Literal-fc">grid-column-start</span>, 1 refers to the first line on the left edge of the container, and the value 4 for <span class="Literal-fc">grid-column-end</span> identifies the fourth and last line on the right edge of the container.</p>
			<p class="body">Here’s one more for good measure. This style declaration positions the <span class="Literal-fc">#four</span> item element in the right side column as shown in <span class="Xref-Figure">Figure 16-36</span>:</p>
			<pre class="CodeFirst">#four {<br/>  <code class="CodeColor">grid-row-start: 2;<br/>  grid-row-end: 3;<br/>  grid-column-start: 3;<br/>  grid-column-end: 4;</code><br/>}</pre>
			<div>
				<div id="_idContainer1134" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">If you omit a start or end line, the area will be one track wide (the default, <span class="Literal-Sidebar">auto</span>). </p>
				</div>
			</div>
			<p class="body">Remember how grid lines are also numbered in the opposite direction starting at –1? We can use that here. I could specify the <span class="Literal-fc">grid-column-end</span> for <span class="Literal-fc">#one</span> as –1, and it would be the same as 4. In fact, this method has the advantage of guaranteeing to span to the end of the track and avoids miscounting.</p>
			<div>
				<div id="_idContainer1135" class="sidebar">
					<h5 class="SidebarSeries">HOT TIP</h5>
					<p class="SidebarBody">If you need to <a id="_idIndexMarker3049"></a><a id="_idIndexMarker3050"></a>span to the last grid line in a row or column, use the value –1 and save yourself some counting. Also, even if the number of rows or columns changes down the line, –1 will always select the last line, so you won’t need to renumber.</p>
				</div>
			</div>
			<p class="body">I could also use the named lines I set up here. These row values are interchangeable with the previous example:</p>
			<pre class="CodeFirst">#one {<br/>  grid-row-start: <code class="CodeColor">header-start</code>;<br/>  grid-row-end: <code class="CodeColor">header-end</code>;<br/>  …<br/>}</pre>
			<p class="body">If I omit the end line declaration, the row would be one track high (the default). That’s what I want here, so omitting the end declaration altogether is one more way to achieve the effect I want.</p>
			<p class="body">Ready for yet another option? I can tell the item what line to start on, but instead of providing an end line, I can use the <span class="Literal-fc">span</span> keyword to specify how many tracks to span over. In this example, the item starts at the left edge of the track (line 1) and spans over three columns, effectively ending at line 4. </p>
			<pre class="CodeFirst">#one {<br/>  …<br/>  grid-column-start: 1;<br/>  grid-column-end: <code class="CodeColor">span 3</code>;<br/>}</pre>
			<p class="body">Spans can work in reverse as well. If you provide only an end line, the span searches toward the start of the track. The following styles have the same effect as our previous examples because they define the target area by its end line at the far right of the grid and span back three columns to the beginning:</p>
			<pre class="CodeFirst">#one {<br/>  …<br/>  grid-column-start: <code class="CodeColor">span 3</code>;<br/>  grid-column-end: -1;<br/>}</pre>
			<p class="body">If four declarations feels like too many, use the shorthand <span class="Literal-fc">grid-row</span> and <span class="Literal-fc">grid-column</span> properties instead. </p>
			<p class="RefNameCode-Left">grid-row</p>
			<p class="RefNameCode-Left">grid-column</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">start line </span> <span class="prop-code">/</span>  <span class="prop-replace">end line </span></p>
			<p class="property"><span class="prop-label">Default:</span> 	see individual properties</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">These <a id="_idIndexMarker3051"></a><a id="_idIndexMarker3052"></a>properties combine the <span class="Literal-fc">*-start</span> and <span class="Literal-fc">*-end</span> properties into a single declaration. The start and end line values are separated by a slash (/). With the shorthand, I can shorten my example to the following two declarations. Any of the methods for referring to lines work in the shorthand values.</p>
			<pre class="CodeFirst">#one {<br/>  <code class="CodeColor">grid-row: 1 / 2;<br/>  grid-column: 1 / span 3;</code><br/>}</pre>
			<h3 class="HeadC">Positioning by area </h3>
			<p class="body">The other way <a id="_idIndexMarker3053"></a>to position an item on a grid is to tell it go into one of the named areas by using the <span class="Literal-fc">grid-area</span> property. </p>
			<p class="RefNameCode-Left">grid-area</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">area name </span> |  <span class="prop-replace">1 to 4 line identifiers </span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	see individual properties</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The <a id="_idIndexMarker3054"></a><span class="Literal-fc">grid-area</span> property points to one of the areas named with <a id="_idIndexMarker3055"></a><span class="Literal-fc">grid-template-areas</span>. It can also point to an area name that is implicitly created when you name lines delimiting an area with the suffixes “-start” and “-end”. With this method, I can drop all of the grid items into the areas I set up with my template earlier (<span class="Xref-Figure">Figure 16-40</span>):</p>
			<pre class="CodeFirst">#one { grid-area: header; }<br/>#two { grid-area: ads; }<br/>#three { grid-area: main; }<br/>#four { grid-area: links; }<br/>#five { grid-area: footer; }</pre>
			<div>
				<figure id="_idContainer1137" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1640_areas.png" alt="" width="1321" height="695"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-40.</span> Assigning grid items by area names.</figcaption>
				</figure>
			</div>
			<p class="body">How easy was <em class="Emphasis">that</em>?! One benefit of using areas is that you can change the grid, and as long as you provide consistently named grid areas, the items will end up in the right place. There’s no need to renumber lines in the style sheet. </p>
			<p class="body">You can also use <a id="_idIndexMarker3056"></a><span class="Literal-fc">grid-area</span> to provide a list of four grid lines that define an area, separated by slashes. The order in which they appear is “row-start,” “column-start,” “row-end,” “column-end” (counterclockwise from the top). There are a lot of rules for what happens when you omit values, but I’m not going to get into all those finer points here. The <span class="Literal-fc">grid-area</span> declaration for the first grid item could be written like this to achieve the same result as previous examples:</p>
			<pre class="CodeFirst">#one {<br/><code class="CodeColor">  grid-area: 1 / 1 / 2 / span 3;</code>  <span class="Code-Comment">/* row-start / column-start / row-end / column-end */</span><br/> }</pre>
			<p class="body">As you can see, the Grid Layout Module gives you a variety of ways to set up a grid and a variety of ways to place items on it. In fact, the spec includes a few more uses of <span class="Literal-fc">span</span> that you can explore. Choose the methods that work best for the grid you are designing or that work best for your brain. </p>
			<p class="body">Now let’s finish up the grid we’ve been working on in <span class="Xref-Figure">Exercise 16-5</span>.</p>
			<div>
				<div id="_idContainer1140" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 16-5.</span> Placing items on a grid</h6>
					<p class="SidebarBody">Now that we have the grid set up for the Breads of the World page, we can place items into the correct grid areas by using line numbers and names.</p>
					<p class="SidebarBody">I’m going to go through them quickly, but feel free to save the file and look at the page in a grid-supporting browser at any step along the way. Refer to the finished layout in <span class="Xref-Figure">Figure 16-41</span> for the final item positions and line number hints.</p>
					<div>
						<figure id="_idContainer1139" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1641_ex16-5_linenumbers.png" alt="" width="1321" height="708"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-41.</span> The final Breads of the World grid layout.</figcaption>
						</figure>
					</div>
					<ol>
						<li class="SidebarListNumber" value="1">Open <span class="Filename--Sidebar-">grid.html</span> in your text editor if it isn’t open already. We’ll start by placing the <span class="Literal-Sidebar">nav</span> element into the first row of the grid, using the four grid line properties: <pre class="SidebarCodeFirst"><code class="CodeColor">nav {<br/>  grid-row-start: 1;<br/>  grid-row-end: 2;<br/>  grid-column-start: 1;<br/>  grid-column-end: 8;</code> <span class="Code-Comment">/* you could also use -1 */</span> <code class="CodeColor"><br/>}</code> </pre></li>
						<li class="SidebarListNumber">Now place the figures in their positions on the grid. Start by putting the third figure (<span class="Literal-Sidebar">#figC</span>) in its place in the far-right column by using the shorthand <span class="Literal-Sidebar">grid-row</span> and <span class="Literal-Sidebar">grid-column</span> properties. It goes between the 3rd and 4th row grid lines and extends from the 7th to 8th column lines. For columns, instead of 7 and 8, use the negative value for the last line and span it one space to the left to get to the starting point:<pre class="SidebarCodeFirst"><code class="CodeColor">#figC {<br/>  grid-row: 3 / 4;<br/>  grid-column: span 1 / -1;<br/>}</code></pre><p class="SidebarListItem_cont">Now position the <span class="Literal-Sidebar">#figA</span> and <span class="Literal-Sidebar">#figB</span> elements by using the <span class="Literal-Sidebar">grid-area</span> property with line values. Remember that the values go in the order top, left, bottom, right (counterclockwise around the area). </p><pre class="SidebarCodeFirst">#figA {<br/>  grid-area: 3 / 3 / 4 / 4;<br/>}<br/>#figB {<br/>  grid-area: 3 / 5 / 4 / 6;<br/>}</pre></li>
						<li class="SidebarListNumber">We gave the grid lines around the main area names, so let’s use them to place the <span class="Literal-Sidebar">main</span> grid item: <pre class="SidebarCodeFirst">main {<br/>…<br/>  <code class="CodeColor">grid-row: main-start / main-end;<br/>  grid-column: main-start / main-end;</code><br/> }</pre><p class="SidebarListItem_cont">Do you remember that when you name lines around an area <span class="Literal-Sidebar">*-start</span> and <span class="Literal-Sidebar">*-end</span>, it creates an implicitly named area <span class="Literal-Sidebar">*</span>? Because we named the lines according to this syntax, we could also place the <span class="Literal-Sidebar">main</span> element with <span class="Literal-Sidebar">grid-area</span> like this:</p><pre class="SidebarCodeFirst">main {<br/>…<br/>  <code class="CodeColor">grid-area: main;</code><br/> }</pre></li>
						<li class="SidebarListNumber">Finally, we can put the footer into its place. It starts at the last row grid line and spans back one track. For columns, it starts at the third line and goes to the last. Here is one way to write those instructions. Can you come up with others that achieve the same result?<pre class="SidebarCodeFirst">footer {<br/>…<br/> <code class="CodeColor"> grid-row: 5 / 6;<br/>  grid-column: 3 / -1;</code><br/> } </pre><p class="SidebarBody">Save your file and look at it in the browser. You may spot a problem, depending on the width of your browser window. When the browser is wide, the layout works fine, but when it is made narrower, the text in the <span class="Literal-Sidebar">main</span> element overflows its cell. That’s because the 300-pixel height we gave that row is not sufficient to hold the text when it breaks onto additional lines or is resized larger. </p></li>
						<li class="SidebarListNumber">We can fix that by changing the measurement of the fourth row track to <span class="Literal-Sidebar">auto</span>. In that way, the height of that row will always be at least big enough to hold the content. The <span class="Literal-Sidebar">min-content</span> value would work as well, but <span class="Literal-Sidebar">auto</span> is always the first value to try:<pre class="SidebarCodeFirst">#layout {<br/>  display: grid;<br/>  grid-template-rows: 3em 20px [main-start] 150px <code class="CodeColor">auto</code> 5em [main-end];<br/>…</pre><pre class="SidebarCode"><br/>}</pre></li>
					</ol>
					<p class="SidebarBody">If you reload the page in the browser, the text is always contained in its grid area, regardless of the width of the window. Everything should fall into place nicely, as shown in <span class="Xref-Figure">Figure 16-41</span>. </p>
					<p class="SidebarBody">You now have your first grid layout under your belt. This exercise gives you only a taste of what Grid Layout can do, but we’ve covered the fundamentals of setting up a grid and placing items in it. You’re off to a great start!</p>
				</div>
			</div>
			<div>
				<div id="_idContainer1141" class="sidebar">
					<h5 class="SidebarTitle">The Grid Item Shuffle</h5>
					<p class="SidebarBody">So far, you’ve seen grid items flowing into a grid sequentially and get placed into their own little areas on a grid explicitly. There are a few properties that may be useful for tweaking the position of grid items.</p>
					<h5 class="sbHead">Changing the Order</h5>
					<p class="SidebarBody">As in Flexbox, <a id="_idIndexMarker3057"></a><a id="_idIndexMarker3058"></a>you can apply the <span class="Literal-Sidebar">order</span> property to a grid item element to change the order in which it appears when it is rendered. Keep in mind that the <span class="Literal-Sidebar">order</span> property does not change the order in which it is read by an assistive device. See the section <span class="Xref--Sidebar-">“Changing the Order of Flex Items”</span> earlier in this chapter for more information on how to use <span class="Literal-Sidebar">order</span>.</p>
					<h5 class="sbHead">Stacking Order</h5>
					<p class="SidebarBody">It is <a id="_idIndexMarker3059"></a>possible to position items in a grid in a way that causes them to overlap. <a id="_idIndexMarker3060"></a>When more than one item is assigned to a grid area, items that appear later in the source are rendered on top of items earlier in the source, but you can change the stacking order by using the <span class="Literal-Sidebar">z-index</span> property. Assigning a higher <span class="Literal-Sidebar">z-index</span> value to earlier item elements makes them render above items that appear later. See the section <span class="Xref--Sidebar-">“Stacking Order”</span> in <span class="Xref--Sidebar-">Chapter 15, Floating and Positioning</span>, for details on using <span class="Literal-Sidebar">z-index</span>.</p>
				</div>
			</div>
			<p class="body">Now you know the basics of creating an explicit grid and placing items on it. There are a few more grid-related topics that are important to be familiar with: implicit grids, gutter spaces, and grid alignment. I have space for only a basic introduction to each topic, but when you start implementing grid layouts on your own, you can do the deep dive required to meet your needs. </p>
			<h2 class="HeadB">Implicit Grid Behavior </h2>
			<p class="body">So far, we’ve <a id="_idIndexMarker3061"></a><a id="_idIndexMarker3062"></a><a id="_idIndexMarker3063"></a>been<a id="_idIndexMarker3064"></a><a id="_idIndexMarker3065"></a> focusing on ways to define an <span class="FirstTerm">explicit</span> grid and place items on it deliberately. But along the way, we’ve encountered a few of the Grid system’s automatic, or <span class="FirstTerm">implicit</span>, behaviors. For example, without explicit placement instructions, grid items flow into the grid sequentially, as we saw in <span class="Xref-Figure">Figure 16-32</span>. I also pointed out how creating a named area implicitly generates grid lines with the “-start” and “-end” suffixes, and vice versa.  </p>
			<p class="body">Another implicit Grid behavior is the creation of row and column tracks on the fly to accommodate items that don’t fit in the defined grid. For example, if you place an item outside a defined grid, the browser automatically generates tracks in the grid to accommodate it. Similarly, if you simply have more items than there are cells or areas, the browser generates more tracks until all the items are placed. </p>
			<p class="body">By default, any row or column automatically added to a grid will have the size <span class="Literal-fc">auto</span>, sized just large enough to accommodate the height or width of the contents. If you want to give implicit rows and columns specific dimensions, such as to match a rhythm established elsewhere in the grid, use the <span class="Literal-fc">grid-auto-*</span> properties.</p>
			<p class="RefNameCode-Left">grid-auto-rows</p>
			<p class="RefNameCode-Left">grid-auto-columns</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">li</span><span class="prop-replace">st of track sizes</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">auto</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">The <span class="Literal-fc">grid-auto-row</span> <a id="_idIndexMarker3066"></a><a id="_idIndexMarker3067"></a>and <span class="Literal-fc">grid-auto-columns</span> properties provide one or more track sizes for automatically generated tracks and apply to the grid container. If you provide more than one value, it acts as a repeating pattern. As just mentioned, the default value is <span class="Literal-fc">auto</span>, which sizes the row or column to accommodate the content. </p>
			<p class="body">In this example, I’ve explicitly created a grid that is two columns wide and two columns high. I’ve placed one of the grid items in a position equivalent to the fifth column and third row. My explicit grid isn’t big enough to accommodate it, so tracks get added according to the sizes I provided in the <span class="Literal-fc">grid-auto-*</span> properties (<span class="Xref-Figure">Figure 16-42</span>).</p>
			<p class="body"><span class="FigureLabel">The markup</span></p>
			<pre class="CodeFirst">&lt;div id="littlegrid"&gt;<br/>  &lt;div id="A"&gt;A&lt;/div&gt;<br/>  &lt;div id="B"&gt;B&lt;/div&gt;<br/>&lt;/div&gt;</pre>
			<p class="body"><span class="FigureLabel">The styles</span></p>
			<pre class="CodeFirst">#littlegrid {<br/>  display: grid;<br/>  grid-template-columns: 200px 200px;<br/>  grid-template-rows: 200px 200px;<br/>   <code class="CodeColor">grid-auto-columns: 100px;<br/>  grid-auto-rows: 100px;</code><br/>}<br/>#A {<br/>  grid-row: 1 / 2;<br/>  grid-column: 2 / 3;<br/>}<br/>#B {<br/><code class="CodeColor">  grid-row: 3 / 4;<br/>  grid-column: 5 / 6;</code><br/>}</pre>
			<div>
				<figure id="_idContainer1143" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1642_implicit.png" alt="" width="1321" height="1114"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-42.</span> Browsers generate rows and columns automatically to place grid items that don’t fit the defined grid. </figcaption>
				</figure>
			</div>
			<p class="body">Hopefully, that example helped you form a mental model for automatically generated rows and columns. A more common use of auto-generated tracks is to tile images, product listings, and the like into columns, letting rows be created as needed. These styles set up a grid with explicit columns (as many as will fit the width of the viewport, no narrower than 200px) and as many 200px-high rows as needed:</p>
			<pre class="CodeFirst">grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));<code class="CodeColor">grid-auto-rows: 200px;</code></pre>
			<p class="body">You can also control the manner in which items automatically flow into the grid with the <span class="Literal-fc">grid-auto-flow</span> property.</p>
			<h3 class="HeadC">Flow direction and density</h3>
			<p class="RefNameCode-Left">grid-auto-flow</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">row</span> or <span class="prop-code">column</span> | <span class="prop-code">dense</span><span class="prop-replace"> (optional)</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">row</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">Use <span class="Literal-fc">grid-auto-flow</span> <a id="_idIndexMarker3068"></a><a id="_idIndexMarker3069"></a><a id="_idIndexMarker3070"></a>to specify whether you’d like items to flow in by row or column. The default flow follows the writing direction of the document (left-to-right and top-to-bottom for English and other left-to-right languages). </p>
			<p class="body">In this example, I’ve specified that I’d like grid items to flow in by columns instead of the default rows:</p>
			<pre class="CodeFirst">#listings {<br/>  display: grid;<br/>  <code class="CodeColor">grid-auto-flow: column;</code><br/>}</pre>
			<p class="body">By default, items are placed in the first area in which they fit. Cells that are too small to accommodate the content will be skipped over until a cell large enough is found for placement. If you include the optional <span class="Literal-fc">dense</span> keyword for the <span class="Literal-fc">grid-auto-flow</span> property, it instructs the browser to fill the grid as densely as possible, allowing the items to appear out of sequence in order to fill the available space: </p>
			<pre class="CodeFirst">#listings {<br/>  display: grid;<br/>  <code class="CodeColor">grid-auto-flow: dense rows;</code><br/>}</pre>
			<p class="body">The example on the left of <span class="Xref-Figure">Figure 16-43</span> shows the default flow method. Look closely and you’ll see that the grid items are in order. When there isn’t enough room for the whole item, it moves down and to the left until it fits (similar to floats). This method may leave empty cells as shown in the figure. By comparison, the dense flow example on the right is all filled in, and if you look at the numbering, you can see that putting items wherever they fit makes them end up out of order. Note that dense flow doesn’t always result in a completely filled-in grid like the figure, but it is likely to have fewer holes and be more compact than the default mode.</p>
			<div>
				<figure id="_idContainer1145" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1643_dense.png" alt="" width="1321" height="804"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-43.</span> Comparison of default and dense auto-flow modes.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">The grid shorthand property revisited</h3>
			<p class="body">Earlier we saw the <a id="_idIndexMarker3071"></a><a id="_idIndexMarker3072"></a><span class="Literal-fc">grid</span> shorthand property used to provide track sizes as well as area names. In that section, we were dealing with explicit grids, but <span class="Literal-fc">grid</span> can be used with implicit grid properties as well. </p>
			<p class="body">Adding the <span class="Literal-fc">auto-flow</span> keyword to either the row or track information indicates that the tracks on that axis should be automatically generated at the provided dimension.</p>
			<p class="body">Say we want to establish columns explicitly, but let rows generate automatically as needed. The <span class="Literal-fc">grid</span> shorthand for this common scenario is shown here: </p>
			<pre class="CodeFirst">grid: <code class="CodeColor">auto-flow</code> 12em / repeat(5, 1fr);</pre>
			<p class="body">Remember that the <span class="Literal-fc">grid</span> shorthand syntax lists row information first, then a slash, then the column information. Here, the rule says to create rows automatically that are 12 ems high and create 5 columns at 1fr each. When <span class="Literal-fc">auto-flow</span> is applied to rows, the <span class="Literal-fc">grid-auto-flow</span> is set to <span class="Literal-fc">row</span>.</p>
			<p class="body">In this example, the resulting grid will have two 300px rows, but 100px-wide columns will be generated on the fly as grid items are added:</p>
			<pre class="CodeFirst">grid: 300px 300px / <code class="CodeColor">auto-flow</code> 100px;</pre>
			<p class="body">With <span class="Literal-fc">auto-flow</span> applied to columns, the <span class="Literal-fc">grid-auto-flow</span> is set to <span class="Literal-fc">column</span>.</p>
			<p class="body">It is important to keep in mind that because <span class="Literal-fc">grid</span> is a shorthand property, any omitted value will be reset to its default. Therefore, if you’ve also used <span class="Literal-fc">grid</span> to set up explicit rows and columns, those will be essentially lost if a <span class="Literal-fc">grid</span> shorthand with implicit grid instructions appears later in the style sheet.</p>
			<h2 class="HeadB">Spacing and Alignment</h2>
			<p class="body">The remaining <a id="_idIndexMarker3073"></a><a id="_idIndexMarker3074"></a>properties defined in the Grid Layout Module relate to spacing and alignment. You can add space between tracks and adjust alignment of the grid and its items by using many of the same methods you learned for Flexbox.</p>
			<h3 class="HeadC">Spacing between tracks (gutters)</h3>
			<p class="RefNameCode-Left">grid-row-gap</p>
			<p class="RefNameCode-Left">grid-column-gap</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">length (must not be negative)</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">0</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="RefNameCode-Left">grid-gap</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">grid-row-gap  grid-column-gap</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">0 0</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<div>
				<div id="_idContainer1146" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">These property names will be changing<a id="_idIndexMarker3075"></a><a id="_idIndexMarker3076"></a><a id="_idIndexMarker3077"></a> to <span class="Literal-fc">row-gap</span>, <span class="Literal-fc">column-gap</span>, and <span class="Literal-fc">gap</span>. Until browsers start supporting the new syntax, you can still use the <span class="Literal-fc">grid-* </span>prefixed versions, which will continue to be supported for backward compatibility.</p>
				</div>
			</div>
			<p class="body">Setting a<a id="_idIndexMarker3078"></a><a id="_idIndexMarker3079"></a> <a id="_idIndexMarker3080"></a><a id="_idIndexMarker3081"></a><a id="_idIndexMarker3082"></a><a id="_idIndexMarker3083"></a>length value for <span class="Literal-fc">grid-row-gap</span> adds space between the row tracks of the grid, and <span class="Literal-fc">grid-column-gap</span> adds space between (you guessed it) column tracks. The effect is as if the grid lines have a width; however, the gap width is applied only to lines between tracks, not outside the first and last lines in the grid. (Spacing on the outside edges can be controlled with padding.) You can use the <span class="Literal-fc">grid-gap</span> shorthand to specify gap widths for rows and columns in one go, with rows first, as usual.</p>
			<p class="body">In this example, I’ve added 20px space between rows and 50px space between columns by using the <span class="Literal-fc">grid-gap</span> shorthand (<span class="Xref-Figure">Figure 16-44</span>). </p>
			<pre class="CodeFirst">div#container {<br/>   border: 2px solid gray;<br/>  display: grid;<br/>  grid: repeat(4, 150px) / repeat(4, 1fr);<br/> <code class="CodeColor"> grid-gap: 20px 50px; </code><br/>}</pre>
			<div>
				<figure id="_idContainer1148" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1644_gap.png" alt="" width="1321" height="908"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-44.</span> Grid gaps add gutter spaces between tracks.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Grid and item alignment</h3>
			<p class="body">You can <a id="_idIndexMarker3084"></a><a id="_idIndexMarker3085"></a><a id="_idIndexMarker3086"></a>align grid items in their cells with the same alignment vocabulary used for Flexbox items (see the <span class="Xref">“Box Alignment”</span> sidebar). I’m going to touch on these quickly, but you can play around with them on your own. </p>
			<div>
				<div id="_idContainer1149" class="sidebar">
					<h5 class="SidebarTitle">Box Alignment</h5>
					<p class="SidebarBody">It’s no coincidence that Flexbox and Grid share alignment properties and values. They are all standardized in their own spec called the CSS Box Alignment Module, Level 3, which serves as a reference to a number of CSS modules. You can check it out at <a href="http://www.w3.org/TR/css-align/"><span class="URL-Email--Sidebar-">www.w3.org/TR/css-align/</span></a>.</p>
				</div>
			</div>
			<h4 class="HeadD">Aligning individual items</h4>
			<p class="RefNameCode-Left">justify-self</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">start</span> | <span class="prop-code">end</span> | <span class="prop-code">center</span> | <span class="prop-code">left</span> | <span class="prop-code">right</span> | <span class="prop-code">self-start</span> | <span class="prop-code">self-end</span> | <span class="prop-code">stretch</span> | <span class="prop-code">normal</span> | <span class="prop-code">auto</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">auto</span><span class="prop-label"> </span>(looks at the value for <span class="prop-code">justify-items</span>, which defaults to <span class="prop-code">normal</span>)</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="RefNameCode-Left">align-self</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">start</span> | <span class="prop-code">end</span> | <span class="prop-code">center</span> | <span class="prop-code">left</span> | <span class="prop-code">right</span> | <span class="prop-code">self-start</span> | <span class="prop-code">self-end</span> | <span class="prop-code">stretch</span> | <span class="prop-code">normal</span> | <span class="prop-code">auto</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">auto</span><span class="prop-label"> </span>(looks at the value for <span class="prop-code">align-items</span>)</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid items</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<div>
				<div id="_idContainer1150" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The <span class="Literal-Sidebar">self-start</span> and <span class="Literal-Sidebar">self-end</span> values look at the writing direction of the content of the item and use its start or end edge for alignment. For example, if an item is in Arabic, its <span class="Literal-Sidebar">self-start</span> edge is on the right, and it would be aligned to the right. The <span class="Literal-Sidebar">start</span> and <span class="Literal-Sidebar">end</span> values consider the writing direction of the grid container. The <span class="Literal-Sidebar">left</span> and <span class="Literal-Sidebar">right</span> keywords are absolute and would not change with the writing system, but they correspond to <span class="Literal-Sidebar">start</span> and <span class="Literal-Sidebar">end</span> in left-to-right languages. </p>
				</div>
			</div>
			<p class="body">When a <a id="_idIndexMarker3087"></a><a id="_idIndexMarker3088"></a><a id="_idIndexMarker3089"></a>grid item doesn’t fill its entire grid area, you can specify how you’d like it to be aligned in that space. Specify the horizontal (inline) alignment with the <span class="Literal-fc">justify-self</span> property. <span class="Literal-fc">align-self</span> specifies alignment on the vertical (block) axis. These properties apply to the grid item element, which makes sense because you want the item to align itself.</p>
			<p class="body"><span class="Xref-Figure">Figure 16-45</span> shows the effects of each keyword value. For items with their size set to <span class="Literal-fc">auto</span> (or in other words, not explicitly set with <span class="Literal-fc">width</span> and <span class="Literal-fc">height</span> properties), the default is <span class="Literal-fc">stretch</span>. This is what we’ve seen in all the previous grid examples. If the grid item has a width and height specified, those dimensions are preserved and the default is <span class="Literal-fc">start</span>.</p>
			<div>
				<figure id="_idContainer1152" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1645_self.png" alt="" width="1321" height="746"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-45.</span> Values for <span class="Literal-Sidebar">justify-self</span> and <span class="Literal-Sidebar">align-self</span> for aligning a grid item within its respective grid area. These values have the same use in the <span class="Literal-Sidebar">justify-items</span> and <span class="Literal-Sidebar">align-items</span> properties that are used to align all the items in the grid.</figcaption>
				</figure>
			</div>
			<p class="body">After reading about Flexbox, you should find these familiar—for example, the use of “start” and “end” to keep the system language direction-agnostic. </p>
			<div>
				<div id="_idContainer1153" class="sidebar">
					<h5 class="SidebarSeries">Tip</h5>
					<p class="SidebarBody">If you want a grid item to stay centered in its grid area, set both <span class="Literal-Sidebar">align-self</span> and <span class="Literal-Sidebar">justify-self</span> to <span class="Literal-Sidebar">center</span>.</p>
				</div>
			</div>
			<h4 class="HeadD">Aligning all the<a id="_idIndexMarker3090"></a> items in a grid</h4>
			<p class="RefNameCode-Left">justify-items</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">start</span> | <span class="prop-code">end</span> | <span class="prop-code">center</span> | <span class="prop-code">left</span> | <span class="prop-code">right</span> | <span class="prop-code">self-start</span> | <span class="prop-code">self-end</span> | <span class="prop-code">stretch</span> | <span class="prop-code">normal</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">normal </span>(<span class="prop-code">stretch</span> for non-replaced elements; <span class="prop-code">start</span> for replaced elements)</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="RefNameCode-Left">align-items</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">start</span> | <span class="prop-code">end</span> | <span class="prop-code">center</span> | <span class="prop-code">left</span> | <span class="prop-code">right</span> | <span class="prop-code">self-start</span> | <span class="prop-code">self-end</span> | <span class="prop-code">stretch</span> | <span class="prop-code">normal</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">normal </span>(<span class="prop-code">stretch</span> for non-replaced elements; <span class="prop-code">start</span> for replaced elements)</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">To align all <a id="_idIndexMarker3091"></a>of the items in a grid in one fell swoop, use the <span class="Literal-fc">justify-items</span> property for horizontal/inline axis alignment and <span class="Literal-fc">align-items</span> for vertical/block axis. Apply these properties to the grid container element so it affects all of the items in the grid. The keywords do the same things shown in <span class="Xref-Figure">Figure 16-43</span>; just picture it happening consistently across the entire grid. Keep in mind that these settings will be overridden by the <span class="Literal-fc">*-self</span> properties.</p>
			<h4 class="HeadD">Aligning tracks in the grid container</h4>
			<p class="body">There may be <a id="_idIndexMarker3092"></a>instances in which the tracks of your grid do not fill the entire area of their grid container—for example, if you’ve specified track widths and heights in specific pixel measurements. You can decide how the browser should handle leftover space within the container by using the <span class="Literal-fc">justify-content</span> (horizontal/inline axis) and <span class="Literal-fc">align-content</span> (vertical/block axis) properties. </p>
			<p class="RefNameCode-Left">justify-content</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">start</span> | <span class="prop-code">end</span> | <span class="prop-code">left</span> | <span class="prop-code">right</span> | <span class="prop-code">center</span> | <span class="prop-code">stretch</span> | <span class="prop-code">space-around</span> | <span class="prop-code">space-between</span> | <span class="prop-code">space-evenly</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">start</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="RefNameCode-Left">align-content</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">start</span> | <span class="prop-code">end</span> | <span class="prop-code">left</span> | <span class="prop-code">right</span> | <span class="prop-code">center</span> | <span class="prop-code">stretch</span> | <span class="prop-code">space-around</span> | <span class="prop-code">space-between</span> | <span class="prop-code">space-evenly</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">start</span><span class="prop-label"> </span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	grid containers</p>
			<p class="property"><span class="prop-label">Inherits:</span>  	no</p>
			<p class="body">In <span class="Xref-Figure">Figure 16-46</span>, the grid <a id="_idIndexMarker3093"></a><a id="_idIndexMarker3094"></a>container is indicated with a gray outline. The rows and columns of the drawn grid do not fill the whole container, so something has to happen to that extra space. The <span class="Literal-fc">start</span>, <span class="Literal-fc">end</span>, and <span class="Literal-fc">center</span> keywords move the whole grid around within the container by putting the extra space after, before, or equally on either side, respectively. The <span class="Literal-fc">space-around</span> and <span class="Literal-fc">space-between</span> keywords distribute space around tracks as discussed in the Flexbox section. The <span class="Literal-fc">space-evenly</span> keyword adds an equal amount of space at the start and end of each track and between items. </p>
			<div>
				<div id="_idContainer1154" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The <span class="Literal-Sidebar">stretch</span> keyword works only when the track width or height is set to <span class="Literal-Sidebar">auto</span>.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer1155" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note">When you distribute space around and between tracks, it adds to whatever <span class="Literal-Sidebar">gap</span> settings you may have.</p>
				</div>
			</div>
			<div>
				<figure id="_idContainer1157" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1646_content-ebook.png" alt="" width="1338" height="1483"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-46.</span> The <span class="Literal-Sidebar">justify-content</span> and <span class="Literal-Sidebar">align-content</span> properties distribute extra space in the container. </figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1158" class="sidebar">
					<h5 class="SidebarTitle">Speaking of Spacing, What About Margins?</h5>
					<p class="SidebarBody">You can <a id="_idIndexMarker3095"></a><a id="_idIndexMarker3096"></a>add margins to a grid item as you can for any other element. It is useful to know that the item’s margin box will be anchored to the cell or grid area, and the margin space is preserved.</p>
					<p class="SidebarBody">You can use margins to move the item around in the grid area. For example, setting the left margin to “auto” pushes the item to the right, as we saw in earlier Flexbox examples. Setting the left and right margins to “auto” (as long as item has a specified width) centers it horizontally. In Grid, you can also set the top and bottom margins to “auto” and, as long as there’s a specified height, it centers vertically. Of course, you have the grid item alignment properties to achieve these effects as well.</p>
				</div>
			</div>
			<p class="body">Before we close out this discussion of Grid Layout, let’s give the Black Goose Bakery page a nice two-column layout in <span class="Xref-Figure">Exercise 16-6</span>.</p>
			<div>
				<div id="_idContainer1161" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 16-6.</span> A grid layout for the bakery page</h6>
					<p class="SidebarBody">The Black Goose Bakery page has come a long way. You’ve added padding, borders, and margins. You’ve floated images, positioned an award graphic, and created a navigation bar by using Flexbox. Now you can use your new grid skills to give it a two-column layout that would be appropriate for tablets and larger screens (<span class="Xref-Figure">Figure 16-47</span>). </p>
					<div>
						<figure id="_idContainer1160" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1647_exercise6.png" alt="" width="1321" height="1258"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-47.</span> The Black Goose Bakery page with a two-column grid layout. </figcaption>
						</figure>
					</div>
					<p class="SidebarBody">Start by opening the bakery file as you left it in <span class="Xref-Figure">Exercise 16-1</span>. </p>
					<ol>
						<li class="SidebarListNumber" value="1">We need to add a bit of markup that encloses everything in the body of the document in an element that will serve as the grid container. Open the HTML document <span class="Filename--Sidebar-">bakery.html</span>, add a <span class="Literal-Sidebar">div</span> around all of the content elements (from <span class="Literal-Sidebar">header</span> to <span class="Literal-Sidebar">footer</span>), and give it the <span class="Literal-Sidebar">id</span> “container”. Save the HTML file.<pre class="SidebarCodeFirst">&lt;body&gt;<br/>  <code class="CodeColor">&lt;div id="container"&gt;</code><br/>    &lt;header&gt;…&lt;/header&gt;<br/>    &lt;main&gt;…&lt;/main&gt;<br/>    &lt;aside&gt;…&lt;/aside&gt;<br/>    &lt;footer&gt;…&lt;/footer&gt;<code class="CodeColor"><br/>  &lt;/div&gt;</code><br/>&lt;/body&gt;</pre><p class="SidebarListItem_cont">In the style sheet (<span class="Filename--Sidebar-">bakery-styles.css</span>), add a new style to make the new <span class="Literal-Sidebar">div</span> display as a grid:</p><pre class="SidebarCodeFirst"><code class="CodeColor">#container {<br/>  display: grid;<br/>}</code></pre></li>
						<li class="SidebarListNumber">First we’ll work on the rows. <span class="Xref-Figure">Figure 16-47</span> shows that we need three rows to create the layout. Set the height of the first row track to <span class="Literal-Sidebar">auto</span> so it will observe the height settings on the elements within it and automatically accommodate the content. The second row has a lot of text, so use the <span class="Literal-Sidebar">auto</span> track value again to guarantee the track will expand at least as much as necessary to fit the text. For the third row, a height of 5em<span class="Literal-Sidebar"> </span>should be sufficient to fit the few lines of text with a comfortable amount of space:<pre class="SidebarCodeFirst">#container {<br/>  display: grid;<br/>  <code class="CodeColor">grid-template-rows: auto auto 5em;</code><br/>}</pre></li>
						<li class="SidebarListNumber">Now we can set up the column tracks. It looks like we’ll need only two: one for the main content and one for the Hours sidebar. I’ve used the <span class="Literal-Sidebar">minmax()</span> value so I can ensure the text column never gets narrower than 25em, but it can expand to fill the available space in the browser (<span class="Literal-Sidebar">1fr</span>). The Hours column feels right to me at 16em. Feel free to try other values.<pre class="SidebarCodeFirst">#container {<br/>  display: grid;<br/>  grid-template-rows: auto auto 5em;<br/>  <code class="CodeColor">grid-template-columns: minmax(25em, 1fr) 16em;</code><br/>}</pre></li>
						<li class="SidebarListNumber">Next, name the areas in the grid so we can place the items in it easily and efficiently. Use the <span class="Literal-Sidebar">grid-template-areas</span> property to name the cells in the grid:<pre class="SidebarCodeFirst">#container {<br/>  display: grid;<br/>  grid-template-rows: auto auto 5em;<br/>  grid-template-columns: minmax(25em, 1fr) 16em;<br/><code class="CodeColor">  grid-template-areas:<br/>    "banner banner"<br/>    "main   hours"<br/>     "footer footer"; </code><br/>}</pre></li>
						<li class="SidebarListNumber">With everything set up, it’ll be a breeze to put the content items into their proper places. Create a style rule for each grid item and tell it where to go with <span class="Literal-Sidebar">grid-area</span>: <pre class="SidebarCodeFirst">header {<br/>  grid-area: banner; <br/>}<br/>main {<br/>  grid-area: main;<br/>}<br/>aside {<br/>  grid-area: hours;<br/>}<br/>footer {<br/>  grid-area: footer;<br/>} </pre></li>
					</ol>
					<p class="SidebarBody">Pretty easy, right? Now would be a good time to save the file and take a look at it in the browser (if you haven’t already). The 2.5% margins that we had set on the <span class="Literal-Sidebar">main</span> element earlier give it some nice breathing room in its area, so let’s leave that alone. However, I’d like to remove the right margin and border radius we had set on the <span class="Literal-Sidebar">aside</span> so it fills the right column. I’m going to just comment them out so that information is still around if I need to use it later:</p>
					<pre class="SidebarCodeFirst">aside {<br/>  …<br/>  <code class="CodeColor">/*</code> border-top-right-radius: 25px; <code class="CodeColor">*/</code> <br/> <code class="CodeColor"> /*</code> margin: 1em 2.5% 0 10%; <code class="CodeColor">*/</code><br/> }</pre>
					<p class="SidebarBody">That does it! Open the <span class="Filename--Sidebar-">bakery.html</span> page in a browser that supports CSS grids, and it should look like the screenshot in <span class="Xref-Figure">Figure 16-47</span>. </p>
					<p class="SidebarBody">Now the bakery page has a nice two-column layout using a simple grid. In the real world, this would be just one layout in a set that would address different screen sizes as part of a responsive design strategy. We’ll be talking about responsive design in the next chapter. And because grids are not supported by Internet Explorer, Edge, and older browsers, you would also create fallback layouts using Flexbox or floats depending on how universally you need the layout to work. I don’t mean to kill your buzz, but I do want you to be aware that although this exercise let you sharpen your skills, it’s part of a much broader production picture.</p>
					<p class="SidebarBody">Note: For float- and position-based layout techniques that could be used as fallbacks, get the article <span class="Xref--Sidebar-">“Page Layout with Floats and Positioning”</span> (PDF) at <a href="http://learningwebdesign.com/articles/"><span class="URL-Email--Sidebar-">learningwebdesign.com/articles/</span></a>.</p>
				</div>
			</div>
			<h2 class="HeadB">Online Grid Resources</h2>
			<p class="body">As you <a id="_idIndexMarker3097"></a>continue your Grid Layout adventure, I’m sure you’ll find plenty of excellent resources online, as more are popping up all the time. I’d like to point you to a few of the most complete and authoritative resources that I found helpful as I learned about grids myself.</p>
			<p class="ListVariableTerm">Rachel Andrew’s “Grid By Example” site (<a href="http://gridbyexample.com"><span class="URL-Email">gridbyexample.com</span></a>)</p>
			<p class="ListVariable">Rachel <a id="_idIndexMarker3098"></a>Andrew, one of the first champions of Grid Layout, has assembled an incredible collection of articles, free video tutorials, browser support information, and more. You can also try searching the web for her excellent conference talks on the topic.  </p>
			<p class="ListVariableTerm">Jen Simmons’ “Experimental Layout Lab” (<a href="http://labs.jensimmons.com"><span class="URL-Email">labs.jensimmons.com</span></a>)</p>
			<p class="ListVariable">Jen Simmons, <a id="_idIndexMarker3099"></a><a id="_idIndexMarker3100"></a><a id="_idIndexMarker3101"></a><a id="_idIndexMarker3102"></a>who works for <a id="_idIndexMarker3103"></a>Mozilla Foundation, shows off what Grid Layout can do in her Experimental Layout Lab. It’s definitely worth a visit for the cool examples of Grid and other emerging CSS technologies as well as exercises that let you code along.</p>
			<p class="ListVariable_cont">You can find Jen’s many articles on CSS Grid at <a href="http://jensimmons.com/writing"><span class="URL-Email">jensimmons.com/writing</span></a>. I also recommend her roundup of resources for learning Grid Layout at <a href="http://jensimmons.com/post/feb-27-2017/learn-css-grid"><span class="URL-Email">jensimmons.com/post/feb-27-2017/learn-css-grid</span></a>. See also Jen’s YouTube video series called “Layout Land” (<a href="http://youtube.com"><span class="URL-Email">youtube.com</span></a>, search for “Layout Land Jen Simmons”).</p>
			<p class="ListVariableTerm">Grid Garden by Thomas Park (<a href="http://cssgridgarden.com"><span class="URL-Email">cssgridgarden.com</span></a>)</p>
			<p class="ListVariable">If you <a id="_idIndexMarker3104"></a>enjoyed the Flexbox Froggy game created by Thomas Park, you will have fun playing his Grid Garden game for getting familiar with CSS Grid Layout. </p>
			<div>
				<div id="_idContainer1162" class="sidebar">
					<h5 class="SidebarSeries">At a Glance</h5>
					<h5 class="SidebarTitle">Grid Property Roundup</h5>
					<p class="SidebarBody">Here’s a nice, handy list of the Grid properties, organized by whether they apply to the container or to individual <a id="_idIndexMarker3105"></a><a id="_idIndexMarker3106"></a><a id="_idIndexMarker3107"></a><a id="_idIndexMarker3108"></a><a id="_idIndexMarker3109"></a><a id="_idIndexMarker3110"></a><a id="_idIndexMarker3111"></a><a id="_idIndexMarker3112"></a><a id="_idIndexMarker3113"></a><a id="_idIndexMarker3114"></a><a id="_idIndexMarker3115"></a>grid<a id="_idIndexMarker3116"></a><a id="_idIndexMarker3117"></a><a id="_idIndexMarker3118"></a><a id="_idIndexMarker3119"></a><a id="_idIndexMarker3120"></a><a id="_idIndexMarker3121"></a> <a id="_idIndexMarker3122"></a><a id="_idIndexMarker3123"></a><a id="_idIndexMarker3124"></a><a id="_idIndexMarker3125"></a><a id="_idIndexMarker3126"></a><a id="_idIndexMarker3127"></a><a id="_idIndexMarker3128"></a><a id="_idIndexMarker3129"></a><a id="_idIndexMarker3130"></a><a id="_idIndexMarker3131"></a><a id="_idIndexMarker3132"></a>items.</p>
					<h5 class="sbHead">Grid Container Properties</h5>
					<pre class="SidebarCode">display: grid | inline-grid <br/>grid<br/>   grid-template<br/>     grid-template-rows<br/>     grid-template-columns<br/>     grid-template-areas<br/>   grid-auto-rows<br/>   grid-auto-columns<br/>   grid-auto-flow <br/>grid-gap<br/>   grid-row-gap<br/>   grid-column-gap <br/>justify-items <br/>align-items <br/>justify-content <br/>align-content</pre>
					<h5 class="sbHead">Grid Item Properties</h5>
					<pre class="SidebarCode">grid-column<br/>   grid-column-start<br/>   grid-column-end <br/>grid-row<br/>   grid-row-start<br/>   grid-row-end <br/>grid-area  <br/>justify-self <br/>align-self <br/>order (not part of Grid Module) <br/>z-index (not part of Grid Module)</pre>
				</div>
			</div>
			<h1 id="_idParaDest-157" class="HeadA"><a id="_idTextAnchor221"></a>Test Yourself</h1>
			<p class="body">We covered lots of ground in this chapter. See how you do on this quiz of some of the highlights. As always, <a href="lwd5_chapter16.xhtml#_idTextAnchor222"><span class="Xref">Appendix </span><span class="Xref">16</span></a> has the answers.</p>
			<h3 class="HeadC">Flexbox</h3>
			<ol>
				<li class="ListNumber" value="1">How do you turn an element into a flex item?</li>
				<li class="ListNumber">Match the properties with their functions.<table id="table003-4" class="table_invisible _idGenTablePara-1"><colgroup><col/><col/></colgroup><tbody><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">a. <code class="Code">justify-content</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">1. Distribute space around and between flex lines on the cross axis.</p></td></tr><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">b. <code class="Code">align-self</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">2. Distribute space around and between items on the main axis.</p></td></tr><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">c. <code class="Code">align-content</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">3. Position items on the cross axis.</p></td></tr><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">d. <code class="Code">align-items</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">4. Position a particular item on the cross axis.</p></td></tr></tbody></table></li>
				<li class="ListNumber">How is <span class="Literal-fc">align-items</span> different from <span class="Literal-fc">align-content</span>? What do they have in common?</li>
				<li class="ListNumber">Match the properties and values to the resulting effects.<table id="table004-4" class="table_invisible _idGenTablePara-1"><colgroup><col/><col/></colgroup><tbody><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">a. <code class="Code">flex: 0 1 auto;</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">1. Items are completely inflexible, neither shrinking nor growing. </p></td></tr><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">b. <code class="Code">flex: none</code>;</p></td><td class="table_invisible invisible"><p class="ListNumber_cont">2. Item will be twice as wide as others with <code class="Code">flex: 1</code> and may also shrink.</p></td></tr><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">c. <code class="Code">flex: 1 1 auto;</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">3. Items are fully flexible.</p></td></tr><tr class="table_invisible"><td class="table_invisible invisible"><p class="ListNumber_cont">d. <code class="Code">flex: 2 1 0px;</code></p></td><td class="table_invisible invisible"><p class="ListNumber_cont">4. Items can shrink but not grow bigger.</p></td></tr></tbody></table></li>
				<li class="ListNumber">Match the following <span class="Literal-fc">flex-flow</span> declarations with the resulting flexboxes (<span class="Xref-Figure">Figure 16-48</span>).<ol><li class="ListNumber_Indent"><code class="Code">flex-flow: row wrap;  </code></li><li class="ListNumber_Indent"><code class="Code">flex-flow: column nowrap; </code></li><li class="ListNumber_Indent"><code class="Code">flex-flow: row wrap-reverse;  </code></li><li class="ListNumber_Indent"><code class="Code">flex-flow: column wrap-reverse;</code></li><li class="ListNumber_Indent"><code class="Code">flex-flow: row nowrap; </code></li></ol><p class="ListNumber_cont">	</p><figure id="_idContainer1164" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1648_flexflow.png" alt="" width="1683" height="610"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-48.</span> Various <span class="Literal-Sidebar">flex-flow</span> settings.</figcaption></figure></li>
				<li class="ListNumber">Write style rules for displaying the flexbox items in the order shown in <span class="Xref-Figure">Figure 16-49</span>.<figure id="_idContainer1166" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1649_ordertest.png" alt="" width="1321" height="408"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-49.</span> Write styles to put items in the shown order. </figcaption></figure><h3 class="HeadC">Grid Layout</h3></li>
				<li class="ListNumber">What is the key difference between Grid Layout and Flexbox? Name at least one similarity (there are multiple answers). </li>
				<li class="ListNumber">Create the grid template for the layout shown in <span class="Xref-Figure">Figure 16-50</span> by using <span class="Literal-fc">grid-template-rows</span> and <span class="Literal-fc">grid-template-columns</span>.<p class="ListNumber_cont">Write it again, this time using the <span class="Literal-fc">grid</span> shorthand property.</p><figure id="_idContainer1168" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1650_testgrid.png" alt="" width="1321" height="863"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-50.</span> Create the grid template for this grid structure.</figcaption></figure></li>
				<li class="ListNumber">Match the following style declarations with the lettered grid items in <span class="Xref-Figure">Figure 16-51</span>. In addition to automatic numbering, some of the grid lines have been named, as labeled.<ol><li class="ListNumber_Indent" value="1">_________<pre class="CodeFirst">grid-row-start: 1;<br/>grid-row-end: 3;<br/>grid-column-start: 3;<br/>grid-column-end: 7; </pre></li><li class="ListNumber_Indent">_________<pre class="CodeFirst">grid-area: 2 / 2 / span 4 / 3;</pre></li><li class="ListNumber_Indent">_________<pre class="CodeFirst">grid-area: bowie; </pre></li><li class="ListNumber_Indent">_________<pre class="CodeFirst">grid-row: -2 / -1;<br/>grid-column: -2 / -1; </pre></li><li class="ListNumber_Indent">_________</li></ol><pre class="CodeFirst">grid-row-start: george;<br/>grid-row-end: ringo;<br/>grid-column-start: paul;<br/>grid-column-end: john;</pre><figure id="_idContainer1170" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1651_testitems.png" alt="" width="1321" height="988"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 16-51.</span> Match the style examples to the items in this grid.</figcaption></figure></li>
				<li class="ListNumber">Write a style rule that adds 1em space between columns in a grid container named <span class="Literal-fc">#gallery</span>.</li>
				<li class="ListNumber">Match the tasks with the declarations.<ol><li class="ListNumber_Indent" value="1"><code class="Code">justify-self: end;</code></li><li class="ListNumber_Indent"><code class="Code">align-items: end;</code> </li><li class="ListNumber_Indent"><code class="Code">align-content: center;</code></li><li class="ListNumber_Indent"><code class="Code">align-self: stretch;</code></li><li class="ListNumber_Indent"><code class="Code">justify-items: center;</code></li></ol><p class="ListSimple"><span class="ListStartItem">_____ Make a particular item stretch to fill its container.</span></p><p class="ListSimple"><span class="ListStartItem">_____ Position an image on the right edge of its grid area (in a left-to-right reading language).</span></p><p class="ListSimple"><span class="ListStartItem">_____ Center the whole grid vertically in its container.</span></p><p class="ListSimple"><span class="ListStartItem">_____ Push all of the images in a grid to the bottom of their respective cells.</span></p><p class="ListSimple"><span class="ListStartItem">_____ Center all items in their areas horizontally.</span></p></li>
			</ol>
		</div>
		<div id="_idContainer1172" class="contents">
			<h1 id="_idParaDest-158" class="HeadA"><a id="_idTextAnchor222"></a>CSS Review: Layout Properties</h1>
			<p class="body">Here are the properties covered in this chapter, sorted into Flexbox and Grid sections and whether they apply to the container or item.</p>
			<table id="table005-2" class="Table">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Body-Left" colspan="2">
							<h3 class="HeadC">Flexbox Properties</h3>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left" colspan="2">
							<p class="TableSubhead">Flex container properties</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">display: flex</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Turns <a id="_idIndexMarker3133"></a><a id="_idIndexMarker3134"></a><a id="_idIndexMarker3135"></a>on flexbox mode and makes the element a flex container</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex-direction</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates <a id="_idIndexMarker3136"></a>the direction in which items are placed in the flex container</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex-wrap</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3137"></a>whether the flex items are forced onto a single line or wrapped onto multiple lines</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex-flow</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker3138"></a>property for <span class="Literal-Sidebar">flex-direction</span> and <span class="Literal-Sidebar">flex-wrap</span></p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">justify-content</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3139"></a>how space is distributed between and around items on the main axis</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">align-content</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Aligns <a id="_idIndexMarker3140"></a>flex lines within the flex container when there is extra space on the cross axis </p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">align-items</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3141"></a>how the space is distributed around items on the cross axis</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left" colspan="2">
							<p class="TableSubhead">Flex item properties</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">align-self</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody"><a id="_idIndexMarker3142"></a>Specifies<a id="_idIndexMarker3143"></a> how one item is aligned on the cross axis (overrides <span class="Literal-Sidebar">align-items</span>)</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker3144"></a>property for <span class="Literal-Sidebar">flex-grow</span>, <span class="Literal-Sidebar">flex-shrink</span>, and <span class="Literal-Sidebar">flex-basis</span>; specifies how items alter their dimensions to fit available space</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex-basis</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates<a id="_idIndexMarker3145"></a> the initial main size of a flex item</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex-grow</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3146"></a>how much a flex item is permitted to grow when there is extra space in the container</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">flex-shrink</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3147"></a>how much a flex item is permitted to shrink when there is not enough room in the container</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">order</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates <a id="_idIndexMarker3148"></a>the order used to lay out items in their container</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Body-Left" colspan="2">
							<h3 class="HeadC">Grid Properties</h3>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left" colspan="2">
							<p class="TableSubhead">Grid container properties</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">display: grid | inline-grid</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Sets the <a id="_idIndexMarker3149"></a><a id="_idIndexMarker3150"></a><a id="_idIndexMarker3151"></a><a id="_idIndexMarker3152"></a><a id="_idIndexMarker3153"></a>display mode of an element to a grid context</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-template</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker3154"></a>property for specifying <span class="Literal-Sidebar">grid-template-areas</span>, <span class="Literal-Sidebar">grid-template-rows</span>, and <span class="Literal-Sidebar">grid-template-columns</span></p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-template-areas</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Assigns <a id="_idIndexMarker3155"></a>names to areas in the grid</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-template-columns</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3156"></a>track sizes for the columns in explicit grids</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-template-rows</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies<a id="_idIndexMarker3157"></a> track sizes for the rows in explicit grids</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-auto-columns</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3158"></a>track sizes for automatically generated columns</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-auto-flow</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates <a id="_idIndexMarker3159"></a>the direction and density in which items flow automatically into a grid</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-auto-rows</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3160"></a>track sizes for automatically generated rows</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker3161"></a>property for specifying <span class="Literal-Sidebar">grid-template-rows</span>, <span class="Literal-Sidebar">grid-template-columns</span>, and <span class="Literal-Sidebar">grid-template-areas</span>; or <span class="Literal-Sidebar">grid-auto-flow</span>,<span class="Literal-Sidebar"> </span><span class="Literal-Sidebar">grid-auto-rows</span>, and <span class="Literal-Sidebar">grid-auto-columns</span></p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-gap</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker3162"></a>property for <span class="Literal-Sidebar">grid-row-gap</span> and <span class="Literal-Sidebar">grid-column-gap</span> </p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-column-gap</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3163"></a>the width of the gutter between columns</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-row-gap</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies<a id="_idIndexMarker3164"></a> the width of the gutter between rows</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">justify-items</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates <a id="_idIndexMarker3165"></a>alignment of all the grid items along the inline axis within their respective areas</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">justify-content</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates<a id="_idIndexMarker3166"></a> alignment of the grid tracks along the inline axis in its container </p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">align-items</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates <a id="_idIndexMarker3167"></a>alignment of all the items in a grid along the block axis within their respective grid areas</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">align-content</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates<a id="_idIndexMarker3168"></a> alignment of the grid tracks along the block axis in the container</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left" colspan="2">
							<p class="TableSubhead">Grid item properties</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-column</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody"><a id="_idIndexMarker3169"></a>Shorthand<a id="_idIndexMarker3170"></a> property for specifying <span class="Literal-Sidebar">grid-column-start</span> and <span class="Literal-Sidebar">grid-column-end</span></p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-column-end</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Denotes <a id="_idIndexMarker3171"></a>the end line of the column in which an item is to be placed</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-column-start</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Denotes<a id="_idIndexMarker3172"></a> the start line of the column in which an item is to be placed</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-row</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker3173"></a>property for specifying <span class="Literal-Sidebar">grid-row-start</span> and <span class="Literal-Sidebar">grid-row-end</span></p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-row-end</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Denotes<a id="_idIndexMarker3174"></a> the end line of the row in which an item is to be placed</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-row-start</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Denotes<a id="_idIndexMarker3175"></a> the start line of the row in which an item is to be placed</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">grid-area</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Assigns <a id="_idIndexMarker3176"></a>a grid item to a named area or an area described by its four boundary grid lines</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">align-self</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates alignment of a single item along the block axis within its grid area</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">justify-self</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Indicates<a id="_idIndexMarker3177"></a> alignment of a single grid item along the inline axis within its area</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">order</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies the order in which to display the item relative to other items in the source</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">z-index</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker3178"></a>the stacking order of an item relative to other items when there is overlap</p>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>
</body>
</html>