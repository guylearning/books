<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer1508" class="ch24">
			<p id="_idParaDest-216" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor301"></a>24. Image Asset Production</p>
		</div>
		<div id="_idContainer1509" class="ch24">
			<h1 class="chapterLabel">24</h1>
		</div>
		<div id="_idContainer1510" class="ch24">
			<h1 class="chapterTitle"><a id="_idTextAnchor302"></a><a id="_idTextAnchor303"></a>Image Asset Production</h1>
		</div>
		<div id="_idContainer1511" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In this Chapter</p>
			<p class="chapterContents">Selecting web file formats when exporting</p>
			<p class="chapterContents">Binary and alpha transparency</p>
			<p class="chapterContents">Producing responsive images</p>
			<p class="chapterContents">Image optimization tools and techniques</p>
		</div>
		<div id="_idContainer1581" class="ch24">
			<p class="body">In the previous chapter, you learned a lot about images, but now we’re going to focus on <em class="Emphasis">making</em> them. Because images typically make up 60–70% of the data on the web, it is critical to approach image creation thoughtfully, with a mind toward responsive design requirements and performance. Once again, we’ll be working with bitmapped formats: JPEG, PNG, and GIF. SVG has a different set of considerations and has been given the next chapter all to itself. This chapter is all about pixel-pushing!</p>
			<p class="body">You’ll get a chance to save or export images in a variety of bitmap formats and create an image with transparent areas. You’ll learn some shortcuts for creating multiple versions of an image at once for responsive layouts and high-density displays. Finally, you’ll pick up some optimization tools and techniques so you can make your image files as small as they can be.</p>
			<p class="body">Let’s start out with the most basic of image production tasks, saving an image in a web-appropriate format. </p>
			<h1 id="_idParaDest-217" class="HeadA"><a id="_idTextAnchor304"></a>Saving Images in Web Formats</h1>
			<p class="body">Let’s dig right in <a id="_idIndexMarker4255"></a><a id="_idIndexMarker4256"></a>with saving web images in Photoshop CC and GIMP. You may be thinking, “Why just those two?” I wrote you a little sidebar, <span class="Xref">“Why Just Photoshop and GIMP?”</span> to explain. If you use one of the dozens of other image editors, the process and terminology is likely similar to those described here.</p>
			<div>
				<div id="_idContainer1512" class="sidebar">
					<h5 class="SidebarTitle">Why Just Photoshop and GIMP?</h5>
					<p class="SidebarBody">There are dozens of programs out there for creating images. In this chapter, I will be sticking with Adobe Photoshop CC and GIMP in the examples because I feel like they represent the far ends of the commitment spectrum. Most importantly, both are available for <a id="_idIndexMarker4257"></a><a id="_idIndexMarker4258"></a>macOS and Windows, and you can get copies to work with for free. </p>
					<p class="SidebarBody">On one end of the spectrum, Photoshop is the most popular image-editing program for design professionals, but it is costly, available via a monthly subscription fee as part of the <a id="_idIndexMarker4259"></a><a id="_idIndexMarker4260"></a>Adobe Creative Cloud suite of products. You can download a free trial version at <a href="http://www.adobe.com/creativecloud/catalog/desktop.html"><span class="URL-Email--Sidebar-">www.adobe.com/creativecloud/catalog/desktop.html</span></a> if you’d like to work along with the exercises.</p>
					<p class="SidebarBody">On the other end, <a id="_idIndexMarker4261"></a>GIMP (GNU Image Manipulation Program) is an open source image editor with many of the same features as Photoshop and it is absolutely <em class="Emphasis">free</em>! Like, forever—not just a limited trial. Download it at <a href="http://gimp.org"><span class="URL-Email--Sidebar-">gimp.org</span></a>.</p>
				</div>
			</div>
			<p class="body">In most programs, you can count on seeing JPEG and PNG options (if there’s only one PNG option, it’s PNG-24) when you Save or Export the final graphic. GIF is available in more established programs like <a id="_idIndexMarker4262"></a><a id="_idIndexMarker4263"></a><a id="_idIndexMarker4264"></a><a id="_idIndexMarker4265"></a>Photoshop, GIMP, and PaintShop Pro; and WebP is beginning to make an appearance. </p>
			<p class="body">This section goes over the process of saving or exporting images step-by-step for those who may not be familiar with using graphics tools. If you are already pretty handy with image editors, this could be a review, or you might skip right to <span class="Xref-Figure">Exercise 24-1</span>.</p>
			<h3 class="HeadC">Adobe Photoshop CC</h3>
			<p class="body">There are a<a id="_idIndexMarker4266"></a><a id="_idIndexMarker4267"></a> <a id="_idIndexMarker4268"></a>number of ways to save graphics in web-appropriate formats in Photoshop:</p>
			<p class="ListVariableTerm">Export As</p>
			<p class="ListVariable_cont">The recommended and most streamlined method is to use the Export As function, either from the <span class="menu">File</span> → <span class="menu">Export</span> → <span class="menu">Export As</span> menu, or by right-clicking (Control-clicking on a Mac) a layer to export its contents (<span class="Xref-Figure">Figure 24-1</span>,<span class="Xref"> </span><span class="Circle-Frame-Neg">A</span>). From there, you get a dialog box with an image preview and a File Settings pop-up menu for selecting JPEG, PNG, GIF, or <a id="_idIndexMarker4269"></a>SVG format <span class="Circle-Frame-Neg">B</span>. When you use Export As, Photoshop uses aggressive compression options to give you the smallest file size. </p>
			<p class="ListVariable_cont">The Export As dialog box includes format-specific options with a preview of the image as it appears with the settings applied. </p>
			<ul>
				<li class="ListBullet_Indent">For <a id="_idIndexMarker4270"></a>JPEG <span class="Circle-Frame-Neg">C</span>, you can set the Quality level (higher quality equals larger files). </li>
				<li class="ListBullet_Indent">For <a id="_idIndexMarker4271"></a>PNG <span class="Circle-Frame-Neg">D</span>, you can choose to preserve transparent areas in the image so soft edges and shadows blend in with the background. By default, Photoshop exports PNG-24 files, but you can select “Smaller File (8-bit)” to export as a PNG-8 while still preserving multiple transparency levels.</li>
				<li class="ListBullet_Indent">For <a id="_idIndexMarker4272"></a>GIF <span class="Circle-Frame-Neg">E</span>, you get no options. I think that’s Adobe’s way of saying you’re much better off with PNG.</li>
			</ul>
			<p class="ListVariable_cont">The Export As dialog box <span class="Circle-Frame-Neg">B</span> also gives you the option to resize the image. This is useful for maintaining a full-size original while exporting copies sized for different layouts.</p>
			<div>
				<figure id="_idContainer1514" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2401_pshp_exportas-ebook.png" alt="" width="1338" height="1270"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-1.</span> Selecting a file type in Photoshop’s Export As dialog box.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1515" class="sidebar">
					<h5 class="SidebarTitle">Convert to sRGB? YES!</h5>
					<p class="SidebarBody">In Photoshop’s <a id="_idIndexMarker4273"></a>Export As dialog box, toward the bottom under Color Space, you will find the option Convert to sRGB. You definitely want to select that option because that is the color encoding that the web uses. Adobe has its own expanded <a id="_idIndexMarker4274"></a>RGB color space, so you will get unpredictable results if you do not convert to sRGB first. </p>
				</div>
			</div>
			<p class="ListVariableTerm">Save As</p>
			<p class="ListVariable">You can also use <span class="menu">File</span> <span class="menu">→</span> <span class="menu">Save As</span> to save the file you’re working on in a new format (you’ll see the web-friendly formats in the long list of options). You’ll generally get a few more options with Save As, such as the ability to turn on interlacing and select a palette for GIFs and to make a JPEG progressive, but you miss out on the extra compression. And it’s a lot of compression. Depending on the image and the file type, a Saved As image could<a id="_idIndexMarker4275"></a> be 10× larger than its exported counterpart.</p>
			<p class="ListVariableTerm">Save for Web (legacy)</p>
			<p class="ListVariable_cont">Photoshop’s Save for Web function provides settings for manually optimizing the size of a file while keeping an eye on the resulting image in a preview window, and even comparing up to four settings at a time. For GIF and PNG-8 you can reduce the number of colors (the bit depth), reduce dithering, and turn on interlacing, among other settings. For JPEG, you can choose the quality, make it progressive or optimized, or apply a slight amount of blur to the image to reduce its file size. </p>
			<p class="ListVariable_cont">Adobe has tagged the Save for Web function as “legacy” starting around 2014, and it will be going away entirely in future versions with no substitutes for many of the settings. But the fact is that there are tools available now that achieve the same amount of compression without all the manual work. If you have access to an older version of Photoshop, you can give it a try, but don’t get too attached (as I am!).</p>
			<h3 class="HeadC">GIMP</h3>
			<p class="body">In GIMP, <a id="_idIndexMarker4276"></a><a id="_idIndexMarker4277"></a>working files are always in GIMP’s native <a id="_idIndexMarker4278"></a>XCF format. From there, you need to choose <span class="menu">File</span> → <span class="menu">Export As</span> to select your file format. The quickest way to get the format you want is to type <span class="Filename">.jpg</span>, <span class="Filename">.png</span>, or <span class="Filename">.gif</span> at the end of the filename in the Name field. For example, typing “name.png” triggers GIMP to export that file in PNG format. Alternatively, you can select a file type from the list of options in the <span class="menu">Select File Type</span> menu (shown in <span class="Xref-Figure">Figure 24-2</span>,<span class="Xref"> </span><span class="Circle-Frame-Neg">A</span>). </p>
			<p class="body">After you hit the Export button, you get a dialog box with settings appropriate for the format you’ve chosen. </p>
			<ul>
				<li class="ListBullet">For <a id="_idIndexMarker4279"></a>PNG <span class="Circle-Frame-Neg">B</span>, deselect all of the options, as many of them store unnecessary metadata in the file and others are of limited use when you are exporting a layered file. You may choose to make the image interlaced. </li>
				<li class="ListBullet">For <a id="_idIndexMarker4280"></a>GIF <span class="Circle-Frame-Neg">C</span>, you can make the image interlaced and embed a comment. You can also save it as an animation if your layers are set up in that way.</li>
				<li class="ListBullet">For <a id="_idIndexMarker4281"></a>JPEG <span class="Circle-Frame-Neg">D</span>, you can play with the Quality setting, with the option to view the resulting quality as well as its file size in an image window (recommended). Under Advanced Options, you can Optimize the JPEG, make it Progressive, and apply a slight blur (Smoothing) to reduce the file size. Under Subsampling, the 4:4:4 (best quality) is a good choice, especially if your image has areas of flat color, although 4:2:2 produces smaller files. You can see the results of these settings in the image window.<figure id="_idContainer1517" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_2402_gimpexport-ebook.png" alt="" width="1338" height="1450"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-2.</span> Selecting your file format in GIMP.</figcaption></figure></li>
			</ul>
			<p class="body">Why don’t you give this web-image-making a try in <span class="Xref-Figure">Exercise 24-1</span>? You’ll find that the format you choose greatly impacts the size of the file. If you have Photoshop or GIMP, you can follow the instructions just listed, but if you don’t, there’s a good chance that whatever image creation tool you do have will have similar save or export options. Remember that you can download a free trial of Photoshop, and GIMP is always free.</p>
			<p class="body">That takes care of basic web image output. After the exercise, we’ll turn our attention to one of the core features of web images that you will certainly want to become handy with: transparency. </p>
			<div>
				<div id="_idContainer1518" class="sidebar">
					<h5 class="SidebarTitle">Work in RGB Mode</h5>
					<p class="SidebarBody">Regardless <a id="_idIndexMarker4282"></a>of<a id="_idIndexMarker4283"></a><a id="_idIndexMarker4284"></a> the final format of your file, you should always do your image-editing work in RGB mode (grayscale is fine for non-color images). To check the color mode of the image in Photoshop or GIMP, select <span class="menu">Image </span><span class="menu">→</span><span class="menu"> Mode </span>and make sure there is a checkmark next to<a id="_idIndexMarker4285"></a> RGB Color. </p>
					<p class="SidebarBody">JPEG and PNG-24 files compress the RGB color image directly. If you are saving the file as a GIF or PNG-8, the RGB image must be converted to indexed color mode, either manually or as part of the export process. </p>
					<h5 class="sbHead">Indexed Color</h5>
					<p class="SidebarBody">If you need to edit an existing GIF or PNG-8, convert the image to RGB as the first step before editing. This enables the editing tool to use colors from the full RGB spectrum when adjusting the image. If you resize the original indexed color image, you’ll get lousy results because the new image is limited to the colors from the existing color table.</p>
					<h5 class="sbHead">CMYK</h5>
					<p class="SidebarBody">If you have experience creating graphics for print, you may be accustomed to working in <a id="_idIndexMarker4286"></a>CMYK mode (printed colors are made up of Cyan, Magenta, Yellow, and blacK ink). CMYK mode is irrelevant and inappropriate for web graphics, so convert to RGB mode at the beginning of the image-editing process.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer1521" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 24-1.</span> Formats and file size</h6>
					<p class="SidebarBody">In this exercise, we’re going to see the effect the image format has on file size by exporting two images in a variety of formats and comparing file sizes. I have provided two image files with the materials for this chapter (<span class="Xref-Figure">Figure 24-3</span>), but you could also experiment with your own.</p>
					<div>
						<figure id="_idContainer1520" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_2403_exercise1.png" alt="" width="1321" height="592"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-3.</span> Export these images in various formats to see how each affects their file size.</figcaption>
						</figure>
					</div>
					<ol>
						<li class="SidebarListNumber">First, open <span class="Filename--Sidebar-">boats.png</span> in the program of your choice and export it in JPEG format. If your image editor does not have an export function, you may need to do a Save As. Be sure that you always start with the original image throughout this exercise.<p class="SidebarListItem_cont">If you are using Photoshop or GIMP, slide the Quality slider from 100% all the way down to 0%, and pay attention to how the image quality changes in the preview or image window. Make a note of the file sizes at 100%, 60%, and 10% quality. Save the final JPEG at 60% quality. </p><p class="SidebarListItem_cont">Alternatively, if you do not have a preview in your tool, you can export three separate JPEGs with the quality set to 100%, 60%, and 10%. Open the images in your image tool or a browser window to check the quality and use the Finder or File Explorer to check the resulting file size. </p></li>
						<li class="SidebarListNumber">Now export the full-color image again as a PNG-24 (in Photoshop, do <em class="Emphasis">not</em> select the 8-bit option). </li>
						<li class="SidebarListNumber">Finally, convert the image to Indexed color (<span class="menu">Image</span> → <span class="menu">Mode</span> → <span class="menu">Indexed</span>) and select 256 colors. Export the image as a PNG-8 (in Photoshop, select “Smaller File (8-bit)”; GIMP saves indexed color images as PNG-8 automatically.  While the original is still in indexed color mode, export again in GIF format. When you are done, you can revert the image to RGB color or close it without saving. </li>
						<li class="SidebarListNumber">Let’s see what we’ve got! Here are the resulting file sizes for the boats images that I got in Photoshop and GIMP. Note that file sizes differ depending on the tool because of the compression algorithms they use. Yours will likely be different from these, but in the general ballpark.<table id="table001-22" class="Table _idGenTablePara-1"><colgroup><col/><col/><col/><col/><col/><col/><col/></colgroup><thead><tr class="Table"><td class="Table Table-Head"><p class="TableHeader">Tool</p></td><td class="Table Table-Head"><p class="TableHeader">JPEG (100)</p></td><td class="Table Table-Head"><p class="TableHeader">JPEG (60)</p></td><td class="Table Table-Head"><p class="TableHeader">JPEG (10)</p></td><td class="Table Table-Head"><p class="TableHeader">PNG-24</p></td><td class="Table Table-Head"><p class="TableHeader">PNG-8</p></td><td class="Table Table-Head"><p class="TableHeader">GIF</p></td></tr></thead><tbody><tr class="Table"><td class="Table Table-Body-Left"><p class="TableBody">PhotoshopCC</p></td><td class="Table Table-Body"><p class="TableBody">130.3 KB</p></td><td class="Table Table-Body"><p class="TableBody">33.1 KB</p></td><td class="Table Table-Body"><p class="TableBody">9.2 KB</p></td><td class="Table Table-Body"><p class="TableBody">221 KB</p></td><td class="Table Table-Body"><p class="TableBody">67.6 KB</p></td><td class="Table Table-Body-Right"><p class="TableBody">74.1 KB</p></td></tr><tr class="Table"><td class="Table Table-Body-Left"><p class="TableBody">GIMP</p></td><td class="Table Table-Body"><p class="TableBody">179 KB</p></td><td class="Table Table-Body"><p class="TableBody">20.9 KB</p></td><td class="Table Table-Body"><p class="TableBody">7.4 KB</p></td><td class="Table Table-Body"><p class="TableBody">225 KB</p></td><td class="Table Table-Body"><p class="TableBody">73.7 KB</p></td><td class="Table Table-Body-Right"><p class="TableBody">80.3 KB</p></td></tr></tbody></table><p class="SidebarListItem_cont"><strong class="Emphasis_Bold">Conclusion:</strong><strong class="Emphasis_Bold"> </strong>The best format for the <span class="Filename--Sidebar-">boats</span> image is JPEG, and a quality of around 60 gives the best balance of image quality and small file size. The PNG-8 and GIF versions are twice as large and they look pretty bad. Of course, “quality” is subjective. You might decide that an image is so important that pristine 100% quality is worth the extra download time, but generally, you can shave a lot of bytes off an image while keeping quality acceptable.</p></li>
						<li class="SidebarListNumber">OK, now we’re going to repeat all the previous steps, this time using the <span class="Filename--Sidebar-">asian.png</span> image. Export the original image as a JPEG at various settings (or just make notes on the file size based on the preview) and as a PNG-24. When you convert the image to indexed color, play around with the numbers of colors to see how few you can get away with. Does the image still read well with 128 colors? 64? 32? <p class="SidebarListItem_cont">I really went for it and reduced the palette to 32 colors, and then exported as PNG-8 and GIF. Here are my results:</p></li>
					</ol>
					<table id="table002-14" class="Table">
						<colgroup>
							<col/>
							<col/>
							<col/>
							<col/>
							<col/>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head">
									<p class="TableHeader">Tool</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">JPEG (100)</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">JPEG (60)</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">JPEG (10)</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">PNG-24</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">PNG-8 (32 colors)</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">GIF (32 colors)</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<p class="TableBody">PhotoshopCC</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">22.7 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">8.7 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">3.3 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">14.8 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">4.2 KB</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">4.3 KB</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<p class="TableBody">GIMP</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">27.3 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">6.8 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">3.3 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">14.5 KB</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">3.3 KB</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">3.8 KB</p>
								</td>
							</tr>
						</tbody>
					</table>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Conclusion:</strong> For the <span class="Filename--Sidebar-">asian</span> image, the PNG-8 with a reduced color palette is the winner. Sure, the 10% JPEG file size is smaller, but the quality is disastrous! The PNG-8 offers the smallest file size while keeping the flat colors artifact-free.</p>
				</div>
			</div>
			<h1 id="_idParaDest-218" class="HeadA"><a id="_idTextAnchor305"></a>Working with Transparency</h1>
			<p class="body">Both <a id="_idIndexMarker4287"></a><a id="_idIndexMarker4288"></a><a id="_idIndexMarker4289"></a><a id="_idIndexMarker4290"></a>GIF and PNG formats allow parts of an image to be transparent, so that the background color or image shows through. In this section, we’ll take a closer look at transparent graphics, including tips on how to make them. </p>
			<p class="body">Remember that there are two types of transparency. <a id="_idIndexMarker4291"></a><a id="_idIndexMarker4292"></a>In <span class="FirstTerm">binary transparency</span>, pixels are either entirely transparent or entirely opaque, like an on/off switch. Both GIF and PNG-8 files support binary transparency.</p>
			<p class="body">In <span class="FirstTerm">alpha </span>(or <span class="FirstTerm">alpha-channel</span>)<span class="FirstTerm"> transparency</span>, a <a id="_idIndexMarker4293"></a><a id="_idIndexMarker4294"></a>pixel may be totally transparent, totally opaque, or up to 254 levels of opacity in between (a total of 256 opacity levels). Only PNG, WebP, and <a id="_idIndexMarker4295"></a><a id="_idIndexMarker4296"></a>JPEG 2000 support true alpha-layer transparency (see <span class="Xref">Note</span>). The advantage of PNGs with alpha transparency is that they blend seamlessly with any background color or pattern, as shown back in <span class="Xref-Figure">Figure 23-9</span><span class="Xref">.</span> PNG-8 also allows multiple levels of transparency, but it handles it a little differently, as you’ll learn in a moment.</p>
			<div>
				<div id="_idContainer1522" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Because of poor tool and browser support for WebP and JPEG 2000, we’ll be focusing on alpha transparency in PNGs in this section.</p>
				</div>
			</div>
			<p class="body">In this section, you’ll become familiar with how each type of transparency works, and learn how to make transparent images using <a id="_idIndexMarker4297"></a>GIMP and Photoshop. </p>
			<h2 class="HeadB">How Binary Transparency Works</h2>
			<p class="body">Remember that the pixel colors for PNG-8s and GIFs are stored in an indexed color table. Transparency is simply treated as a separate color, occupying one position in the color table. <span class="Xref-Figure">Figure 24-4</span> shows the color table in Photoshop for a simple transparent GIF. The slot in the color table that is set to transparent is indicated by a checker pattern. Pixels that correspond to that position in the color map are completely transparent when the image displays in the browser. Note that only one slot is transparent—all the other pixel colors are opaque.</p>
			<div>
				<figure id="_idContainer1524" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2404_binaryrans.png" alt="" width="1321" height="850"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-4.</span> Transparency is treated as a color in the indexed color table.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Avoiding halos</h3>
			<p class="body">When an image <a id="_idIndexMarker4298"></a>has multiple transparency levels, it blends seamlessly with the web page background. With binary transparency, however, there is a risk that the soft edges around the image will have a fringe of pixels that don’t match the color behind it (<span class="Xref-Figure">Figure 24-5</span>). This fringe is commonly known as a <span class="FirstTerm">halo</span> and it is a potential hazard of binary transparency.</p>
			<div>
				<figure id="_idContainer1526" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2405_halo-ebook.png" alt="" width="1337" height="545"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-5.</span> This GIF with binary transparency has a halo because the semitransparent edges of the original image were blended with a light color that doesn’t match the teal background of the page.</figcaption>
				</figure>
			</div>
			<p class="body">Prevention is the name of the game when it comes to dealing with binary transparency and halos. The trick is to blend the semitransparent pixels in the original image (such as the <span class="FirstTerm">anti-aliased</span> edges around text or a shape with feathered edges) with a color that is as close as possible to the background color of the page. Many image-editing tools that support web graphic formats provide a way to pick the blend color (also known as the <a id="_idIndexMarker4299"></a><span class="FirstTerm">matte color</span>) when saving or exporting.  </p>
			<div>
				<div id="_idContainer1527" class="sidebar">
					<h5 class="SidebarSeries">TERMINOLOGY</h5>
					<h5 class="SidebarTitle">Anti-Aliasing</h5>
					<p class="SidebarBody">Anti-aliasing <a id="_idIndexMarker4300"></a>is a slight blur applied to rounded edges of bitmapped graphics to make smoother transitions between colors. Aliased edges, by contrast, have stair-stepped edges. Anti-aliasing text and graphics can give your graphics a more professional appearance.</p>
				</div>
			</div>
			<p class="body">Some programs use whatever color is selected as the background color to fill in soft edges. Others may allow you to pick your blend color manually. For example, in Photoshop’s legacy Save for Web feature, you can select a matte color whenever transparency is turned on for the image (see <span class="Xref">Note</span>). The matte color is also used to fill in any transparent image areas when you’re converting an image to JPEG. <a id="_idIndexMarker4301"></a>GIMP, on the other hand, prevents halos by avoiding any sort of blend at all. You get the choice of hard, stair-stepped edges or a dithering pattern made of color and transparent pixels meant to simulate the blurred edge. Neither option looks good, but hey, no halos.</p>
			<div>
				<div id="_idContainer1528" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Curiously, Photoshop’s preferred Export As function automatically fills the blurred edges with white and does not seem to provide a way to select a matte color for GIFs and JPEGs. However, with the ability to export PNG-8s with alpha transparency, you may never need to select a matte color in Photoshop again.</p>
				</div>
			</div>
			<p class="body">Of course, avoiding halos with these methods requires that you know the RGB values of the page’s background color in advance so you can match the matte color to it. If the page color changes, you need to go back and export the graphics again with the new color. That’s where alpha transparency has a real advantage—you can change the background, and everything will still blend in perfectly. </p>
			<h2 class="HeadB">How Alpha Transparency Works</h2>
			<p class="body">RGB images, <a id="_idIndexMarker4302"></a><a id="_idIndexMarker4303"></a><a id="_idIndexMarker4304"></a><a id="_idIndexMarker4305"></a><a id="_idIndexMarker4306"></a>such as JPEGs and PNG-24s, store color in separate channels: one for red, one for green, and one for blue. PNG-24 files add another channel, called the <span class="FirstTerm">alpha channel</span>, to store transparency information. In that channel, each pixel may display one of 256 values, which correspond to 256 levels of transparency when the image is displayed. The black areas of the alpha channel mask are transparent, the white areas are opaque, and the grays are on a scale in between. I think of it as a blanket laid over the image that tells each pixel below it how transparent it is (<span class="Xref-Figure">Figure 24-6</span>).</p>
			<div>
				<figure id="_idContainer1530" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2406_alpha.png" alt="" width="1321" height="700"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-6.</span><span class="FigureLabel"> </span>Transparency information is stored as a separate (alpha) channel in 24-bit PNGs.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">PNG-8 Alpha Transparency</h2>
			<p class="body">Variable levels of transparency are not limited to 24-bit PNGs—PNG-8 files can do it too! Although they are referred to as <span class="FirstTerm">PNG8+alpha</span> or <span class="FirstTerm">alpha-palette PNGs</span>, they do <em class="Emphasis">not</em> store transparency information in a separate alpha channel overlay as we saw in <span class="Xref-Figure">Figure 24-6</span>. </p>
			<p class="body">PNG expert <a id="_idIndexMarker4307"></a>Greg Roelofs explains PNG-8 “alpha” transparency well in this excerpt from his 1999 book <span class="Citation">PNG: The Definitive Guide</span> (O’Reilly): </p>
			<blockquote class="Quote">A PNG alpha-palette image is just that: an image whose palette also has alpha information associated with it, not a palette image with a full alpha mask. In other words, each pixel corresponds to an entry in the palette with red, green, blue, and alpha components. So if you want to have bright red pixels with four different levels of transparency, you must use four separate palette entries to accommodate them—all four entries will have identical RGB components, but the alpha values will differ. If you want all of your colors to have four levels of transparency, you’ve effectively reduced your total number of available colors from 256 to 64. </blockquote>
			<p class="body">No image program (that I know of) displays PNG-8 color tables with multiple transparency levels, so I’ve simulated one for you in <span class="Xref-Figure">Figure 24-7</span>. I based it on the orange circle with the soft drop shadow from <span class="Xref-Figure">Figure 23-9</span>, with the palette reduced to just 16 colors. The resulting image has a bit of dithering in the drop shadow, but it’s not that noticeable when it appears over a background pattern.  With file size savings of 75%, it’s worth it.</p>
			<div>
				<figure id="_idContainer1532" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2407_png8trans.png" alt="" width="1321" height="854"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-7</span><span class="FigureLabel">.</span> A simulation of a PNG-8 color table with multiple levels of transparency. The PNG-8 is over 80% smaller than the similar PNG-24 with very similar quality.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer1533" class="sidebar">
					<h5 class="SidebarSeries">command-line trick</h5>
					<p class="SidebarBody">How can you tell whether a PNG is 8-bit or 24-bit? You can peer into its soul by using the <a id="_idIndexMarker4308"></a><span class="Literal-Sidebar">file</span> command. Just use the command line to navigate to the directory that contains the image file, and type <span class="Literal-Sidebar">file </span><span class="Replaceable-Sidebar">filename</span>. It returns a brief description of the file including its dimensions, color information, and whether it is interlaced. </p>
					<p class="SidebarBody">In this example, I inspected the file <span class="Filename--Sidebar-">super8bit.png</span>, which is an 8-bit PNG with alpha transparency exported from Photoshop CC. The word <span class="Literal-Sidebar">colormap</span> indicates that it is an indexed color image.</p>
					<pre class="SidebarCodeFirst">$ file super8bit.png</pre>
					<pre class="SidebarCode">super8bit.png: PNG image data, 500 x 92, 8-bit <code class="CodeColor">colormap</code>, non-interlaced</pre>
					<p class="SidebarBody">When you inspect a 24-bit PNG with alpha transparency, you’ll see <span class="Literal-Sidebar">RGBA</span> in the description. </p>
					<pre class="SidebarCodeFirst">$ file super24bitInt.png super24bitInt.png: PNG image data, 500 x 200, 8-bit/color <code class="CodeColor">RGBA</code>, interlaced</pre>
				</div>
			</div>
			<h2 class="HeadB">Making Transparent PNGs and GIFs</h2>
			<p class="body">The easiest way to make <a id="_idIndexMarker4309"></a>parts of an image transparent is to design them that way from the start and preserve the transparent areas when you export. Although it is possible to doctor up an existing flattened opaque image and make areas transparent, it is usually difficult to get a seamless blend with the background while avoiding jagged edges. </p>
			<p class="body">Instead of just telling you, I’ll let you create a layered image and preserve the transparent areas in <span class="Xref-Figure">Exercise 24-2</span>. When you create your layered <a id="_idIndexMarker4310"></a><a id="_idIndexMarker4311"></a>Photoshop or GIMP file, be sure that the background layer appears as a gray checkerboard pattern and is not filled with a color. If you end up with a color in the background anyway, you can select it all and delete it. </p>
			<p class="body">When you’ve finished playing with transparency, you can come back for some tips on responsive images.</p>
			<div>
				<div id="_idContainer1534" class="sidebar">
					<h5 class="SidebarTitle">Matte Alternative</h5>
					<p class="SidebarBody">If your graphics<a id="_idIndexMarker4312"></a> tool doesn’t have the Matte feature (GIMP and Photoshop CC 2018 come to mind), create a new layer at the bottom of the layer “stack” and fill it with the background color of your page. When the image is flattened as a result of being changed to indexed color, the anti-aliased edges blend with the proper background color. Just select that background color to be transparent when exporting to GIF or PNG, and your image should be halo-free. </p>
					<p class="SidebarBody">If selecting a transparent color is not an option in the tool you use, you can copy the important parts of the image including the blended edges, copy and paste it into a new transparent image file, and then export it as a GIF or PNG-8.  </p>
					<p class="SidebarBody">That’s a lot of work for each image, which is why using alpha transparency is a superior choice.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer1541" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 24-2.</span> Creating transparent images</h6>
					<p class="SidebarBody">In this exercise, we’re going to start from scratch, so you’ll get the experience of creating a layered image with transparent areas. I’m going to keep it simple, but you can apply these techniques to fancier designs, of course. </p>
					<p class="SidebarBody">Because Photoshop and GIMP have different approaches, I’m going to step through the processes for them separately. You can use another tool as long as it uses layers in its interface. </p>
					<h5 class="sbHead">Photoshop CC (2018)</h5>
					<ol>
						<li class="SidebarListNumber" value="1">Start a new file and make it 250×250 pixels with a resolution of 72 (<span class="Xref-Figure">Figure 24-8</span>). On the New Document dialog <span class="Circle-Frame-Neg">A</span>, look for Background Contents and select Transparent from the pop-up menu. Click Create. You should see a square filled with a gray checkerboard pattern indicating the background is transparent.</li>
						<li class="SidebarListNumber">Select the ellipse Marquee tool and set the Feather setting to 10. Draw a circle in the center of the document and fill it with a color. You should have a shape with blurry edges where the checkerboard shows through. That’s all we need for the purposes of this exercise, but you can feel free to add more elements. </li>
						<li class="SidebarListNumber">Now you can select <span class="menu">File </span><span class="menu">→</span><span class="menu"> Export As</span>, select PNG from File Settings, and be sure the Transparency box is checked <span class="Circle-Frame-Neg">B</span>. Also be sure “Convert to sRGB” is checked. Click Export All, name the file <span class="Filename--Sidebar-">circle24.png</span>, and click Export. </li>
						<li class="SidebarListNumber">Let’s save it as a PNG-8 as well: Export As, PNG, Transparency, but this time select “Smaller File (8-bit).” Name the file <span class="Filename--Sidebar-">circle8.png</span>, and click Export.</li>
						<li class="SidebarListNumber">Just for comparison, Export As again, but this time select GIF from the File Settings menu. In the preview, you will see that the areas that are not 100% opaque are blended with white <span class="Circle-Frame-Neg">C</span>, which is not ideal, but save the file anyway as <span class="Filename--Sidebar-">circle.gif</span>. The Export As function does not offer a way to change the fill (matte) color for GIFs and JPEGs. </li>
					</ol>
					<p class="SidebarBody">Now that you have your transparent files <span class="Filename--Sidebar-">circle24.png</span>, <span class="Filename--Sidebar-">circle8.png</span>, and <span class="Filename--Sidebar-">circle.gif</span>, you can skip ahead to the section <span class="Xref--Sidebar-">“How do they look?”</span> </p>
					<div>
						<figure id="_idContainer1536" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_2408_exercise2_pshp.png" alt="" width="2025" height="1179"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-8.</span> Exporting an image with soft transparent edges in Photoshop CC.</figcaption>
						</figure>
					</div>
					<h5 class="sbHead">GIMP</h5>
					<ol>
						<li class="SidebarListNumber" value="1">Create a new file (<span class="menu">File</span> → <span class="menu">New</span>), set the dimensions to 250 pixels wide and high, set X and Y resolution to 72.000 pixels/in. Select Transparency from the “Fill with:” pop-up menu. You can remove the “Created with GIMP” comment. Click OK. You should have a new image window filled with a gray, checkered background. Save the working copy with the name <span class="Filename--Sidebar-">circle.xcf</span>.</li>
						<li class="SidebarListNumber">Time to draw a shape. Select the Ellipse Select Tool from the Toolbox and under Tool Options, turn on Feather Edges, and set the radius to 10. Now draw a circle in the image window. Set the foreground color to something you like and drag the color into your circle to fill it (<span class="Xref-Figure">Figure 24-9</span>, <span class="Circle-Frame-Neg">A</span>). That’s all we need to do for the purposes of this exercise, but you can add more embellishments if you like. </li>
						<li class="SidebarListNumber">Now let’s export it. Select <span class="menu">File</span> → <span class="menu">Export As</span> and name the file <span class="Filename--Sidebar-">circle24.png </span><span class="Circle-Frame-Neg">B</span>. The suffix tells GIMP to save the file in PNG format, and because the original image is RGB with transparent areas, GIMP creates a 24-bit PNG with alpha transparency. In GIMP, this is the best transparency option. In the Export Image as PNG dialog box <span class="Circle-Frame-Neg">C</span>, uncheck all of the boxes. </li>
						<li class="SidebarListNumber">For comparison, let’s see how GIMP handles binary transparency. To export an 8-bit image in GIMP, you need to convert it to indexed color first (<span class="menu">Image </span><span class="menu">→</span><span class="menu"> Color Mode </span><span class="menu">→</span><span class="menu"> Indexed Color</span>). Use the optimum palette with 256 colors. Leave the “Enable dithering of transparency” box unchecked for now, and click Convert. All those soft edges are gone, and the pixels are either opaque or transparent. I recommend zooming in to 200% (the zoom setting is at the bottom of the window) to see the stair-stepped edges <span class="Circle-Frame-Neg">D</span>. </li>
						<li class="SidebarListNumber">OK, revert the file to RGB (<span class="menu">File </span><span class="menu">→</span><span class="menu"> Revert</span>) and convert it to indexed color again, only this time, click the box next to Enable Dithering. If you’re zoomed in, you can see that GIMP creates a pattern out of solid and transparent pixels that <em class="Emphasis">kinda</em> simulates the blurred edges of the circle <span class="Circle-Frame-Neg">D</span>.  Export this file in PNG format as <span class="Filename--Sidebar-">circle8.png</span>. You could also save it in GIF format.<figure id="_idContainer1538" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_2409_exercise2_gimp.png" alt="" width="2025" height="1233"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-9.</span> Creating a transparent image in GIMP.</figcaption></figure></li>
					</ol>
					<h5 class="sbHead">How do they look?</h5>
					<p class="SidebarBody">Now that I have some transparent graphics, I’m going to try them out on a minimal web page with a white background. The images and <span class="Filename--Sidebar-">transparency.html</span> file are provided with the materials for this chapter if you’d like to work along. You could also use the graphics you created.</p>
					<pre class="SidebarCodeFirst">&lt;!DOCTYPE html&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>  &lt;title&gt;Transparency test&lt;/title&gt;<br/>  &lt;style&gt;<br/><code class="CodeColor">    body {background-color: white;}</code><br/>    p {text-align: center;}<br/>    img {margin: 2em;}<br/>  &lt;/style&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;<code class="CodeColor"><br/>  &lt;p&gt;<br/>  &lt;img src="circle.gif" alt=""&gt;   </code><span class="Code-Comment">&lt;!-- left --&gt;</span><br/><code class="CodeColor">   &lt;img src="circle24.png" alt=""&gt; </code><span class="Code-Comment">&lt;!-- center --&gt;</span><br/><code class="CodeColor">   &lt;img src="circle8.png" alt=""&gt;  </code><span class="Code-Comment">&lt;!-- right --&gt;</span><br/><code class="CodeColor">   &lt;/p&gt; </code><br/>&lt;/body&gt;<br/>&lt;/html&gt;</pre>
					<p class="SidebarBody">When I open the file in a browser, the graphics look more or less the same against the white background (<span class="Xref-Figure">Figure 24-10</span>, top). But if I change the background color of the web page to teal (<span class="Literal-Sidebar">background-color: teal;</span>), the difference between the alpha and binary transparency becomes very obvious (bottom). You can clearly see the halo on the GIF on the left. Both the PNG-8 and the PNG-24 versions as exported in Photoshop have smooth alpha transparency.</p>
					<h5 class="sbHead">Wrapping up</h5>
					<p class="SidebarBody">In summary, if you work in Photoshop CC, export transparent images as 8-bit PNGs. In other tools, use PNG-24 with alpha transparency, but keep an eye on the file size. If the file is unacceptably large, you can convert it to a PNG-8 + alpha by using one of the tools listed in the <span class="Xref--Sidebar-">“Image Optimization”</span> section. Your other option is to try it with binary transparency and a matte color that matches the background of the page. If your tool doesn’t have a Matte feature, see the <span class="Xref--Sidebar-">“Matte Alternative”</span> sidebar.</p>
					<div>
						<figure id="_idContainer1540" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_2410_exercise2_C.png" alt="" width="988" height="838"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-10.</span> The difference between binary and alpha transparency becomes very clear when the background color of the page changes.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h1 id="_idParaDest-219" class="HeadA"><a id="_idTextAnchor306"></a>Responsive Image Production Tips</h1>
			<p class="body">If your site is <a id="_idIndexMarker4313"></a><a id="_idIndexMarker4314"></a>responsive, chances are you’ll need responsive images to go with it. When it comes to bitmapped images, “responsive” actually means “multiple versions” (see <span class="Xref">Note</span>). </p>
			<div>
				<div id="_idContainer1542" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Responsive SVGs are covered in <span class="Xref--Sidebar-">Chapter 25, SVG</span>. </p>
				</div>
			</div>
			<p class="body">In the <span class="Xref">“Responsive Image Markup”</span> section in <a href="lwd5_chapter07.xhtml#_idTextAnchor088"><span class="Xref">Chapter </span><span class="Xref">7</span><span class="Xref">, Adding Images</span></a>, you learned about four responsive image scenarios, but it’s worth a refresher here (that was <em class="Emphasis">hundreds</em> of pages ago, after all). Whereas in the past one image did the trick, in our current environment we may choose to do the following:</p>
			<ul>
				<li class="ListBullet">Provide a set of images of various dimensions for use in responsive layouts on different<strong class="Emphasis_Bold"> </strong><strong class="Emphasis_Bold">viewport sizes</strong>.</li>
				<li class="ListBullet">Provide versions of the image with varying amounts of detail based on the device size and orientation (also known as the <strong class="Emphasis_Bold">art direction</strong> use case).</li>
				<li class="ListBullet">Provide large-scale images that look crisp on <strong class="Emphasis_Bold">high-density screens</strong>.</li>
				<li class="ListBullet">Provide <strong class="Emphasis_Bold">alternative image formats</strong> that store the same image at much smaller file sizes.</li>
			</ul>
			<p class="body">This section introduces tools, tips, and general strategies for producing (or automating!) the images you need for the first three scenarios. Alternative image formats were addressed in <a href="lwd5_chapter23.xhtml#_idTextAnchor291"><span class="Xref">Chapter </span><span class="Xref">23</span><span class="Xref">, Web Image Basics</span></a>.</p>
			<div>
				<div id="_idContainer1543" class="sidebar">
					<h5 class="SidebarSeries">Further Reading</h5>
					<p class="SidebarBody">If you are an Adobe Photoshop user (or intend to become one), you will find expert advice on working Photoshop into your Responsive Web Design workflow in <a id="_idIndexMarker4315"></a>Dan Rose’s book <span class="Citation--Sidebar-">Responsive Web Design with Adobe Photoshop</span> (Adobe).</p>
				</div>
			</div>
			<h2 class="HeadB">Images for Responsive Layouts</h2>
			<p class="body">The first scenario addresses providing a range of image sizes that the browser selects from based on the viewport size. In HTML, you would specify these using <span class="Literal-fc">srcset</span> with a w-selector that provides the exact pixel width of the image, and the <span class="Literal-fc">sizes</span> attribute that tells the browser how large the image will appear in the layout. </p>
			<p class="body">This example should look familiar:</p>
			<pre class="CodeFirst">&lt;img src="strawberries-640.jpg" alt="baskets of ripe strawberries"<br/>     srcset="strawberries-240.jpg 240w,<br/>            strawberries-480.jpg 480w,<br/>            strawberries-672.jpg 672w"<br/>     sizes="(max-width: 480px) 100vw,<br/>            (max-width: 960px) 70vw,<br/>            240px"&gt;</pre>
			<p class="body">For this particular <span class="Literal-fc">img</span> element, we’ve provided JPEGs of the strawberry image at 240, 480, and 672 pixels wide. Other layouts may require fewer or more breakpoints for each image. The first question you may ask when producing images for responsive layouts is, “How many images do I need to create?” That is a good question that doesn’t have an easy answer. </p>
			<p class="body">Start by determining the smallest and largest dimensions at which you know the image is likely to appear. Then, decide how many interim sizes would be useful to meet the goal of reducing unnecessary downloads. If the range isn’t that large, you might find that providing small, medium, and large versions is fine and better than nothing. If there is a large difference between the extremes, more breakpoints may be required. If there is very little difference, one image size may suffice. </p>
			<h3 class="HeadC">Resize them manually</h3>
			<p class="body">If you <a id="_idIndexMarker4316"></a><a id="_idIndexMarker4317"></a><a id="_idIndexMarker4318"></a>find you need only a few versions, resizing images on export is a fine option. <span class="Xref-Figure">Figure 24-11</span> shows resizing options in Photoshop CC’s Export As dialog box, but you will find similar settings in other programs. Alternatively, you could use the Image Size tool to resize the image manually before saving or exporting. That gives you an opportunity to make adjustments to the image (such as sharpening it up) before committing to the export.</p>
			<div>
				<div id="_idContainer1544" class="sidebar">
					<h5 class="SidebarSeries">Resizing Tip</h5>
					<p class="SidebarBody">Resizing an extremely large photographic image to a small size appropriate for a web page layout can blur the image if you do it in one step, such as on export. I find I get better results if I reduce the dimensions a little bit at a time, sharpening the image after each pass. For example, if my source image is 4,000 pixels wide and I need to get it down to 250 pixels, I’d start by resizing it manually by 50%, and then use the Sharpen tool to sharpen it up again. Then I’d repeat the steps until I get the image to its target size. It’s definitely more work, but it’s worth it if I am happier with the results. </p>
				</div>
			</div>
			<p class="body">Remember that you always want to start with the image at its largest size in your image editor, and resize it <em class="Emphasis">smaller</em> to your target image sizes. Resizing larger (<span class="FirstTerm">upscaling</span>) results in blurry images. </p>
			<div>
				<figure id="_idContainer1546" class="figWCaption">
					<p class="Figure_Holder"><img src="image/3.png" alt="" width="1321" height="558"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-11.</span> Resizing images manually (as shown here in Photoshop CC) is an option if you have a manageable number of images to produce.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Generate images based on file size</h3>
			<p class="body">If your image is used at a wide range of sizes, more breakpoints than “small, medium, and large” may be required. In that case, providing a range of selections based on <em class="Emphasis">file size</em>, not pixel dimensions, is a more appropriate approach (see <span class="Xref">Further Reading</span>). Keep in mind that the primary goal for <a id="_idIndexMarker4319"></a>viewport-based responsive images is limiting wasted data downloads. Remember also that the browser makes the final image file selection based on the user’s viewing environment—we only provide options with our responsive image markup. We can trust the browser to make the right selection, scaling up or down slightly as required. </p>
			<div>
				<div id="_idContainer1547" class="sidebar">
					<h5 class="SidebarSeries">Further Reading</h5>
					<p class="SidebarBody">I recommend two articles that discuss the file-size approach to responsive breakpoints that go into more detail than I am able to here:</p>
					<ul>
						<li class="SidebarListBullet">“Responsive Image Breakpoints Generator, A New Open Source Tool,” by <a id="_idIndexMarker4320"></a><a id="_idIndexMarker4321"></a>Nadav Soferman at <em class="Emphasis">Smashing Magazine</em> (<a href="http://www.smashingmagazine.com/2016/01/responsive-image-breakpoints-generation/"><span class="URL-Email--Sidebar-">www.smashingmagazine.com/2016/01/responsive-image-breakpoints-generation/</span></a>). This article introduces the image generator mentioned in this section and provides a lot of background information about the approach.</li>
						<li class="SidebarListBullet">“Responsive Images 101, Part 9: Image Breakpoints,” by <a id="_idIndexMarker4322"></a><a id="_idIndexMarker4323"></a>Jason Grigsby on the Cloud Four blog (<a href="http://cloudfour.com/thinks/responsive-images-101-part-9-image-breakpoints/"><span class="URL-Email--Sidebar-">cloudfour.com/thinks/responsive-images-101-part-9-image-breakpoints/</span></a>), introduces the idea of basing breakpoints on a “performance budget,” among other solutions.</li>
					</ul>
				</div>
			</div>
			<p class="body">In the file-size approach to breakpoints, you create a set of images with file sizes that step up in fixed increments, such as 20 KB, 40 KB, or 80 KB, to cover all the possibilities and fine-tune the amount of data that gets downloaded. Granted, that takes a lot of extra work and may not be feasible to do manually for a site with a lot of images. </p>
			<p class="body">Fortunately, there is a tool that generates the images for you. The <a id="_idIndexMarker4324"></a>Responsive Image Breakpoints Generator by <a id="_idIndexMarker4325"></a>Cloudinary (<a href="http://www.responsivebreakpoints.com"><span class="URL-Email">responsivebreakpoints.com</span></a>) lets you upload a large image and set the maximum/minimum dimensions, the size step, and the maximum number of images, and it generates all the images automatically. <span class="Xref-Figure">Figure 24-12</span> shows how I used the tool to create strawberry images at 20 KB increments. By the time you are reading this, there may be more tools like this, so it’s worth a quick web search to see what’s available. </p>
			<div>
				<figure id="_idContainer1549" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2412_generator-ebook.png" alt="" width="1338" height="1700"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-12.</span> Responsive Image Breakpoints Generator by Cloudinary (<a href="http://www.responsivebreakpoints.com"><span class="URL-Email--Sidebar-">responsivebreakpoints.com</span></a>) generates image files for you.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Art-Directed Images</h2>
			<p class="body">For some images, simply resizing to fit a layout isn’t sufficient. It may be necessary to crop or alter the image so that it works successfully at smartphone size as well as desktop monitor size. This is what is known as the “art direction” case for responsive images. <a href="lwd5_chapter07.xhtml#_idTextAnchor088"><span class="Xref">Chapter </span><span class="Xref">7</span></a> has a full explanation and examples of art direction–based selections, but as a quick reminder, this is a scenario for the <a id="_idIndexMarker4326"></a><a id="_idIndexMarker4327"></a><span class="Literal-fc">picture</span> element: </p>
			<pre class="CodeFirst">&lt;picture&gt;<br/>  &lt;source media="(min-width: 1024px)" srcset="icecream-large.jpg"&gt;<br/>  &lt;source media="(min-width: 760px)" srcset="icecream-medium.jpg"&gt;<br/>  &lt;img src="icecream-small.jpg" alt="Savor the Summer"&gt;<br/>&lt;/picture&gt;</pre>
			<p class="body">If you want total control over what appears in an image at each size, you need to design and export each image manually in your favorite image editor. Each art-directed version may also need to be generated at several sizes, depending on your breakpoints. That may be just fine if you don’t have too many images to deal with.</p>
			<p class="body">But hold onto your hat! Cloudinary figured out a way to automate art direction too. You can use the tools in the bottom-right corner of the Responsive Image Breakpoints Generator to specify image proportions for desktops, laptops, tablets, and smartphones. Cloudinary’s tool does some sophisticated image analysis, including edge detection, face detection, and visual uniqueness to determine the most important parts of the image. The final image is cropped to include the visually “hot” spots. For more information on how it’s done, read the article “Automating Art Direction with the Responsive Image Breakpoints Generator” by <a id="_idIndexMarker4328"></a>Eric Portis at <a href="http://www.smashingmagazine.com/2016/09/automating-art-direction-with-the-responsive-image-breakpoints-generator/"><span class="URL-Email">www.smashingmagazine.com/2016/09/automating-art-direction-with-the-responsive-image-breakpoints-generator/</span></a>.</p>
			<p class="body">Other image hosting and automation services also offer face detection and features that improve the quality of the images they generate. If you are shopping for such a service, check to see if smart cropping is available.</p>
			<h2 class="HeadB">Images for High-Density Displays</h2>
			<p class="body">If you want an <a id="_idIndexMarker4329"></a>image to look its sharpest on high-density screens (@1.5x, @2x and @3x), it needs to be created large enough to cover the device pixels at the highest densities. For example, if you want an image to be 300 pixels wide in your layout, you’ll need a 300-pixel-wide version for standard displays, a 600-pixel-wide version for 2x displays, and a 900-pixel-wide version targeted to 3x displays. </p>
			<div>
				<div id="_idContainer1550" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">To brush up on the special requirements of high-density displays, see <span class="Xref--Sidebar-">Chapter 7</span>, where I first introduced device-pixel-ratios as well as the markup for targeting images to specific densities. See also the discussion of image and screen resolutions in <span class="Xref--Sidebar-">Chapter 23</span>.</p>
				</div>
			</div>
			<p class="body">To review, this high-resolution scenario uses the <span class="Literal-fc">srcset</span> attribute in the <span class="Literal-fc">img</span> element with an x-descriptor that specifies the target screen density for each image:</p>
			<pre class="CodeFirst"> &lt;img<br/>   src="/images/apple-300px.jpg" alt="apple"<br/>   srcset="/images/apple-600px.jpg <code class="CodeColor">2x</code>,<br/>          /images/apple-900px.jpg <code class="CodeColor">3x</code>" &gt;</pre>
			<p class="body">Thankfully, the people who make our image creation programs get it, and they’ve begun building features into their tools that make it easier to output multiple high-density versions at once. </p>
			<h3 class="HeadC">Export multiple high-density versions</h3>
			<p class="body">Photoshop CC 2018, Sketch, Illustrator, and <a id="_idIndexMarker4330"></a>Affinity Designer are four tools aimed at screen designers that make it easy to set up simultaneous exports at multiple scales. It’s a nice little time (and math!) saver. If you use another design tool, check to see if it is an option (it is generally located wherever your tool handles exporting). Later in this section, I’ll give you some strategies for making sure the image quality stays crisp even at larger scales. </p>
			<p class="ListVariableTerm">Adobe Photoshop CC 2018</p>
			<p class="ListVariable">Photoshop lets you <a id="_idIndexMarker4331"></a><a id="_idIndexMarker4332"></a>add scales on the top-left corner of the Export As dialog box (<span class="Xref-Figure">Figure 24-13</span>). To export a whole artboard, choose Export As (<span class="menu">File → Export → Export As</span>). You can also export a specific element by right-clicking (Control-clicking on a Mac) its layer name and selecting Export As from the pop-up menu. In the Scale All section, click the + button to add more scales for export. The little down arrows open a menu of standard scales (1x, .5x, 3x, etc.). Click the garbage can to remove a scale. When you click Export All, all of the images are created at once, named with the <span class="Filename">-@nx</span> suffix (see <span class="Xref">Note</span>).  </p>
			<div>
				<div id="_idContainer1551" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The “@nx” (@1x, @2x, etc.) convention was established in the Apple iOS Developer Library. It seems to have crossed over to the web world as well.</p>
				</div>
			</div>
			<p class="ListVariableTerm">Adobe Illustrator CC</p>
			<p class="ListVariable">In Illustrator, <a id="_idIndexMarker4333"></a><a id="_idIndexMarker4334"></a>to export the entire artboard, choose <span class="menu">File </span><span class="menu">→</span><span class="menu"> Export </span><span class="menu">→</span><span class="menu"> Export for Screens</span>. You’ll find the option to Add Scale in the right column (<span class="Xref-Figure">Figure 24-13</span>). You can also export individual assets (such as icons and other elements) via the Assets Export panel (<span class="menu">Window </span><span class="menu">→</span><span class="menu"> Assets Export</span>), which has its own export settings. Just drag elements into the panel, and they are ready to go. The Export As dialog box also provides access to individual assets via the Assets tab, but they need to be added to the Assets Export panel first. One click on Export, and voilà! All your scaled assets exported at once!</p>
			<p class="ListVariableTerm">Sketch</p>
			<p class="ListVariable">Sketch <a id="_idIndexMarker4335"></a>(Mac only) is a tool for designing website and app interfaces that has rapidly grown in popularity. In Sketch, select an artboard or a page element and click the + icon next to Make Exportable in the bottom-right corner of the Sketch window. In the revealed Export panel (<span class="Xref-Figure">Figure 24-13</span>), select a file format and click the + icon to add more scales to be created on export. </p>
			<p class="ListVariableTerm">Affinity Designer</p>
			<p class="ListVariable">Affinity Designer has an export mode (which it calls a “Persona”) in which you access all of its export settings. Create slices for the elements you want to export. Enter the Export Persona (using the menu <span class="menu">Affinity Designer </span><span class="menu">→</span><span class="menu"> Export Persona</span> or clicking the icon that looks like a molecule). Select the slice or slices you want to export in the Slices panel (<span class="Xref-Figure">Figure 24-13</span>); then click the small arrow to the left of the slice name to expose export settings, including file format and the ability to add scales with the + icon. When you are ready, click Export Slices.</p>
			<div>
				<figure id="_idContainer1553" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2413_scales.png" alt="" width="2025" height="2173"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-13.</span> Newer design tools allow you to export multiple high-density sizes at once.</figcaption>
				</figure>
			</div>
			<p class="body">The problem to watch out for with all of these tools is that if you design at standard (@1x) resolution, the exported @2x and @3x versions will be much <em class="Emphasis">bigger</em> than they are in your working document. That should raise a red flag in your mind, because doubling or tripling the dimensions of images typically makes them blurry. There are ways around that, however, which I’ll discuss next.</p>
			<h3 class="HeadC">Work at @1x scale</h3>
			<p class="body">Even if you are creating high-definition versions of your images, it is still recommended that you do your design work at @1x scale (see <span class="Xref">Note</span>). In other words, the pixel dimensions in your working document (whether it’s in Photoshop, Sketch, or some other tool) should match the layout pixels of your design. In Photoshop and other image-editing tools, @1x scale is equivalent to 72ppi. The advantages to working at @1x scale include the following:</p>
			<div>
				<div id="_idContainer1554" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">On the other hand, some designers strongly prefer to work at 2x and reduce everything by half for standard displays, particularly if they do their design work on Retina displays. <a id="_idIndexMarker4336"></a>Dan Rodney is one such designer, and you can read his argument for @2x design at <a href="http://www.danrodney.com/blog/designing-retina-web-graphics-in-photoshop-should-you-work-at-1x-or-2x/"><span class="URL-Email--Sidebar-">www.danrodney.com/blog/designing-retina-web-graphics-in-photoshop-should-you-work-at-1x-or-2x/</span></a>.</p>
				</div>
			</div>
			<ul>
				<li class="ListBullet">It’s easier to specify font size and other length measurements as they appear in your working documents without the need to divide everything by two. If you work at @2x and you want 16pt type, you need to make it 32pt in your image document. If you want 10 pixels of padding in the layout, you need to create it at 20 pixels, and so on. </li>
				<li class="ListBullet">Pixel-snap features work more reliably at @1x. Snapping to even pixels is a way to keep edges crisp in detailed elements such as icons.</li>
				<li class="ListBullet">File sizes are much smaller for a design created at @1x, so it is better for performance on your computer. Complex files with lots of artboards and layers at @2x can get sluggish and slow down your work.</li>
				<li class="ListBullet">It creates a more realistic sense of how much space you have to work with. A @2x design space might give the impression that you have more room to fit in elements, but they will end up too small and cramped when reduced 50% for @1x displays.</li>
			</ul>
			<h3 class="HeadC">Start with vectors when possible</h3>
			<p class="body">One way to maintain quality when your design is upscaled is to use <a id="_idIndexMarker4337"></a>vector source images whenever possible. As you’ve learned, vectors can scale up with no loss of quality, so they make a great starting point for web and app design.</p>
			<p class="body">Many new UI design tools for screen and web interfaces, such as Sketch, Affinity Designer, and Adobe XD, are vector-based by default, so you’ll have no problem outputting larger versions of elements you create there (the same goes for vector-based Adobe Illustrator). If you prefer to design in Photoshop, make sure to use its vector tools such as shapes, paths, and imported vector smart objects for common web page elements like buttons, icons, and illustrations whenever possible.</p>
			<h3 class="HeadC">Embed large-scale bitmaps</h3>
			<p class="body">To preserve the image quality of photographs and other necessarily bitmapped page elements at large scales, start with an image source that is at least as large as your largest scale. For example, if you know that your @3x version is 2,880 pixels wide, your source image should be that wide or wider. </p>
			<p class="body">In Illustrator, Sketch, and Affinity Designer, “placing” the high-resolution source image on the @1x artboard and resizing it to fit the needs of the layout gives the program all the pixel information it needs to export high-quality, large-scale assets. </p>
			<p class="body">In Photoshop CC, to take advantage of the full image resolution, the trick is to add the image to your design as a linked Smart Object. The Smart Object is like a placeholder for the image in your @1x design, with the high-resolution original remaining separate. When it comes time to export at various scales, Photoshop references the high-res version, and you end up with full-resolution exports (see <span class="Xref">Important Warning</span>). To place an image as a Smart Object, choose <span class="menu">File </span><span class="menu">→</span><span class="menu"> Place Linked</span> and resize the image to fit into your design. </p>
			<div>
				<div id="_idContainer1555" class="note">
					<h5 class="WarningHeader">Important Warning</h5>
					<p class="note">As of this writing, there is a bug in Photoshop CC 2018 that prevents this technique from working with JPEG images. When you link a large-scale JPEG, Photoshop ignores it and scales up a screenshot of the image in the current file. The workaround is to convert the high-resolution JPEG image to a PSD file before adding it as a Smart Object. Adobe knows about this bug, so hopefully they will fix it in an upcoming release. </p>
				</div>
			</div>
			<h2 class="HeadB">Viva la Automation!</h2>
			<p class="body">I mentioned this in the section <span class="Xref">“Image Asset Strategy”</span> in the previous chapter, but it bears repeating—if your site is image-heavy, consider using server software that automates the process of responsive image generation. As <a id="_idIndexMarker4338"></a>Jason Grigsby says in his article, “Humans shouldn’t be doing this.” I couldn’t agree more (unless you have a penchant for repetitive tasks). </p>
			<p class="body">You may choose to install software on your own server, or as a convenience, use a third-party vendor that provides hosted image management services. Again, some popular services currently are <a id="_idIndexMarker4339"></a><a id="_idIndexMarker4340"></a><a id="_idIndexMarker4341"></a>Cloudinary (<a href="http://cloudinary.com"><span class="URL-Email">cloudinary.com</span></a>), Akamai (<a href="http://akamai.com"><span class="URL-Email">akamai.com</span></a>), and Kraken.io (<a href="http://kraken.io"><span class="URL-Email">kraken.io</span></a>). </p>
			<div>
				<div id="_idContainer1556" class="sidebar">
					<h5 class="SidebarSeries">Resource</h5>
					<p class="SidebarBody">Jason Grigsby maintains a spreadsheet of image-resizing services, available at <a href="http://tinyurl.com/pmpbyzj"><span class="URL-Email--Sidebar-">tinyurl.com/pmpbyzj</span></a>. See also his associated article “Image Resizing Services” (<a href="http://cloudfour.com/thinks/image-resizing-services/"><span class="URL-Email--Sidebar-">cloudfour.com/thinks/image-resizing-services/</span></a>).</p>
				</div>
			</div>
			<p class="body">I hope that you’ve come away with some strategies to improve the workflow for creating multiple versions of images for responsive layouts. Or perhaps you’ve just decided to let the server handle it! Let’s move on to the final topic in our image asset production deep-dive: optimization.</p>
			<h1 id="_idParaDest-220" class="HeadA"><a id="_idTextAnchor307"></a>Image Optimization</h1>
			<div>
				<div id="_idContainer1557" class="callout">
					<p class="callout">All web designers should have multiple image optimization tricks up their sleeves.</p>
				</div>
			</div>
			<p class="body">Because a web <a id="_idIndexMarker4342"></a><a id="_idIndexMarker4343"></a><a id="_idIndexMarker4344"></a>page is published over a network, it needs to zip through the lines as little packets of data in order to reach the end user. It is fairly intuitive, then, that larger amounts of data will require a longer time to arrive. And guess which part of a standard web page packs a whole lotta bytes—that’s right, the images.</p>
			<p class="body">Thus is born the conflicted relationship with images on the web. On the one hand, images make a web page more interesting than text alone, and the ability to display images is one of the factors contributing to the web’s success. On the other hand, images also try the patience of users with slow internet connections and gobble the data plans of mobile devices. </p>
			<p class="body">If you study the flowchart back in <span class="Xref-Figure">Figure 23-16</span>, you will see that all paths end with “Optimize.” Making your image files as small as they can be is critical for fast-loading sites, so all web designers and developers should have multiple image optimization tricks up their sleeves.</p>
			<p class="body">As you saw firsthand in <span class="Xref-Figure">Exercise 24-1</span>, choosing the appropriate file format is your first line of defense against bloated file sizes, but it doesn’t stop there. It’s possible to squeeze a lot more data out of the images that your image editor exports.</p>
			<p class="body">Optimization approaches fall into two broad categories: </p>
			<ul>
				<li class="ListBullet">Efforts you make manually and deliberately during the design and export process </li>
				<li class="ListBullet">Post-export compression tools that root through the code and crunch them down even further, generally by throwing out unused data</li>
			</ul>
			<p class="body">This section starts with general guidelines for limiting file size. Next, because each image format is slightly different under the hood, we’ll examine optimization strategies for JPEG, PNG-24, PNG-8, and GIF files (see <span class="Xref">Note</span>). Finally, we’ll round up some optimization tools that work on multiple formats and are a good last step in any image production process.</p>
			<div>
				<div id="_idContainer1558" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Of course it is important to optimize SVGs as well, but I’ve saved that discussion for the SVG chapter (<span class="Xref--Sidebar-">Chapter 25</span>).</p>
				</div>
			</div>
			<h2 class="HeadB">General Optimization Guidelines</h2>
			<p class="body">Regardless of the image or file type, there are a few basic strategies to keep in mind for limiting file size. In the broadest of terms, they are as follows:</p>
			<p class="ListVariableTerm">Start with a high-quality original</p>
			<p class="ListVariable">Start with the best-quality source image you can get your hands on. From there, you can make copies at various sizes and compression settings, but you’ll want to keep that original safe.</p>
			<p class="ListVariableTerm">Limit dimensions</p>
			<p class="ListVariable">Although fairly obvious, the easiest way to keep file size down is to limit the dimensions of the image itself. There aren’t any magic numbers; just don’t make images any larger than they need to be. By simply eliminating extra space in the graphic in <span class="Xref-Figure">Figure 24-14</span>, I was able to reduce the file size by 3 KB (23%).</p>
			<div>
				<figure id="_idContainer1560" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2414_dimensions.png" alt="" width="1321" height="896"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-14.</span> You can reduce the size of your files by cropping out extra space.</figcaption>
				</figure>
			</div>
			<p class="ListVariableTerm">Reuse and recycle</p>
			<p class="ListVariable">If you use the same image repeatedly in a site, it is best to create only one image file and point to it repeatedly wherever it is needed. This allows the browser to take advantage of the cached image and avoid additional downloads. </p>
			<p class="ListVariableTerm">Use appropriate tools</p>
			<p class="ListVariable">If you know you will be doing a lot of web image production work, it is worth investing in professional image-editing software with web-specific features. Whether you choose Photoshop, Sketch, PaintShop Pro, or some other program mentioned in this book is up to your personal preference and budget limitations. </p>
			<p class="ListVariableTerm">Run the image through an optimizer</p>
			<p class="ListVariable">You should have a number of image optimization tools at your disposal. I’ll list several throughout this section, many of which are free to use. </p>
			<h2 class="HeadB">Optimizing JPEGs</h2>
			<p class="body">Here are the general strategies for reducing<a id="_idIndexMarker4345"></a> the file size of JPEGs:</p>
			<ul>
				<li class="ListBullet">Be aggressive with compression.</li>
				<li class="ListBullet">Choose Optimized if available.</li>
				<li class="ListBullet">Soften the image (Blur/Smoothing).</li>
				<li class="ListBullet">Avoid hard edges and sharp details.</li>
			</ul>
			<h3 class="HeadC">Be aggressive with compression</h3>
			<p class="body">Your number <a id="_idIndexMarker4346"></a><a id="_idIndexMarker4347"></a>one tool for optimizing JPEGs is the Quality setting that you’ll find in just about every graphics tool. The Quality setting allows you to set the rate of compression; lower quality means higher compression and smaller files. If your image editor has a preview, you can keep an eye on the image quality while changing the compression level. Different images can withstand different amounts of compression, but in general, images hold up reasonably well at moderate (50–70) and even low (30–40) quality settings. The quality at particular settings varies from program to program, so use whatever setting results in the best balance of quality and file size for your particular image.</p>
			<h3 class="HeadC">Choose Optimized if available</h3>
			<p class="body">Optimized <a id="_idIndexMarker4348"></a>JPEGs have slightly smaller file sizes and better color fidelity than standard JPEGs (although I’ve never been able to see the difference). For this reason, you should select the Optimized option if your image software offers it.</p>
			<h3 class="HeadC">Blur the image</h3>
			<p class="body">Because soft images compress smaller than sharp ones, you can try applying a slight <a id="_idIndexMarker4349"></a>Gaussian blur to the image to give the JPEG compression something to chew on. Even an imperceptible blur over the whole image can reduce file size. In GIMP’s Export as JPEG dialog box, there is a Smoothing setting that does just that. Photoshop’s legacy Save for Web feature also includes an option to apply varying amounts of blur across the whole image.</p>
			<p class="body">You might also choose to apply a more aggressive blur to less important areas of the image while preserving areas of interest. In <span class="Xref-Figure">Figure 24-15</span>, I applied a blur to all areas of the image except the face, which remains at the original quality, and reduced the file size by 6 KB, or 23%. For this image, I’d say the savings are worth the loss of detail around the edges, but of course, you should decide whether blurring is appropriate based on the content and purpose of your images.</p>
			<div>
				<figure id="_idContainer1562" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2415_blur-ebook.png" alt="" width="1333" height="795"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-15.</span> Applying blur to less important parts of an image can help reduce the size of the exported JPEG.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Avoid hard edges and details</h3>
			<p class="body">JPEGs compress areas of smooth, blended colors more efficiently than areas with high contrast, hard edges, and sharp detail. To demonstrate the difference, <span class="Xref-Figure">Figure 24-16</span> shows two similar graphics with blended colors. The image with more contrast and detail is more than four times larger at the same quality setting. You can keep this principle in mind when creating your images. If a photograph has a lot of hard edges, consider whether they can be softened or edited out. Also see whether a PNG-8 might offer similar image quality at a smaller size.</p>
			<div>
				<figure id="_idContainer1564" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2416_detail-ebook.png" alt="" width="1337" height="472"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-16.</span> JPEG compression works better on smooth, blended colors than hard edges and detail.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">“Optimizing” PNG-24</h2>
			<p class="body">Because <a id="_idIndexMarker4350"></a>PNG-24 is a lossless format, there isn’t much you can do to these images in terms of optimization. Your best bets are to do the following:</p>
			<ul>
				<li class="ListBullet">Avoid them for photographs in favor of JPEGs.</li>
				<li class="ListBullet">Run them through an optimization utility.</li>
				<li class="ListBullet">Convert them to PNG-8 with multiple levels of transparency.</li>
			</ul>
			<p class="body">PNG’s lossless compression makes PNG-24 a wonderful format for preserving quality in images, but the same image will always be smaller saved as a lossy JPEG. Therefore, your first “lean and mean” strategy for photographs is to avoid PNG-24 and go with JPEG instead.</p>
			<p class="body">You may be using PNG-24 because you need multiple levels of transparency (a valid reason). If that is the case, you have two options. Running the image through one of the image optimizers listed later in this section is a good way to strip out useless metadata but preserve the image. The other option is to convert it to a PNG-8 while maintaining alpha transparency. </p>
			<div>
				<div id="_idContainer1565" class="sidebar">
					<h5 class="SidebarTitle">Alternatives to PNG-24</h5>
					<p class="SidebarBody">PNG-24 images have large file sizes, so developers look for ways to avoid them entirely. Here are some options for achieving multiple levels of transparency without using PNG-24:</p>
					<ul>
						<li class="SidebarListBullet">Convert them to PNG-8, as discussed in this section. </li>
						<li class="SidebarListBullet">Place a JPEG version of the image inside an SVG; then use the SVG clipping or masking features (covered in <span class="Xref--Sidebar-">Chapter 25</span>) to create transparent areas. </li>
						<li class="SidebarListBullet">Apply transparent areas by using CSS Masks <a id="_idIndexMarker4351"></a>(<a href="http://www.w3.org/TR/css-masking-1/"><span class="URL-Email--Sidebar-">www.w3.org/TR/css-masking-1/</span></a>), which are not covered in this book but are worth looking into. </li>
						<li class="SidebarListBullet">Use a new image format, such as WebP and JPEG 2000, that supports alpha transparency. These will be good alternatives to PNG-24 once support improves in image-creation tools and browsers. </li>
					</ul>
				</div>
			</div>
			<h3 class="HeadC">Converting to PNG-8</h3>
			<p class="body">Until recently, we didn’t have tools for making PNG-8 with<a id="_idIndexMarker4352"></a><a id="_idIndexMarker4353"></a> alpha transparency (see <span class="Xref">Note</span>). Now Photoshop CC gives you the option to make PNG-8 with alpha transparency and a smaller file size right in the Export As dialog box. </p>
			<div>
				<div id="_idContainer1566" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Adobe Fireworks had the little-known ability to create PNG-8 + alpha, but it was discontinued in 2013. </p>
				</div>
			</div>
			<p class="body">You can also use a standalone utility for converting a PNG-24 to PNG-8 with alpha transparency. Some options are as follows:</p>
			<ul>
				<li class="ListBullet"><strong class="Emphasis_Bold">ImageAlpha</strong> (<a href="http://www.pngmini.com"><span class="URL-Email">pngmini.com</span></a>) is a <a id="_idIndexMarker4354"></a>Mac-only program created by <a id="_idIndexMarker4355"></a>Kornel Lesiński for converting PNG-24 to PNG-8 (<span class="Xref-Figure">Figure 24-17</span>). For the image of the orange circle, I was able to reduce the size from 8.4 KB to 2.6 KB, a savings of 69%. Because the circle had flat colors, I was able to reduce the color palette to 64 colors without any significant change in appearance. </li>
				<li class="ListBullet"><strong class="Emphasis_Bold">TinyPNG</strong> (<a href="http://tinypng.com"><span class="URL-Email">tinypng.com</span></a>) allows <a id="_idIndexMarker4356"></a>you to drag PNGs right onto their web page for conversion. They also offer a paid Pro version and developer APIs that let you use the “tinify” tool with most backend platforms.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">PunyPNG Pro</strong> (<a href="http://punypng.com"><span class="URL-Email">punypng.com</span></a>) is<a id="_idIndexMarker4357"></a> another compressor with a web interface that offers “lossy” conversion from PNG-24 to PNG-8, although you get that feature only with the paid Pro account. <div id="_idContainer1567" class="sidebar"><h5 class="SidebarSeries">Fun fact</h5><p class="SidebarBody">All of these tools use<a id="_idIndexMarker4358"></a> the <strong class="Emphasis_Bold">pngquant</strong> compression library, created by Kornel Lesiński (<a href="http://www.pngquant.org"><span class="URL-Email--Sidebar-">pngquant.org</span></a>), which reduces the number of colors from 24-bit to 8-bit while assigning transparency levels to slots in the indexed color map. </p></div></li>
			</ul>
			<div>
				<figure id="_idContainer1569" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2417_imagealpha.png" alt="" width="853" height="522"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-17.</span> The ImageAlpha compression tool (Mac only) turns PNG-24s with alpha transparency into PNG-8s while retaining multiple transparency levels.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Optimizing PNG-8 and GIF</h2>
			<p class="body">Follow these <a id="_idIndexMarker4359"></a>optimization strategies in the PNG-8 and GIF creation and export process:</p>
			<ul>
				<li class="ListBullet">Reduce the number of colors (bit depth).</li>
				<li class="ListBullet">Avoid or reduce dithering.</li>
				<li class="ListBullet">Design with flat colors.</li>
			</ul>
			<h3 class="HeadC">Reduce the number of colors (bit depth)</h3>
			<p class="body">The most effective way to reduce the size of an indexed color image, and therefore the first stop in your optimization journey, is to reduce the number of colors in the image. </p>
			<p class="body">Although PNG-8s and GIFs can contain up to 256 colors, there’s no rule that says they have to. In fact, by reducing the number of colors (bit depth), you significantly reduce the file size of the image. One reason for this is that files with lower bit depths contain less data. Another byproduct of the color reduction is that you create more areas of flat color by combining similar, abutting pixel colors. More flat color areas mean more-efficient compression.</p>
			<p class="body">Photoshop <a id="_idIndexMarker4360"></a>and<a id="_idIndexMarker4361"></a> GIMP give you the opportunity to reduce the number of colors when you convert the image from RGB to indexed color. In Photoshop, select <span class="menu">Image </span><span class="menu">→</span><span class="menu"> Mode </span><span class="menu">→</span><span class="menu"> Indexed Color</span>, and enter the number of colors to use in the color map in the Colors box. If you have access to Photoshop’s legacy Save for Web feature, there is a bit-depth setting you can play around with while observing the resulting image in the preview before saving the image. In GIMP, go to <span class="menu">Image </span><span class="menu">→</span><span class="menu"> Mode </span><span class="menu">→</span><span class="menu"> Indexed</span> and enter the “Maximum number of colors” you’d like to use. </p>
			<div>
				<div id="_idContainer1570" class="sidebar">
					<h5 class="SidebarTitle">Bit Depth</h5>
					<p class="SidebarBody">Bit <a id="_idIndexMarker4362"></a>depth is a way to refer to the maximum number of colors a graphic can contain. This chart shows the number of colors each bit depth represents:</p>
					<table id="table003-6" class="table_invisible">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<tbody>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">1-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">2 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">2-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">4 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">3-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">8 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">4-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">16 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">5-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">32 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">6-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">64 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">7-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">128 colors</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible">
									<p class="SidebarBody">8-bit</p>
								</td>
								<td class="table_invisible">
									<p class="SidebarBody">256 colors</p>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			<p class="body">If you reduce the number of colors too far, of course, the image begins to fall apart or may cease to communicate effectively. For example, in <span class="Xref-Figure">Figure 24-18</span>, once I reduced the number of colors in the PNG to eight, I lost the rainbow, which was the whole point of the image. This “meltdown” point is different from image to image. (Granted, this barn and sky image should be a JPEG, but it demonstrates the effects of optimization dramatically, so thank you for bearing with me.)</p>
			<div>
				<figure id="_idContainer1572" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2418_bitdepth.png" alt="" width="2025" height="671"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-18.</span> Reducing the number of colors in an image reduces the file size.</figcaption>
				</figure>
			</div>
			<p class="body">You’ll be surprised to find how many images look perfectly fine with only 32 pixel colors (5-bit), such as the Asian Cuisine image in <span class="Xref-Figure">Exercise 24-1</span>. That is usually my starting point for color reduction, and I go higher only if necessary. Some image types fare better than others with reduced color palettes, but as a general rule, the fewer the colors, the smaller the file. </p>
			<p class="body">The real size savings kick in when there are large areas of flat color. Keep in mind that even if your image has 8 pixel colors, if it has a lot of blends, gradients, and detail, you won’t see the kind of file size savings you might expect with such a severe color reduction. </p>
			<h3 class="HeadC">Reduce dithering</h3>
			<p class="body">When the colors in an <a id="_idIndexMarker4363"></a><a id="_idIndexMarker4364"></a><a id="_idIndexMarker4365"></a>RGB image are reduced to a specific palette, the colors that are <em class="Emphasis">not</em> in that palette get approximated by dithering. <span class="FirstTerm">Dithering</span> is a speckle pattern that results when palette colors are mixed to simulate an unavailable color. When converting to <a id="_idIndexMarker4366"></a>indexed color, Photoshop and GIMP (and most other image editors) allow you to specify whether and how the image dithers. </p>
			<p class="body">In photographic images, dithering is not a problem and can even be beneficial; however, dithering in flat color areas is usually distracting and undesirable. In terms of optimization, dithering is undesirable because the speckles disrupt otherwise smooth areas of color. Those stray speckles stand in the way of the compression and result in larger files.</p>
			<div>
				<div id="_idContainer1573" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">Not all image-editing tools give you control over the amount of dithering.</p>
				</div>
			</div>
			<p class="body">One way to shave bytes off a PNG or GIF is to turn off dithering entirely. For some images, that may result in a banding effect as shown in <span class="Xref-Figure">Figure 24-19</span>. If that is unacceptable, you can turn the dithering back on or try a higher number of colors if the bit depth was set to less than 8-bit.</p>
			<div>
				<figure id="_idContainer1575" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2419_dithering.png" alt="" width="1321" height="883"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-19.</span> Turning off or reducing the amount of dithering reduces the file size. Both images have 32 pixel colors and<a id="_idTextAnchor308"></a> use an adaptive palette.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Design with flat colors</h3>
			<p class="body">When designing your images keep in mind the fact that PNGs and GIFs are good at compressing areas of flat color. </p>
			<p class="body">Choosing flat colors over gradients and patterns makes a big difference in file size, as shown in <span class="Xref-Figure">Figure 24-20</span>. Reducing the colors from 256 to 8 goes a long way in reducing the file size, but the colors in the blend are approximated with a dither pattern, which we just learned is counterproductive to GIF and PNG compression. However, if you create the image with flat colors in the first place, the file size is half that of the dithered version, even though both images have been reduced to 8 colors.</p>
			<p class="body">I feel obliged to say that images like this one should be drawn with vectors and saved in SVG format, which will be smaller and more versatile than bitmapped versions. However, if you have a reason for saving PNGs, design them in a way that complements the compression. Similarly, if you are starting with a bitmapped source image, you may be able to edit it in a way that eliminates unnecessary color blends and patterns. </p>
			<div>
				<figure id="_idContainer1577" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2420_flatcolor.png" alt="" width="1321" height="413"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-20.</span> For PNG-8 and GIF, you can keep file sizes small by replacing gradients and patterns with flat colors.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Optimization Tools</h2>
			<p class="body">Even if you design images to take advantage of their end compression scheme and take full advantage of all the optimizations in your image-editing tool, there’s a good chance that you can squeeze down the file size of your images even further using an optimization tool. These tools are generally lossless, meaning they do not alter the appearance of your image. They find the file savings by tossing out chunks of code dedicated to metadata, <a id="_idIndexMarker4367"></a><a id="_idIndexMarker4368"></a>color profiles, and other redundant code. </p>
			<p class="body">It is recommended that you always run your images through an optimization tool as the last step in the image production process. The good news is, there are many ways to do it, so you will surely find one that fits into your workflow. Let’s look at some options.</p>
			<h3 class="HeadC">Online image optimizers</h3>
			<p class="body">One easy solution is to use one of the freely available online optimizers. Just drag your images onto the web page interface and download the resulting compressed files. They are a good option if you don’t have too many images to process, and they have the advantage of being cross-platform. In addition to free web-based tools, most of these companies also offer Pro packages that allow you to upload more data and provide additional compression options. Some also offer server-side solutions:</p>
			<ul>
				<li class="ListBullet"><strong class="Emphasis_Bold">Optimizilla</strong> (<a href="http://optimizilla.com"><span class="URL-Email">optimizilla.com</span></a>) can <a id="_idIndexMarker4369"></a>optimize both JPEGs and PNGs and allows you to compress up to 20 images at once. It is free to use.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">Kraken.io</strong> (<a href="http://kraken.io/web-interface"><span class="URL-Email">kraken.io/web-interface</span></a>) offers a <a id="_idIndexMarker4370"></a>free web interface in addition to their commercial server-side services. They give you the option of lossy, lossless, manual “expert” settings, and the ability to resize the image as well.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">TinyPNG</strong><strong class="Emphasis_Bold"> </strong>(<a href="http://tinypng.com"><span class="URL-Email">tinypng.com</span></a>) was <a id="_idIndexMarker4371"></a>mentioned earlier as a way to convert transparent PNG-24 to PNG-8, but you can use it to compress any PNG or JPEG.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">PunyPng</strong> (<a href="http://punypng.com"><span class="URL-Email">punypng.com</span></a>) boasts <a id="_idIndexMarker4372"></a>that they produce the smallest file sizes for JPEGs, PNGs and GIFs. They also offer a Pro package that gives you more compression options, such as the PNG-24 to PNG-8 conversion mentioned earlier.</li>
			</ul>
			<h3 class="HeadC">Standalone optimization apps</h3>
			<p class="body">You might prefer to have an optimization program running on your own computer. If that is the case, look into these popular downloadable tools:</p>
			<ul>
				<li class="ListBullet"><strong class="Emphasis_Bold">ImageOptim</strong> (<a href="http://www.imageoptim.com"><span class="URL-Email">imageoptim.com</span></a>) is a <a id="_idIndexMarker4373"></a>Mac-only tool with an easy drag-and-drop interface for optimizing PNGs, JPEGs, GIF (including animated GIF), and even SVG. It was created by Kornel Lesiński, who also brought you ImageAlpha.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">PNGGauntlet</strong> (<a href="https://pnggauntlet.com"><span class="URL-Email">pnggauntlet.com</span></a>) is a <a id="_idIndexMarker4374"></a>Windows-only tool for PNG optimization. It can also convert JPEG, GIF,<a id="_idIndexMarker4375"></a><a id="_idIndexMarker4376"></a> TIFF, and BMP files to PNG format.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">JPEGmini</strong> (<a href="http://www.jpegmini.com"><span class="URL-Email">www.jpegmini.com</span></a>) is a<a id="_idIndexMarker4377"></a> program for Mac and Windows that compresses JPEGs. The free trial is good for 200 images; after that, you need to pay for the Pro version. They offer a free web interface as well as a server-side option.</li>
				<li class="ListBullet"><strong class="Emphasis_Bold">Trimage</strong> (<a href="http://www.trimage.org"><span class="URL-Email">trimage.org</span></a>) is an <a id="_idIndexMarker4378"></a>optimization tool similar to ImageOptim that works on the Linux platform. </li>
			</ul>
			<h3 class="HeadC">Grunt and Gulp plug-ins</h3>
			<p class="body">If your workflow <a id="_idIndexMarker4379"></a><a id="_idIndexMarker4380"></a><a id="_idIndexMarker4381"></a><a id="_idIndexMarker4382"></a>is based around a task runner such as Grunt or Gulp, you can make optimization of PNGs and JPEGs an automated task with the “imagemin” plug-in. <a id="_idIndexMarker4383"></a>imagemin is maintained at <a href="http://github.com/gruntjs/grunt-contrib-imagemin"><span class="URL-Email">github.com/gruntjs/grunt-contrib-imagemin</span></a>, where you can get instructions and links to download. </p>
			<p class="body">Now you should have some strategies for making your images as lean and mean as possible, including techniques for each file format during the creation process as well as tools for squooshing them down even further after they are made. Let’s put them to the test in <span class="Xref-Figure">Exercise 24-3</span>.</p>
			<div>
				<div id="_idContainer1580" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 24-3.</span> Optimize some images</h6>
					<p class="SidebarBody">In this exercise, we’ll take the best images we exported in <span class="Xref-Figure">Exercise 24-1</span> and see if we can make them even smaller using an online optimization tool. I’ve included starter images <span class="Filename--Sidebar-">boats-60.jpg</span> and <span class="Filename--Sidebar-">asian-32.png</span> in the <span class="Filename--Sidebar-">materials</span> folder if you’d like to use the same images shown here.</p>
					<p class="SidebarBody">I’m going to use Kraken.io because it gives me a few more options, such as the choice between lossy and lossless compression. Click the Try Free Web Interface button on their home page to get to the online tool (<span class="Xref-Figure">Figure 24-21</span>).</p>
					<div>
						<figure id="_idContainer1579" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_2421_kraken.png" alt="" width="988" height="1025"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 24-21.</span> Optimizing images with the Kraken.io online image tool.</figcaption>
						</figure>
					</div>
					<ol>
						<li class="SidebarListNumber" value="1">Let’s start with the <span class="Filename--Sidebar-">asian-32.png</span> file, which if you’ll remember, was reduced to 32 pixel colors and saved as a PNG-8. Using Photoshop’s best compression tool (the Export As function), we get a file size for this image of 3.35 KB, which isn’t bad, but let’s see if we can make it even smaller. Drag it into the Kraken.io optimizer, selecting the “lossless” mode, which means it won’t touch the image data but will find other data in the image that can be removed.<p class="SidebarListItem_cont">The “Kraked” (optimized) file size is 2.96 KB, a file savings of 11.8% without the image being altered at all. For what it’s worth, I tried compressing this same image at TinyPNG.com and got a file reduction of 15%, so keep in mind that tools offer varying results based on their compression algorithms.</p></li>
						<li class="SidebarListNumber">Now let’s see what we can do with the <span class="Filename--Sidebar-">boats-60.jpg</span> image. First, try it using the “lossless” optimization mode, keeping the image exactly as it is. The file size went from 34.74 KB to 31.56 KB, which is just over 9% smaller. Next drag it into Kraken.io again using “lossy” mode, allowing the tool to throw out a little image data to compress it even smaller. <p class="SidebarListItem_cont">The resulting file size is just 24.9 KB, a savings of 28%! I downloaded both the lossy and lossless versions and compared them in an image editor, and to my eye, there was no discernable difference. I’d go with the much smaller lossy version for this one. By comparison, TinyPNG was only able to reduce <span class="Filename--Sidebar-">boats-60.jpg</span> by 3%. </p></li>
					</ol>
					<p class="SidebarBody">You can see that running exported images through an optimizer is well worth the effort. You can probably also see that doing each one individually could get a little cumbersome, so if you have a lot of images to produce, consider using a tool that allows batch processing, or automate the process with a task runner or a server-side image management tool or service.</p>
				</div>
			</div>
			<p class="body">And with that, we end our tour of image asset production techniques. You should feel comfortable opening an image in an image-editing application and saving or exporting to the various web image formats. You’ve gotten to know the various ways image formats store transparency information and how to pick the most appropriate format for transparent images. You’ve picked up some tricks for generating sets of images for responsive sites, and finally, you have some options for optimizing your images as a final step.</p>
			<p class="body">As usual, this chapter ends with a quiz so you can put your new knowledge to work.</p>
			<h1 id="_idParaDest-221" class="HeadA"><a id="_idTextAnchor309"></a>Test Yourself</h1>
			<p class="body">Are you an image asset master? Answer these questions to find out. Answers are in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix </span><span class="Xref">A</span></a>.</p>
			<ol>
				<li class="ListNumber" value="1">What are your file format options if you want multiple levels of transparency in a bitmapped image?</li>
				<li class="ListNumber">What is your number one tool for optimizing a JPEG?</li>
				<li class="ListNumber">What is your number one tool for optimizing an indexed-color image like PNG-8 or GIF?</li>
				<li class="ListNumber">How does dithering affect the file size of an indexed color PNG or GIF?</li>
				<li class="ListNumber">How does adding a blur affect the file size of a JPEG?</li>
				<li class="ListNumber">sRGB: Yes or no? Why?</li>
				<li class="ListNumber">Why might you need to create @2x and @3x scales of an image?<p class="ListNumber_cont"> </p></li>
				<li class="ListNumber">Why might you hire a company like Cloudinary or Akamai?</li>
			</ol>
		</div>
	</div>
</div>
</body>
</html>