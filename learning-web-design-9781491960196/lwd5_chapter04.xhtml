<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer102" class="ch04">
			<p id="_idParaDest-26" class="Epub-TOC-Part-Title"><strong class="Emphasis_Bold"><a id="_idTextAnchor040"></a>Part II.</strong> HTML for STRUCTURE</p>
		</div>
		<div id="_idContainer103" class="ch04">
			<h1 class="partLabel"><a id="_idTextAnchor041"></a>II</h1>
		</div>
		<div id="_idContainer104" class="ch04">
			<h1 class="partTitle"><a id="_idTextAnchor042"></a>HTML for STRUCTURE</h1>
		</div>
		<div id="_idContainer105" class="ch04">
			<p id="_idParaDest-27" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor043"></a>4.
				Creating a Simple Page</p>
		</div>
		<div id="_idContainer106" class="ch04">
			<h1 class="chapterLabel">4</h1>
		</div>
		<div id="_idContainer107" class="ch04">
			<h1 class="chapterTitle"><a id="_idTextAnchor044"></a><a id="_idTextAnchor045"></a>Creating a Simple Page</h1>
			<p class="ChapterTitleSub">(HTML Overview)</p>
		</div>
		<div id="_idContainer108" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In This Chapter</p>
			<p class="chapterContents">An introduction to elements and attributes</p>
			<p class="chapterContents">Marking up a simple web page </p>
			<p class="chapterContents">The elements that provide document structure</p>
			<p class="chapterContents">Troubleshooting broken web pages</p>
		</div>
		<div id="_idContainer166" class="ch04">
			<p class="body"><span class="Xref--Sidebar-">Part I</span> provided a <a id="_idIndexMarker329"></a><a id="_idIndexMarker330"></a><a id="_idIndexMarker331"></a>general overview of the web design environment. Now
				that we’ve covered the big concepts, it’s time to roll up our sleeves and start
				creating a real web page. It will be an extremely simple page, but even the most
				complicated pages are based on the principles described here.</p>
			<p class="body">In this chapter, we’ll create a web page step-by-step so you can get a
				feel for what it’s like to mark up a document with HTML tags. The exercises allow
				you to work along.</p>
			<p class="body">This is what I want you to get out of this chapter:</p>
			<ul>
				<li class="ListBullet">Get a feel for how markup works, including an understanding
					of elements and attributes.</li>
				<li class="ListBullet">See how browsers interpret HTML documents. </li>
				<li class="ListBullet">Learn how HTML documents are structured.</li>
				<li class="ListBullet">Get a first glimpse of a style sheet in action.</li>
			</ul>
			<p class="body">Don’t worry about learning the specific text elements or style sheet
				rules at this point; we’ll get to those in the following chapters. For now, just pay
				attention to the process, the overall structure of the document, and the new
				terminology.</p>
			<h1 id="_idParaDest-28" class="HeadA"><a id="_idTextAnchor046"></a>A Web Page,
				Step-By-Step</h1>
			<p class="body">You got a look at an HTML document in <a href="lwd5_chapter02.xhtml#_idTextAnchor019"><span class="Xref">Chapter
						</span><span class="Xref">2</span><span class="Xref">, How the Web
						Works</span></a>, but now you’ll get to create one yourself and play around
				with it in the browser. The demonstration in this chapter has five steps that cover
				the basics of page production:</p>
			<p class="ListItem"><span class="ListStartItem">Step 1: Start with content.</span><span class="ListStartItem"> </span>As a starting point, we’ll write up raw text
				content and see what browsers do with it.</p>
			<p class="ListItem"><span class="ListStartItem">Step 2: Give the document
					structure.</span><span class="ListStartItem"> </span>You’ll learn about HTML
				element syntax and the elements that set up areas for content and metadata.</p>
			<p class="ListItem"><span class="ListStartItem">Step 3: Identify text
					elements.</span><span class="ListStartItem"> </span>You’ll describe the content
				using the appropriate text elements and learn about the proper way to use HTML.</p>
			<p class="ListItem"><span class="ListStartItem">Step 4: Add an image.</span><span class="ListStartItem"> </span>By adding an image to the page, you’ll learn about
				attributes and empty elements.</p>
			<p class="ListItem"><span class="ListStartItem">Step 5: Change how the text looks with a
					style sheet.</span><span class="ListStartItem"> </span>This exercise gives you a
				taste of formatting content with Cascading Style Sheets.</p>
			<p class="body">By the time we’re finished, you’ll have written the document for the
				page shown in <span class="Xref-Figure">Figure 4-1</span>. It’s not very fancy, but
				you have to start somewhere.</p>
			<div>
				<figure id="_idContainer110" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0401_finalpage.png" alt="" width="1224" height="592"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-1.</span>
						In this chapter, we’ll write the HTML document for this page in five
						steps.</figcaption>
				</figure>
			</div>
			<p class="body">We’ll be checking our work in a browser frequently throughout this
				demonstration—probably more than you would in real life. But because this is an
				introduction to HTML, it’s helpful to see the cause and effect of each small change
				to the source file along the way.</p>
			<h1 id="_idParaDest-29" class="HeadA"><a id="_idTextAnchor047"></a>Launch a Text
				Editor</h1>
			<p class="body">In this chapter <a id="_idIndexMarker332"></a>and throughout the book,
				we’ll be writing out HTML documents by hand, so the first thing we need to do is
				launch a text editor. The text editor that is provided with your operating system,
				such as <a id="_idIndexMarker333"></a>Notepad (Windows) or <a id="_idIndexMarker334"></a>TextEdit (Macintosh), will do for these purposes. Other text editors are fine
				as long as you can save plain-text files with the <span class="Filename">.html</span> extension. If you have a visual web-authoring tool such as <a id="_idIndexMarker335"></a>Dreamweaver, set it aside for now. I want you to get
				a feel for marking up a document manually (see the sidebar <span class="Xref">“HTML
					the Hard Way”</span>).</p>
			<div>
				<div id="_idContainer111" class="sidebar">
					<h5 class="SidebarTitle">HTML the Hard Way</h5>
					<p class="SidebarBody">I stand by my <a id="_idIndexMarker336"></a><a id="_idIndexMarker337"></a>method of teaching HTML the old-fashioned
							way—<em class="Emphasis">by hand</em>. There’s no better way to truly
						understand how markup works than typing it out, one tag at a time, and then
						opening your page in a browser. It doesn’t take long to develop a feel for
						marking up documents properly.</p>
					<p class="SidebarBody">Although you may choose to use a visual or drag-and-drop
						web-authoring tool down the line, understanding HTML will make using your
						tools easier and more efficient. In addition, you will be glad that you can
						look at a source file and understand what you’re seeing. It is also crucial
						for troubleshooting broken pages or fine-tuning the default formatting that
						web tools produce. </p>
					<p class="SidebarBody">And for what it’s worth, professional web developers tend
						to mark up content manually for better control over the code and the ability
						to make deliberate decisions about what elements to use.</p>
				</div>
			</div>
			<p class="body">This section shows how to open new documents in Notepad and TextEdit.
				Even if you’ve used these programs before, skim through for some special settings
				that will make the exercises go more smoothly. We’ll start with Notepad; Mac users
				can jump ahead.</p>
			<h2 class="HeadB">Creating a New Document in Notepad (Windows)</h2>
			<p class="body">These are the steps to<a id="_idIndexMarker338"></a><a id="_idIndexMarker339"></a> creating a new document in Notepad on Windows 10
					(<span class="Xref-Figure">Figure 4-2</span>):</p>
			<div>
				<figure id="_idContainer113" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0402_notepad-ebook.png" alt="" width="1337" height="1085"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-2.</span>
						Creating a new document in Notepad.</figcaption>
				</figure>
			</div>
			<ol>
				<li class="ListNumber">Search for “Notepad” to access it quickly. Click on Notepad
					to open a new document window, and you’re ready to start typing. <span class="AlphaBullet--11pt-">1</span></li>
				<li class="ListNumber">Next, make the extensions visible. This step is not required
					to make HTML documents, but it will help make the file types clearer at a
					glance. Open the File Explorer, select the View tab, and then select the Options
					button on the right. In the Folder Options panel, select the View tab again.
						<span class="AlphaBullet--11pt-">2</span>
				</li>
				<li class="ListNumber">Find “Hide extensions for known file types” and uncheck that
					option. <span class="AlphaBullet--11pt-">3</span>
				</li>
				<li class="ListNumber">Click OK to save the preference <span class="AlphaBullet--11pt-">4</span>, and the file extensions will now be
					visible.</li>
			</ol>
			<h2 class="HeadB">Creating a New Document in TextEdit (macOS)</h2>
			<p class="body">By default, TextEdit <a id="_idIndexMarker340"></a><a id="_idIndexMarker341"></a><a id="_idIndexMarker342"></a><a id="_idIndexMarker343"></a>creates <span class="FirstTerm">rich-text</span>
				documents—that is, documents that have hidden style-formatting instructions for
				making text bold, setting font size, and so on. You can tell that TextEdit is in
				rich-text mode when it has a formatting toolbar at the top of the window (plain-text
				mode does not). HTML documents need to be plain-text documents, so we’ll need to
				change the format, as shown in this example (<span class="Xref-Figure">Figure
					4-3</span>):</p>
			<div>
				<figure id="_idContainer115" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0403_textedit-ebook.png" alt="" width="1337" height="1300"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-3.</span>
						Launching TextEdit and choosing “Plain text” settings in the
						Preferences.</figcaption>
				</figure>
			</div>
			<ol>
				<li class="ListNumber" value="1">Use the Finder to look in the Applications folder
					for TextEdit. When you’ve found it, double-click the name or icon to launch the
					application. </li>
				<li class="ListNumber">In the initial TextEdit dialog box, click the New Document
					button in the bottom-left corner. If you see the text formatting menu and tab
					ruler at the top of the Untitled document, you are in rich-text mode <span class="Circle-Frame-Neg">1</span>. If you don’t, you are in plain-text mode
						<span class="Circle-Frame-Neg">2</span>. Either way, there are some
					preferences you need to set. </li>
				<li class="ListNumber">Close that document, and open the Preferences dialog box from
					the TextEdit menu.</li>
				<li class="ListNumber">Change these preferences:<p class="ListNumber_cont">On the
						New Document tab, select Plain text <span class="Circle-Frame-Neg">3</span>.
						Under Options, deselect all of the automatic formatting options <span class="Circle-Frame-Neg">4</span>.</p><p class="ListNumber_cont">On the
						Open and Save tab, select Display HTML files as HTML Code <span class="Circle-Frame-Neg">5</span> and deselect “Add ‘.txt’ extensions to
						plain text files” <span class="Circle-Frame-Neg">6</span>. The rest of the
						defaults should be fine.</p></li>
				<li class="ListNumber">When you are done, click the red button in the top-left
					corner.</li>
				<li class="ListNumber">Now create a new document by selecting <span class="menu">File </span><span class="menu">→</span><span class="menu"> New. </span>The
					formatting menu will no longer be there, and you can save your text as an HTML
					document. You can always convert a document back to rich text by selecting <span class="menu">Format </span><span class="menu">→</span><span class="menu">
						Make Rich Text</span> when you are not using TextEdit for HTML.</li>
			</ol>
			<h1 id="_idParaDest-30" class="HeadA"><a id="_idTextAnchor048"></a>Step 1: Start with
				Content</h1>
			<p class="body">Now that we have our new document, it’s time to get typing. A web page
				is all about content, so that’s where we begin our demonstration. <span class="Xref-Figure">Exercise 4-1</span> walks you through entering the raw text
				content and saving the document in a new folder.</p>
			<div>
				<div id="_idContainer120" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 4-1.</span>
						Entering content</h6>
					<ol>
						<li class="SidebarListNumber" value="1">Type the home page content below
							into the new document in your text editor. Copy it exactly as you see it
							here, keeping the line breaks the same for the sake of playing along.
							The raw text for this exercise is also available online at <span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials/</span>.
							<pre class="SidebarCodeFirst">Black Goose Bistro<br/>  <br/>The Restaurant <br/>The Black Goose Bistro offers casual lunch and dinner fare in a relaxed atmosphere. The menu changes regularly to highlight the freshest local ingredients.<br/> <br/>Catering <br/>You have fun. We'll handle the cooking. Black Goose Catering can handle events from snacks for a meetup to elegant corporate fundraisers.<br/> <br/>Location and Hours <br/>Seekonk, Massachusetts;<br/>Monday through Thursday 11am to 9pm; Friday and Saturday, 11am to midnight</pre></li>
						<li class="SidebarListNumber">Select “Save” or “Save as” <a id="_idIndexMarker344"></a>from the File menu to get the Save As
							dialog box (<span class="Xref-Figure">Figure 4-4</span>). The first
							thing you need to do is create a new folder (click the New Folder button
							on both Windows and Mac) that will contain all of the files for the
							site. The technical name for the folder that contains everything is the
								<span class="FirstTerm--Sidebar-">local root directory</span>.
								<figure id="_idContainer117" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_0404_newfolder.png" alt="" width="1388" height="775"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-4.</span> Saving <span class="Filename--Sidebar-">index.html</span> in a new folder
									called <span class="Filename--Sidebar-">bistro</span>.</figcaption></figure><p class="SidebarListItem_cont">Name the new folder <span class="Filename--Sidebar-">bistro</span>, and save the text file
								as <span class="Filename--Sidebar-">index.html</span> in it. The
								filename needs to end in <span class="Filename--Sidebar-">.html
								</span>to be recognized by the browser as a web document. See the
								sidebar <span class="Xref--Sidebar-">“Naming Conventions”</span> for
								more tips on naming files.</p></li>
						<li class="SidebarListNumber">Just for kicks, let’s take a look at <span class="Filename--Sidebar-">index.html</span><span class="Filename"> </span>in a browser. <p class="SidebarListItem_cont"><em class="Emphasis">Windows users:</em> Double-click the filename
								in the File Explorer to launch your default browser, or right-click
								the file for the option to open it in the browser of your
								choice.</p><p class="SidebarListItem_cont">Mac users: Launch your
								favorite browser (I’m using Google Chrome) and choose Open or Open
								File from the File menu. Navigate to <span class="Filename--Sidebar-">index.html</span>, and then select
								the document to open it in the browser. </p></li>
						<li class="SidebarListNumber">You should see something like the page shown
							in <span class="Xref-Figure">Figure 4-5</span>. We’ll talk about the
							results in the following section.<figure id="_idContainer119" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_0405_ex1.png" alt="" width="1321" height="761"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure
										4-5.</span> A first look at the content in a
									browser.</figcaption></figure></li>
					</ol>
				</div>
			</div>
			<div>
				<div id="_idContainer121" class="sidebar">
					<h5 class="SidebarTitle">Naming Conventions</h5>
					<p class="SidebarBody">It is important <a id="_idIndexMarker345"></a><a id="_idIndexMarker346"></a><a id="_idIndexMarker347"></a>that you follow
						these rules and conventions when naming your files:</p>
					<p class="Sidebar-ListItem"><span class="ListStartItem--Sidebar-">Use proper
							suffixes for your files.</span> HTML files must end with <span class="Filename--Sidebar-">.html</span> or <span class="Filename--Sidebar-">.htm</span>. Web graphics must be labeled
						according to their file format: <span class="Filename--Sidebar-">.gif</span>, <span class="Filename--Sidebar-">.png</span>, <span class="Filename--Sidebar-">.jpg</span> (<span class="Filename--Sidebar-">.jpeg</span> is also acceptable, although less common), or <span class="Filename--Sidebar-">.svg</span>.</p>
					<p class="Sidebar-ListItem"><span class="ListStartItem--Sidebar-">Never use
							character spaces within filenames.</span> It is common to use an
						underline <a id="_idIndexMarker348"></a><a id="_idIndexMarker349"></a><a id="_idIndexMarker350"></a>character or hyphen to visually separate
						words within filenames, such as <span class="Filename--Sidebar-">robbins_bio.html</span> or <span class="Filename--Sidebar-">robbins-bio.html</span>.</p>
					<p class="Sidebar-ListItem"><span class="ListStartItem--Sidebar-">Avoid special
							characters</span> such as <span class="Literal-Sidebar">?</span>, <span class="Literal-Sidebar">%</span>, <span class="Literal-Sidebar">#</span>, <span class="Literal-Sidebar">/</span>, <span class="Literal-Sidebar">:</span>, <span class="Literal-Sidebar">;</span>, •, etc. Limit filenames to letters, numbers, underscores,
						hyphens, and periods. It is also best to avoid international characters,
						such as the Swedish å.</p>
					<p class="Sidebar-ListItem"><span class="ListStartItem--Sidebar-">Filenames may
							be case-sensitive,</span> depending on your server configuration.
						Consistently using all lowercase letters in filenames, although not
						required, is one way to make your filenames easier to manage.</p>
					<p class="Sidebar-ListItem"><span class="ListStartItem--Sidebar-">Keep filenames
							short.</span> Long names are more likely to be misspelled, and short
						names shave a few extra bytes off the file size. If you really must give the
						file a long, multiword name, you can separate words with hyphens, such as
							<span class="Filename--Sidebar-">a-long-document-title.html</span>, to
						improve readability.</p>
					<p class="Sidebar-ListItem"><span class="ListStartItem--Sidebar-">Self-imposed
							conventions.</span> It is helpful to develop a consistent naming scheme
						for huge sites—for instance, always using lowercase with hyphens between
						words. This takes some of the guesswork out of remembering what you named a
						file when you go to link to it later.</p>
				</div>
			</div>
			<h2 class="HeadB">Learning from Step 1</h2>
			<p class="body">Our page isn’t looking so good (<span class="Xref-Figure">Figure
					4-5</span>). The text is all run together into one block—that’s not how it
				looked when we typed it into the original document. There are a couple of lessons to
				be learned here. The first thing that is apparent is that the <a id="_idIndexMarker351"></a>browser ignores line breaks in the source document.
				The sidebar <span class="Xref">“What Browsers Ignore”</span> lists other types of
				information in the source document that are not displayed in the browser window.</p>
			<p class="body">Second, we see that simply typing in some content and naming the
				document <span class="Filename">.html </span>is not enough. While the browser can
				display the text from the file, we haven’t indicated the <em class="Emphasis">structure</em> of the content. That’s where HTML comes in. We’ll use markup to
				add structure: first to the HTML document itself (coming up in Step 2), then to the
				page’s content (Step 3). Once the browser knows the structure of the content, it can
				display the page in a more meaningful way.</p>
			<div>
				<div id="_idContainer122" class="sidebar">
					<h5 class="SidebarTitle">What Browsers Ignore</h5>
					<p class="SidebarBody">The following information in the source document will be
						ignored when it is viewed in a browser:</p>
					<p class="SidebarListVariableTerm">Multiple-character (white) spaces </p>
					<p class="SidebarListVariable">When a <a id="_idIndexMarker352"></a>browser
						encounters more than one consecutive blank character space, it displays a
						single space. So if the document contains</p>
					<pre class="SidebarCodeFirst">long,      long        ago</pre>
					<p class="SidebarListItem_cont">the browser displays:</p>
					<pre class="SidebarCodeFirst">long, long ago</pre>
					<p class="SidebarListVariableTerm">Line breaks (carriage returns). </p>
					<p class="SidebarListVariable">Browsers convert carriage returns to white
						spaces, so following the earlier “ignore multiple white spaces” rule, line
						breaks have no effect on formatting the page.</p>
					<p class="SidebarListVariableTerm">Tabs<span class="ListStartItem--Sidebar-"> </span></p>
					<p class="SidebarListVariable">Tabs <a id="_idIndexMarker353"></a>are also
						converted to character spaces, so guess what? They’re useless for indenting
						text on the web page (although they may make your code more readable).</p>
					<p class="SidebarListVariableTerm">Unrecognized markup</p>
					<p class="SidebarListVariable">Browsers <a id="_idIndexMarker354"></a>are
						instructed to ignore any tag they don’t understand or that was specified
						incorrectly. Depending on the element and the browser, this can have varied
						results. The browser may display nothing at all, or it may display the
						contents of the tag as though it were normal text.</p>
					<p class="SidebarListVariableTerm">Text in comments </p>
					<p class="SidebarListVariable">Browsers <a id="_idIndexMarker355"></a>do not
						display text between the special <span class="Literal-Sidebar">&lt;!--
						</span>and <span class="Literal-Sidebar">--&gt;</span> tags used to denote a
						comment. See the upcoming <span class="Xref--Sidebar-">“Adding Hidden
							Comments”</span> sidebar.</p>
				</div>
			</div>
			<h1 id="_idParaDest-31" class="HeadA"><a id="_idTextAnchor049"></a>Step 2: Give the HTML
				Document Structure</h1>
			<p class="body">We have our<a id="_idIndexMarker356"></a>
				<a id="_idIndexMarker357"></a>content saved in an HTML document—now we’re ready to
				start marking it up. </p>
			<h2 class="HeadB">The Anatomy of an HTML Element</h2>
			<p class="body">Back in <a id="_idIndexMarker358"></a><a href="lwd5_chapter02.xhtml#_idTextAnchor019"><span class="Xref">Chapter
						</span><span class="Xref">2</span></a> you saw examples of elements with an
				opening tag (<span class="Literal-fc">&lt;p&gt;</span> for a paragraph, for example)
				and a closing tag (<span class="Literal-fc">&lt;/p&gt;</span>). Before we start
				adding tags to our document, let’s look at the anatomy of an HTML element <a id="_idIndexMarker359"></a><a id="_idIndexMarker360"></a>(its <span class="FirstTerm">syntax</span>) and firm up some important terminology. A
				generic container element is labeled in <span class="Xref-Figure">Figure
				4-6</span>.</p>
			<div>
				<figure id="_idContainer124" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0406.png" alt="" width="1338" height="594"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-6.</span>
						The parts of an HTML container element.</figcaption>
				</figure>
			</div>
			<p class="body">Elements are identified by tags in the text source. A <span class="FirstTerm">tag</span> consists <a id="_idIndexMarker361"></a>of the
				element name (usually an abbreviation of a longer descriptive name) within angle <a id="_idIndexMarker362"></a><a id="_idIndexMarker363"></a>brackets (<span class="Literal-fc">&lt; &gt;</span>). The browser knows that any text within
				brackets is hidden and not displayed in the browser window.</p>
			<p class="body">The element name appears <a id="_idIndexMarker364"></a>in the <span class="FirstTerm">opening tag</span> (also called a <span class="FirstTerm">start tag</span>) and again in <a id="_idIndexMarker365"></a><a id="_idIndexMarker366"></a>the <span class="FirstTerm">closing</span> (or <span class="FirstTerm">end</span>) <span class="FirstTerm">tag</span> preceded by a
					<a id="_idIndexMarker367"></a><a id="_idIndexMarker368"></a>slash (<span class="Literal-fc">/</span>). The closing tag works something like an “off”
				switch for the element. Be careful not to use the similar backslash character in end
				tags (see the tip <span class="Xref">“Slash Versus Backslash”</span>). </p>
			<div>
				<div id="_idContainer127" class="sidebar">
					<h5 class="SidebarSeries">MARKUP Tip</h5>
					<h5 class="SidebarTitle">Slash Versus Backslash</h5>
					<p class="SidebarBody">HTML tags<a id="_idIndexMarker369"></a><a id="_idIndexMarker370"></a><a id="_idIndexMarker371"></a> and URLs use
						the slash character (/). The slash character is found under the question
						mark (?) on the English QWERTY keyboard (key placement on keyboards in other
						countries may vary).</p>
					<p class="SidebarBody">It is easy to confuse the slash with the backslash
						character (\), which is found under the bar character (|); see <span class="Xref-Figure">Figure 4-7</span>. The backslash key will not work
						in tags or URLs, so be careful not to use it.</p>
					<div>
						<figure id="_idContainer126" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_0407_keys.png" alt="" width="577" height="192"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure
									4-7.</span> Slash versus backslash keys.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<p class="body">The tags added around content are referred to as the <span class="FirstTerm">markup</span>. It is important to note that <a id="_idIndexMarker372"></a>an<span class="FirstTerm"> element</span> consists of
				both the content <em class="Emphasis">and</em> its markup (the start and end tags).
				Not all elements have content, however. Some are <span class="FirstTerm">empty</span> by definition, such as the <span class="Literal-fc">img</span>
				element <a id="_idIndexMarker373"></a><a id="_idIndexMarker374"></a><a id="_idIndexMarker375"></a>used to add an image to the page. We’ll talk about
				empty elements a little later in this chapter. </p>
			<p class="body">One last thing: <a id="_idIndexMarker376"></a><a id="_idIndexMarker377"></a>capitalization. In HTML, the capitalization of element names is not important
				(it is not case-sensitive). So <span class="Literal-fc">&lt;img&gt;</span>, <span class="Literal-fc">&lt;Img&gt;</span>, and <span class="Literal-fc">&lt;IMG&gt;</span> are all the same as far as the browser is concerned.
				However, most developers prefer the consistency of writing element names in all
				lowercase (see <span class="Xref">Note</span>), as I will be doing throughout this
				book.</p>
			<div>
				<div id="_idContainer128" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">There is a stricter version of HTML called XHTML <a id="_idIndexMarker378"></a><a id="_idIndexMarker379"></a><a id="_idIndexMarker380"></a><a id="_idIndexMarker381"></a><a id="_idIndexMarker382"></a><a id="_idIndexMarker383"></a>that requires
						all element and attribute names to appear in lowercase. HTML5 has made XHTML
						all but obsolete except for certain use cases when it is combined with other
						XML languages, but the preference for all lowercase element names has
						persisted. </p>
				</div>
			</div>
			<h2 class="HeadB">Basic Document Structure</h2>
			<p class="body"><span class="Xref-Figure">Figure 4-8</span> shows the <a id="_idIndexMarker384"></a><a id="_idIndexMarker385"></a>recommended minimal
				skeleton of an HTML document. I say “recommended” because the only element that is
					<em class="Emphasis">required</em> in HTML is the <span class="Literal-fc">title</span>. <a id="_idIndexMarker386"></a>But I feel it is better,
				particularly for beginners, to explicitly organize documents into metadata (<span class="Literal-fc">head</span>) and content (<span class="Literal-fc">body</span>) areas. Let’s take a look at what’s going on in this minimal markup
				example. </p>
			<div>
				<figure id="_idContainer130" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0408.png" alt="" width="1338" height="776"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-8.</span>
						The minimal structure of an HTML document includes <span class="Literal-Sidebar">head</span> and <span class="Literal-Sidebar">body</span> contained within the <span class="Literal-Sidebar">html</span> root element.</figcaption>
				</figure>
			</div>
			<ol>
				<li class="ListNumber-Circle-Frame-Neg" value="1">I don’t want to confuse things,
					but the first line in the example isn’t an element at all. It is <a id="_idIndexMarker387"></a>a <span class="FirstTerm">document type
						declaration</span> (also called <span class="FirstTerm">DOCTYPE
						declaration</span>) that lets modern browsers know which HTML specification
					to use to interpret the document. This DOCTYPE identifies the document as
					written in HTML5. </li>
				<li class="ListNumber-Circle-Frame-Neg">The entire document is contained within an
						<span class="Literal-fc">html</span> element. The <span class="Literal-fc">html</span> element is called<a id="_idIndexMarker388"></a> the <span class="FirstTerm">root element</span> because it contains all the elements
					in the document, and it may not be contained within any other element. </li>
				<li class="ListNumber-Circle-Frame-Neg">Within the <span class="Literal-fc">html</span> element, the document is divided into <a id="_idIndexMarker389"></a>a <span class="FirstTerm">head</span> and a <span class="FirstTerm">body</span>. The <a id="_idIndexMarker390"></a><span class="Literal-fc">head</span> element contains elements that pertain to the document that are
					not rendered as part of the content, such as its title, style sheets, scripts,
					and metadata.</li>
				<li class="ListNumber-Circle-Frame-Neg"><span class="Literal-fc">meta</span>
					elements provide <a id="_idIndexMarker391"></a><a id="_idIndexMarker392"></a>document <span class="FirstTerm">metadata</span>, information about the
					document. In this case, it specifies <a id="_idIndexMarker393"></a><a id="_idIndexMarker394"></a>the <span class="FirstTerm">character
						encoding</span> (a standardized collection of letters, numbers, and symbols)
					used in the document as <a id="_idIndexMarker395"></a><a id="_idIndexMarker396"></a>Unicode version UTF-8 (see the sidebar<span class="Xref--Sidebar-"> </span><span class="Xref">“Introducing Unicode”</span>). I don’t want to
					go into too much detail on this right now, but know that there are many good
					reasons for specifying <a id="_idIndexMarker397"></a>the <span class="Literal-fc">charset</span> in every document, so I have included it
					as part of the minimal document markup. Other types of metadata provided by the
						<span class="Literal-fc">meta</span> element are the author, keywords,
					publishing status, and a description that can be used by search engines.</li>
				<li class="ListNumber-Circle-Frame-Neg">Also in the <span class="Literal-fc">head</span> is the mandatory <span class="Literal-fc">title</span> element.
					According to the HTML specification, every document must contain a descriptive
					title. </li>
				<li class="ListNumber-Circle-Frame-Neg">Finally, the <span class="Literal-fc">body</span> element contains everything that we want to show up in the
					browser window. <div id="_idContainer131" class="sidebar">
						<h5 class="SidebarTitle">Introducing Unicode</h5>
						<p class="SidebarBody">All the characters that make up languages are stored
							in computers as numbers. A standardized collection of characters with
							their reference <a id="_idIndexMarker398"></a>numbers (<span class="FirstTerm--Sidebar-">code points</span>) is called <a id="_idIndexMarker399"></a>a <span class="FirstTerm--Sidebar-">coded
								character set</span>, and the way in which those characters are
							converted to bytes for use by computers is the <span class="FirstTerm--Sidebar-">character encoding</span>. In the early
							days of computing, computers used limited character sets such as <a id="_idIndexMarker400"></a>ASCII that contained 128 characters
							(letters from Latin languages, numbers, and common symbols). The early
							web used the Latin-1 (ISO 8859-1) character encoding that included 256
							Latin characters from most Western languages. But given the web was
							“worldwide,” it was clearly not sufficient.</p>
						<p class="SidebarBody">Enter Unicode. <span class="FirstTerm--Sidebar-">Unicode</span> (also called the <span class="FirstTerm--Sidebar-">Universal Character Set</span>) is a super-character set that
							contains over 136,000 characters (letters, numbers, symbols, ideograms,
							logograms, etc.) from all active modern languages. You can read all
							about it at <span class="URL-Email--Sidebar-">unicode.org</span>.
							Unicode has three standard encodings—UTF-8, UTF-16, and UTF-32—that
							differ in the number of bytes used to represent the characters (1, 2, or
							4, respectively). </p>
						<p class="SidebarBody">HTML5 uses the UTF-8 encoding by default, which
							allows wide-ranging languages to be mixed within a single document. It
							is always a good idea to declare the character encoding for a document
							with the <span class="Literal-fc">meta</span> element, as shown in the
							previous example. Your server also needs to be configured to identify
							HTML documents as UTF-8 in <a id="_idIndexMarker401"></a>the <span class="FirstTerm--Sidebar-">HTTP header</span> (information about
							the document that the server sends to the user agent). You can ask your
							server administrator to confirm the encoding of the HTML documents. </p>
					</div></li>
			</ol>
			<p class="body">Are you ready to start marking up the Black Goose Bistro home page? Open
				the <span class="Filename">index.html</span> document in your text editor and move
				on to <span class="Xref-Figure">Exercise 4-2</span>.</p>
			<div>
				<div id="_idContainer134" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 4-2.</span>
						Adding minimal structure</h6>
					<ol>
						<li class="SidebarListNumber" value="1">Open the new <span class="Filename--Sidebar-">index.html</span> document if it isn’t
							open already and add the DOCTYPE
							declaration:<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;!DOCTYPE html&gt;</code></pre></li>
						<li class="SidebarListNumber">Put the entire document in an HTML root
							element by adding an <span class="Literal-Sidebar">&lt;html&gt;</span>
							start tag after the DOCTYPE and an <span class="Literal-Sidebar">&lt;/html&gt;</span> end tag at the very end of the text.</li>
						<li class="SidebarListNumber">Next, create the document head that contains
							the title for the page. Insert <span class="Literal-Sidebar">&lt;head&gt;</span> and <span class="Literal-Sidebar">&lt;/head&gt;</span> tags before the content. Within the <span class="Literal-fc">head</span> element, add information about the
							character encoding <span class="Literal-Sidebar">&lt;meta
								charset="utf-8"&gt;</span>, and the title, “Black Goose
							Bistro”, surrounded by opening and closing <span class="Literal-Sidebar">&lt;title&gt;</span> tags.</li>
						<li class="SidebarListNumber">Finally, define the body of the document by
							wrapping the text content in <span class="Literal-Sidebar">&lt;body&gt;</span> and <span class="Literal-Sidebar">&lt;/body&gt;</span> tags. When you are done, the source document
							should look like this (the markup is shown in color to make it stand
							out):
							<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;!DOCTYPE html&gt;</code><br/><code class="CodeColor">&lt;html&gt;</code><br/> <br/><code class="CodeColor">&lt;head&gt;<br/>  &lt;meta charset="utf-8"&gt;<br/>  &lt;title&gt;</code>Black Goose Bistro<code class="CodeColor">&lt;/title&gt;<br/>&lt;/head&gt;</code> <br/><code class="CodeColor">&lt;body&gt;</code><br/>Black Goose Bistro <br/> <br/>The Restaurant <br/>The Black Goose Bistro offers casual lunch and dinner fare in a relaxed atmosphere. The menu changes regularly to highlight the freshest local ingredients.<br/> <br/>Catering <br/>You have fun. We'll handle the cooking. Black Goose Catering can handle events from snacks for a meetup to elegant corporate fundraisers.<br/> <br/>Location and Hours <br/>Seekonk, Massachusetts;<br/>Monday through Thursday 11am to 9pm; Friday and Saturday, 11am to midnight <br/><code class="CodeColor">&lt;/body&gt;</code> <br/><code class="CodeColor">&lt;/html&gt;</code><code class="CodeColor"> </code></pre></li>
						<li class="SidebarListNumber">Save the document in the <span class="Filename--Sidebar-">bistro</span><span class="Filename"> </span>directory, so that it overwrites the old version. Open the file
							in the browser or hit Refresh or Reload if it is open already. <span class="Xref-Figure">Figure 4-9</span> shows how it should look now.
								<figure id="_idContainer133" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_0409_ex2.png" alt="" width="1338" height="799"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-9.</span> The page in a browser
									after the document structure elements have been
									defined.</figcaption></figure></li>
					</ol>
				</div>
			</div>
			<p class="body">Not much has changed in the bistro page after setting up the document,
				except that the browser now displays the title of the document in the top bar or tab
					(<span class="Xref-Figure">Figure 4-9</span>). If someone were to bookmark this
				page, that title would be added to their Bookmarks or Favorites list as well (see
				the sidebar <span class="Xref">“Don’t Forget a Good Title”</span>). But the content
				still runs together because we haven’t given the browser any indication of how it
				should be structured. We’ll take care of that next.</p>
			<div>
				<div id="_idContainer135" class="sidebar">
					<h5 class="SidebarTitle">Don’t Forget a Good Title</h5>
					<p class="SidebarBody">A <span class="Literal-Sidebar">title</span> element is
						not only required for every document, but it is also quite useful. The title
						is what is displayed in a user’s Bookmarks or Favorites list and on tabs in
						desktop browsers. Descriptive titles are also a key tool for improving
						accessibility, as they are the first things a person hears when using a <a id="_idIndexMarker402"></a>screen reader (an assistive device that reads
						the content of a page aloud for users with impaired sight). Search engines
						rely heavily on document titles as well. </p>
					<p class="SidebarBody">For these reasons, it’s important to provide thoughtful
						and descriptive titles for all your documents and avoid vague titles, such
						as “Welcome” or “My Page.” You may also want to keep the length of your
						titles in check so they are able to display in the browser’s title area.
						Knowing that users typically have a number of tabs open or a long list of
						Bookmarks, put your most uniquely identifying information in the first 20 or
						so characters.</p>
				</div>
			</div>
			<h1 id="_idParaDest-32" class="HeadA"><a id="_idTextAnchor050"></a>Step 3: Identify Text
				Elements</h1>
			<p class="body">With a little <a id="_idIndexMarker403"></a><a id="_idIndexMarker404"></a>markup experience under your belt, it should be a no-brainer to add the markup
				for headings and subheads (<span class="Literal-fc">h1</span> and <span class="Literal-fc">h2</span>), paragraphs (<span class="Literal-fc">p</span>),
				and emphasized text (<span class="Literal-fc">em</span>) to our content, as we’ll do
				in <span class="Xref-Figure">Exercise 4-3</span>. However, before we begin, I want
				to take a moment to talk about what we’re doing and not doing when marking up
				content with HTML.</p>
			<h2 class="HeadB">Mark It Up Semantically</h2>
			<p class="body">The purpose of<a id="_idIndexMarker405"></a><a id="_idIndexMarker406"></a><a id="_idIndexMarker407"></a><a id="_idIndexMarker408"></a> HTML is to add
				meaning and structure to the content. It is <em class="Emphasis">not</em> intended
				to describe how the content should look (its presentation). </p>
			<p class="body">Your job when marking up content is to choose the HTML element that
				provides the most meaningful description of the content at hand. In the biz, we call
				this <span class="FirstTerm">semantic markup</span>. For example, the most important
				heading at the beginning of the document should be marked up as an <span class="Literal-fc">h1</span> because it is the most important heading on the
				page. Don’t worry about what it looks like…you can easily change that with a style
				sheet. The important thing is that you choose elements based on what makes the most
				sense for the content.</p>
			<div>
				<div id="_idContainer136" class="callout">
					<p class="callout">The purpose of HTML is to add meaning and structure to the
						content.</p>
				</div>
			</div>
			<p class="body">In addition to adding meaning to content, the markup gives the document
				structure. <a id="_idIndexMarker409"></a>The way elements follow each other or nest
				within one another creates relationships between them. You can think of this
				structure as an outline (its technical name is<a id="_idIndexMarker410"></a> the
					<span class="FirstTerm">DOM</span>, for <span class="FirstTerm">Document Object
					Model</span>). The underlying document hierarchy gives browsers cues on how to
				handle the content. It is also the foundation upon which we add <a id="_idIndexMarker411"></a>presentation instructions with style sheets and
				behaviors with JavaScript. </p>
			<p class="body">Although HTML was intended to be used strictly for meaning and structure
				since its creation, that mission was somewhat thwarted in the early years of the
				web. With no style sheet system in place, HTML was extended to give authors ways to
				change the appearance of fonts, colors, and alignment using markup alone. Those
				presentational extras are still out there, so you may run across them if you view
				the source of older sites or a site made with old tools. In this book, however, I’ll
				focus on using HTML the right way, in keeping with the contemporary standards-based,
				semantic approach to web design.</p>
			<p class="body">OK, enough lecturing. It’s time to get to work on that content in <span class="Xref-Figure">Exercise 4-3</span>.</p>
			<div>
				<div id="_idContainer139" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 4-3.</span>
						Defining text elements</h6>
					<ol>
						<li class="SidebarListNumber" value="1">Open the <a id="_idIndexMarker412"></a>document <span class="Filename--Sidebar-">index.html</span> in your
							text editor, if it isn’t open already.</li>
						<li class="SidebarListNumber">The first line of text, “Black Goose Bistro,”
							is the main heading for the page, so we’ll mark it up as a Heading Level
							1 (<span class="Literal-Sidebar">h1</span>) element. Put the opening
							tag, <span class="Literal-Sidebar">&lt;h1&gt;</span>, at the beginning
							of the line and the closing tag, <span class="Literal-fc">&lt;/h1&gt;</span>, after it, like this:
							<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;h1&gt;</code>Black Goose Bistro<code class="CodeColor">&lt;/h1&gt;</code></pre></li>
						<li class="SidebarListNumber">Our page also has three subheads. Mark them up
							as Heading Level 2 (<span class="Literal-Sidebar">h2</span>) elements in
							a similar manner. I’ll do the first one here; you do the same for
							“Catering” and “Location and
							Hours.”<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;h2&gt;</code>The Restaurant<code class="CodeColor">&lt;/h2&gt;</code></pre></li>
						<li class="SidebarListNumber">Each <span class="Literal-Sidebar">h2</span>
							element is followed by a brief paragraph of text, so let’s mark those up
							as paragraph (<span class="Literal-Sidebar">p</span>) elements in a
							similar manner. Here’s the first one; you do the rest:
							<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;p&gt;</code>The Black Goose Bistro offers casual lunch and dinner fare in a relaxed atmosphere. The menu changes regularly to highlight the freshest local ingredients<code class="CodeColor">.&lt;/p&gt;</code></pre></li>
						<li class="SidebarListNumber">Finally, in the Catering section, I want to
							emphasize that visitors should just leave the cooking to us. To make
							text emphasized, mark it up in an emphasis element (<span class="Literal-Sidebar">em</span>) element, as shown
							here:<pre class="SidebarCodeFirst">&lt;p&gt;You have fun. <code class="CodeColor">&lt;em&gt;</code>We'll handle the cooking.<code class="CodeColor">&lt;/em&gt;</code> Black Goose Catering can handle events from snacks for a meetup to elegant corporate fundraisers.&lt;/p&gt;</pre></li>
						<li class="SidebarListNumber">Now that we’ve marked up the document, let’s
							save it as we did before, and open (or reload) the page in the browser.
							You should see a page that looks much like the one in <span class="Xref-Figure">Figure 4-10</span>. If it doesn’t, check your
							markup to be sure that you aren’t missing any angle brackets or a slash
							in a closing tag.</li>
					</ol>
					<div>
						<figure id="_idContainer138" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_0410_ex3.png" alt="" width="1321" height="858"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure
									4-10.</span> The home page after the content has been marked up
								with HTML elements.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<p class="body">Now we’re getting somewhere. With the elements properly identified, the
				browser can now display the text in a more meaningful manner. There are a few
				significant things to note about what’s happening in <span class="Xref-Figure">Figure 4-10</span>.</p>
			<h2 class="HeadB">Block and Inline Elements</h2>
			<p class="body">Although it may seem <a id="_idIndexMarker413"></a><a id="_idIndexMarker414"></a><a id="_idIndexMarker415"></a><a id="_idIndexMarker416"></a><a id="_idIndexMarker417"></a>like stating the
				obvious, it’s worth pointing out that the heading and paragraph elements start on
				new lines and do not run together as they did before. That is because by default,
				headings and paragraphs display as <span class="FirstTerm">block elements</span>.
				Browsers treat block elements as though they are in little rectangular boxes,
				stacked up in the page. Each block element begins on a new line, and some space is
				also usually added above and below the entire element by default. In <span class="Xref-Figure">Figure 4-11</span>, the edges of the block elements are
				outlined in red.</p>
			<div>
				<figure id="_idContainer141" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0411_outlined.png" alt="" width="1321" height="858"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-11.</span>
						The outlines show the structure of the elements in the home
						page.</figcaption>
				</figure>
			</div>
			<p class="body">By contrast, look at the text we marked up as emphasized (<span class="Literal-fc">em</span>, outlined in blue in <span class="Xref-Figure">Figure 4-11</span>). It does not start a new line, but rather stays in the flow
				of the paragraph. That is because the <span class="Literal-fc">em</span> element is
				an <span class="FirstTerm">inline element</span> (also called a <span class="FirstTerm">text-level semantic element</span> or <span class="FirstTerm">phrasing element</span>). Inline elements do not start new lines; they just go
				with the flow. </p>
			<div>
				<div id="_idContainer142" class="sidebar">
					<h5 class="SidebarTitle">Adding Hidden Comments</h5>
					<p class="SidebarBody">You can leave notes in the source document for yourself
						and others by marking them up as <span class="FirstTerm--Sidebar-">comments</span>. Anything you put between comment tags (<span class="Literal-Sidebar">&lt;!-- --&gt;</span>) will not display in the
						browser and will not have any effect on the rest of the source:</p>
					<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;!-- </code>This is a comment <code class="CodeColor">--&gt;</code></pre>
					<pre class="SidebarCode"><code class="CodeColor">&lt;!--</code> This is a<br/>   multiple-line comment<br/>   that ends here. <code class="CodeColor">--&gt;</code></pre>
					<p class="SidebarBody">Comments are useful for labeling and organizing long
						documents, particularly when they are shared by a team of developers. In
						this example, comments are used to point out the section of the source that
						contains the navigation:</p>
					<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;!-- start global nav --&gt;</code></pre>
					<pre class="SidebarCode">&lt;ul&gt;</pre>
					<pre class="SidebarCode"> …</pre>
					<pre class="SidebarCode">&lt;/ul&gt;</pre>
					<pre class="SidebarCode"><code class="CodeColor">&lt;!-- end global nav --&gt;</code></pre>
					<p class="SidebarBody">Bear in mind that although the browser will not display
						comments in the web page, readers can see them if <a id="_idIndexMarker418"></a><a id="_idIndexMarker419"></a>they “view source,” so be sure that
						the comments you leave are appropriate for everyone. </p>
				</div>
			</div>
			<h2 class="HeadB">Default Styles</h2>
			<p class="body">The other <a id="_idIndexMarker420"></a>thing that you will notice about
				the marked-up page in <span class="Xref-Figure">Figures 4-10</span> and <span class="Xref-Figure">4-11</span><span class="Xref--Sidebar-"> </span>is that the
				browser makes an attempt to give the page some visual hierarchy by making the
				first-level heading the biggest and boldest thing on the page, with the second-level
				headings slightly smaller, and so on. </p>
			<p class="body">How does the browser determine what an <span class="Literal-fc">h1</span> should look like? It uses a style sheet! All browsers have their own
				built-in style sheets (called<a id="_idIndexMarker421"></a>
				<span class="FirstTerm">user agent style sheets</span> in the spec) that describe
				the default rendering of elements. The default rendering is similar from browser to
				browser (for example, <a id="_idIndexMarker422"></a><span class="Literal-fc">h1</span>s are always big and bold), but there are some variations (the <span class="Literal-fc">blockquote</span> element for long quotes may or may not be
				indented). </p>
			<p class="body">If you think the <span class="Literal-fc">h1</span> is too big and
				clunky as the browser renders it, just change it with your own style sheet rule.
				Resist the urge to mark up the heading with another element just to get it to look
				better—for example, using an <span class="Literal-fc">h3</span> instead of an <span class="Literal-fc">h1</span> so it isn’t as large. In the days before ubiquitous
				style sheet support, elements were abused in just that way. You should always choose
				elements based on how accurately they describe the content, and don’t worry about
				the browser’s default rendering. </p>
			<p class="body">We’ll fix the presentation of the page with style sheets in a moment,
				but first, let’s add an image to the page.</p>
			<h1 id="_idParaDest-33" class="HeadA"><a id="_idTextAnchor051"></a>Step 4: Add an
				Image</h1>
			<p class="body">What <a id="_idIndexMarker423"></a><a id="_idIndexMarker424"></a><a id="_idIndexMarker425"></a>fun is a web page with no images? In <span class="Xref-Figure">Exercise 4-4</span>, we’ll add an image to the page with the
					<span class="Literal-fc">img</span> element. Images will be discussed in more
				detail in <a href="lwd5_chapter07.xhtml#_idTextAnchor088"><span class="Xref">Chapter
						</span><span class="Xref">7</span><span class="Xref">, Adding
					Images</span></a>, but for now, they give us an opportunity to introduce two
				more basic markup concepts: empty elements and attributes.</p>
			<h2 class="HeadB">Empty Elements</h2>
			<p class="body">So far, <a id="_idIndexMarker426"></a><a id="_idIndexMarker427"></a>nearly all of the elements we’ve used in the Black Goose Bistro home page have
				followed the syntax shown in <span class="Xref-Figure">Figure 4-6</span>: a bit of
				text content surrounded by start and end tags. </p>
			<p class="body">A handful of elements, however, do not have content because they are
				used to provide a simple directive. These elements are said to be <span class="FirstTerm">empty</span>. The image element (<span class="Literal-fc">img</span>) is<a id="_idIndexMarker428"></a> an example of an empty element. It
				tells the browser to get an image file from the server and insert it at that spot in
				the flow of the text. Other empty elements include the <a id="_idIndexMarker429"></a><a id="_idIndexMarker430"></a>line break (<span class="Literal-fc">br</span>), <a id="_idIndexMarker431"></a><a id="_idIndexMarker432"></a><a id="_idIndexMarker433"></a><a id="_idIndexMarker434"></a>thematic breaks (<span class="Literal-fc">hr</span>, a.k.a. “horizontal rules”), and elements that
				provide information about a document but don’t affect its displayed content, such as
				the <a id="_idIndexMarker435"></a><span class="Literal-fc">meta</span> element that
				we used earlier. </p>
			<p class="body"><span class="Xref-Figure">Figure 4-12</span> shows the very simple
				syntax of an empty element (compare it to <span class="Xref-Figure">Figure
					4-6</span>). </p>
			<div>
				<figure id="_idContainer144" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0412.png" alt="" width="1321" height="404"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-12.</span>
						Empty element structure.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer145" class="sidebar">
					<h5 class="SidebarTitle">What Is That Extra Slash?</h5>
					<p class="SidebarBody">If you poke around in source documents for existing web
						pages, you may see empty elements with extra slashes at the end, like so:
							<span class="Literal-Sidebar">&lt;img /&gt;</span>, <span class="Literal-Sidebar">&lt;br /&gt;</span>, <span class="Literal-Sidebar">&lt;meta /&gt;</span>, and <span class="Literal-Sidebar">&lt;hr /&gt;</span>. That indicates the document
						was written according to the stricter rules of <a id="_idIndexMarker436"></a>XHTML. In XHTML, <a id="_idIndexMarker437"></a><a id="_idIndexMarker438"></a><a id="_idIndexMarker439"></a><em class="Emphasis">all</em> elements, including empty elements, must be
						closed (or <span class="FirstTerm--Sidebar-">terminated</span>, to use the
						proper term). You terminate empty elements by adding a trailing slash before
						the closing bracket. The preceding character space is not required but was
						used for backward compatibility with browsers that did not have XHTML
						parsers, so <span class="Literal-Sidebar">&lt;img/&gt;</span>, <span class="Literal-Sidebar">&lt;br/&gt;</span>, and so on are valid.</p>
				</div>
			</div>
			<h2 class="HeadB">Attributes</h2>
			<p class="body">Let’s get <a id="_idIndexMarker440"></a>back to adding an image with the
				empty <span class="Literal-fc">img</span> element. Obviously, an <span class="Literal-fc">&lt;img&gt;</span> tag is not very useful by itself—it
				doesn’t indicate which image to use. That’s where attributes come in. <span class="FirstTerm">Attributes</span> are instructions that clarify or modify an
				element. For the <span class="Literal-fc">img</span> element,<a id="_idIndexMarker441"></a> the <span class="Literal-fc">src</span> (short for
				“source”) attribute is <a id="_idIndexMarker442"></a>required, and specifies the
				location (URL) of the image file.</p>
			<div>
				<div id="_idContainer146" class="callout">
					<p class="callout">Attributes are instructions that clarify or modify an
						element.</p>
				</div>
			</div>
			<p class="body">The syntax <a id="_idIndexMarker443"></a><a id="_idIndexMarker444"></a>for an attribute is as follows:</p>
			<pre class="CodeFirst"><code class="CodeColor">attributename</code><code class="CodeColor">="</code><code class="CodeColor">value</code><code class="CodeColor">"</code></pre>
			<p class="body">Attributes go after the element name, separated by a space. In non-empty
				elements, attributes go in the opening tag only:</p>
			<pre class="CodeFirst">&lt;element <code class="CodeColor">attributename</code><code class="CodeColor">="</code><code class="CodeColor">value</code><code class="CodeColor">"</code>&gt;&lt;element <code class="CodeColor">attributename</code><code class="CodeColor">="</code><code class="CodeColor">value</code><code class="CodeColor">"</code>&gt;Content&lt;/element&gt;</pre>
			<p class="body">You can also put more than one <a id="_idIndexMarker445"></a>attribute
				in an element in any order. Just keep them separated with spaces:</p>
			<pre class="CodeFirst">&lt;element <code class="CodeColor">attribute1</code><code class="CodeColor">="</code><code class="CodeColor">value</code><code class="CodeColor">" </code><code class="CodeColor">attribute2</code><code class="CodeColor">="</code><code class="CodeColor">value</code><code class="CodeColor">"</code>&gt;</pre>
			<p class="body"><span class="Xref-Figure">Figure 4-13</span> shows an <span class="Literal-fc">img</span> element with its required attributes labeled.</p>
			<div>
				<figure id="_idContainer148" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0413.png" alt="" width="1300" height="478"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-13.</span>
						An <span class="Literal-fc">img</span> element <a id="_idIndexMarker446"></a>with two attributes.</figcaption>
				</figure>
			</div>
			<p class="body">Here’s what you need to know about attributes:</p>
			<ul>
				<li class="ListBullet">Attributes go after the element name in the opening tag only,
					never in the closing tag.</li>
				<li class="ListBullet">There may be several attributes applied to an element,
					separated by spaces in the opening tag. Their order is not important.</li>
				<li class="ListBullet">Most attributes take <a id="_idIndexMarker447"></a><a id="_idIndexMarker448"></a>values, which follow an <a id="_idIndexMarker449"></a><a id="_idIndexMarker450"></a>equals sign (=). In HTML, some attribute
					values are single descriptive words. For example, the <span class="Literal-fc">checked</span> attribute, which makes a form checkbox checked when the form
					loads, is equivalent to <span class="Literal-fc">checked="checked"</span>. You may hear this type of attribute <a id="_idIndexMarker451"></a><a id="_idIndexMarker452"></a>called a <span class="FirstTerm">Boolean attribute</span> because it describes a feature
					that is either on or off. </li>
				<li class="ListBullet">A value might be a number, a word, a string of text, a URL,
					or a measurement, depending on the purpose of the attribute. You’ll see examples
					of all of these throughout this book.</li>
				<li class="ListBullet">Wrapping attribute values in double <a id="_idIndexMarker453"></a><a id="_idIndexMarker454"></a>quotation marks is a strong convention,
					but note that quotation marks are not required and may be omitted. In addition,
					either single or double quotation marks are acceptable as long as the opening
					and closing marks match. Note that quotation marks in HTML files need to be
					straight ("), not curly (”).</li>
				<li class="ListBullet">The attribute names and values available for each element are
					defined in the HTML specifications; in other words, you can’t make up an
					attribute for an element. </li>
				<li class="ListBullet">Some attributes are required, such as the <span class="Literal-fc">src</span> and <span class="Literal-fc">alt</span>
					attributes in the <span class="Literal-fc">img</span> element. The HTML
					specification also defines which attributes are required in order for the
					document to be valid.</li>
			</ul>
			<p class="body">Now you should be more than ready to try your hand at adding the <span class="Literal-fc">img</span> element with its attributes to the Black Goose
				Bistro page in <span class="Xref-Figure">Exercise 4-4</span>. We’ll throw a few line
				breaks in there as well.</p>
			<div>
				<div id="_idContainer153" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 4-4.</span>
						Adding an image</h6>
					<ol>
						<li class="SidebarListNumber" value="1">If you’re working along, the first
							thing you’ll need to do is get a copy of the image file on your hard
							drive so you can see it in place when you open the file locally. The
							image file is provided in the materials for this chapter (<span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span>). You can also get the
							image file by saving it right from the sample web page online at <span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials/ch04/bistro</span>. Right-click
							(or Control-click on a Mac) the goose image and select “Save to disk”
							(or similar) from the pop-up menu, as shown in <span class="Xref-Figure">Figure 4-14</span>. Name the file <span class="Filename--Sidebar-">blackgoose.png</span>. Be sure to save it in the <span class="Filename--Sidebar-">bistro</span> folder with<span class="Filename--Sidebar-"> index.html</span>. <figure id="_idContainer150" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_0414.png" alt="" width="1321" height="488"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure
										4-14.</span> Saving an image file from a page on the
									web.</figcaption></figure></li>
						<li class="SidebarListNumber">Once you h<a id="_idTextAnchor052"></a>ave the
							image, insert it at the beginning of the first-level heading by typing
							in the <span class="Literal-Sidebar">img</span> element and its
							attributes as shown
								here:<pre class="SidebarCodeFirst">&lt;h1&gt;<code class="CodeColor">&lt;img src="blackgoose.png" alt="logo"&gt;</code>Black Goose Bistro&lt;/h1&gt;</pre><p class="SidebarListItem_cont">The <span class="Literal-Sidebar">src</span> attribute provides the name of the image file that
								should be inserted, and the <span class="Literal-Sidebar">alt</span>
								attribute provides text that should be displayed if the image is not
								available. Both of these attributes are required in every <span class="Literal-Sidebar">img</span> element. </p></li>
						<li class="SidebarListNumber">I’d like the image to appear above the title,
							so add a line break (<span class="Literal-Sidebar">br</span>) after the
								<span class="Literal-Sidebar">img</span> element to start the
							headline text on a new line.
							<pre class="SidebarCodeFirst">&lt;h1&gt;&lt;img src="blackgoose.png" alt="logo"&gt;<code class="CodeColor">&lt;br&gt;</code>Black Goose Bistro&lt;/h1&gt;</pre></li>
						<li class="SidebarListNumber">Let’s break up the last paragraph into three
							lines for better clarity. Drop a <span class="Literal-Sidebar">&lt;br&gt;</span> tag at the spots you’d like the line breaks to
							occur. Try to match the screenshot in <span class="Xref-Figure">Figure
								4-15</span>.</li>
						<li class="SidebarListNumber">Now save <span class="Filename--Sidebar-">index.html</span> and open or refresh it in the browser window. The
							page should look like the one shown in <span class="Xref-Figure">Figure 4-15</span>. If it doesn’t, check to make sure that the
							image file, <span class="Filename--Sidebar-">blackgoose.png</span>, is
							in the same directory as <span class="Filename--Sidebar-">index.html</span>. If it is, then check to make sure that you
							aren’t missing any characters, such as a closing quote or bracket, in
							the <span class="Literal-Sidebar">img</span> element markup.<figure id="_idContainer152" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_0415_ex4.png" alt="" width="1149" height="907"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure
										4-15.</span><span class="FigureLabel"> </span>The Black
									Goose Bistro page with the logo image.
							</figcaption></figure></li>
					</ol>
				</div>
			</div>
			<h1 id="_idParaDest-34" class="HeadA"><a id="_idTextAnchor053"></a>Step 5: Change the
				Look with a Style Sheet</h1>
			<p class="body">Depending <a id="_idIndexMarker455"></a>on the content and purpose of
				your website, you may decide that the browser’s default rendering of your document
				is perfectly adequate. However, I think I’d like to pretty up the Black Goose Bistro
				home page a bit to make a good first impression on potential patrons. “Prettying up”
				is just my way of saying that I’d like to change its presentation, which is the job
				of Cascading Style Sheets (CSS). </p>
			<p class="body">In <span class="Xref-Figure">Exercise 4-5</span>, we’ll change the
				appearance of the text elements and the page background by using some simple style
				sheet rules. Don’t worry about understanding them all right now. We’ll get into CSS
				in more detail in <a href="lwd5_chapter11.xhtml#_idTextAnchor131"><span class="Xref">Part III</span></a>. But I want to at least give you a taste of what it
				means to add a “layer” of presentation onto the structure we’ve created with our
				markup.</p>
			<div>
				<div id="_idContainer156" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">exercise 4-5.</span>
						Adding a style sheet</h6>
					<ol>
						<li class="SidebarListNumber2Col" value="1">Open <span class="Filename--Sidebar-">index.html</span> if it isn’t open
							already. We’re going to use the <span class="Literal-Sidebar">style</span> element to apply a very simple embedded style sheet to
							the page. This is just one of the ways to add a style sheet; the others
							are covered in <span class="Xref--Sidebar-">Chapter 11, Introducing
								Cascading Style Sheets</span>.</li>
						<li class="SidebarListNumber2Col">The <span class="Literal-Sidebar">style</span> element is placed inside the document <span class="Literal-Sidebar">head</span>. Start by adding the <span class="Literal-Sidebar">style</span> element to the document as
							shown
							here:<pre class="SidebarCodeFirst-2Col">&lt;head&gt;<br/>  &lt;meta charset="utf-8"<span class="Literal-fc">&gt;</span><br/>  &lt;title&gt;Black Goose Bistro&lt;/title&gt;<br/>  <code class="CodeColor">&lt;style&gt;</code> <br/><br/><code class="CodeColor">  &lt;/style&gt;</code><br/>&lt;/head&gt;</pre></li>
						<li class="SidebarListNumber2Col">Next, type the following style rules
							within the <span class="Literal-Sidebar">style</span> element just as
							you see them here. Don’t worry if you don’t know exactly what’s going on
							(although it’s fairly intuitive). You’ll learn all about style rules in
								<span class="Xref--Sidebar-">Part
							III</span>.<pre class="SidebarCodeFirst-2Col">&lt;style&gt;<br/>body {<br/>  background-color: #faf2e4;<br/>  margin: 0 10%;<br/>  font-family: sans-serif;<br/>  }<br/>h1 {<br/>  text-align: center;<br/>  font-family: serif;<br/>  font-weight: normal;<br/>  text-transform: uppercase;<br/>  border-bottom: 1px solid #57b1dc;<br/>  margin-top: 30px;<br/>}</pre><pre>h2 {<br/>  color: #d1633c;<br/>  font-size: 1em;<br/>}<br/>&lt;/style&gt;</pre></li>
						<li class="SidebarListNumber2Col">Now it’s time to save the file and take a
							look at it in the browser. It should look like the page in <span class="Xref-Figure">Figure 4-16</span>. If it doesn’t, go over the
							style sheet to make sure you didn’t miss a semicolon or a curly bracket.
							Look at the way the page looks with our styles compared to the browser’s
							default styles (<span class="Xref-Figure">Figure 4-15</span>).<figure id="_idContainer155" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_0416_ex5.png" alt="" width="987" height="803"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure
										4-16.</span><span class="FigureLabel"> </span>The Black
									Goose Bistro page after CSS style rules have been
									applied.</figcaption></figure></li>
					</ol>
				</div>
			</div>
			<p class="body">We’re finished with the Black Goose Bistro page. Not only have you
				written your first web page, complete with a style sheet, but you’ve also learned
				about elements, attributes, empty elements, block and inline elements, the basic
				structure of an HTML document, and the correct use of markup along the way. Not bad
				for one chapter!</p>
			<h1 id="_idParaDest-35" class="HeadA"><a id="_idTextAnchor054"></a>When Good Pages Go
				Bad</h1>
			<p class="body">The previous <a id="_idIndexMarker456"></a><a id="_idIndexMarker457"></a>demonstration went smoothly, but it’s easy for small things to go wrong when
				you’re typing out HTML markup by hand. Unfortunately, one missed character can break
				a whole page. I’m going to break my page on purpose so we can see what happens.</p>
			<p class="body">What if I had neglected to type the <a id="_idIndexMarker458"></a><a id="_idIndexMarker459"></a>slash in the closing emphasis tag (<span class="Literal-fc">&lt;/em&gt;</span>)? With just one character out of place
					(<span class="Xref-Figure">Figure 4-17</span>), the remainder of the document
				displays in emphasized (italic) text. That’s because without that slash, there’s
				nothing telling the browser to turn “off” the emphasized formatting, so it just
				keeps going (see <span class="Xref">Note</span>).</p>
			<div>
				<figure id="_idContainer158" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0417.png" alt="" width="1338" height="731"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 4-17.</span>
						When a slash is omitted, the browser doesn’t know when the element ends, as
						is the case in this example.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer159" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">Omitting the slash in the closing tag (or even omitting the
						closing tag itself) for block elements, such as headings or paragraphs, may
						not be so dramatic. Browsers interpret the start of a new block element to
						mean that the previous block element is finished.</p>
				</div>
			</div>
			<p class="body">I’ve fixed the slash, but this time, let’s see what would have happened
				if I had accidentally omitted a bracket from the end of the first <span class="Literal-fc">&lt;h2&gt;</span> tag (<span class="Xref-Figure">Figure 4-18</span>). </p>
			<div>
				<figure id="_idContainer161" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0418.png" alt="" width="1337" height="848"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure
							4-18.</span><span class="FigureLabel"> </span>A missing end bracket
						makes the browser think the following characters are part of the tag, and
						therefore the headline text doesn’t display.</figcaption>
				</figure>
			</div>
			<p class="body">See how the headline is missing? That’s because without the closing tag
				bracket, the browser assumes that all the following text—all the way up to the next
				closing bracket (<span class="Literal-fc">&gt;</span>) it finds—is part of the <span class="Literal-fc">&lt;h2&gt;</span> opening tag. Browsers don’t display any
				text within a tag, so my heading disappeared. The browser just ignored the
				foreign-looking element name and moved on to the next element.</p>
			<p class="body">Making mistakes in your first HTML documents and fixing them is a great
				way to learn. If you write your first pages perfectly, I’d recommend fiddling with
				the code to see how the browser reacts to various changes. This can be extremely
				useful in troubleshooting pages later. I’ve listed some common problems in the
				sidebar <span class="Xref">“Having Problems?”</span> Note that these problems are
				not specific to beginners. Little stuff like this goes wrong all the time, even for
				the pros. </p>
			<div>
				<div id="_idContainer162" class="sidebar">
					<h5 class="SidebarTitle">Having Problems?</h5>
					<p class="SidebarBody">The following are some typical problems that crop up when
						you are creating web pages and viewing them in a browser:</p>
					<p class="SidebarListVariableTerm">I’ve changed my document, but when I reload
						the page in my browser, it looks exactly the same.</p>
					<p class="SidebarListVariable">It could be you didn’t save your document before
						reloading, or you may have saved it in a different directory.</p>
					<p class="SidebarListVariableTerm">Half my page disappeared.</p>
					<p class="SidebarListVariable">This could happen if you are missing a closing
						bracket (<span class="Literal-fc">&gt;</span>) or a quotation mark within a
						tag. This is a common error when you’re writing HTML by hand.</p>
					<p class="SidebarListVariableTerm">I put in a graphic by using the <span class="Literal-Sidebar">img</span> element, but all that shows up is a
						broken image icon.</p>
					<p class="SidebarListVariable">The <a id="_idIndexMarker460"></a><a id="_idIndexMarker461"></a>broken graphic could mean a couple of things.
						First, it might mean that the browser is not finding the graphic. Make sure
						that the URL to the image file is correct. (We’ll discuss URLs further in
							<span class="Xref--Sidebar-">Chapter 6, Adding LInks</span>.) Make sure
						that the image file is actually in the directory you’ve specified. If the
						file is there, make sure it is in one of the formats that web browsers can
						display (PNG, JPEG, GIF, or SVG) and that it is named with the proper suffix
							(<span class="Filename--Sidebar-">.png</span>, <span class="Filename--Sidebar-">.jpeg</span> or <span class="Filename--Sidebar-">.jpg</span>, <span class="Filename--Sidebar-">.gif</span>, or <span class="Filename--Sidebar-">.svg</span>,
						respectively).</p>
				</div>
			</div>
			<h1 id="_idParaDest-36" class="HeadA"><a id="_idTextAnchor055"></a>Validating Your
				Documents</h1>
			<p class="body">One way <a id="_idIndexMarker462"></a><a id="_idIndexMarker463"></a><a id="_idIndexMarker464"></a>that professional web developers catch errors in
				their markup is to validate their documents. What does that mean? To <span class="FirstTerm">validate</span> a document is to check your markup to make
				sure that you have abided by all the rules of whatever version of HTML you are
				using. Documents that are error-free are said to be valid. It is strongly
				recommended that you validate your documents, especially for professional sites.
				Valid documents are more consistent on a variety of browsers, they display more
				quickly, and they are more accessible.</p>
			<p class="body">Right now, browsers don’t require documents to be valid (in other words,
				they’ll do their best to display them, errors and all), but anytime you stray from
				the standard, you introduce unpredictability in the way the page is handled by
				browsers or alternative devices. </p>
			<p class="body">So how do you make sure your document is valid? You could check it
				yourself or ask a friend, but humans make mistakes, and you aren’t expected to
				memorize every minute rule in the specifications. Instead, use a <span class="FirstTerm">validator</span>, software that checks your source against the
				HTML version you specify. These are some of the things validators check for:</p>
			<ul>
				<li class="ListBullet">The inclusion of a <a id="_idIndexMarker465"></a>DOCTYPE
					declaration. Without it the validator doesn’t know which version of HTML to
					validate against:</li>
				<li class="ListBullet">An indication of the <a id="_idIndexMarker466"></a><a id="_idIndexMarker467"></a>character encoding for the document.</li>
				<li class="ListBullet">The inclusion of required rules and attributes.</li>
				<li class="ListBullet">Non-standard <a id="_idIndexMarker468"></a>elements.</li>
				<li class="ListBullet">Mismatched <a id="_idIndexMarker469"></a>tags.</li>
				<li class="ListBullet">Nesting errors (incorrectly putting elements inside other
					elements).</li>
				<li class="ListBullet">Typos and other minor errors.</li>
			</ul>
			<p class="body">Developers use a number of helpful tools for checking and correcting
				errors in HTML documents. The best web-based <a id="_idIndexMarker470"></a>validator
				is at <span class="URL-Email">html5.validator.nu</span>. There you can upload a file
				or provide a link to a page that is already online. <span class="Xref-Figure">Figure
					4-19</span> shows the report the validator generates when I upload the version
				of the Bistro <span class="Filename">index.html</span> file that doesn’t have any
				markup. For this document, there are a number of missing elements that keep this
				document from being valid. It also shows the problem source code and provides an
				explanation of how the code should appear. Pretty darned handy!</p>
			<p class="body">Built-in browser developer tools for Safari and Chrome also have
				validators so you can check your work on the fly. Some code editors have validators
				built in as well.</p>
			<div>
				<figure id="_idContainer164" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0419_validator.png" alt="" width="1695" height="1111"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure
							4-19.</span><span class="FigureLabel"> </span>The (X)HTML5 Validator
						(Living Validator) for checking errors in HTML documents (<span class="URL-Email--Sidebar-">html5.validator.nu</span>).</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-37" class="HeadA"><a id="_idTextAnchor056"></a>Test Yourself</h1>
			<p class="body">Now is a good time to make sure you understand the basics of markup. Use
				what you’ve learned in this chapter to answer the following questions. Answers are
				in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix
						</span><span class="Xref">A</span></a>.</p>
			<ol>
				<li class="ListNumber" value="1">What is the difference between a tag and an
					element?</li>
				<li class="ListNumber">Write out the recommended minimal markup for an HTML5
					document.</li>
				<li class="ListNumber">Indicate whether each of these filenames is an acceptable
					name for a web document by circling “Yes” or “No.” If it is not acceptable,
					provide the reason:<table id="table001-3" class="table_invisible">
						<colgroup>
							<col/>
							<col/>
							<col/>
						</colgroup>
						<tbody>
							<tr class="table_invisible">
								<td class="table_invisible"><p class="body"><span class="Filename">a.</span><span class="Filename">Sunflower.html</span></p></td>
								<td class="table_invisible invisible"><p class="body">Yes</p></td>
								<td class="table_invisible"><p class="body">No </p></td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible"><p class="body"><span class="Filename">b.</span><span class="Filename">
									index.doc</span></p></td>
								<td class="table_invisible invisible"><p class="body">Yes</p></td>
								<td class="table_invisible"><p class="body">No </p></td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible"><p class="body"><span class="Filename">c.</span><span class="Filename"> cooking home
											page.html</span></p></td>
								<td class="table_invisible invisible"><p class="body">Yes</p></td>
								<td class="table_invisible"><p class="body">No </p></td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible"><p class="body"><span class="Filename">d.</span><span class="Filename">
											Song_Lyrics.html</span></p></td>
								<td class="table_invisible invisible"><p class="body">Yes</p></td>
								<td class="table_invisible"><p class="body">No </p></td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible"><p class="body"><span class="Filename">e.</span><span class="Filename">
											games/rubix.html</span></p></td>
								<td class="table_invisible invisible"><p class="body">Yes</p></td>
								<td class="table_invisible"><p class="body">No </p></td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible"><p class="body"><span class="Filename">f.</span><span class="Filename">
										%whatever.html</span></p></td>
								<td class="table_invisible invisible"><p class="body">Yes</p></td>
								<td class="table_invisible"><p class="body">No </p></td>
							</tr>
						</tbody>
					</table></li>
				<li class="ListNumber">All of the following markup examples are incorrect. Describe
					what is wrong with each one, and then write it correctly.<ol>
						<li class="ListNumber_Indent" value="1"><code class="Code">&lt;img "birthday.jpg"&gt;</code><span class="Literal-fc"> </span><span class="Literal-fc"> </span></li>
						<li class="ListNumber_Indent"><code class="Code">&lt;em&gt;Congratulations!&lt;em&gt;</code><span class="Literal-fc"> </span></li>
						<li class="ListNumber_Indent"><code class="Code">&lt;a href="file.html"&gt;linked text&lt;/a href="file.html"&gt;</code><span class="Literal-fc"> </span></li>
						<li class="ListNumber_Indent"><code class="Code">&lt;p&gt;This is a new paragraph&lt;\p&gt;</code></li>
					</ol></li>
				<li class="ListNumber">How would you mark up this comment in an HTML document so
					that it doesn’t display in the browser
					window?<pre class="CodeFirst">   product list begins here</pre></li>
			</ol>
			<h1 id="_idParaDest-38" class="HeadA"><a id="_idTextAnchor057"></a>Element Review: HTML
				Document Setup </h1>
			<p class="body">This chapter introduced the elements that establish metadata and content
				portions of an HTML document. The remaining elements introduced in the exercises
				will be treated in more depth in the following chapters.</p>
			<div>
				<div id="_idContainer165" class="contents">
					<table id="table002-2" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head">
									<p class="TableHeader">Element</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableSubhead">Description</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">body</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Identifies <a id="_idIndexMarker471"></a>the body of the document that holds the content</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">head</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Identifies <a id="_idIndexMarker472"></a>the head of the document that contains information
										about the document itself</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">html</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Is the <a id="_idIndexMarker473"></a>root
										element that contains all the other elements</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">meta</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Provides<a id="_idIndexMarker474"></a>
										information about the document</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">title</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Gives <a id="_idIndexMarker475"></a>the
										page a title</p>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</div>
</body>
</html>