<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer717" class="ch13">
			<p id="_idParaDest-118" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor168"></a>13. Colors and Backgrounds</p>
		</div>
		<div id="_idContainer718" class="ch13">
			<h1 class="chapterLabel">13</h1>
		</div>
		<div id="_idContainer719" class="ch13">
			<h1 class="chapterTitle"><a id="_idTextAnchor169"></a><a id="_idTextAnchor170"></a>Colors and Backgrounds</h1>
			<p class="ChapterTitleSub">Plus More Selectors And External Style sheets</p>
		</div>
		<div id="_idContainer720" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In this Chapter</p>
			<p class="chapterContents">CSS color names</p>
			<p class="chapterContents">RGB color values</p>
			<p class="chapterContents">Foreground and background colors</p>
			<p class="chapterContents">Tiling background images</p>
			<p class="chapterContents">Color gradients</p>
			<p class="chapterContents">Pseudo-class, pseudo-element, and attribute selectors</p>
			<p class="chapterContents">External style sheets</p>
		</div>
		<div id="_idContainer848" class="ch13">
			<p class="body">If you had seen the web back in 1993, you would have found it to be a dreary affair by today’s standards—every background was gray, and all the text was black. Then came Netscape Navigator and, with it, a handful of HTML attributes that allowed rudimentary (but welcome) control over font colors and backgrounds. For years, we made do. But thankfully, we now have style sheet properties that have laid those unmentionable presentational attributes to rest. </p>
			<p class="body">We’re going to cover a <em class="Emphasis">lot</em> of ground in this chapter. Of course, I’ll introduce you to all of the properties for specifying colors and backgrounds. This chapter also rounds out your collection of selector types and shows you how to create an external style sheet. Our first order of business, however, is to explore the options for specifying color in CSS, including a primer on the nature of color on computer monitors.</p>
			<h1 id="_idParaDest-119" class="HeadA"><a id="_idTextAnchor171"></a>Specifying Color Values</h1>
			<p class="body">There are two <a id="_idIndexMarker2277"></a><a id="_idIndexMarker2278"></a>main ways to specify colors in style sheets—with a predefined color name, as we have been doing so far:</p>
			<pre class="CodeFirst">color: red;        color: olive;        color: blue;</pre>
			<p class="body">Or, more commonly, with a numeric value that describes a particular <span class="FirstTerm">RGB color</span> (the color model on computer monitors). You may have seen color values that look like these:</p>
			<pre class="CodeFirst">color: #FF0000;    color: #808000;       color: #00F;</pre>
			<p class="body">We’ll get to all the ins and outs of <a id="_idIndexMarker2279"></a><a id="_idIndexMarker2280"></a>RGB color in a moment, but first, a short and sweet section on the standard color names.</p>
			<h2 class="HeadB">Color Names</h2>
			<p class="body">The most <a id="_idIndexMarker2281"></a>intuitive way to specify a color is to call it by name. Unfortunately, you can’t make up just any color name and expect it to work. It has to be one of the color keywords predefined in the CSS Recommendation. CSS1 and CSS2 adopted the 16 standard color names originally introduced in HTML 4.01. CSS2.1 tossed in <span class="Literal-fc">orange</span> for a total of 17 (<span class="Xref-Figure">Figure 13-1</span>). </p>
			<div>
				<figure id="_idContainer722" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1301.png" alt="" width="1304" height="1088"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-1.</span><span class="FigureLabel"> </span>The 17 standard color names in CSS2.1. (Note that “gray” must be spelled with an “a.”)</figcaption>
				</figure>
			</div>
			<p class="body">CSS3 adds support for the extended set of 140 (rather fanciful) color names. Now we can specify names like <span class="Literal-fc">burlywood</span>, <span class="Literal-fc">peachpuff</span>, <span class="Literal-fc">oldlace</span>, and my long-time favorite, <span class="Literal-fc">papayawhip</span>! The extended colors are shown in <span class="Xref-Figure">Figure 13-2</span>, but if you want a more accurate view, point your browser at <a href="http://learningwebdesign.com/colornames.html"><span class="URL-Email">learningwebdesign.com/colornames.html</span></a>. CSS3 also added the <span class="Literal-fc">transparent</span> keyword, which can be used with any property that has a color value.</p>
			<div>
				<div id="_idContainer723" class="sidebar">
					<h5 class="SidebarSeries">Fun Fact</h5>
					<p class="SidebarBody">The extended color names, also known as <a id="_idIndexMarker2282"></a>the X11 color names, were originally provided with the X Window System for <a id="_idIndexMarker2283"></a>Unix. </p>
				</div>
			</div>
			<div>
				<figure id="_idContainer725" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1302.png" alt="" width="2033" height="2313"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-2.</span> The 140 extended color names in CSS3. Bear in mind that these look quite different on a screen.</figcaption>
				</figure>
			</div>
			<p class="body">Color names are easy to use—just drop one into place as the value for any color-related<a id="_idIndexMarker2284"></a> property:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">silver</code>;<br/>background-color: <code class="CodeColor">gray</code>;<br/>border-bottom-color: <code class="CodeColor">teal</code>;</pre>
			<h2 class="HeadB">RGB Color Values</h2>
			<p class="body">Names are easy, but as you can see, they are limited. By far, the most common way to specify a color is by its RGB value. It also gives you millions of colors to choose from.</p>
			<p class="body">For those who are not familiar with how computers deal with color, I’ll start with the basics before jumping into the CSS syntax.</p>
			<h3 class="HeadC">A word about RGB color</h3>
			<p class="body">Computers create the colors you see on a monitor by combining three colors of light: red, green, and blue. This is known as<a id="_idIndexMarker2285"></a><a id="_idIndexMarker2286"></a> the <span class="FirstTerm">RGB color model</span>. You can provide recipes (of sorts) for colors by telling the computer how much of each color to mix in. The amount of light in each color “channel” is typically described on a scale from 0 (none) to 255 (full blast), although it can also be provided as a percent. The closer the three values get to 255 (100%), the closer the resulting color gets to white (<span class="Xref-Figure">Figure 13-3</span>). Wondering why the scale is from 0 to 255? See the <span class="Xref">“Why 255?”</span> sidebar.</p>
			<div>
				<div id="_idContainer726" class="sidebar">
					<h5 class="SidebarTitle">Why 255?</h5>
					<p class="SidebarBody">In true RGB color, 8 bits of information are devoted to each color channel. Because 8 bits can describe 256 shades (2<sup class="Superscript">8</sup> = 256), colors are measured on a scale from 0 to 255.</p>
				</div>
			</div>
			<p class="body">Any color you see on your monitor can be described by a series of three numbers: a red value, a green value, and a blue value. This is one of the ways that <a id="_idIndexMarker2287"></a>image editors such as Adobe Photoshop keep track of the colors for every pixel in an image. With the RGB color system, a pleasant lavender can be described as R:200, G:178, B:230.</p>
			<div>
				<figure id="_idContainer728" class="figWCaption">
					<p class="Figure_Holder"> <img src="image/lwd5_1303_RGBcolor.png" alt="" width="1992" height="646"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-3.</span> Computers create colors on a monitor by mixing different amounts of red, green, and blue light (thus, RGB). The color in the middle of each diagram shows what happens when the three color channels are combined. The more light there is in each channel (i.e., the higher the number value), the closer the combination is to white.</figcaption>
				</figure>
			</div>
			<p class="body">Taken together, 255 colors in each channel can define around 16.7 million color combinations. This color space of millions of colors is known as <span class="FirstTerm">Truecolor</span>. There<a id="_idIndexMarker2288"></a><a id="_idIndexMarker2289"></a> are different ways to encode those colors (that is, convert them to bytes for computers), and the web uses an encoding <a id="_idIndexMarker2290"></a><a id="_idIndexMarker2291"></a>called <span class="FirstTerm">sRGB</span>. So, if you see an option for saving images as sRGB in a graphics program, click Yes. </p>
			<h3 class="HeadC">Picking a color</h3>
			<p class="body">There are a number of ways to pick a color and find its RGB color values. One quick and easy option is to go to Google.com and search “color picker,” and <em class="Emphasis">voilà</em>—a full-featured color picker (<span class="Xref-Figure">Figure 13-4</span>, left)! If you tend to keep an image-editing program such as Adobe Photoshop open and handy, you can use its built-in color picker (<span class="Xref-Figure">Figure 13-4</span>, right). </p>
			<div>
				<figure id="_idContainer730" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1304_colorpickers.png" alt="" width="1321" height="579"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-4.</span><span class="FigureLabel"> </span>Color pickers such as the one at Google.com (search “color picker”) and in Photoshop.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer731" class="sidebar">
					<h5 class="SidebarTitle">The Web Palette</h5>
					<p class="SidebarBody">You may come across the <a id="_idIndexMarker2292"></a>terms <span class="FirstTerm--Sidebar-">web palette</span> or <span class="FirstTerm--Sidebar-">web-safe colors</span> in web production tools like <a id="_idIndexMarker2293"></a><a id="_idIndexMarker2294"></a>Dreamweaver or Photoshop. The web got its start in the days when computer monitors typically could display only 256 colors at a time. The web palette was a collection of 216 colors that could be displayed on both<a id="_idIndexMarker2295"></a> Windows and Macintosh operating systems without dithering, and thus they were “safe” for the web. That era is long behind us, as is the need to restrict our color choices to the web palette.  </p>
				</div>
			</div>
			<p class="body">Both the <a id="_idIndexMarker2296"></a><a id="_idIndexMarker2297"></a>Google and image editor color pickers show how the selected color would be expressed in a variety of <a id="_idIndexMarker2298"></a>color models (to reveal the values in Google, click “Show color values” below the picker). RGB is the most common for web design, so we’re focusing our attention on that one. <span class="FirstTerm">HSL</span> (<span class="FirstTerm">Hue Saturation Lightness</span> or <span class="FirstTerm">Luminosity</span>) is <a id="_idIndexMarker2299"></a><a id="_idIndexMarker2300"></a>another option for specifying color in style sheets, and we’ll take a look at it in a moment (see <span class="Xref">Note</span>). <a id="_idIndexMarker2301"></a><a id="_idIndexMarker2302"></a>CMYK (Cyan Magenta Yellow blacK) is used primarily for print media, so you won’t use it except perhaps to translate print colors to their screen equivalents.</p>
			<div>
				<div id="_idContainer732" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">HSL is not the same as <a id="_idIndexMarker2303"></a>HSB (Hue Saturation Brightness), another color model provided in Photoshop and other image editors.</p>
				</div>
			</div>
			<p class="body">When you select a color from the spectrum in the color picker, the red, green, and blue values are listed, as pointed out in <span class="Xref-Figure">Figure 13-4</span>. And look next to the # symbol—those are the same three values, converted to hexadecimal equivalents so they are ready to go in a style sheet. I’ll explain the six-digit hex values in a moment. </p>
			<h3 class="HeadC">Writing RGB values in style sheets</h3>
			<p class="body">CSS <a id="_idIndexMarker2304"></a>allows<a id="_idIndexMarker2305"></a> RGB color values to be specified in a number of formats. Going back to that pleasant lavender, we could add it to a style sheet by listing each value on a scale from 0 to 255:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">rgb(200, 178, 230)</code>;</pre>
			<p class="body">You can also list them as <a id="_idIndexMarker2306"></a>percentage values, although that is less common:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">rgb(78%, 70%, 90%)</code>; </pre>
			<p class="body">Or, you can provide the six-digit hexadecimal version that we saw in the color pickers. These six digits represent the same three RGB values, except they have been converted into <span class="FirstTerm">hexadecimal</span> (or <span class="FirstTerm">hex</span> for short) equivalents. Note that hex RGB values are preceded by the <span class="Literal-fc">#</span> symbol and do not require the <span class="Literal-fc">rgb()</span> notation shown in the previous examples. They may be upper- or lowercase, but it is recommended that you be consistent:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">#C8B2E6</code>;</pre>
			<p class="body">There is one last shorthand way to specify hex color values. If your value happens to be made up of three pairs of double digits or letters, such as</p>
			<pre class="CodeFirst">color: <code class="CodeColor">#FFCC00</code>; or color: <code class="CodeColor">#993366</code>;</pre>
			<p class="body">you can condense each pair down to one digit or letter. It’s easier to type and to read, and it slightly reduces the size of your file. These examples are equivalent to the ones just listed:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">#FC0</code>;  or  color: <code class="CodeColor">#936</code>;</pre>
			<div>
				<div id="_idContainer733" class="sidebar">
					<h5 class="SidebarSeries">AT A GLANCE</h5>
					<h5 class="SidebarTitle">Specifying RGB Values</h5>
					<p class="SidebarBody">There are four formats for providing RGB values in CSS:</p>
					<pre class="SidebarCodeFirst">rgb(255, 255, 255) <br/>rgb(100%, 100%, 100%) <br/>#FFFFFF  <br/>#FFF</pre>
					<p class="SidebarBody">All of these examples specify white.</p>
				</div>
			</div>
			<h3 class="HeadC">About hexadecimal values</h3>
			<p class="body">It’s time to<a id="_idIndexMarker2307"></a><a id="_idIndexMarker2308"></a> clarify what’s going on with that six-digit string of characters. What you’re looking at is actually a series of three two-digit numbers, one each for red, green, and blue. But instead of decimal (base-10, the system we’re used to), these values are written in hexadecimal, or base-16. <span class="Xref-Figure">Figure 13-5</span> shows the structure of the hex RGB value.</p>
			<div>
				<figure id="_idContainer735" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1305_rgbdiagram.png" alt="" width="1337" height="346"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-5.</span><span class="FigureLabel"> </span>Hexadecimal RGB values are made up of three two-digit numbers, one for red, one for green, and one for blue.</figcaption>
				</figure>
			</div>
			<p class="body">The hexadecimal numbering system uses 16 digits: 0–9 and A–F (for representing the quantities 10–15). <span class="Xref-Figure">Figure 13-6</span> shows how this works. The hex system is used widely in computing because it reduces the space it takes to store certain information. For example, the RGB values are reduced from three to two digits once they’re converted to hexadecimal.</p>
			<div>
				<figure id="_idContainer737" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1306_hex.png" alt="" width="1338" height="508"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-6.</span><span class="FigureLabel"> </span>The hexadecimal numbering system is base-16.</figcaption>
				</figure>
			</div>
			<p class="body">Now that most graphics and web development software provides easy access to hexadecimal color values (as we saw in <span class="Xref-Figure">Figure 13-4</span>), there isn’t much need to translate RGB values to hex yourself, as we needed to do back in the old days. Should you need to, there are plenty of decimal-to-hexadecimal converters online.</p>
			<div>
				<div id="_idContainer738" class="sidebar">
					<h5 class="SidebarSeries">TIP</h5>
					<h5 class="SidebarTitle">Handy Hex Values</h5>
					<p class="SidebarBody">White = <code class="CodeColor">#FFFFFF</code> or <code class="CodeColor">#FFF</code> (the equivalent of 255,255,255)</p>
					<p class="SidebarBody">Black = <code class="CodeColor">#000000</code> or <code class="CodeColor">#000</code> (the equivalent of 0,0,0)</p>
				</div>
			</div>
			<h2 class="HeadB">RGBa Color</h2>
			<p class="body">RGBa color <a id="_idIndexMarker2309"></a>allows you to specify a color and make it as <a id="_idIndexMarker2310"></a>transparent or as <a id="_idIndexMarker2311"></a>opaque as you like. The “a” in “RGBa” stands for <span class="FirstTerm">alpha</span>, which is an additional channel that controls the level of transparency on a scale from 0 (fully transparent) to 1 (fully opaque). Here’s how it looks written in a style rule:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">rgba(0, 0, 0, .5)</code>;</pre>
			<p class="body">The first three values in the parentheses are regular old RGB values, in this case creating the color black. The fourth value, .5, is the transparency level. So this color is black with 50% transparency. That allows other colors or background patterns to show through slightly (<span class="Xref-Figure">Figure 13-7</span>). </p>
			<div>
				<figure id="_idContainer740" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1307_rgba.png" alt="" width="1321" height="358"/><span class="FigureLabel"> </span></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-7.</span> Headings with various levels of transparency using RGBa values.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer741" class="note">
					<h5 class="WarningHeader">Browser Support Note</h5>
					<p class="note">Internet <a id="_idIndexMarker2312"></a>Explorer versions 8 and earlier do not support RGBa color, so if a significant percentage of your users have those browsers, you may want to provide a fallback. Pick an RGB color that approximates the look you’re going for and list it first in the style rule. IE ignores the RGBa value, and supporting browsers will override the opaque color when they get to the second declaration.</p>
					<pre class="SidebarCodeFirst">h1 {<br/>  color: rgb(120, 120, 120);<br/>  color: rgba(0, 0, 0, .5);<br/>}</pre>
				</div>
			</div>
			<h2 class="HeadB">HSL Color</h2>
			<p class="body">CSS3 introduced the <a id="_idIndexMarker2313"></a><a id="_idIndexMarker2314"></a><a id="_idIndexMarker2315"></a><a id="_idIndexMarker2316"></a><a id="_idIndexMarker2317"></a>ability to specify colors by their HSL values: Hue (color), Saturation, and Lightness (or Luminosity). In this system, the colors are spread out around a circle in the order of the rainbow, with red at the top (12 o’clock) position. Hue values are then measured in degrees around the circle: red at 0°/360°, green at 120°, and blue at 240°, with other colors in between. Saturation is a percentage value from 0% (gray) to 100% (color at full blast). Lightness (or brightness) is also a <a id="_idIndexMarker2318"></a>percentage value from 0% (darkest) to 100% (lightest).</p>
			<div>
				<div id="_idContainer742" class="note">
					<h5 class="WarningHeader">Browser Support Note</h5>
					<p class="note">HSL and HSLa color<a id="_idIndexMarker2319"></a> are not supported in Internet Explorer versions 8 and earlier, so use a fallback if you must support those browsers.</p>
				</div>
			</div>
			<p class="body"><span class="Xref-Figure">Figure 13-8</span> shows one hue, cyan (located at 180° on the wheel) with its associated saturation and lightness levels. You can see why some people find this system more intuitive to use, because once you lock into a hue, it is easy to make it stronger, darker, or lighter by increasing or decreasing the percentage values. RGB values are not intuitive at all, although some practiced designers develop a feel for them. </p>
			<div>
				<figure id="_idContainer744" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1308_hsl.png" alt="" width="1321" height="808"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-8.</span> One hue in the HSL color model, with its associated saturation and lightness values.</figcaption>
				</figure>
			</div>
			<p class="body">In CSS, HSL values are provided as the hue value and two percentages. They are never converted to hexadecimal values, as may be done for RGB. Here is that lavender from <span class="Xref-Figure">Figure 13-3</span> as it would be specified using HSL:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">hsl(265, 51%, 80%)</code>;</pre>
			<h3 class="HeadC">Picking HSL color</h3>
			<p class="body">There are a number of HSL color pickers online. In the <a id="_idIndexMarker2320"></a>Google color picker, click “Show color values” below the panel to reveal the HSL values for your selected color. Here are some other cool tools worth checking out:</p>
			<ul>
				<li class="ListBullet">A Most Excellent HSL Color Picker by <a id="_idIndexMarker2321"></a>Brandon Mathis (<a href="http://hslpicker.com/"><span class="URL-Email">hslpicker.com/</span></a>) </li>
				<li class="ListBullet">HSL Color Picker (<a href="http://www.workwithcolor.com/hsl-color-picker-01.htm"><span class="URL-Email">www.workwithcolor.com/hsl-color-picker-01.htm</span></a>)</li>
				<li class="ListBullet">HSLa Explorer by Chris Coyier at <a id="_idIndexMarker2322"></a><a id="_idIndexMarker2323"></a>CSS-Tricks (<a href="http://css-tricks.com/examples/HSLaExplorer/"><span class="URL-Email">css-tricks.com/examples/HSLaExplorer/</span></a>)</li>
			</ul>
			<div>
				<div id="_idContainer745" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note">Be aware that the <a id="_idIndexMarker2324"></a>HSB color model listed in Photoshop’s color picker is <em class="Emphasis">not</em> the same as HSL and cannot be used for CSS.</p>
				</div>
			</div>
			<h3 class="HeadC">HSLa color</h3>
			<p class="body">As with RGB, you can add <a id="_idIndexMarker2325"></a><a id="_idIndexMarker2326"></a>an alpha channel to set the transparency of HSL colors, resulting in the HSLa color model. As for RGBa, the fourth value is the degree of transparency on a scale from 0 (fully transparent) to 1 (fully opaque<a id="_idIndexMarker2327"></a>). This example specifies a spring green color that is 65% opaque:</p>
			<pre class="CodeFirst">color: <code class="CodeColor">hsla</code>(70, 60%, 58%, <code class="CodeColor">.65</code>);</pre>
			<h2 class="HeadB">Summing Up Color Values</h2>
			<p class="body">It took us a few pages to get here, but the process for picking and specifying colors in style sheets is actually easy: </p>
			<ul>
				<li class="ListBullet">Pick one of the predefined color names, </li>
			</ul>
			<p class="body">or </p>
			<ul>
				<li class="ListBullet">Use a color picker to select a color and copy down the RGB values (preferably the six-digit hex values). Put those values in the style rule using one of the four RGB value formats, and you’re done. Or you could use HSL, if that feels easier to you.</li>
			</ul>
			<p class="body">There is one more colorful way to fill an element, and <a id="_idIndexMarker2328"></a>that’s <span class="FirstTerm">gradients</span> (colors that fade from one hue to another), but I’m going to save them for the end of this chapter.</p>
			<h1 id="_idParaDest-120" class="HeadA"><a id="_idTextAnchor172"></a>Foreground Color</h1>
			<p class="body">Now that we <a id="_idIndexMarker2329"></a><a id="_idIndexMarker2330"></a>know how to write color values, let’s get to the color-related properties. You can specify the foreground and background colors for any HTML element. There are also <span class="Literal-fc">border-color</span> properties that take color values, but we’ll get to those in <a href="lwd5_chapter14.xhtml#_idTextAnchor191"><span class="Xref">Chapter </span><span class="Xref">14</span><span class="Xref">, Thinking Inside the Box</span></a>.</p>
			<p class="body">The <span class="FirstTerm">foreground</span> of an element consists of its text and border (if one is specified). You specify a foreground color with the <span class="Literal-fc">color</span> property, as we saw in the last chapter when we rolled it out to give text a little pizzazz. Here are the details for the <a id="_idIndexMarker2331"></a><span class="Literal-fc">color</span> property one more time.</p>
			<p class="RefNameCode-Left">color</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">color value (name or numeric)</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	depends on the browser and user’s preferences</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	yes</p>
			<p class="body">In the following example, the foreground of a <span class="Literal-fc">blockquote</span> element is set to green with a color name. You can see that applying the <span class="Literal-fc">color</span> property to the <span class="Literal-fc">blockquote</span> element means the color is<a id="_idIndexMarker2332"></a><a id="_idIndexMarker2333"></a> inherited by the <span class="Literal-fc">p</span> and<a id="_idIndexMarker2334"></a> <span class="Literal-fc">em</span> elements it contains (<span class="Xref-Figure">Figure 13-9</span>). The thick dashed border around the whole blockquote is green as well; however, if we were to apply a <a id="_idIndexMarker2335"></a><span class="Literal-fc">border-color</span> property to this same element, that color would override the green foreground setting.</p>
			<div>
				<div id="_idContainer746" class="callout">
					<p class="callout">The foreground of an element consists of its text and border (if one is specified).</p>
				</div>
			</div>
			<p class="body"><span class="FigureLabel">The style rule</span></p>
			<pre class="CodeFirst">blockquote {<br/>   border: 4px dashed;<br/>  <span class="Code1">  </span><code class="CodeColor">color: green;</code><br/> }</pre>
			<p class="body"><span class="FigureLabel">The markup</span></p>
			<pre class="CodeFirst">&lt;blockquote&gt; <br/>In the latitude of central New England, cabbages are not secure ... <br/>&lt;/blockquote&gt;</pre>
			<div>
				<figure id="_idContainer748" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1309_color.png" alt="" width="1279" height="395"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-9.</span> Applying a color to the foreground of an element.</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-121" class="HeadA"><a id="_idTextAnchor173"></a>Background Color</h1>
			<p class="body">Use <a id="_idIndexMarker2336"></a><a id="_idIndexMarker2337"></a><a id="_idIndexMarker2338"></a><span class="Literal-fc">background-color</span> to apply a background color to any element. </p>
			<p class="RefNameCode-Left">background-color</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">color value (name or numeric)</span> | <span class="prop-code">transparent</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">transparent</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">A background color fills the <span class="FirstTerm">canvas</span> behind the element that includes the content area, and any padding (extra space) added around the content, extending behind the border out to its outer edge. Let’s see what happens when we use the <span class="Literal-fc">background-color</span> property to make the background of the same sample <span class="Literal-fc">blockquote</span> light green (<span class="Xref-Figure">Figure 13-10</span>):</p>
			<pre class="CodeFirst">blockquote {<br/>   border: 4px dashed;<br/>   color: green;<br/>   <code class="CodeColor">background-color: #c6de89;</code><br/>}</pre>
			<div>
				<figure id="_idContainer750" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1310_background.png" alt="" width="1279" height="375"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-10.</span> Adding a light green background color to the sample blockquote.</figcaption>
				</figure>
			</div>
			<p class="body">As expected, the background color fills the area behind the text, all the way to the border. Look closely at the gaps in the border, and you’ll see that the background color goes to its outer edge. But that’s where the background stops; if we apply a margin around this element, the background will not extend into the margin. We’ll revisit all these components of an element when we talk about the CSS box model. For now, just know that, by default, if your border has gaps, the background will show through.</p>
			<p class="body">It’s worth noting that background colors do not inherit, but because the default background setting for all elements is <span class="Literal-fc">transparent</span>, the <a id="_idIndexMarker2339"></a>parent’s background color shows through its <a id="_idIndexMarker2340"></a>descendant elements. For example, you can change the background color of a whole page by applying the <span class="Literal-fc">background-color</span> property to the <span class="Literal-fc">body</span> element and the color will show through all the elements on the page (see <span class="Xref--Sidebar-">“An Important Exception”</span>). </p>
			<div>
				<div id="_idContainer751" class="sidebar">
					<h5 class="SidebarSeries">An Important exception</h5>
					<p class="SidebarBody">When you apply a background to the <span class="Literal-Sidebar">body</span> (or more generically, on the root <span class="Literal-Sidebar">html</span>) element, it is treated specially. It doesn’t get clipped to the box, but instead extends to cover the entire viewport.</p>
				</div>
			</div>
			<p class="body">In addition to setting the color of the whole page, you can change the background color of any element, both block-level (like the <span class="Literal-fc">blockquote</span> shown in the previous example) as well as inline. In this example, I’ve used the <span class="Literal-fc">color</span> and <span class="Literal-fc">background-color</span> properties to highlight a word marked up as a “glossary” term. You can see in <span class="Xref-Figure">Figure 13-11</span> that the background color fills the little box created by the inline <span class="Literal-fc">dfn</span> element.</p>
			<p class="body"><span class="FigureLabel">The style rule</span></p>
			<pre class="CodeFirst">.glossary {<br/>  <code class="CodeColor">color: #0378a9;</code>  <span class="Code-Comment">/* blue */</span><br/>   <code class="CodeColor">background-color: yellow; </code><br/>}</pre>
			<p class="body"><span class="FigureLabel">The markup</span></p>
			<pre class="CodeFirst">&lt;p&gt;Every variety of cabbage had their origin in the wild cabbage of Europe (<code class="CodeColor">&lt;dfn class="glossary"&gt;</code>&lt;i&gt;Brassica oleracea&lt;/i&gt;<code class="CodeColor">&lt;/dfn&gt;</code>)&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer753" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1311_inline.png" alt="" width="1218" height="170"/><span class="FigureLabel"> </span></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-11.</span> Applying the background-color property to an inline element.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer754" class="sidebar">
					<h5 class="SidebarSeries">DESIGN TIP</h5>
					<h5 class="SidebarTitle">Using Color</h5>
					<p class="SidebarBody">Here are a <a id="_idIndexMarker2341"></a>few quick tips related to working with color:</p>
					<ul>
						<li class="SidebarListBullet">Limit the number of colors you use on a page. Nothing creates visual chaos faster than too many colors. I tend to choose one dominant color and one highlight color. I may also use a couple of shades of each, but I resist adding too many different hues.</li>
						<li class="SidebarListBullet">When specifying a <a id="_idIndexMarker2342"></a>foreground and background color, make sure that there is adequate contrast. People tend to prefer reading dark text on very light backgrounds online. </li>
						<li class="SidebarListBullet">Keep <a id="_idIndexMarker2343"></a><a id="_idIndexMarker2344"></a>color-blind users in mind when selecting colors. Chris Coyier’s article “Accessibility Basics: Testing <a id="_idIndexMarker2345"></a><a id="_idIndexMarker2346"></a>Your Page for Color Blindness” (<a href="https://css-tricks.com/accessibility-basics-testing-your-page-for-color-blindness/"><span class="URL-Email--Sidebar-">css-tricks.com/accessibility-basics-testing-your-page-for-color-blindness/</span></a>) is a good place to start researching strategies for<a id="_idIndexMarker2347"></a> color-blind-friendly design.</li>
					</ul>
					<p class="SidebarBody">Color contributes to both the aesthetics and usability of a site, so it is important to get it right.<a id="_idIndexMarker2348"></a> Geri Coady’s book <span class="Citation--Sidebar-">Color Accessibility Workflows</span> (A Book Apart) provides many best practices.</p>
				</div>
			</div>
			<h1 id="_idParaDest-122" class="HeadA"><a id="_idTextAnchor174"></a>Clipping the Background</h1>
			<p class="body">Traditionally,<a id="_idIndexMarker2349"></a><a id="_idIndexMarker2350"></a> <a id="_idIndexMarker2351"></a>the <span class="FirstTerm">background painting area</span> (the area on which fill colors are applied) of an element extends all the way out to the outer edge of the border, as we saw in <span class="Xref-Figure">Figure 13-10</span>. CSS3 introduced the <span class="Literal-fc">background-clip</span> property to give designers more control over where the painting area begins and <a id="_idIndexMarker2352"></a>ends.</p>
			<p class="RefNameCode-Left">background-clip</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">border-box</span> | <span class="prop-code">padding-box</span> | <span class="prop-code">content-box</span></p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">border-box</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">The default <span class="Literal-fc">border-box</span> value draws the painting area to the outside edge of the border, as we’ve seen. <span class="Xref-Figure">Figure 13-12</span> shows that <span class="Literal-fc">padding-box</span> starts the painting area on the outside edge of the padding area for the element (and to the inside edge of the border). Finally, <span class="Literal-fc">content-box</span> allows the background to fill only the content area for the element. </p>
			<p class="body">I can’t help but feel like I’m spoiling the surprise of the element box model and its properties here a little, since I was saving that for the next chapter. I’ve added some padding (space between the content and the border) so the effects of the clip settings will be more apparent.</p>
			<div>
				<figure id="_idContainer756" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1312_clip.png" alt="" width="1321" height="975"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-12.</span> The <span class="Literal-Sidebar">background-clip</span> property.</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-123" class="HeadA"><a id="_idTextAnchor175"></a>Playing with Opacity</h1>
			<p class="body">Earlier, we talked <a id="_idIndexMarker2353"></a><a id="_idIndexMarker2354"></a>about the RGBa color format, which adds a level of transparency when it is applied to a color or background. There is another way to make an element slightly see-through, however—the CSS3 <span class="Literal-fc">opacity</span> property. </p>
			<p class="RefNameCode-Left">opacity</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">number </span>(0 to 1)</p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">1</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">The value for <span class="Literal-fc">opacity</span> is a number between 0 (completely transparent) and 1 (completely opaque). A value of .5 gives the element an opacity of 50%. The <span class="Literal-fc">opacity</span> setting applies to the entire element—both the foreground and the background (if one has been set). If you want to affect just one or the other, use an RGBa color value instead.</p>
			<div>
				<div id="_idContainer757" class="callout">
					<p class="callout">The opacity setting applies to the entire element—both the foreground and the background.</p>
				</div>
			</div>
			<p class="body">In the following code example (and <span class="Xref-Figure">Figure 13-13</span>), a heading has been given a color of gold and a background color of white. When the <span class="Literal-fc">opacity</span> property is set, it allows the blue background of the page to show through both the text and the element box.</p>
			<pre class="CodeFirst">h1 {color: gold; background: white; <code class="CodeColor">opacity: .25</code>;} <br/>h1 {color: gold; background: white; <code class="CodeColor">opacity: .5</code>;} <br/>h1 {color: gold; background: white; <code class="CodeColor">opacity: 1</code>;}</pre>
			<div>
				<figure id="_idContainer759" class="figWCaption">
					<p class="Figure_Holder"> <img src="image/lwd5_1313_opacity.png" alt="" width="1321" height="504"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-13.</span> Setting the opacity on an element affects both the foreground and background colors.</figcaption>
				</figure>
			</div>
			<p class="body">You may be itching to take these color and background properties out for a spin, and we will in a moment, but first, I want to introduce you to some of the fancier CSS selectors and round out your collection. The <span class="Xref">“At a Glance”</span> sidebar lists the selectors you should feel comfortable with so far.</p>
			<div>
				<div id="_idContainer760" class="note">
					<h5 class="WarningHeader">Browser Support Note</h5>
					<p class="note">The <span class="Literal-Sidebar">opacity</span> property is not supported in Internet Explorer versions 8 and earlier. If you need to support IE8, use a style rule with Microsoft’s proprietary <span class="Literal-Sidebar">filter</span> property, then override it with the standard opacity style rule. </p>
					<pre class="SidebarCodeFirst">h1 {</pre>
					<pre class="SidebarCode">  <code class="CodeColor">filter:alpha(opacity=50);</code></pre>
					<pre class="SidebarCode">  opacity: .5;</pre>
					<pre class="SidebarCode">}</pre>
				</div>
			</div>
			<div>
				<div id="_idContainer761" class="sidebar">
					<h5 class="SidebarSeries">AT A GLANCE</h5>
					<h5 class="SidebarTitle">Selector Review</h5>
					<p class="SidebarBody">Here is a quick summary of the selector types we’ve covered already (“E” stands for “Element”):</p>
					<p class="SidebarBody"><a id="_idIndexMarker2355"></a>Element<a id="_idIndexMarker2356"></a> type selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E</code> {property: value;}</pre>
					<p class="SidebarBody">Grouped<a id="_idIndexMarker2357"></a> <a id="_idIndexMarker2358"></a>selectors</p>
					<pre class="SidebarCode"><code class="CodeColor">E1, E2, E3</code> {property: value;}</pre>
					<p class="SidebarBody">Descendant <a id="_idIndexMarker2359"></a><a id="_idIndexMarker2360"></a>selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E1 E2</code> {property: value;}</pre>
					<p class="SidebarBody">Child<a id="_idIndexMarker2361"></a> <a id="_idIndexMarker2362"></a>selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E1 &gt; E2</code> {property: value;}</pre>
					<p class="SidebarBody">Next-sibling selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E1 + E2</code> {property: value;}</pre>
					<p class="SidebarBody">Subsequent-sibling selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E1 ~ E2</code> {property: value;}</pre>
					<p class="SidebarBody">ID <a id="_idIndexMarker2363"></a><a id="_idIndexMarker2364"></a>selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E#id</code> {property: value;}</pre>
					<pre class="SidebarCode"><code class="CodeColor">#id</code> {property: value;}</pre>
					<p class="SidebarBody">Class<a id="_idIndexMarker2365"></a> <a id="_idIndexMarker2366"></a>selector</p>
					<pre class="SidebarCode"><code class="CodeColor">E.class</code> {property: value;}</pre>
					<pre class="SidebarCode"><code class="CodeColor">.class</code> {property: value;}</pre>
					<p class="SidebarBody">Universal <a id="_idIndexMarker2367"></a><a id="_idIndexMarker2368"></a>selector</p>
					<pre class="SidebarCode"><code class="CodeColor">*</code> {property: value;}</pre>
				</div>
			</div>
			<h1 id="_idParaDest-124" class="HeadA"><a id="_idTextAnchor176"></a><a id="_idTextAnchor177"></a>Pseudo-Class Selectors</h1>
			<p class="body">Have you ever noticed that a link is often one color when you click it and another color when you go back to that page? That’s because, behind the scenes, your browser is keeping track of which links have been clicked (or “visited,” to use the lingo). The browser keeps track of other states too, such as whether the user’s cursor is over an element (hover state), whether an element is the first of its type, whether it’s the first or last child of its parent, and whether a form element has been checked or disabled, just to name a few. </p>
			<p class="body">In CSS, you can apply styles to elements in these states by using a special kind of selector called<a id="_idIndexMarker2369"></a><a id="_idIndexMarker2370"></a> a <span class="FirstTerm">pseudo-class</span> selector. It’s an odd name, but you can think of it as though elements in a certain state belong to the same class. However, the class name isn’t in the markup—it’s something the browser just keeps track of. So it’s <em class="Emphasis">kinda</em> like a class…it’s a <em class="Emphasis">pseudo-class. </em></p>
			<p class="body">Pseudo-class selectors are indicated by<a id="_idIndexMarker2371"></a> <a id="_idIndexMarker2372"></a>the colon (<span class="Literal-fc">:</span>) character. They typically go immediately after an element name—for example, <span class="Literal-fc">li:first-child</span>. </p>
			<p class="body">There are quite a few pseudo-classes in CSS3, and the W3C has been going a little crazy in the CSS Selector Module Level 4 slinging around new pseudo-classes, the majority of which have no browser support as of this writing. In this section, I’ll introduce you to the most commonly used and the best supported as a solid starter kit. You can explore the cutting-edge selectors as you gain more experience. The full list of CSS selectors (including Level 4), with descriptions, can be found in <a href="lwd5_appendixC.xhtml#_idTextAnchor332"><span class="Xref">Appendix </span><span class="Xref">C</span></a>.</p>
			<h2 class="HeadB">Link Pseudo-Classes</h2>
			<p class="body">The most basic pseudo-class selectors target links (<span class="Literal-fc">a</span> elements) based on whether they have been clicked. Link pseudo-classes are a type of <span class="FirstTerm">dynamic pseudo-class</span> because they are applied as the result of the user interacting with the page rather than something in the markup.</p>
			<table id="table001-12" class="table_invisible _idGenTablePara-1">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">:link   </span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Applies <a id="_idIndexMarker2373"></a>a style to unclicked (unvisited) links</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">:visited</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Applies <a id="_idIndexMarker2374"></a>a style to links that have already been clicked </p>
						</td>
					</tr>
				</tbody>
			</table>
			<div>
				<div id="_idContainer762" class="sidebar">
					<h5 class="SidebarSeries">Usability Tip</h5>
					<p class="SidebarBody">When you alter the appearance of links and visited links, be sure that they still look like links. </p>
				</div>
			</div>
			<p class="body">By default,<a id="_idIndexMarker2375"></a> browsers typically display linked text as blue and links that have been clicked as purple, but you can change that with a few style rules. There are limitations on what properties may be applied to <span class="Literal-fc">:visited</span> links, as explained in the <span class="Xref">“Visited Links and Security”</span> sidebar.</p>
			<p class="body">In these examples, I’ve changed the color of unclicked links to maroon and visited links to gray. It is common for visited links to be a more muted color than unclicked links:</p>
			<pre class="CodeFirst"><code class="CodeColor">a:link</code> {<br/>  color: maroon;<br/>}<br/><code class="CodeColor">a:visited</code> {<br/>  color: gray;<br/>}</pre>
			<div>
				<div id="_idContainer763" class="sidebar">
					<h5 class="SidebarTitle">Visited Links and Security</h5>
					<p class="SidebarBody">Browsers<a id="_idIndexMarker2376"></a> keep track of what links have been visited, but for some users, a record of their visited links (which could be stolen by a malicious site) may be undesirable. For people in regions with severe restrictions on viewing online content, that record in the wrong hands could even be life threatening.  When it was determined that visual styles applied to visited links, as well as the methods browsers use to keep track of them, could be used to track users’ viewing histories, some changes were made to how visited links are handled. </p>
					<p class="SidebarBody">The first change was to limit the visual presentation properties that can be applied to visited links. Style rules with <span class="Literal-Sidebar">:visited</span> pseudo-class selectors may use only the following <a id="_idIndexMarker2377"></a>properties: <span class="Literal-Sidebar">color</span>, <span class="Literal-Sidebar">background-color</span>, <span class="Literal-Sidebar">border-color</span> (and individual side border properties), and <a id="_idIndexMarker2378"></a><span class="Literal-Sidebar">outline-color</span>. Any other property will be ignored. Furthermore, you cannot use any value that makes the link transparent, including the <span class="Literal-Sidebar">transparent</span> keyword and RGBa and<a id="_idIndexMarker2379"></a><a id="_idIndexMarker2380"></a> HSLa color values. </p>
					<p class="SidebarBody">Under the hood, the DOM mechanism that keeps track of what links have been visited will always return a “not visited” state, even when visited styles are displayed on the screen. This keeps browsing history hidden at the DOM level as well.</p>
					<p class="SidebarBody">The fate of the <span class="Literal-Sidebar">:visited</span> pseudo-class is uncertain, so do not apply styles that are critical to the usability of your site.</p>
				</div>
			</div>
			<h2 class="HeadB">User Action Pseudo-Classes</h2>
			<p class="body">Another type of dynamic pseudo-class targets states that result from direct user actions.</p>
			<p class="ListSimple"><span class="ListStartItem"><span class="Literal-fc">:focus</span></span><span class="ListStartItem"><span class="Literal-fc"> 	</span></span><span class="ListStartItem">Applies </span><span class="ListStartItem"><a id="_idIndexMarker2381"></a></span><span class="ListStartItem">when the element is selected and ready for input</span></p>
			<p class="ListSimple"><span class="ListStartItem"><span class="Literal-fc">:hover</span></span><span class="ListStartItem"><span class="Literal-fc">	</span></span><span class="ListStartItem">Applies </span><span class="ListStartItem"><a id="_idIndexMarker2382"></a></span><span class="ListStartItem">when the mouse pointer is over the element</span></p>
			<p class="ListSimple"><span class="ListStartItem"><span class="Literal-fc">:active</span></span><span class="ListStartItem"><span class="Literal-fc">	</span></span><span class="ListStartItem">Applies </span><span class="ListStartItem"><a id="_idIndexMarker2383"></a></span><span class="ListStartItem">when the element (such as a link or button) is in the process of being clicked or tapped</span></p>
			<h3 class="HeadC">Focus state</h3>
			<p class="body">If you’ve ever used a web form, then you should be familiar with how a browser visually emphasizes a form element when you select it. When an element is highlighted and ready for input, it is said to have “focus.” The <span class="Literal-fc">:focus</span> selector lets you apply custom styles to elements when they are in the focused state. </p>
			<p class="body">In this example, when a user selects a text input, it gets a yellow background color to make it stand out from the other form inputs: </p>
			<pre class="CodeFirst"><code class="CodeColor">input:focus</code> { background-color: yellow; }</pre>
			<h3 class="HeadC">Hover state</h3>
			<p class="body">The <span class="Literal-fc">:hover</span> selector is an interesting one. It targets elements while the user’s mouse pointer is directly over them. You can use the hover state with any element, although it is most commonly used with links to give the user visual feedback that an action is possible. Hover states are also used to trigger pop-up menus for navigation or for revealing more information about an object on the page. </p>
			<p class="body">This rule gives links a light pink background color while the mouse hovers over them:</p>
			<pre class="CodeFirst"><code class="CodeColor">a:hover</code> {<br/>  color: maroon;<br/>  <code class="CodeColor">background-color: #ffd9d9;</code><br/>}</pre>
			<p class="body">In the previous chapter, we saw the <a id="_idIndexMarker2384"></a><span class="Literal-fc">text-decoration</span> property used to turn off underlines under links. You could use the <span class="Literal-fc">:hover</span> selector to make the underlines appear only “on hover”:</p>
			<pre class="CodeFirst">a:hover {<br/>  <code class="CodeColor">text-decoration: underline;</code><br/>}</pre>
			<p class="body">It is important to note that there is no true hover state on touch-screen devices such as smartphones and tablets, so hover effects must be used with care and alternative solutions (see the sidebar <span class="Xref">“Hover on Touch Devices”</span>). </p>
			<div>
				<div id="_idContainer764" class="sidebar">
					<h5 class="SidebarTitle">Hover on Touch Devices</h5>
					<p class="SidebarBody">On the <a id="_idIndexMarker2385"></a><a id="_idIndexMarker2386"></a><a id="_idIndexMarker2387"></a>desktop, the mouse pointer can hover over elements on the screen, but touch devices respond only when the screen is actually touched. This can make hover effects problematic on smartphones and tablets.</p>
					<p class="SidebarBody">When hover effects are applied to a link (an<a id="_idIndexMarker2388"></a> <span class="Literal-Sidebar">a</span> element), mobile operating systems may display the hover state styles after a single tap. To follow the link, the user must tap again. Other hover-triggered elements, such as pop-up menus, may get stuck open, requiring the user to tap elsewhere or reload the page to clear it (not a good user experience, and a deal-breaker for some designs).</p>
					<p class="SidebarBody">There is no single CSS-based solution to this issue. Always including <span class="Literal-Sidebar">:focus</span> and <span class="Literal-Sidebar">:active</span> state styles along with the <span class="Literal-Sidebar">:hover</span> styles may help in some situations. Otherwise, your options are to use JavaScript to program the desired effect for mobile devices or to avoid the <span class="Literal-Sidebar">:hover</span> state and stick with outright clicks. It is possible to serve the hover-free styles in a style sheet targeted specifically to touch devices.</p>
					<p class="SidebarBody">JavaScript solutions are beyond the scope of this chapter, so I recommend these resources to get started. Some knowledge of JavaScript is required.</p>
					<ul>
						<li class="SidebarListBullet">“4 novel ways to deal with sticky <span class="Literal-Sidebar">:hover</span> effects on mobile devices” (<a href="http://www.javascriptkit.com/dhtmltutors/sticky-hover-issue-solutions.shtml"><span class="URL-Email--Sidebar-">www.javascriptkit.com/dhtmltutors/sticky-hover-issue-solutions.shtml</span></a>).</li>
						<li class="SidebarListBullet">Search for “hover states on touch devices” on <a id="_idIndexMarker2389"></a>StackOverflow.com and see questions and answers related to this issue. Stack Overflow is a forum where programmers can ask questions and get help from fellow programmers. You’ll find a lot of solutions, but also some dead ends. </li>
					</ul>
				</div>
			</div>
			<h3 class="HeadC">Active state</h3>
			<p class="body">Finally, the <span class="Literal-fc">:active</span> selector applies styles to an element while it is in the process of being activated. In the case of a link, it is the style that is applied while it is being clicked or while a fingertip is in contact with it on a touch screen. This style may be displayed only for an instant, but it can give a subtle indication that something has happened. In this example, I’ve brightened up the color for the active state (from maroon to red):</p>
			<pre class="CodeFirst"><code class="CodeColor">a:active</code> {<br/>  color: red;<br/>  background-color: #ffd9d9;<br/>}</pre>
			<h2 class="HeadB">Putting It All Together</h2>
			<p class="body">Web designers commonly provide styles for all of these link states because it is an easy way to give a nice bit of feedback at every stage of clicking a link (and it usually improves on the browser defaults). In fact, users have come to expect this feedback: seeing at a glance which links have been followed, having links do something when they point at them, and receiving confirmation when the links are successfully clicked. </p>
			<p class="body">When you apply styles to <span class="Literal-fc">a</span> elements with all five pseudo-classes, the order in which they appear is important for them to function properly. For example, if you put <span class="Literal-fc">:link</span> or <span class="Literal-fc">:visited</span> last, they override the other states, preventing them from appearing. The required order for link pseudo-classes is <span class="Literal-fc">:link</span>, <span class="Literal-fc">:visited</span>, <span class="Literal-fc">:focus</span>, <span class="Literal-fc">:hover</span>, <span class="Literal-fc">:active</span> (LVFHA, which you can remember with LoVe For Hairy Animals, or the mnemonic device of your choice).</p>
			<div>
				<div id="_idContainer765" class="callout">
					<p class="callout">The required order for pseudo-classes is: </p>
					<p class="callout">:link :visited :focus :hover :active</p>
				</div>
			</div>
			<p class="body">It is recommended that you provide a <span class="Literal-fc">:focus</span> style for users who use the keyboard to tab through links on a page rather than clicking with a mouse. Applying the same style used for <span class="Literal-fc">:hover</span> is common, although not required.</p>
			<p class="body">To sum things up, the link styles I’ve shown should look like this in the style sheet. <span class="Xref-Figure">Figure 13-14</span> shows the results.</p>
			<pre class="CodeFirst">a { text-decoration: none; }  <span class="Code-Comment">/* turns underlines off for all links */</span><br/><code class="CodeColor"> </code>a:link { color: maroon; } <br/>a:visited { color: gray; } <br/>a:focus { color: maroon; background-color: #ffd9d9; } <br/>a:hover { color: maroon; background-color: #ffd9d9; } <br/>a:active { color: red; background-color: #ffd9d9; }</pre>
			<div>
				<figure id="_idContainer767" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1314_links-ebook.png" alt="" width="1337" height="1300"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-14.</span> Changing the colors and backgrounds of links with pseudo-class selectors.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Other Pseudo-Class Selectors</h2>
			<p class="body">OK…five CSS3 pseudo-classes down, only 40 more to go! Well, I don’t know about you, but that sounds like it would take a while, and we have other selector types to explore. However, I do want you to know what is possible today and what is in the works, so I’ve tucked the CSS3 pseudo-class selectors into the <span class="Xref">“More CSS Pseudo-Classes”</span> sidebar. In addition, you can find the complete list of Level 3 and 4 selectors in <a href="lwd5_appendixC.xhtml#_idTextAnchor332"><span class="Xref">Appendix </span><span class="Xref">C</span><span class="Xref">, CSS Selectors, Levels 3 and 4</span></a> with brief descriptions. </p>
			<p class="body">I also highly recommend reading “An Ultimate Guide to CSS Pseudo-Classes and Pseudo-Elements” by <a id="_idIndexMarker2390"></a><a id="_idIndexMarker2391"></a>Ricardo Zea of <span class="Citation">Smashing Magazine</span> (<a href="http://www.smashingmagazine.com/2016/05/an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements/"><span class="URL-Email">www.smashingmagazine.com/2016/05/an-ultimate-guide-to-css-pseudo-classes-and-pseudo-elements/</span></a>). He’s done the hard work of providing explanations and examples of all of the CSS3 pseudo-class selectors in one big roundup. </p>
			<div>
				<div id="_idContainer768" class="sidebar">
					<h5 class="SidebarTitle">More CSS3 Pseudo-Classes</h5>
					<p class="SidebarBody">The W3C has been creating all sorts of interesting ways to select content for styling based on states the browser keeps track of on the fly.  </p>
					<p class="SidebarBody">CSS3 introduced a whole slew of pseudo-classes, most of which are supported by browsers today. Of course, Internet Explorer 8 and earlier lack support, but you could use the<a id="_idIndexMarker2392"></a> <a id="_idIndexMarker2393"></a>Selectivizr polyfill (<a href="http://selectivizr.com"><span class="URL-Email--Sidebar-">selectivizr.com</span></a>) to emulate support in the rare event you need to support IE 6–8. </p>
					<p class="SidebarBody">An excellent resource for learning more about these CSS Level 3 and 4 selectors, including browser support information, is <a href="http://CSS4-selectors.com"><span class="URL-Email--Sidebar-">CSS4-selectors.com</span></a> by <a id="_idIndexMarker2394"></a>Nelly Brekardin.<strong class="Emphasis_Bold">Structural pseudo-classes</strong></p>
					<p class="SidebarBody">These allow selection based on where the element is in the structure of the document <a id="_idIndexMarker2395"></a><a id="_idIndexMarker2396"></a>(<a id="_idIndexMarker2397"></a>the<a id="_idIndexMarker2398"></a><a id="_idIndexMarker2399"></a><a id="_idIndexMarker2400"></a><a id="_idIndexMarker2401"></a><a id="_idIndexMarker2402"></a><a id="_idIndexMarker2403"></a><a id="_idIndexMarker2404"></a><a id="_idIndexMarker2405"></a><a id="_idIndexMarker2406"></a><a id="_idIndexMarker2407"></a><a id="_idIndexMarker2408"></a><a id="_idIndexMarker2409"></a><a id="_idIndexMarker2410"></a> <a id="_idIndexMarker2411"></a>document tree): </p>
					<p class="SidebarListSimple"><code class="Code">:root</code></p>
					<p class="SidebarListSimple"><code class="Code">:empty</code></p>
					<p class="SidebarListSimple"><code class="Code">:first-child</code></p>
					<p class="SidebarListSimple"><code class="Code">:last-child</code></p>
					<p class="SidebarListSimple"><code class="Code">:only-child</code></p>
					<p class="SidebarListSimple"><code class="Code">:first-of-type</code></p>
					<p class="SidebarListSimple"><code class="Code">:last-of-type</code></p>
					<p class="SidebarListSimple"><code class="Code">:only-of-type</code></p>
					<p class="SidebarListSimple"><code class="Code">:nth-child()</code></p>
					<p class="SidebarListSimple"><code class="Code">:nth-last-child()</code></p>
					<p class="SidebarListSimple"><code class="Code">:nth-of-type()</code></p>
					<p class="SidebarListSimple"><code class="Code">:nth-last-of-type()</code></p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Input pseudo-classes</strong></p>
					<p class="SidebarBody">These selectors apply to states that are typical for form inputs:</p>
					<p class="SidebarListSimple"><code class="Code">:enabled</code></p>
					<p class="SidebarListSimple"><code class="Code">:disabled</code></p>
					<p class="SidebarListSimple"><code class="Code">:checked</code></p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Location pseudo-classes (in addition </strong><strong class="Emphasis_Bold"><a id="_idIndexMarker2412"></a></strong><strong class="Emphasis_Bold">to :link and :visited)</strong></p>
					<p class="SidebarListSimple"><code class="Code">:target</code> (fragment identifier)</p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Linguistic pseudo-class</strong></p>
					<p class="SidebarListSimple"><code class="Code">:lang()  </code></p>
					<p class="SidebarBody"><strong class="Emphasis_Bold">Logical pseudo-class</strong></p>
					<p class="SidebarListSimple"><code class="Code">:not() </code></p>
				</div>
			</div>
			<h1 id="_idParaDest-125" class="HeadA"><a id="_idTextAnchor178"></a><a id="_idTextAnchor179"></a>Pseudo-Element Selectors</h1>
			<p class="body">Pseudo-<a id="_idIndexMarker2413"></a>classes<a id="_idIndexMarker2414"></a> aren’t the only kind of pseudo-selectors. There are also four pseudo-elements that act as though they are inserting fictional elements into the document structure for styling. In CSS3, pseudo-elements are indicated by a<a id="_idIndexMarker2415"></a> <a id="_idIndexMarker2416"></a>double colon (<span class="Literal-fc">::</span>) symbol to differentiate them from pseudo-classes. However, all browsers support the <a id="_idIndexMarker2417"></a><a id="_idIndexMarker2418"></a>single-colon syntax (<span class="Literal-fc">:</span>) as they were defined in CSS2, so many developers stick with that to ensure backward compatibility with older browsers.</p>
			<h2 class="HeadB">First Letter and Line</h2>
			<p class="body">The following pseudo-elements are used to select the first line or the first letter of text in an element as displayed in the browser.</p>
			<div>
				<div id="_idContainer769" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">There are a few properties in this list that you haven’t seen yet. We’ll cover the box-related properties (<span class="Literal-Sidebar">margin</span>, <span class="Literal-Sidebar">padding</span>, <span class="Literal-Sidebar">border</span>) in <a href="lwd5_chapter14.xhtml#_idTextAnchor191"><span class="Xref--Sidebar-">Chapter </span><span class="Xref--Sidebar-">14</span><span class="Xref--Sidebar-">, Thinking Inside the Box</span></a><span class="Xref--Sidebar-">.</span> The <span class="Literal-Sidebar">float</span> property is introduced in <a href="lwd5_chapter15.xhtml#_idTextAnchor204"><span class="Xref--Sidebar-">Chapter </span><span class="Xref--Sidebar-">15</span><span class="Xref--Sidebar-">, Floating and Positioning</span></a><span class="Xref--Sidebar-">.</span></p>
				</div>
			</div>
			<p class="ListVariableTerm"><span class="Literal-fc">::first-line</span></p>
			<p class="ListVariable">This selector <a id="_idIndexMarker2419"></a>applies a style rule to the first line of the specified element. The only properties you can apply<a id="_idIndexMarker2420"></a><a id="_idIndexMarker2421"></a><a id="_idIndexMarker2422"></a>,<a id="_idIndexMarker2423"></a><a id="_idIndexMarker2424"></a> however, are as follows: </p>
			<pre class="SidebarCode-2Col"><code class="Code">color <br/>font</code> <span class="birkaCodeOverride">properties</span><br/> <code class="Code">background</code> <span class="birkaCodeOverride">properties</span> <br/><code class="Code">word-spacing <br/>letter-spacing <br/>text-decoration <br/>vertical-align <br/>text-transform <br/>line-height</code></pre>
			<p class="ListVariableTerm"><span class="Literal-fc">::first-letter</span></p>
			<p class="ListVariable">This applies a<a id="_idIndexMarker2425"></a> style rule to the first letter of the specified element. The properties you can apply are<a id="_idIndexMarker2426"></a><a id="_idIndexMarker2427"></a><a id="_idIndexMarker2428"></a> limited to the following:</p>
			<pre class="SidebarCode-2Col"><code class="Code">color</code> <br/><code class="Code">font</code> <span class="birkaCodeOverride">properties</span><br/> <code class="Code">background</code> <span class="birkaCodeOverride">properties</span><br/> <code class="Code">letter-spacing <br/>word-spacing <br/>text-decoration <br/>text-transform <br/>vertical-align</code> <span class="birkaCodeOverride">(if float is none)</span> <br/><code class="Code">padding</code> properties <br/><code class="Code">margin</code> properties<br/> <code class="Code">border</code> properties <br/><code class="Code">line-height <br/>float</code></pre>
			<p class="body"><span class="Xref-Figure">Figure 13-15</span> shows examples of the <span class="Literal-fc">::first-line</span> and <span class="Literal-fc">::first-letter </span>pseudo-element selectors.</p>
			<pre class="CodeFirst"><code class="CodeColor">p::first-line</code> { letter-spacing: 9px; } <br/><code class="CodeColor">p::first-letter</code> { font-size: 300%; color: orange; }</pre>
			<div>
				<figure id="_idContainer771" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1315_firsts.png" alt="" width="1321" height="579"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-15.</span><span class="FigureLabel"> </span>Examples of <span class="Literal-Sidebar">::first-line</span> and <span class="Literal-Sidebar">::first-letter</span> pseudo-element selectors.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Generated Content with ::before and ::after</h2>
			<p class="body">You’ve seen <a id="_idIndexMarker2429"></a><a id="_idIndexMarker2430"></a><a id="_idIndexMarker2431"></a><a id="_idIndexMarker2432"></a>how browsers add bullets and numbers to lists automatically, even though they are not actually in the HTML source. That is an example of <span class="FirstTerm">generated content</span>, content that browsers insert on the fly. It is possible to tell browsers to generate content before or after any element you like by using the <span class="Literal-fc">::before</span> and <span class="Literal-fc">::after</span> pseudo-elements (see <span class="Xref">Note</span>).</p>
			<div>
				<div id="_idContainer772" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Although double colons are specified in CSS3, you can use single colons for backward compatibility. Browsers are also required to support single colons going forward.</p>
				</div>
			</div>
			<p class="body">Generated content could be used to add icons before list items, to display URLs next to links when web documents get printed out, to add language-appropriate quotation marks around a quote, and much more. Here’s a simple example that inserts an image by using the <a id="_idIndexMarker2433"></a><span class="Literal-fc">url()</span> function before the paragraph and “Thank you.” at the end of the paragraph. Compare the markup to what you see rendered in the browser (<span class="Xref-Figure">Figure 13-16</span>).</p>
			<p class="body"><span class="FigureLabel">The styles:</span></p>
			<pre class="CodeFirst"><code class="CodeColor">p.warning::before</code> {<br/>  <code class="CodeColor">content: url(exclamation.png)</code>;<br/>  margin-right: 6px; <br/>}<br/><code class="CodeColor">p.warning::after</code> {<br/>   <code class="CodeColor">content: " Thank you."</code>;<br/>  color: red; <br/>}</pre>
			<p class="body"><span class="FigureLabel">The markup</span><span class="FigureLabel">:</span></p>
			<pre class="CodeFirst">&lt;p class="warning"&gt;We are required to warn you that undercooked food is a health risk.&lt;/p&gt; </pre>
			<div>
				<figure id="_idContainer774" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1316_beforeafter.png" alt="" width="1028" height="141"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-16.</span><span class="FigureLabel"> </span>Generated content added with the <span class="Literal-Sidebar">::before</span> and <span class="Literal-Sidebar">::after</span> pseudo-selectors.</figcaption>
				</figure>
			</div>
			<p class="body">There are a few things of note in this example:</p>
			<ul>
				<li class="ListBullet">The pseudo-element selector goes immediately after the target element without any space. </li>
				<li class="ListBullet">The pseudo-element rule both inserts the content and specifies how it should be styled in one declaration block.</li>
				<li class="ListBullet">The <a id="_idIndexMarker2434"></a><span class="Literal-fc">content</span> property, which provides the content you want inserted, is required. The selector won’t do anything without it.</li>
				<li class="ListBullet">If you want spaces between the generated content and the content from the source document, you must include the character spaces inside the value’s quotation marks or apply a margin.</li>
			</ul>
			<p class="body">If you want to insert an image, such as an icon or other mark, specify the URL without quotations marks:</p>
			<pre class="CodeFirst">li:before { content: <code class="CodeColor">url(images/star.png)</code> }</pre>
			<p class="body">When using generated content, keep in mind that whatever you insert does not become part of the document’s DOM. It exists in the browser’s display only and is not accessible to assistive devices like screen readers. It is best to use generated content for decorations and other “extras” that are not critical to your meaning and message.</p>
			<div>
				<div id="_idContainer775" class="sidebar">
					<h5 class="SidebarSeries">Further Reading</h5>
					<p class="SidebarBody">“Learning to Use the :before and :after Pseudo-Elements in CSS” by <a id="_idIndexMarker2435"></a>Louis Lazaris (<a href="http://www.smashingmagazine.com/2011/07/learning-to-use-the-before-and-after-pseudo-elements-in-css/"><span class="URL-Email--Sidebar-">www.smashingmagazine.com/2011/07/learning-to-use-the-before-and-after-pseudo-elements-in-css/</span></a>).</p>
				</div>
			</div>
			<h1 id="_idParaDest-126" class="HeadA"><a id="_idTextAnchor180"></a><a id="_idTextAnchor181"></a>Attribute Selectors</h1>
			<p class="body">We’re finally in the <a id="_idIndexMarker2436"></a><a id="_idIndexMarker2437"></a>home stretch with selectors. <span class="FirstTerm">Attribute selectors</span> target elements based on attribute names or values, which provides a lot of flexibility for selecting elements without needing to add a lot of <span class="Literal-fc">class</span> <a id="_idIndexMarker2438"></a><a id="_idIndexMarker2439"></a>or <span class="Literal-fc">id</span> markup. The CSS3 attribute selectors are listed here:</p>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><span class="Literal-fc">]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">simple attribute selector</span> targets<a id="_idIndexMarker2440"></a> elements with a particular attribute regardless of its value. The following example selects any image that has a <span class="Literal-fc">title</span> attribute. </p>
			<pre class="CodeFirst"><code class="CodeColor">img[title]</code> {border: 3px solid;}</pre>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><span class="Literal-fc">="</span><span class="Replaceable">exact value</span><span class="Literal-fc">"]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">exact attribute value selector</span> selects<a id="_idIndexMarker2441"></a> elements with a specific value for the attribute. This selector matches images with exactly the <span class="Literal-fc">title</span> value “first grade”.</p>
			<pre class="CodeFirst"><code class="CodeColor">img[title="first grade"]</code> {border: 3px solid;}</pre>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><code class="CodeColor">~</code><span class="Literal-fc">="</span><span class="Replaceable">value</span><span class="Literal-fc">"]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">partial attribute value selector</span> (<a id="_idIndexMarker2442"></a> with a tilde, <span class="Literal-fc">~</span>) looks for the specified value in the list of space-separated values provided for the given attribute. This example looks for “grade” in the title attribute, so images with the <span class="Literal-fc">title</span> value “first grade” and “second grade” would be selected.</p>
			<pre class="CodeFirst"><code class="CodeColor">img[title~="grade"]</code> {border: 3px solid;}</pre>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><code class="CodeColor">|</code><span class="Literal-fc">="</span><span class="Replaceable">value</span><span class="Literal-fc">"]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">hyphen-separated attribute value selector</span> <a id="_idIndexMarker2443"></a>(indicated with a bar, <span class="Literal-fc">|</span>) targets hyphen-separated values. This selector matches any link that points to a document written in a variation on the English language (<span class="Literal-fc">en</span>), whether the attribute value is <span class="Literal-fc">en-us</span> (American English), <span class="Literal-fc">en-in</span> (Indian English), <span class="Literal-fc">en-au-tas</span> (Australian English), and so on. </p>
			<pre class="CodeFirst"><code class="CodeColor">[hreflang|="en"]</code> {border: 3px solid;}</pre>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><code class="CodeColor">^</code><span class="Literal-fc">="</span><span class="Replaceable">first part of the value</span><span class="Literal-fc">"]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">beginning substring attribute value selector</span> <a id="_idIndexMarker2444"></a>(indicated with a carat, <span class="Literal-fc">^</span>) matches elements whose specified attribute values <em class="Emphasis">start</em> in the string of characters in the selector. This example applies the style only to images that are found in the <span class="Filename">/images/icons</span> directory.</p>
			<pre class="CodeFirst"><code class="CodeColor">img[src^="/images/icons"]</code> {border: 3px solid;}</pre>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><code class="CodeColor">$</code><span class="Literal-fc">="</span><span class="Replaceable">last part of the value</span><span class="Literal-fc">"]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">ending substring attribute value selector</span> (indicated <a id="_idIndexMarker2445"></a>with a <a id="_idIndexMarker2446"></a><a id="_idIndexMarker2447"></a>dollar sign, <span class="Literal-fc">$</span>) matches elements whose specified attribute values <em class="Emphasis">end</em> in the string of characters in the selector. In this example, you can apply a style to just the <span class="Literal-fc">a</span> elements that link to PDF files.</p>
			<pre class="CodeFirst"><code class="CodeColor">a[href$=".pdf"]</code> {border-bottom: 3px solid;}</pre>
			<p class="ListVariableTerm"><span class="Literal-fc">element[</span><span class="Replaceable">attribute</span><code class="CodeColor">*</code><span class="Literal-fc">="</span><span class="Replaceable">any part of the value</span><span class="Literal-fc">"]</span></p>
			<p class="ListVariable">The <span class="FirstTerm">arbitrary substring attribute value selector</span> <a id="_idIndexMarker2448"></a>(indicated with an asterisk, <span class="Literal-fc">*</span>) looks for the provided text string in any part of the attribute value specified. This rule selects any image that contains the word “February” somewhere in its <span class="Literal-fc">title</span>.</p>
			<pre class="CodeFirst"><code class="CodeColor">img[title*="February"]</code> {border: 3px solid;}</pre>
			<div>
				<div id="_idContainer776" class="sidebar">
					<h5 class="SidebarSeries">Fun Fact</h5>
					<p class="SidebarBody">Class and ID selectors are just special types of attribute selectors.</p>
				</div>
			</div>
			<p class="body">OK, we’re done with selectors! You’ve been a real trouper. I think it’s definitely time to try out foreground and background colors as well as a few of these new selector types in <span class="Xref-Figure">Exercise 13-1</span> before moving on to background images.</p>
			<div>
				<div id="_idContainer780" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">exercise 13-1.</span> Adding color to a document</h6>
					<p class="SidebarBody">In this exercise, we’ll <a id="_idIndexMarker2449"></a>start with a simple black-and-white menu and give it some personality with foreground and background colors (<span class="Xref-Figure">Figure 13-17</span>). You should have enough experience writing style rules by this point that I’m not going to hold your hand as much as I have in previous exercises. This time, you write the rules. You can check your work against the finished style sheet provided with the materials for this chapter. </p>
					<p class="SidebarBody">Open the file <span class="Filename--Sidebar-">summer-menu.html</span> (get it at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a>) in a text editor. You will find that there is already an embedded style sheet that provides basic text formatting. You’ll just need to work on the colors. Feel free to save the document at any step along the way and view your progress in a browser. </p>
					<div>
						<div id="_idContainer777" class="note">
							<h5 class="WarningHeader">WARNING</h5>
							<p class="note">Don’t forget the <a id="_idIndexMarker2450"></a><a id="_idIndexMarker2451"></a><span class="Literal-Sidebar">#</span> character before hex values. The rule won’t work without it.</p>
						</div>
					</div>
					<ol>
						<li class="SidebarListNumber">Make the <span class="Literal-Sidebar">h1</span> heading purple (R:153, G:51, B:153, or <span class="Literal-Sidebar">#993399</span>) by adding a new declaration to the existing <span class="Literal-Sidebar">h1</span> rule. Note that because this value has all double digits, you can use the condensed version (<span class="Literal-Sidebar">#939</span>).</li>
						<li class="SidebarListNumber">Make the <span class="Literal-Sidebar">h2</span> headings light brown (R:204, G:102, B:0, <span class="Literal-Sidebar">#cc6600</span> or <span class="Literal-Sidebar">#c60</span>). </li>
						<li class="SidebarListNumber">Make the background of the entire page a light green (R:210, G:220, B:157, or <span class="Literal-Sidebar">#d2dc9d</span>). Now might be a nice time to save, have a look in a browser, and troubleshoot if the background and headings do not appear in color.</li>
						<li class="SidebarListNumber">Make the background of the <span class="Literal-Sidebar">header</span> white with 50% transparency (R:255, G:255, B:255, .5) so a hint of the background color shows through.</li>
						<li class="SidebarListNumber">I’ve already added a rule that turns underlines off under links (<span class="Literal-Sidebar">text-decoration:none</span>), so we’ll be relying on color to make the links pop. Write a rule that makes links the same purple as the <span class="Literal-Sidebar">h1</span> (<span class="Literal-Sidebar">#939</span>).</li>
						<li class="SidebarListNumber">Make visited links a muted purple (<span class="Literal-Sidebar">#937393</span>).</li>
						<li class="SidebarListNumber">When the mouse is placed over links, make the text a brighter purple (<span class="Literal-Sidebar">#c700f2</span>) and add a white background color (<span class="Literal-Sidebar">#fff</span>). This will look a little like the links are lighting up when the mouse is pointing at it. Use these same style rules for when the links are in focus. </li>
						<li class="SidebarListNumber">As the mouse is being clicked (or tapped on a touch device), add a white background color and make the text turn a vibrant purple (<span class="Literal-Sidebar">#ff00ff</span>). Make sure that all of your link pseudo-classes are in the correct order.</li>
					</ol>
					<p class="SidebarBody">When you are done, your page should look like <span class="Xref-Figure">Figure 13-17</span>. We’ll be adding background images to this page later, so if you’d like to continue experimenting with different colors on different elements, make a copy of this document and give it a new name. Remember that the <a id="_idIndexMarker2452"></a>Google color picker is an easy destination for colors and their RGB equivalents.</p>
					<div>
						<figure id="_idContainer779" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1317_exercise1_horiz.png" alt="" width="1875" height="625"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-17.</span> The Black Goose Bistro menu page with colors applied.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<div>
				<div id="_idContainer781" class="sidebar">
					<h5 class="SidebarSeries">AT A GLANCE</h5>
					<h5 class="SidebarTitle">Background Properties</h5>
					<p class="SidebarBody">The properties related to the background <a id="_idIndexMarker2453"></a><a id="_idIndexMarker2454"></a><a id="_idIndexMarker2455"></a><a id="_idIndexMarker2456"></a><a id="_idIndexMarker2457"></a><a id="_idIndexMarker2458"></a><a id="_idIndexMarker2459"></a>are:</p>
					<pre class="SidebarCodeFirst">background-color <br/>background-image <br/>background-repeat <br/>background-position <br/>background-attachment <br/>background-clip <br/>background-size <br/>background</pre>
				</div>
			</div>
			<h1 id="_idParaDest-127" class="HeadA"><a id="_idTextAnchor182"></a>Background Images</h1>
			<p class="body">We’ve seen <a id="_idIndexMarker2460"></a><a id="_idIndexMarker2461"></a>how to add images to the content of the document by using the <span class="Literal-fc">img</span> element, but most decorative images are added to pages and elements as backgrounds with CSS. After all, decorations such as tiling background patterns are firmly part of presentation, not structure. We’ve come a long way from the days when sites were giant graphics cut up and held together with tables (<em class="Emphasis">shudder</em>).</p>
			<p class="body">In this section, we’ll look at the collection of properties used to place and push around background images, starting with the basic <span class="Literal-fc">background-image</span> property. </p>
			<h2 class="HeadB">Adding a Background Image</h2>
			<p class="body">The <span class="Literal-fc">background-image</span><span class="Literal-fc"><a id="_idIndexMarker2462"></a></span> property adds a background image to any element. Its primary job is to provide the location of the image file.</p>
			<p class="RefNameCode-Left">background-image</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">url(</span><span class="prop-replace">location of image</span><span class="prop-code">)</span> | <span class="prop-code">none</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">none</span></p>
			<p class="property"><span class="prop-label">f you want a background image to appear just once, use theApplies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">The value of <span class="Literal-fc">background-image</span> is a sort of URL holder that contains the location of the image (see <span class="Xref">Note</span>). </p>
			<div>
				<div id="_idContainer782" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">The proper term for that “URL holder” is a<a id="_idIndexMarker2463"></a> <span class="FirstTerm--Sidebar-">functional notation</span>. It is the same syntax used to list decimal and percentage RGB values.</p>
				</div>
			</div>
			<p class="body">The URL is relative to wherever the CSS rule is at the time. If the rule is in an embedded style sheet (a <span class="Literal-fc">style</span> element in the HTML document), then the pathname in the URL should be relative to the location of the HTML file. If the CSS rule is in an external style sheet, then the pathname to the image should be relative to the location of the <span class="Filename">.css</span> file. </p>
			<p class="body">As an alternative, providing <a id="_idIndexMarker2464"></a><a id="_idIndexMarker2465"></a>site root relative URLs for images ensures that the background image can be found regardless of the location of the style rules. The root directory is indicated by a<a id="_idIndexMarker2466"></a> slash at the beginning of the URL. For example:</p>
			<pre class="CodeFirst">background-image: url(<code class="CodeColor">/images/background.jpg</code>);</pre>
			<p class="body">The downside, as for all site root relative URLs, is that you won’t be able to test<a id="_idIndexMarker2467"></a> it locally (from your own computer) unless you have it set up as a server.</p>
			<p class="body">These examples and <span class="Xref-Figure">Figure 13-18</span> show background images applied behind a whole page (<span class="Literal-fc">body</span>) and a single <span class="Literal-fc">blockquote</span> element with<a id="_idIndexMarker2468"></a> padding and a border<a id="_idIndexMarker2469"></a> applied.</p>
			<pre class="CodeFirst">body {<br/>   <code class="CodeColor">background-image: url(star.png); </code><br/>} <br/>blockquote {<br/> <code class="CodeColor">  background-image: url(dot.png); </code><br/>  padding: 2em;<br/>  border: 4px dashed; <br/>}</pre>
			<div>
				<figure id="_idContainer784" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1318_tiling.png" alt="" width="1321" height="1363"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-18.</span> Tiling background images added with the <span class="Literal-Sidebar">background-image</span> property.</figcaption>
				</figure>
			</div>
			<p class="body">Here you can see the default behavior of <span class="Literal-fc">background-image</span>. The image starts in the top-left corner and tiles horizontally and vertically until the entire element is filled (although you’ll learn how to change that in a moment). Like background colors, tiling background images fill the area behind the content area, fill the extra padding space around the content, and extend to the outer edge of the border (if there is one). You can change the background painting area with the <span class="Literal-fc">background-clip</span> property.</p>
			<p class="body">If you provide both a <span class="Literal-fc">background-color</span> and a <span class="Literal-fc">background-image</span> to an element, the image is placed on top of the color. In fact, it is recommended that you <em class="Emphasis">do</em> provide a backup color that is similar in hue, in the event that the image fails to download.</p>
			<div>
				<div id="_idContainer785" class="sidebar">
					<h5 class="SidebarSeries">DESIGN TIP</h5>
					<h5 class="SidebarTitle">Tiling Background Images</h5>
					<p class="SidebarBody">When<a id="_idIndexMarker2470"></a><a id="_idIndexMarker2471"></a> working with background images, keep these guidelines and tips in mind:</p>
					<ul>
						<li class="SidebarListBullet">Use a simple image that won’t interfere with the legibility of the text over it.</li>
						<li class="SidebarListBullet">Always provide a background-color value that matches the primary color of the background image. If the background image fails to display, at least the overall design of the page will be similar. This is particularly important if the text color would be illegible against the browser’s default white background.</li>
						<li class="SidebarListBullet">As usual for the web, keep the file size of background images as small as possible.</li>
					</ul>
				</div>
			</div>
			<p class="body">Now you can try your hand at adding a tiling background image to a page in <span class="Xref-Figure">Exercise 13-2</span>.</p>
			<div>
				<div id="_idContainer788" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-2.</span> A<a id="_idTextAnchor183"></a>dding a tiling background image</h6>
					<p class="SidebarBody">In this exercise, we’re going to add a simple tiling background image to the menu. The images provided for this exercise should be in the <span class="Filename--Sidebar-">images</span> directory.</p>
					<p class="SidebarBody">Add a declaration to the <span class="Literal-Sidebar">body</span> style rule that makes the image <span class="Filename--Sidebar-">bullseye.png</span> tile in the background of the page. Be sure to include the pathname relative to the style sheet (in this case, the current HTML<a id="_idIndexMarker2472"></a> document).</p>
					<pre class="SidebarCodeFirst">background-image: url(images/bullseye.png);</pre>
					<p class="SidebarBody">Easy, isn’t it? When you save and view the page in the browser, it should look like <span class="Xref-Figure">Figure 13-19</span>. </p>
					<p class="SidebarBody">I want to point out that <span class="Filename--Sidebar-">bullseye.png</span> is a slightly transparent PNG graphic, so it blends into any background color. Try temporarily changing the <span class="Literal-Sidebar">background-color</span> for the <span class="Literal-Sidebar">body</span> element by adding a second <a id="_idIndexMarker2473"></a><span class="Literal-Sidebar">background-color</span> declaration lower in the stack so it overrides the previous one. Play around with different colors and notice how the circles blend in. When you are done experimenting, delete the second declaration so the background is green again and you’re ready to go for upcoming exercises.</p>
					<div>
						<figure id="_idContainer787" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1319_ex2.png" alt="" width="1338" height="734"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-19.</span> The menu with a simple tiling background image.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h2 class="HeadB">Background Repeating</h2>
			<p class="body">As we saw in <span class="Xref-Figure">Figure 13-18</span>, images tile left and right, up and down, when left to their own devices. You can change this behavior with the <span class="Literal-fc">background-repeat</span> <a id="_idIndexMarker2474"></a><a id="_idIndexMarker2475"></a>property.</p>
			<p class="RefNameCode-Left">background-repeat</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">repeat</span> | <span class="prop-code">no-repeat</span> | <span class="prop-code">repeat-x</span> | <span class="prop-code">repeat-y</span> | <span class="prop-code">space</span> | <span class="prop-code">round</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">repeat</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">If you want a background image to appear just once, use the <span class="Literal-fc">no-repeat</span> keyword value:</p>
			<pre class="CodeFirst">body {<br/>  background-image: url(star.png);<br/><code class="CodeColor">  background-repeat: no-repeat;</code><br/>}</pre>
			<p class="body">You can also restrict the image to tiling only horizontally (<span class="Literal-fc">repeat-x</span>) or vertically (<span class="Literal-fc">repeat-y</span>), as shown in these examples:</p>
			<pre class="CodeFirst">body {<br/>  background-image: url(star.png);<br/><code class="CodeColor">  background-repeat: repeat-x;</code><br/>}<br/>body {<br/>  background-image: url(star.png);<br/><code class="CodeColor">  background-repeat: repeat-y;</code><br/>}</pre>
			<p class="body"><span class="Xref-Figure">Figure 13-20</span> shows examples of each of these keyword values. Notice that in all the examples, the tiling begins in the top-left corner of the element (or browser window when an image is applied to the <span class="Literal-fc">body</span> element). In the next section, I’ll show you how to change that.</p>
			<div>
				<figure id="_idContainer790" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1320_repeat.png" alt="" width="1321" height="1208"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-20.</span> Turning off automatic tiling with <span class="Literal-Sidebar">no-repeat</span> (top), applying horizontal-axis tiling with <span class="Literal-Sidebar">repeat-x</span> (middle), and applying vertical-axis tiling with <span class="ListStartItem--Sidebar-">repeat-y</span> (bottom).</figcaption>
				</figure>
			</div>
			<p class="body">The remaining keyword values, <span class="Literal-fc">space</span> and <span class="Literal-fc">round</span>, attempt to fill the available background painting area an even number of times. </p>
			<p class="body">When <span class="Literal-fc">background-repeat</span> is set to <span class="Literal-fc">space</span>, the browser calculates how many background images can fit across the width and height of the background area, then adds equal amounts of space between each image. The result is even rows and columns and no clipped images (<span class="Xref-Figure">Figure 13-21</span>). </p>
			<p class="body">The <span class="Literal-fc">round</span> keyword makes the browser squish the background image horizontally and vertically (not necessarily proportionally) to fit in the background area an even number of times (<span class="Xref-Figure">Figure 13-21</span>). </p>
			<div>
				<div id="_idContainer791" class="note">
					<h5 class="WarningHeader">Browser support note</h5>
					<p class="note">Internet Explorer 8 and earlier do not support the <span class="Literal-Sidebar">space</span> and <span class="Literal-Sidebar">round</span> keywords for <span class="Literal-Sidebar">background-repeat</span>.</p>
				</div>
			</div>
			<div>
				<figure id="_idContainer793" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1321_spaceround.png" alt="" width="1321" height="878"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-21.</span> Examples of <span class="Literal-Sidebar">space</span> and <span class="Literal-Sidebar">round</span> keywords for <span class="Literal-Sidebar">background-repeat</span>. The “space” example would be less clunky if the background color matched the image, but I’ve left it white to better demonstrate how the <span class="Literal-Sidebar">space</span> value works.</figcaption>
				</figure>
			</div>
			<p class="body">Let’s try out some background repeating patterns in <span class="Xref-Figure">Exercise 13-3</span>. </p>
			<div>
				<div id="_idContainer796" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-3.</span> Controlling tile direction</h6>
					<p class="SidebarBody">Now let’s try some slightly more sophisticated tiling on the Summer Menu page. This time we’ll add a tiling background just along the top edge of the <span class="Literal-Sidebar">header</span> element.</p>
					<ol>
						<li class="SidebarListNumber" value="1">In the <span class="Literal-Sidebar">header</span> rule, add the image <span class="Filename--Sidebar-">purpledot.png</span> and set it to repeat horizontally only:<pre class="SidebarCodeFirst">header {<br/>   margin-top: 0;<br/>  padding: 3em 1em 2em 1em;<br/>  text-align: center;<br/>  background-color: rgba(255,255,255,.5);<br/><code class="CodeColor">  background-image: url(images/purpledot.png);<br/>  background-repeat: repeat-x;</code><br/>}</pre></li>
						<li class="SidebarListNumber">Save the file and look at it in the browser. It should look something like <span class="Xref-Figure">Figure 13-22</span>. I recommend resizing your browser window wider and narrower and paying attention to the position of the background pattern. See how it’s always anchored on the left? You’re going to learn how to adjust position next. Try changing the style rule to make the dot repeat vertically only; then make it not repeat at all (set it back to <span class="Literal-Sidebar">repeat-x</span> and save when you’re done).<figure id="_idContainer795" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1322_ex3.png" alt="" width="1338" height="577"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-22.</span><span class="FigureLabel"> </span>Adding a horizontal tiling image to the <span class="Literal-Sidebar">header</span>.</figcaption></figure></li>
						<li class="SidebarListNumber">Finally, try out the <span class="Literal-Sidebar">space</span> and <span class="Literal-Sidebar">round</span> repeat values on the <span class="Literal-Sidebar">body</span> background image and see if you like the effect. Note that the tiles are evenly spaced within the body of the document, not just the viewport, so you may see some cut-off circles at the bottom edge of your browser. Delete the <span class="Literal-Sidebar">background-repeat</span> declaration so it goes back to the default <span class="Literal-Sidebar">repeat</span> for upcoming exercises: <pre class="SidebarCodeFirst">body {<br/>  …<br/>  <code class="CodeColor">background-repeat: space;</code><br/>}</pre></li>
					</ol>
				</div>
			</div>
			<h2 class="HeadB">Background Position</h2>
			<p class="body">The <span class="Literal-fc">background-position</span> property specifies the position of <a id="_idIndexMarker2476"></a><a id="_idIndexMarker2477"></a><a id="_idIndexMarker2478"></a>the <span class="FirstTerm">origin image</span> in the background. You can think of the origin image as the first image that is placed in the background from which tiling images extend. Here is the property and its<a id="_idIndexMarker2479"></a> various values.</p>
			<p class="RefNameCode-Left">background-position</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">length measurement</span> | <span class="prop-replace">percentage</span> | <span class="prop-code">left</span> | <span class="prop-code">center</span> | <span class="prop-code">right</span> | <span class="prop-code">top</span> | <span class="prop-code">bottom</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	0% 0% (same as <span class="prop-code">left</span> <span class="prop-code">top</span>)</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">To position the origin image, provide horizontal and vertical values that describe where to place it. There are a variety of ways to do it.</p>
			<p class="ListVariableTerm">Keyword positioning</p>
			<p class="ListVariable">The keyword values (<span class="Literal-fc">left</span>, <span class="Literal-fc">right</span>, <span class="Literal-fc">top</span>, <span class="Literal-fc">bottom</span>, and <span class="Literal-fc">center</span>) position the origin image relative to the outer edges of the element’s padding. For example, <span class="Literal-fc">left</span> positions the image all the way to the left edge of the background area. The default origin position corresponds to <span class="Literal-fc">left top</span>.</p>
			<p class="ListVariable_cont">Keywords are typically used in pairs, as in these examples:</p>
			<pre class="CodeFirst">background-position: left bottom; background-position: right center; </pre>
			<p class="ListVariable">The keywords may appear in any order. If you provide only one keyword, the missing keyword is assumed to be <span class="Literal-fc">center</span>. Thus, <span class="Literal-fc">background-position: right</span> has the same effect as <span class="Literal-fc">background-position: right center</span>. </p>
			<p class="ListVariableTerm">Length measurements</p>
			<p class="ListVariable">Specifying position using length measurements such as pixels or ems indicates an amount of offset from the top-left corner of the element to the top-left corner of the background origin image. When you are providing length values, the horizontal measurement always goes first. Specifying <a id="_idIndexMarker2480"></a>negative values is allowed and causes the image to hang outside the visible background area. </p>
			<p class="ListVariable_cont">This example positions the top-left corner of the image 200 pixels from the left edge and 50 pixels down from the top edge of the element (or more specifically, the padding edge by default): </p>
			<pre class="CodeFirst">background-position: 200px 50px; </pre>
			<div>
				<div id="_idContainer797" class="callout">
					<p class="callout">When you are providing length or percentage values, the horizontal measurement always goes first. </p>
				</div>
			</div>
			<p class="ListVariableTerm">Percentages</p>
			<p class="ListVariable">Percentage <a id="_idIndexMarker2481"></a><a id="_idIndexMarker2482"></a>values are provided in horizontal/vertical pairs, with <span class="Literal-fc">0% 0%</span> corresponding to the top-left corner and <span class="Literal-fc">100% 100%</span> corresponding to the bottom-right corner. As with length values, the horizontal measurement always goes first. </p>
			<p class="ListVariable">It is important to note that the percentage value applies to both the canvas area <em class="Emphasis">and</em> the image itself. A horizontal value of 25% positions the point 25% from the left edge of the image at a point that is 25% from the left edge of the background positioning area. A vertical value of 100% positions the bottom edge of the image at the bottom edge of the positioning area. </p>
			<pre class="CodeFirst">background-position: 25% 100%; </pre>
			<p class="ListVariable">As with keywords, if you provide only one percentage, the other is assumed to be 50% (centered). </p>
			<p class="body"><span class="Xref-Figure">Figure 13-23</span> shows the results of each of the aforementioned <span class="Literal-fc">background-</span><span class="Literal-fc">position</span> examples with the <span class="Literal-fc">background-repeat</span> set to <span class="Literal-fc">no-repeat</span> for clarity. It is possible to position the origin image and let it tile from there, in both directions or just horizontally or vertically. When the image tiles, the position of the initial image might not be obvious, but you can use <span class="Literal-fc">background-position</span> to make a tile pattern start at a point other than the left edge of the image. This might be used to keep a background pattern centered and symmetrical.</p>
			<div>
				<figure id="_idContainer799" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1323_position.png" alt="" width="1321" height="1475"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-23.</span><span class="FigureLabel"> </span>Positioning a non-repeating background image. If these background images were allowed to repeat, they would extend left and right and/or up and down from the initial positions.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer800" class="sidebar">
					<h5 class="SidebarTitle">Background Edge Offsets</h5>
					<p class="SidebarBody">The CSS3 specification also includes a four-part syntax for <span class="Literal-Sidebar">background-position</span> that allows you to specify an offset (in length or percentage from a particular edge). This is the syntax:</p>
					<pre class="SidebarCodeFirst">background-position: <span class="Replaceable">  edge-keyword</span> <span class="Replaceable">offset</span> <span class="Replaceable">  edge-keyword</span> <span class="Replaceable">offset</span>;</pre>
					<p class="SidebarBody">In this example, an origin image is positioned 50 pixels from the right edge and 50 pixels from the bottom of the element’s positioning area:</p>
					<pre class="SidebarCodeFirst">background-position:   right 50px bottom 50px;</pre>
					<p class="SidebarBody">This four-part syntax is not supported by IE 8 and earlier, Safari and iOS Safari 6 and earlier, and Android 4.3 and earlier.</p>
				</div>
			</div>
			<h2 class="HeadB">Background Position Origin</h2>
			<p class="body">Notice in <span class="Xref-Figure">Figure 13-23</span> that <a id="_idIndexMarker2483"></a>when the origin image was placed in the corner of an element, it was placed inside the border (only repeated images extend under the border to its outer edge). This is the default position, but you can change it with the <a id="_idIndexMarker2484"></a><span class="Literal-fc">background-origin</span> property.</p>
			<div>
				<div id="_idContainer801" class="note">
					<h5 class="WarningHeader">Browser Support Note</h5>
					<p class="note"><span class="Literal-Sidebar">background-origin</span> is not supported by Internet Explorer 8 and earlier.</p>
				</div>
			</div>
			<p class="RefNameCode-Left">background-origin</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">border-box</span> | <span class="prop-code">padding-box</span> | <span class="prop-code">content-box</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">padding-box</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">This property defines the boundaries of the background positioning area in the same way <a id="_idIndexMarker2485"></a><span class="Literal-fc">background-clip</span> defined the background painting area. You can set the boundaries to the <span class="Literal-fc">border-box</span> (so the origin image is placed under the outer edge of the border, <span class="Literal-fc">padding-box</span> (outer edge of the padding, just inside the border), or <span class="Literal-fc">content-box</span> (the actual content area of the element). These terms will become more meaningful once you get more familiar with the box model in the next chapter. In the meantime, <span class="Xref-Figure">Figure 13-24</span> shows the results of each of the keyword options.</p>
			<div>
				<figure id="_idContainer803" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1324_origin.png" alt="" width="1321" height="492"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-24.</span> Examples of <span class="Literal-Sidebar">background-origin</span> keywords.</figcaption>
				</figure>
			</div>
			<p class="body">Before we move on to the remaining background properties, check out <span class="Xref-Figure">Exercise 13-4</span> to get a feel for background positioning.</p>
			<div>
				<div id="_idContainer806" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-4.</span> Positioning background images</h6>
					<p class="SidebarBody">Let’s have some fun with <a id="_idIndexMarker2486"></a>the position of the background image in the menu. First we’re going to make some subtle adjustments to the background images that are already there, and then we’ll swap them out for a whole different background and play around some more. We are still working with the <span class="Filename--Sidebar-">summer-menu.html</span> document, which should have repeating tile patterns in the <span class="Literal-Sidebar">body</span> and <span class="Literal-Sidebar">header</span> elements. </p>
					<ol>
						<li class="SidebarListNumber" value="1">I’m thinking that because the main elements of the menu are centered, it would be nice if the background patterns stayed centered, too. Add this declaration to both the <span class="Literal-Sidebar">body</span> and <span class="Literal-Sidebar">header</span> rules; then save and look at it in the browser. <pre class="SidebarCodeFirst">background-position: center top;</pre><p class="SidebarListItem_cont">You may not notice the difference until you resize the browser wide and narrow again. Now the pattern is anchored in the center and reveals more or less on both edges, not just the right edge as before.</p></li>
						<li class="SidebarListNumber">For kicks, alter the <span class="Literal-Sidebar">background-position</span> values so that the purple dots are along the bottom edge of the <span class="Literal-Sidebar">header</span> (<span class="Literal-Sidebar">center bottom</span>). (That doesn’t look so good; I’m putting mine back to <span class="Literal-Sidebar">top</span>.) Then try moving <span class="Filename--Sidebar-">bullseye.png</span> down 200 pixels (<span class="Literal-Sidebar">center 200px</span>). Notice that the pattern still fills the entire screen—we moved the origin image down, but the background is still set to tile in all directions. <span class="Xref-Figure">Figure 13-25</span> shows the result of these changes.</li>
						<li class="SidebarListNumber">That looks good, but let’s get rid of the background on the <span class="Literal-Sidebar">body</span> for now. I want to show you a little trick. During the design process, I prefer to hide styles in comments instead of deleting them entirely. That way, I don’t need to remember them or type them in again; I only have to remove the comment indicators, and they’re back. When the design is done and it’s time to publish, I strip unused styles out to keep the file size down. <p class="SidebarListVariable">Here’s how to hide declarations as CSS comments: </p><pre class="SidebarCodeFirst">body {<br/>  …<br/>  background-color: #d2dc9d;<br/>  <code class="CodeColor">/*</code>  background-image: url(images/bullseye.png);<br/>  background-position: center 200px; <code class="CodeColor">*/</code><br/>}  </pre></li>
						<li class="SidebarListNumber">Now, add the <span class="Filename--Sidebar-">blackgoose.png</span> image (also a semi-transparent PNG) to the background of the page. Set it to not repeat, and center it at the top of the page:<pre class="SidebarCodeFirst">background-image: url(images/blackgoose.png);<br/>background-repeat: no-repeat;<br/>background-position: center top;</pre><p class="SidebarListItem_cont">Take a look in the browser window and watch the background scroll up with the content when you scroll the page. </p></li>
						<li class="SidebarListNumber">I want you to get a feel for the various position keywords and numeric values. Try each of these out and look at it in the browser. Be sure to scroll the page and watch what happens. Note that when you provide a percentage or keyword to the vertical position, it is based on the height of the entire document, not just the browser window. You can try your own variations as well.<pre class="SidebarCodeFirst">background-position: right top; <br/>background-position: right bottom; <br/>background-position: left 50%; <br/>background-position: center 100px;</pre></li>
						<li class="SidebarListNumber">Leave the image positioned at <span class="Literal-Sidebar">center 100px</span> so you are ready to go for the next exercise. Your page should look like the one shown on the right in <span class="Xref-Figure">Figure 13-25</span>.<figure id="_idContainer805" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1325_ex4.png" alt="" width="2025" height="609"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-25.</span> The results of positioning the origin image in the tiling background patterns (left) and positioning a single background logo (right).</figcaption></figure></li>
					</ol>
				</div>
			</div>
			<h2 class="HeadB">Background Attachment</h2>
			<p class="body">In the previous exercise, <a id="_idIndexMarker2487"></a><a id="_idIndexMarker2488"></a>I asked you to scroll the page and watch what happens to the background image. As expected, it scrolls along with the document and off the top of the browser window, which is its default behavior. However, you can use the <span class="Literal-fc">background-attachment</span> property to free the background from the content and allow it to stay fixed in one position while the rest of the content scrolls.</p>
			<p class="RefNameCode-Left">background-attachment</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-code">scroll</span> | <span class="prop-code">fixed</span> | <span class="prop-code">local</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">scroll</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">With the <span class="Literal-fc">background-attachment</span> property, you have the choice of whether the background image scrolls with the content or stays in a fixed position. When an image is <span class="Literal-fc">fixed</span>, it stays in the same position relative to the viewport of the browser (as opposed to being relative to the element it fills). You’ll see what I mean in a minute (and you can try it yourself in <span class="Xref-Figure">Exercise 13-5</span>).</p>
			<p class="body">In the following example, a large, non-tiling image is placed in the background of the whole document (the <span class="Literal-fc">body</span> element). By default, when the document scrolls, the image scrolls too, moving up and off the page, as shown in <span class="Xref-Figure">Figure 13-26</span>. However, if you set the value of <span class="Literal-fc">background-attachment</span> to <span class="Literal-fc">fixed</span>, it stays where it is initially placed, and the text scrolls up over it.</p>
			<pre class="CodeFirst">body {<br/>   background-image: url(images/bigstar.gif);<br/>  background-repeat: no-repeat;<br/>  background-position: center 300px;<br/>  <code class="CodeColor">background-attachment: fixed; </code><br/>}</pre>
			<div>
				<figure id="_idContainer808" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1326-ebook.png" alt="" width="1337" height="1240"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-26.</span> Preventing the background image from scrolling with the <span class="Literal-Sidebar">background-attachment</span> property.</figcaption>
				</figure>
			</div>
			<p class="body">The <span class="Literal-fc">local</span> value, which was added in CSS3, is useful when an element has its own<a id="_idIndexMarker2489"></a> scrolling mechanism. Instead of scrolling with the viewport’s scroller, <span class="Literal-fc">local</span> makes the background image fixed to the content of the scrolling element. This keyword is not supported in IE8 and earlier and may also be problematic on mobile browsers.</p>
			<div>
				<div id="_idContainer809" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-5.</span> Fixed position</h6>
					<p class="SidebarBody">When we last left the bistro menu, we had applied a large, non-repeating logo image to the background of the page. We’ll leave it just like that, but we’ll use the <span class="Literal-Sidebar">background-attachment</span> property to keep it in the same place even when the page scrolls: </p>
					<pre class="SidebarCodeFirst">body {<br/>  background-image: url(images/blackgoose.png);<br/>  background-repeat: no-repeat;<br/>  background-position: center 100px;<br/>  <code class="CodeColor">background-attachment: fixed;</code><br/>}</pre>
					<p class="SidebarBody">Save the document, open it in the browser, and try scrolling. The background image stays put in the viewing area of the browser. Cool, huh?</p>
					<p class="SidebarBody">For extra credit, see what happens when you fix the attachment of the dot pattern in the <span class="Literal-Sidebar">header</span>. (Spoiler: it stays in the same place, but only within the <span class="Literal-Sidebar">header</span> itself. When the <span class="Literal-Sidebar">header</span> slides out of view, so does its background.)</p>
				</div>
			</div>
			<h2 class="HeadB">Background Size</h2>
			<p class="body">OK, we have<a id="_idIndexMarker2490"></a><a id="_idIndexMarker2491"></a> just one more background image property to cover before we wrap it all up with the <span class="Literal-fc">background</span> shorthand property. So far, the background images we’ve seen are displayed at the actual size of the image itself. You can change the size of the image by using the <span class="Literal-fc">background-size</span> property. </p>
			<p class="RefNameCode-Left">background-size</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">length</span> | <span class="prop-replace">percentage</span> | <span class="prop-code">auto</span> | <span class="prop-code">cover</span> | <span class="prop-code">contain</span>  </p>
			<p class="property"><span class="prop-label">Default:</span> 	<span class="prop-code">auto</span></p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements</p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">There are several ways to specify the size of the background image. Perhaps the most straightforward is to specify the dimensions in length units such as pixels or ems. As usual, when two values are provided, the first one is used as the horizontal measurement. If you provide just one value, it is used as the horizontal measurement, and the vertical value is set to <span class="Literal-fc">auto</span>.</p>
			<p class="body">This example resizes the <span class="Filename">target.png</span> background image, which has an intrinsic size of 300 pixels by 300 pixels (<span class="Xref-Figure">Figure 13-27</span>):</p>
			<pre class="CodeFirst">header {<br/>  background-image: url(images/target.png);<br/><code class="CodeColor">  background-size: 600px 150px;</code><br/>}</pre>
			<div>
				<figure id="_idContainer811" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1327_size.png" alt="" width="1321" height="750"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-27.</span> Resizing a background image with specific length units and percentages.</figcaption>
				</figure>
			</div>
			<p class="body">Percentage values are calculated based on the background positioning area, which by default runs to the inside edge of the border, but may have been altered with <span class="Literal-fc">background-origin</span>—something to keep in mind. So a horizontal value of 50% does not make the image half its width; rather, it sizes it to 50% of the width of the positioning area (<span class="Xref-Figure">Figure 13-27</span>). Again, the horizontal value goes first. It is OK to mix percentage and length values, as shown in this example:</p>
			<pre class="CodeFirst">header {<br/>   background-image: url(images/target.png);<br/><code class="CodeColor">  background-size: 50% 10em;</code><br/>}</pre>
			<div>
				<div id="_idContainer812" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note">When sizing a bitmapped image such as a GIF or PNG larger, you run the risk that it will end up blurry and pixelated. Use background sizing with care.</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">auto</span> keyword resizes the image in whatever direction is necessary to maintain its proportions. Bitmapped images such as <a id="_idIndexMarker2492"></a>GIF, JPEG, and PNG have intrinsic proportions, so they will always stay proportional when one sizing value is set to <span class="Literal-fc">auto</span>. Some images, such as SVG and CSS gradients, don’t have intrinsic proportions. In that case, <span class="Literal-fc">auto</span> sets the width or height to 100% of the width or height of the background positioning area. </p>
			<p class="body">The <span class="Literal-fc">cover</span> and <span class="Literal-fc">contain</span> keywords are interesting additions in CSS3. When you set the background size to <span class="Literal-fc">cover</span>, the browser resizes a background image large enough to reach all the sides of the background positioning area. There will be only one image because it fills the whole element, and it is likely that portions of the image will fall outside the positioning area if the proportions of the image and the positioning area do not match (<span class="Xref-Figure">Figure 13-28</span>). </p>
			<p class="body">By contrast, <span class="Literal-fc">contain</span> sizes the image just large enough to fill either the width or the height of the positioning area (depending on the proportions of the image). The whole image will be visible and “contained” within the background area (<span class="Xref-Figure">Figure 13-28</span>). If there is leftover space, the background image repeats unless <span class="Literal-fc">background-repeat</span> is set to <span class="Literal-fc">no-repeat</span>.</p>
			<pre class="CodeFirst">div#A {<br/>   background-image: url(target.png); <br/><code class="CodeColor">  background-size: cover;</code> } <br/>div#B {<br/>   background-image: url(target.png);<br/>   <code class="CodeColor">background-size: contain; </code>}</pre>
			<div>
				<figure id="_idContainer814" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1328_covercontain.png" alt="" width="1321" height="600"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-28.</span> Examples of the <span class="Literal-Sidebar">cover</span> and <span class="Literal-Sidebar">contain</span> background size keywords.</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-128" class="HeadA"><a id="_idTextAnchor184"></a>The Shorthand background Property</h1>
			<p class="body">You can use the <a id="_idIndexMarker2493"></a>handy <span class="Literal-fc">background</span> property to specify <em class="Emphasis">all</em> of your background styles in one declaration.</p>
			<p class="RefNameCode-Left">background</p>
			<p class="property"><span class="prop-label">Values:</span> 	<span class="prop-replace">background-color</span>   <span class="prop-replace">background-image</span>   <span class="prop-replace">background-repeat  </span><span class="prop-replace">background-attachment</span>   <span class="prop-replace">background-position</span>   <span class="prop-replace">background-clip</span> <span class="prop-replace">background-origin  </span> <span class="prop-replace">background-size</span> </p>
			<p class="property"><span class="prop-label">Default:</span> 	see individual properties</p>
			<p class="property"><span class="prop-label">Applies to:</span> 	all elements </p>
			<p class="property"><span class="prop-label">Inherits:</span> 	no</p>
			<p class="body">The value of the <span class="Literal-fc">background</span> property is a list of values that would be provided for the individual background properties previously listed. For example, this one background rule</p>
			<pre class="CodeFirst">body { <code class="CodeColor">background: white url(star.png) no-repeat right top fixed;</code> }</pre>
			<p class="body">replaces this rule with five separate declarations:</p>
			<pre class="CodeFirst">body {<br/>  background-color: white;<br/>  background-image: url(star.png);<br/>  background-repeat: no-repeat;<br/>  background-position: right top;<br/>  background-attachment: fixed;<br/>}</pre>
			<p class="body">All of the property values for <span class="Literal-fc">background</span> are optional and may appear in any order. The only restriction is that when you are providing the coordinates for the <span class="Literal-fc">background-position</span> property, the horizontal value must appear first, immediately followed by the vertical value. As with any shorthand property, be aware that if any value is omitted, it will be reset to its default value. See the <span class="Xref">“Watch Out for Overrides”</span> sidebar. </p>
			<div>
				<div id="_idContainer815" class="sidebar">
					<h5 class="SidebarTitle">Watch Out for Overrides</h5>
					<p class="SidebarBody">The <span class="Literal-Sidebar">background</span> property is efficient, but use it carefully. We’ve addressed this before, but it bears repeating. Because <span class="Literal-Sidebar">background</span> is a shorthand property, when you omit a value, that property will be reset to its default. Be careful that you do not accidentally override style rules earlier in the style sheet with a later shorthand rule that reverts your settings to their defaults. </p>
					<p class="SidebarBody">In this example, the background image <span class="Filename--Sidebar-">dots.gif</span> will <em class="Emphasis">not</em> be applied to <span class="Literal-Sidebar">h3</span> elements because by omitting the value for <a id="_idIndexMarker2494"></a><span class="Literal-Sidebar">background-image</span>, you essentially set that value to <span class="Literal-Sidebar">none</span>:</p>
					<pre class="SidebarCodeFirst">h1, h2, h3 { <br/><code class="CodeColor">background:</code> red url(dots.gif) repeat-x; <br/>}<br/>h3 { <br/><code class="CodeColor">background:</code> green; <br/>}</pre>
					<p class="SidebarBody">To override particular properties, use the specific background property you intend to change. For example, if the intent in the preceding example were to change just the background color of <span class="Literal-Sidebar">h3</span> elements, the<a id="_idIndexMarker2495"></a> <span class="Literal-Sidebar">background-color</span> property would be the correct choice.</p>
				</div>
			</div>
			<p class="body">In <span class="Xref-Figure">Exercise 13-6</span>, you can convert your long-winded background properties to a single <a id="_idIndexMarker2496"></a>declaration with <span class="Literal-fc">background</span>.</p>
			<div>
				<div id="_idContainer816" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-6.</span> Convert to shorthand property</h6>
					<p class="SidebarBody">This one is easy. Replace all of the background-related declarations in the <span class="Literal-Sidebar">body</span> of the bistro menu with a single <span class="Literal-Sidebar">background</span> property declaration:</p>
					<pre class="SidebarCodeFirst">body {<br/>  font-family: Georgia, serif;<br/>  font-size: 100%;<br/>  line-height: 175%;<br/>  margin: 0 15%;<br/><code class="CodeColor">  background: #d2dc9d url(images/blackgoose.png) no-repeat center 100px fixed;</code><br/>}</pre>
					<p class="SidebarBody">Do the same for the <span class="Literal-Sidebar">header</span> element, and you’re done. </p>
				</div>
			</div>
			<h2 class="HeadB">Multiple Backgrounds</h2>
			<p class="body">CSS3 introduced the <a id="_idIndexMarker2497"></a>ability to apply multiple background images to a single element. To apply multiple values for <span class="Literal-fc">background-image</span>, put them in a list separated by commas. Additional background-related property values also go in comma-separated lists; the first value listed applies to the first image, the second value to the second, and so on. </p>
			<p class="body">Although CSS declarations usually work on a “last one wins” rule, for multiple background images, whichever is listed last goes on the bottom, and each image prior in the list layers on top of it. You can think of them like Photoshop <a id="_idIndexMarker2498"></a>layers in that they get stacked in the order in which they appear in the list. Put another way, the image defined by the first value will go in front, and others line up behind it, in the order in which they are listed.</p>
			<pre class="CodeFirst">body {<br/>  background-image: <span class="codeOrange">url(image1.png)</span>, <span class="codeAqua">url(image2.png)</span>, <span class="codeGreen">url(image3.png)</span>;<br/>  background-position: <span class="codeOrange">left top</span>, <span class="codeAqua">center center</span>, <span class="codeGreen">right bottom</span>;<br/>  background-repeat: <span class="codeOrange">no-repeat</span>, <span class="codeAqua">no-repeat</span>, <span class="codeGreen">no-repeat</span>;<br/>  …<br/>}</pre>
			<p class="body">Alternatively, you can take advantage of the <span class="Literal-fc">background</span> shorthand property to make the rule simpler. Now the <span class="Literal-fc">background</span> property has three value series, separated by commas:</p>
			<pre class="CodeFirst">body {<br/>  background:<br/>    <span class="codeOrange">url(image1.png) left top no-repeat,</span><code class="CodeColor"> </code><br/>    <span class="codeAqua">url(image2.png) center center no-repeat,</span> <br/>    <span class="codeGreen">url(image3.png) right bottom no-repeat</span>; <br/>}</pre>
			<p class="body"><span class="Xref-Figure">Figure 13-29</span> shows the result. The big, orange 1 is positioned in the top-left corner, the 2 is centered vertically and horizontally, and the 3 is in the bottom-right corner. All three background images share the background positioning area of one <span class="Literal-fc">body</span> element. Try it out for yourself in <span class="Xref-Figure">Exercise 13-7</span>.</p>
			<div>
				<figure id="_idContainer818" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1329_multiple.png" alt="" width="1204" height="651"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-29.</span> Three separate background images added to the <span class="Literal-Sidebar">body</span> element.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer819" class="note">
					<h5 class="WarningHeader">Browser Support Note</h5>
					<p class="note">Internet Explorer 8 and earlier do not support multiple background images and will entirely ignore any background declaration with more than one value. The fix is to choose one <span class="Literal-Sidebar">background-image</span> for the element as a fallback for IE and other non-supporting browsers, and then specify the multiple <span class="Literal-Sidebar">background</span> rules that override it: </p>
					<pre class="SidebarCodeFirst">body {<br/><span class="Code-Comment">/* for non-supporting browsers */</span><br/>  background: url(image_fallback.png) top left no-repeat <br/><span class="Code-Comment">/* multiple backgrounds */</span><br/>background:<br/>  url(image1.png) left top no-repeat,<br/>  url(image2.png) center center no-repeat,<br/>  url(image3.png) right bottom no-repeat;<br/><span class="Code-Comment">/* background color */</span><br/>background-color: papayawhip; <br/>}   </pre>
				</div>
			</div>
			<div>
				<div id="_idContainer822" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-7.</span> Multiple background images</h6>
					<p class="SidebarBody">In this exercise, we’ll give multiple background images a try (be sure you aren’t using an old version of IE, or this won’t work).</p>
					<p class="SidebarBody">I’d like the dot pattern in the <span class="Literal-Sidebar">header</span> to run along the left and right sides. I also have a little goose silhouette (<span class="Filename--Sidebar-">gooseshadow.png</span>) that might look cute walking along the bottom of the header. I’m making this example friendly for non-supporting browsers (IE8 and earlier) by providing a fallback declaration with just one image and separating out the <span class="Literal-Sidebar">background-color</span> declaration so it doesn’t get overridden. If IE8 is not a concern, you don’t need the fallback.  </p>
					<p class="SidebarBody">You can see in the example that we are placing three images in a single header: dots on the left side, dots on the right, and a goose at the bottom.</p>
					<pre class="SidebarCodeFirst">header {<br/>  …<br/>  background: url(images/purpledot.png) center top repeat-x;<br/>  background:<br/>    <code class="CodeColor">url(images/purpledot.png) left top repeat-y,<br/>    url(images/purpledot.png) right top repeat-y,<br/>    url(images/gooseshadow.png) 90% bottom no-repeat;</code><br/>  background-color: rgba(255,255,255,.5);<br/>}</pre>
					<p class="SidebarBody"><span class="Xref-Figure">Figure 13-30</span> shows the final result. Meh, I liked it better before, but you get the idea.</p>
					<div>
						<figure id="_idContainer821" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_1330_ex7.png" alt="" width="985" height="550"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-30.</span> The bistro menu header with two rows of dots and a small goose graphic in the <span class="Literal-Sidebar">header</span> element.</figcaption>
						</figure>
					</div>
				</div>
			</div>
			<h1 id="_idParaDest-129" class="HeadA"><a id="_idTextAnchor185"></a>Like a Rainbow (Gradients)</h1>
			<p class="body">A <span class="FirstTerm">gradient</span> is a<a id="_idIndexMarker2499"></a><a id="_idIndexMarker2500"></a> transition from one color to another, sometimes through multiple colors. In the past, the only way to put a gradient on a web page was to create one in an image-editing program and add the resulting image with CSS. </p>
			<p class="body">Now we can specify color gradients by using CSS notation alone, leaving the task of rendering color blends to the browser. Although they are specified with code, gradients are <em class="Emphasis">images</em>. They just happen to be generated on the fly. A gradient image has no intrinsic size or proportions; the size matches the element it gets applied to. Gradients can be applied anywhere an image may be applied: <a id="_idIndexMarker2501"></a><a id="_idIndexMarker2502"></a><span class="Literal-fc">background-image</span>, <span class="Literal-fc">border-image</span>, and <span class="Literal-fc">list-style-image</span>. We’ll stick with <span class="Literal-fc">background-image</span> examples in this chapter.</p>
			<div>
				<div id="_idContainer823" class="callout">
					<p class="callout">Gradients are images that browsers generate on the fly. Use them as you would use a background image.</p>
				</div>
			</div>
			<p class="body">There are two types of gradients: </p>
			<ul>
				<li class="ListBullet"><span class="FirstTerm">Linear gradients</span> change colors along a line, from one edge of the element to the other.</li>
				<li class="ListBullet"><span class="FirstTerm">Radial gradients</span> start <a id="_idIndexMarker2503"></a>at a point and spread outward in a circular or elliptical shape.<div id="_idContainer824" class="sidebar"><h5 class="SidebarSeries">Performance Tip</h5><p class="SidebarBody">Gradients offer both advantages and disadvantages when it comes to performance. On the plus side, they do not require an extra call to the server and require fewer bytes to download than images. On the other hand, all that rendering on the fly requires time and processing power that can hurt performance. Radial gradients are the worst culprits. They can be particularly problematic on mobile devices, where processing power may be limited. Consider serving a separate style sheet without gradients to mobile devices. </p></div></li>
			</ul>
			<h2 class="HeadB">Linear Gradients</h2>
			<p class="body">The <span class="Literal-fc">linear-gradient()</span><span class="FirstTerm"> </span><span class="FirstTerm"><a id="_idIndexMarker2504"></a><a id="_idIndexMarker2505"></a></span>notation provides the angle of <a id="_idIndexMarker2506"></a>the <span class="FirstTerm">gradient line</span> and one or more points along that line where the pure color is positioned (<span class="FirstTerm">color stops</span>). <a id="_idIndexMarker2507"></a>You can use color names or any of the numerical color values discussed earlier in the chapter, including <a id="_idIndexMarker2508"></a>transparency. The angle of the gradient line is specified in degrees (<span class="Replaceable">n</span><span class="Literal-fc">deg</span>) or with keywords. With degrees, <span class="Literal-fc">0deg</span> points upward, and positive angles go around clockwise so that <span class="Literal-fc">90deg</span> points to the right. Therefore, if you want to go from aqua on the top edge to green on the bottom edge, set the rotation to <span class="Literal-fc">180deg</span>:</p>
			<pre class="CodeFirst">background-image: <code class="CodeColor">linear-gradient(180deg, aqua, green)</code>;</pre>
			<p class="body">The keywords describe direction in increments of 90° (<span class="Literal-fc">to top</span>,<span class="Literal-fc"> to right</span>,<span class="Literal-fc"> to bottom</span>,<span class="Literal-fc"> to left</span>). Our <span class="Literal-fc">180deg</span> gradient could also be specified with the <span class="Literal-fc">to bottom</span> keyword. The result is shown in <span class="Xref-Figure">Figure 13-31</span> (top):</p>
			<pre class="CodeFirst">background-image: linear-gradient(<code class="CodeColor">to bottom</code>, aqua, green);</pre>
			<p class="body">You can use the “to” syntax to point to corners as well. The following gradient would be drawn from the bottom-left corner to the top-right corner. The resulting angle of a gradient drawn between corners is determined by the aspect ratio of the box. </p>
			<pre class="CodeFirst">background-image: linear-gradient(<code class="CodeColor">to top right</code>, aqua, green);</pre>
			<p class="body">In the following example, the gradient now goes from left to right (<span class="Literal-fc">90deg</span>) and includes a third color, orange, which appears 25% of the way across the gradient line (<span class="Xref-Figure">Figure 13-31</span>, middle). You can see that the placement of the color stop is indicated after the color value. You can use percentages or any length measurement. The first and last color stops don’t require positions because they are set to 0% and 100%, respectively, by default. </p>
			<pre class="CodeFirst">background-image: linear-gradient(90deg, yellow,<code class="CodeColor"> orange 25%</code>, purple);</pre>
			<p class="body">You certainly aren’t limited to right angles. Specify any degree you like to make the linear gradient head in that direction. You can also specify as many colors as you like. If no positions are specified, the colors are spaced evenly across the length of the gradient line. If you position the last color stop short of the end of the gradient line (such as the blue at 50% in this example), the last color continues to the end of the gradient line (<span class="Xref-Figure">Figure 13-31</span>, bottom): </p>
			<pre class="CodeFirst">background-image: linear-gradient(54deg, red, orange, yellow, green, blue 50%);</pre>
			<div>
				<figure id="_idContainer826" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1331_linear.png" alt="" width="1337" height="1800"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-31.</span> Examples of linear gradients.</figcaption>
				</figure>
			</div>
			<p class="body">These examples are pretty garish, but if you choose your colors and stops right, gradients are a nice way to give elements subtle shading and a 3-D appearance. The button in <span class="Xref-Figure">Figure 13-32</span> uses a background gradient to achieve a 3-D look without graphics.</p>
			<pre class="CodeFirst">a.button-like {<br/>  background: linear-gradient(to bottom, #e2e2e2 0%, #dbdbdb 50%,<br/>   #d1d1d1 51%, #fefefe 100%);<br/>}</pre>
			<div>
				<figure id="_idContainer828" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1332_1button.png" alt="" width="600" height="197"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-32.</span> A 3-D button made with only CSS.</figcaption>
				</figure>
			</div>
			<p class="body">That concludes our quick-and-dirty tour of linear gradients. You should know that I really only scratched the surface of linear gradient behavior and possibilities, so you may want to check out the resources in the <span class="Xref">“Further Reading”</span> sidebar. It’s time to move on to radial gradients.</p>
			<div>
				<div id="_idContainer829" class="sidebar">
					<h5 class="SidebarSeries">Further Reading</h5>
					<p class="SidebarBody">The most in-depth coverage of CSS gradient syntax that I’ve read is in <a id="_idIndexMarker2509"></a>Eric Meyer’s book, <span class="Citation--Sidebar-">Colors, Backgrounds, and Gradients</span> (O’Reilly). The same content is available in <span class="Citation--Sidebar-">CSS: The Definitive Guide</span>, by Eric Meyer and <a id="_idIndexMarker2510"></a>Estelle Weyl (also from O’Reilly).</p>
					<p class="SidebarBody">Online, I recommend these overviews and tutorials: </p>
					<ul>
						<li class="SidebarListBullet">“CSS Gradients” by <a id="_idIndexMarker2511"></a>Chris Coyier (<a href="https://css-tricks.com/css3-gradients/"><span class="URL-Email--Sidebar-">css-tricks.com/css3-gradients/</span></a>) </li>
						<li class="SidebarListBullet">“Using CSS Gradients” at MDN Web Docs (<a href="http://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients"><span class="URL-Email--Sidebar-">developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients</span></a>)</li>
						<li class="SidebarListBullet">“CSS3 Gradients,” part of the <span class="Citation--Sidebar-">CSS Mine</span> e-book by <a id="_idIndexMarker2512"></a>Martin Michalek (<a href="http://www.cssmine.com/ebook/css3-gradients"><span class="URL-Email--Sidebar-">www.cssmine.com/ebook/css3-gradients</span></a>)</li>
					</ul>
				</div>
			</div>
			<h2 class="HeadB">Radial Gradients</h2>
			<p class="body">Radial gradients, like the<a id="_idIndexMarker2513"></a> name says, radiate out from a point in a circle along a <span class="FirstTerm">gradient ray</span> <a id="_idIndexMarker2514"></a>(like a gradient line, but it always points outward from the center). At minimum, a radial gradient requires two color stops, as shown in this example:</p>
			<pre class="CodeFirst">background-image: <code class="CodeColor">radial-gradient(yellow, green)</code>;</pre>
			<p class="body">By default, the gradient fills the available background area, and its center is positioned in the center of the element (<span class="Xref-Figure">Figure 13-33</span>). The result is an ellipse if the containing element is a rectangle and a circle if the element is square.</p>
			<div>
				<figure id="_idContainer831" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1333_radial.png" alt="" width="1297" height="440"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-33.</span> A minimal radial gradient with default size and position.</figcaption>
				</figure>
			</div>
			<p class="body">That looks pretty spiffy already, but you don’t have to settle for the default. The <a id="_idIndexMarker2515"></a><span class="Literal-fc">radial-gradient()</span> notation allows you to specify the shape, size, and center position of the gradient: </p>
			<p class="ListVariableTerm">Shape</p>
			<p class="ListVariable">In most cases, the shape of the radial gradient will result from the shape of the element or an explicit size you apply to it, but you can also specify the shape by using the <span class="Literal-fc">circle</span> or <span class="Literal-fc">ellipse</span> keywords. When you make a gradient a <span class="Literal-fc">circle</span> (without conflicting size specifications), it stays circular even when it is in a rectangular element (<span class="Xref-Figure">Figure 13-34</span>, top).</p>
			<pre class="CodeFirst">background-image: radial-gradient(<code class="CodeColor">circle</code>, yellow, green);</pre>
			<p class="ListVariableTerm">Size</p>
			<p class="ListVariable">The size of the radial gradient can be specified in length units or percentages, which apply to the gradient ray, or with keywords. If you supply just one length, it is used for both width and height, resulting in a circle. When you provide two lengths, the first one is the horizontal measurement and the second is vertical (<span class="Xref-Figure">Figure 13-34</span>, middle). For ellipses, you can provide <a id="_idIndexMarker2516"></a>percentage values as well, or mix percentages with length values.</p>
			<pre class="CodeFirst">background-image: radial-gradient(<code class="CodeColor">200px 80px</code>, aqua, green); </pre>
			<p class="ListVariable_cont">There are also four keywords—<span class="Literal-fc">closest-side</span>, <span class="Literal-fc">closest-corner</span>, <span class="Literal-fc">farthest-side</span>, and <span class="Literal-fc">farthest-corner</span>—that set the length of the gradient ray relative to points on the containing element. </p>
			<p class="ListVariableTerm">Position</p>
			<p class="ListVariable">By default, the center of the gradient is positioned at <span class="Literal-fc">center center</span>, but you can change that by using the positioning syntax we covered for the <span class="Literal-fc">background-position</span> property. The syntax is the same, but it should be preceded by the <span class="Literal-fc">at</span> keyword, as in this example (<span class="Xref-Figure">Figure 13-34</span>, bottom). Notice that in this example, I have included an additional color stop of orange at the 50% mark.</p>
			<pre class="CodeFirst">background-image: radial-gradient(farthest-side <code class="CodeColor">at right bottom</code>, yellow, orange 50%, purple); </pre>
			<div>
				<figure id="_idContainer833" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1334_radialexamples.png" alt="" width="1321" height="1513"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-34.</span> Examples of sizing and positioning radial gradients.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Repeating Gradients</h2>
			<p class="body">If you’d like your <a id="_idIndexMarker2517"></a>gradient pattern to repeat,<a id="_idIndexMarker2518"></a><a id="_idIndexMarker2519"></a> use the <span class="Literal-fc">repeating-linear-gradient()</span> or <span class="Literal-fc">repeating-radial-gradient()</span> notation. The syntax is the same as for single gradients, but adding “repeating-” causes the pattern to repeat the color stops infinitely in both directions. This is commonly used to create interesting striped patterns. In this simple example, a gradient from white to silver (light gray) repeats every 30 pixels because the silver color stop is set to 30px (<span class="Xref-Figure">Figure 13-35</span>, top):</p>
			<pre class="CodeFirst">background: <code class="CodeColor">repeating-linear-gradient</code>(to bottom, white, silver 30px); </pre>
			<p class="body">This example makes a diagonal pattern of orange and white stripes (<span class="Xref-Figure">Figure 13-35</span>, bottom). The edges are sharp because the white stripe starts at exactly the point where the orange one ends (at 12px) with no fading:</p>
			<pre class="CodeFirst">background: repeating-linear-gradient(45deg, orange, orange 12px, white 12px, white 24px);</pre>
			<div>
				<figure id="_idContainer835" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1335_repeating.png" alt="" width="1321" height="967"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-35.</span> Repeating gradient pattern.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Browser Support and Vendor Prefixes</h2>
			<p class="body">All of the <a id="_idIndexMarker2520"></a><a id="_idIndexMarker2521"></a><a id="_idIndexMarker2522"></a>major browsers started adding support for the standard gradient syntax between 2012 and 2013 (see <span class="Xref">Browser Support Note</span>), so they’ve been reliable for a good number of years. However, if you need to support older browsers, you can do so using each browser’s proprietary gradient syntax with a <span class="FirstTerm">vendor prefix</span> (see the <span class="Xref">“Vendor Prefixes”</span> sidebar). For Internet Explorer 9 and earlier, you can use its proprietary <a id="_idIndexMarker2523"></a><span class="Literal-fc">filter</span> function. Or, go the progressive enhancement route and use a solid color as a fallback. </p>
			<div>
				<div id="_idContainer836" class="note">
					<h5 class="WarningHeader">Browser support Note</h5>
					<p class="note">Standard gradient syntax is supported in Internet Explorer 10+, Edge, Firefox 16+, Chrome 26+, Safari 6.1+, iOS 7.1+, and Android 4.4+. </p>
				</div>
			</div>
			<div>
				<div id="_idContainer837" class="sidebar">
					<h5 class="SidebarTitle">Vendor Prefixes</h5>
					<p class="SidebarBody">Browser makers <a id="_idIndexMarker2524"></a>usually start tinkering with proprietary solutions for cutting-edge web technologies before the specs are fully settled. For many years, they kept their experimentation separate from the final implementation by adding a <span class="FirstTerm--Sidebar-">vendor prefix</span> (or <span class="FirstTerm--Sidebar-">browser prefix</span>) to the property or function name. The prefix indicates that the implementation is proprietary and still a work in progress. For example, while Safari was implementing text-wrap shapes, it used its own <span class="Literal-Sidebar">-webkit</span>- prefixed version of the standard <span class="Literal-Sidebar">shape-outside</span> property:</p>
					<pre class="SidebarCodeFirst"><code class="CodeColor">-webkit-</code>shape-outside: url(cube.png); </pre>
					<p class="SidebarBody"><span class="Xref-Figure">Table 13-1</span> lists the prefixes used by the major browsers.</p>
					<table id="table002-9" class="Table">
						<colgroup>
							<col/>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Head" colspan="3">
									<p class="TableTitle"><span class="Table-Label"><span class="FigureLabel">Table 13-1.</span></span> Browser vendor prefixes</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Head">
									<p class="TableHeader">Prefix</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">Organization</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">Most popular browsers</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode"><span class="Literal-fc">-ms-</span></pre>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody"><a id="_idIndexMarker2525"></a>Microsoft</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Internet Explorer</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode"><span class="Literal-fc">-moz-</span></pre>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody"><a id="_idIndexMarker2526"></a><a id="_idIndexMarker2527"></a>Mozilla Foundation</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Firefox, Camino, SeaMonkey</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode"><span class="Literal-fc">-o-</span></pre>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">Opera <a id="_idIndexMarker2528"></a>Software</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Opera, Opera Mini, Opera Mobile</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode"><span class="Literal-fc">-webkit-</span></pre>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">Originally <a id="_idIndexMarker2529"></a>Apple; now <a id="_idIndexMarker2530"></a>open source</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Safari, Chrome, Android, Silk, BlackBerry, WebOS, many others</p>
								</td>
							</tr>
						</tbody>
					</table>
					<p class="SidebarBody">Vendor prefixes allowed developers to start using cool new CSS features on the browsers that supported them, which was a plus for moving web design and the specification forward. On the downside, the whole system turned out to be complicated and often misused. In the end, the browser makers agreed to put the prefix system to rest and not release any more proprietary properties. </p>
					<p class="SidebarBody">These days, browsers hide experimental features behind “flags” (options you can turn on or off) or in separate technology preview releases that developers can access for testing purposes only. When a feature seems stable, it is made public in the formal browser release. We’ll look at methods for testing for individual CSS features in <span class="Xref--Sidebar-">Chapter 19, More CSS Techniques</span>.</p>
					<p class="SidebarBody">However, there are a few CSS properties and features that came into vogue during the prefix era that still require prefixes in order to work in older browsers, should you choose to support them. Gradient syntax is one of those features. </p>
					<h5 class="sbHead">Prefixing Tools</h5>
					<p class="SidebarBody">Writing all those redundant prefixed properties is a big pain, but fortunately, there are some tools that will generate them for you automatically. </p>
					<p class="SidebarBody">If you use one of the CSS preprocessor syntaxes (like Sass,<a id="_idIndexMarker2531"></a> LESS, or <a id="_idIndexMarker2532"></a>Stylus), you can take advantage of their prefixing “mixins.” We’ll talk more about preprocessors in <span class="Xref--Sidebar-">Chapter 19</span>. </p>
					<p class="SidebarBody">If you write your CSS in the standard syntax, you can run it through a <span class="FirstTerm--Sidebar-">postprocessor</span> like <a id="_idIndexMarker2533"></a>AutoPrefixer when you are done. Autoprefixer parses your styles, then automatically adds prefixes just for the properties and notations that need them. The prefixing happens as part of a “build step” via a build tool like <a id="_idIndexMarker2534"></a><a id="_idIndexMarker2535"></a>Grunt. For a good overview, see “Autoprefixer: A Postprocessor Dealing with Vendor Prefixes in the Best Possible Way” at <a id="_idIndexMarker2536"></a>CSS-Tricks (<a href="http://css-tricks.com/autoprefixer/"><span class="URL-Email--Sidebar-">css-tricks.com/autoprefixer/</span></a>). I’ll talk more about build tools in <span class="Xref--Sidebar-">Chapter 20, Modern Web Development Tools</span>. </p>
				</div>
			</div>
			<h3 class="HeadC">A gradient for all browsers</h3>
			<p class="body">The following example shows the yellow-to-green linear gradient written to address every browser, past and present, with the Internet Explorer <span class="Literal-fc">filter</span> equivalent thrown in for good measure. Notice that there are differences in syntax. Where the CSS3 spec uses the <span class="Literal-fc">to bottom</span> keyword, most of the others use <span class="Literal-fc">top</span>. A very old version used by WebKit browsers used <span class="Literal-fc">–webkit-gradient</span> for both linear and radial gradients, but it was quickly replaced with separate functions. Another difference not evident in this example is that in the old syntax, <span class="Literal-fc">0deg</span> pointed to the right edge, not to the top edge as was standardized in CSS3, and the angles increased counterclockwise. </p>
			<p class="body">This is a serious chunk of code for a single gradient, and thankfully, we are very close to this no longer being necessary:</p>
			<pre class="CodeFirst">background: #ffff00; <span class="Code-Comment">/* Old browsers */</span><br/> background: <code class="CodeColor">-moz-linear-gradient</code>(top, #ffff00 0%, #00ff00 100%); <br/> <span class="Code-Comment">/* FF3.6+ */</span> <br/> background: <code class="CodeColor">-webkit-gradient</code>(linear, left top, left bottom, color-stop(0%,#ffff00), color-stop(100%,#00ff00)); <br/> <span class="Code-Comment">/* Chrome,Safari4+ */</span><br/>  background: <code class="CodeColor">-webkit-linear-gradient</code>(top, #ffff00 0%,#00ff00 100%); <span class="Code-Comment"><br/> /* Chrome10+,Safari5.1+ */</span><br/>  background: <code class="CodeColor">-o-linear-gradient</code>(top, #ffff00 0%,#00ff00 100%); <span class="Code-Comment"><br/> /* Opera 11.10+ */</span><br/>  background: <code class="CodeColor">-ms-linear-gradient</code>(top, #ffff00 0%,#00ff00 100%); <br/> <span class="Code-Comment">/* IE10+ */</span><br/> background: <code class="CodeColor">linear-gradient</code>(to bottom, #ffff00 0%,#00ff00 100%); <br/> <span class="Code-Comment">/* W3C Standard */</span><br/>  filter: progid:DXImageTransform.Microsoft.gradient( <br/> startColorstr='#ffff00', endColorstr='#00ff00',GradientType=0 ); <br/> <span class="Code-Comment">/* IE6-9 */</span></pre>
			<p class="body">In upcoming chapters, whenever a property requires vendor prefixes, I will be sure to note it. Otherwise, you can assume that the standard CSS is all you need.</p>
			<h2 class="HeadB">Designing Gradients</h2>
			<p class="body">That last<a id="_idIndexMarker2537"></a> code example was a doozy! Vendor prefixes aside, just the task of describing gradients can be daunting. Although it is not impossible to write the code by hand, I recommend you do what I do—use an online gradient tool. One option is the <a id="_idIndexMarker2538"></a>Ultimate CSS Gradient Generator from<a id="_idIndexMarker2539"></a> Colorzilla (<a href="http://www.colorzilla.com/gradient-editor/"><span class="URL-Email">www.colorzilla.com/gradient-editor/</span></a>), shown in <span class="Xref-Figure">Figure 13-36</span>. Simply enter as many color stops as you’d like, slide the sliders around until you get the look you want, and then copy the code. That’s exactly what I did to get the example we just looked at. The <a id="_idIndexMarker2540"></a>CSS Gradient Generator by <a id="_idIndexMarker2541"></a>Virtuosoft is another fine option that also includes support for repeating gradients (<a href="http://www.virtuosoft.eu/tools/css-gradient-generator/"><span class="URL-Email">www.virtuosoft.eu/tools/css-gradient-generator/</span></a>).</p>
			<div>
				<figure id="_idContainer839" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1336_generator.png" alt="" width="1321" height="908"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-36.</span> The Ultimate CSS Gradient Generator (<a href="http://www.colorzilla.com/gradient-editor"><span class="URL-Email--Sidebar-">www.colorzilla.com/gradient-editor</span></a>) makes creating CSS gradients a breeze.</figcaption>
				</figure>
			</div>
			<p class="body">If you want your mind blown, take a look at the wild background patterns made with gradients assembled by Lea Verou in her <a id="_idIndexMarker2542"></a>CSS3 Patterns Gallery (<a href="http://lea.verou.me/css3patterns"><span class="URL-Email">lea.verou.me/css3patterns</span></a>) (<span class="Xref-Figure">Figure 13-37</span>). It’s inspirational, and you can take a peek at the code used to create them. </p>
			<div>
				<figure id="_idContainer841" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1337_patternsgallery.png" alt="" width="600" height="633"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-37.</span> CSS3 Patterns Gallery assembled by <a id="_idIndexMarker2543"></a>Lea Verou (<a href="http://lea.verou.me/css3patterns"><span class="URL-Email--Sidebar-">lea.verou.me/css3patterns</span></a>). You may also enjoy Lea’s book, <span class="Citation--Sidebar-">CSS Secrets: Better Solutions to Everyday Web Design Problems</span> (O'Reilly).</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-130" class="HeadA"><a id="_idTextAnchor186"></a>Finally, External Style Sheets</h1>
			<p class="body">Back in <a href="lwd5_chapter11.xhtml#_idTextAnchor134"><span class="Xref">Appendix </span><span class="Xref">11</span><span class="Xref">, Introducing Cascading Style Sheets</span></a> I told you that there are three ways to connect style sheets to an HTML document: inline with the <a id="_idIndexMarker2544"></a><span class="Literal-fc">style</span> attribute, <a id="_idIndexMarker2545"></a>embedded with the <a id="_idIndexMarker2546"></a><span class="Literal-fc">style</span> element, and as an external <span class="Filename">.css</span> document linked to or imported into the document. In this section, we finally get to that third option.</p>
			<p class="body">External style sheets are by far the most powerful way to use CSS because you can make style changes across an entire site simply by editing a single style sheet document. That is the advantage to having all the style information in one place, and not mixed in with the document source.</p>
			<p class="body">Furthermore, because a single style document is downloaded and cached by the browser for the whole site, there is less code to download with every document, resulting in better performance.</p>
			<p class="body">First, a little bit about the style sheet document itself. An external style sheet is a plain-text document with at least one style sheet rule. It may <em class="Emphasis">not</em> include any HTML tags (there’s no reason to include them, anyway). It may contain comments, but they must use the CSS comment syntax that you’ve seen already:</p>
			<pre class="CodeFirst"><code class="CodeColor">/*</code> This is the end of the section <code class="CodeColor">*/</code></pre>
			<p class="body">The style sheet should be named with the <span class="Filename">.css</span> suffix (there are some exceptions to this rule, but you’re unlikely to encounter them as a beginner). It may also begin with the<a id="_idIndexMarker2547"></a> <span class="Literal-fc">@charset</span> at-rule to declare the <a id="_idIndexMarker2548"></a><a id="_idIndexMarker2549"></a>character encoding, although you really need to do that only if you are using an encoding other than UTF-8. If you use <span class="Literal-fc">@charset</span>, it must be the first element in the style sheet, with no characters, including comments or style rules, preceding it.</p>
			<p class="body"><span class="Xref-Figure">Figure 13-38</span> shows how a short style sheet document looks in my text editor.</p>
			<div>
				<figure id="_idContainer843" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_1338_cssfile.png" alt="" width="1332" height="911"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-38.</span> External style sheets contain only CSS rules and comments in a plain-text document.</figcaption>
				</figure>
			</div>
			<p class="body">There are two ways to apply an external style sheet: the <span class="Literal-fc">link</span> element and an <span class="Literal-fc">@</span><span class="Literal-fc"><a id="_idIndexMarker2550"></a></span><span class="Literal-fc">import</span> rule. Let’s look at both of these attachment methods.</p>
			<h2 class="HeadB">Using the link Element</h2>
			<p class="body">The <span class="Literal-fc">link</span> element <a id="_idIndexMarker2551"></a><a id="_idIndexMarker2552"></a><a id="_idIndexMarker2553"></a>defines a relationship between the current document and an external resource. By far, its most popular use is to link to style sheets. The <span class="Literal-fc">link</span> element goes in the <span class="Literal-fc">head</span> of the document, as shown here:</p>
			<pre class="CodeFirst">&lt;head&gt;<br/>  &lt;title&gt;Titles are required.&lt;/title&gt;<code class="CodeColor"><br/>  &lt;link rel="stylesheet" href="/path/stylesheet.css"&gt;</code><br/>&lt;/head&gt;</pre>
			<p class="body">You need to include two attributes in the <span class="Literal-fc">link</span> element:</p>
			<p class="ListVariableTerm"><span class="Literal-fc">rel="stylesheet"</span></p>
			<p class="ListVariable">Defines the linked document’s relation to the current document. The value of the<a id="_idIndexMarker2554"></a><a id="_idIndexMarker2555"></a> <span class="Literal-fc">rel</span> attribute is always <span class="Literal-fc">stylesheet</span> when you are linking to a style sheet.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">href="</span><span class="Replaceable">url</span><span class="Literal-fc">"</span></p>
			<p class="ListVariable">Provides the<a id="_idIndexMarker2556"></a><a id="_idIndexMarker2557"></a> location of the <span class="Filename">.css</span> file.</p>
			<p class="body">You can include multiple <span class="Literal-fc">link</span> elements to different style sheets, and they’ll all apply. If there are conflicts, whichever one is listed last will override previous settings, because of the rule order and the cascade.</p>
			<h2 class="HeadB">Importing with @import</h2>
			<p class="body">The other <a id="_idIndexMarker2558"></a><a id="_idIndexMarker2559"></a>method for attaching an external style sheet to a document is to import it with an <span class="Literal-fc">@import</span> rule. The <span class="Literal-fc">@import</span> at-rule is another type of rule you can add to a style sheet, either in an external <span class="Filename">.css</span> style sheet document, or right in the <span class="Literal-fc">style</span> element, as shown in the following example: </p>
			<pre class="CodeFirst">&lt;head&gt;<br/>  &lt;style&gt;<br/>     <code class="CodeColor">@import url("/path/stylesheet.css");</code><br/>     p { font-face: Verdana;}<br/>  &lt;/style&gt;<br/>  &lt;title&gt;Titles are required.&lt;/title&gt;<br/>&lt;/head&gt;</pre>
			<p class="body">In this example, a<a id="_idIndexMarker2560"></a> <a id="_idIndexMarker2561"></a>relative URL is shown, but it could also be an absolute URL (beginning with <span class="Literal-fc">http://</span>). The <span class="Literal-fc">@import</span> rule must go at the beginning of the style sheet <em class="Emphasis">before any selectors</em>. You can import more than one style sheet, and they all will apply, but rules from the last style sheet listed take precedence over earlier ones.</p>
			<p class="body">You can also limit a style sheet’s import to specific media types (such as screen, print, or projection, to name a few) or viewing environments (orientation, screen size, etc.) <a id="_idIndexMarker2562"></a>using <span class="FirstTerm">media queries</span>. Media queries are a method for applying styles based on the medium used to display the document. They appear after the <span class="Literal-fc">@import</span> rule in a comma-separated list. For example, if you have created a style sheet that should be imported and used only when the document is printed, use this rule:</p>
			<pre class="CodeFirst">@import url(print_styles.css) <code class="CodeColor">print</code>;</pre>
			<p class="body">Or to serve a special style sheet just for small devices, you could also query the viewport:</p>
			<pre class="CodeFirst">@import url(small_device.css) <code class="CodeColor">screen and (max-width: 320px;)</code>;</pre>
			<p class="body">We’ll talk a lot more about media queries in <a href="lwd5_chapter17.xhtml#_idTextAnchor224"><span class="Xref">Appendix </span><span class="Xref">17</span><span class="Xref">, Responsive Web Design</span></a>, but I mention them here as they are relevant to importing style sheets.  </p>
			<p class="body">You can try both the <span class="Literal-fc">link</span> and <span class="Literal-fc">@import</span> methods in <span class="Xref-Figure">Exercise 13-8</span>.</p>
			<div>
				<div id="_idContainer844" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 13-8.</span> Making an external style sheet</h6>
					<p class="SidebarBody">It is OK to use an embedded style sheet while designing a page, but it is probably best moved to an external style sheet once the design is finished so it can be reused by multiple documents in the site. We’ll do just that for the summer menu style sheet.</p>
					<ol>
						<li class="SidebarListNumber" value="1">Open the latest version of <span class="Filename--Sidebar-">summer-menu.html</span>. Select and cut all of the rules within the <span class="Literal-Sidebar">style</span> element, but leave the <span class="Literal-Sidebar">&lt;style&gt;...&lt;/style&gt;</span> tags because we’ll be using them in a moment.</li>
						<li class="SidebarListNumber">Create a new plain ASCII text document and paste all of the style rules. Make sure that no markup got in there by accident.</li>
						<li class="SidebarListNumber">Save this document as <span class="Filename--Sidebar-">menustyles.css</span> in the same directory as the <span class="Filename--Sidebar-">summer-menu.html</span> document.</li>
						<li class="SidebarListNumber">Now, back in <span class="Filename--Sidebar-">summer-menu.html</span>, add an <span class="Literal-Sidebar">@import</span> rule to attach the external style sheet:<pre class="SidebarCodeFirst">&lt;style&gt;<br/><code class="CodeColor">@import url(menustyles.css);</code><br/>&lt;/style&gt;</pre><p class="SidebarListItem_cont">Save the file and reload it in the browser. It should look exactly the same as it did when the style sheet was embedded. If not, go back and make sure that everything matches the examples.</p></li>
						<li class="SidebarListNumber">Delete the whole <span class="Literal-Sidebar">style</span> element, and this time we’ll add the style sheet with a <span class="Literal-Sidebar">link</span> element in the <span class="Literal-Sidebar">head</span> of the document.<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;link rel="stylesheet" href="menustyles.css"&gt; </code></pre><p class="SidebarListItem_cont">Again, test your work by saving the document and taking a look at it in the browser. </p></li>
					</ol>
				</div>
			</div>
			<h2 class="HeadB">Using Modular Style Sheets</h2>
			<p class="body">Because you can<a id="_idIndexMarker2563"></a> <a id="_idIndexMarker2564"></a><a id="_idIndexMarker2565"></a>compile information from multiple external style sheets, modular style sheets have become a popular technique for style management. Many developers keep styles they frequently reuse—such as typography treatments, layout rules, or form-related styles—in separate style sheets, then combine them in mix-and-match fashion using <span class="Literal-fc">@import</span> rules. Again, the <span class="Literal-fc">@­import</span> rules need to go before rules that use selectors.</p>
			<p class="body">Here’s an example of a style sheet that imports multiple external style sheets:</p>
			<pre class="CodeFirst"><span class="Code-Comment">/* basic typography */</span><br/> @import url("type.css"); <br/><br/><span class="Code-Comment">/* form inputs */</span><br/> @import url("forms.css"); <br/><br/><span class="Code-Comment">/* navigation */</span><br/> @import url("list-nav.css"); <br/><br/><span class="Code-Comment">/* site-specific styles */</span><br/> body { background: orange; } <br/><br/><span class="Code-Comment">/* more style rules */</span></pre>
			<div>
				<div id="_idContainer845" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">You can also supply the <a id="_idIndexMarker2566"></a>URL without the <span class="Literal-Sidebar">url()</span> <a id="_idIndexMarker2567"></a>notation:</p>
					<pre class="Code">@import "/path/style.css";</pre>
					<p class="note">Again, <a id="_idIndexMarker2568"></a>absolute pathnames, beginning at the root, will ensure that the <span class="Filename--Sidebar-">.css</span> document will always be found.</p>
				</div>
			</div>
			<p class="body">This is a good technique to keep in mind as you build experience in creating sites. You’ll find that there are some solutions that work well for you, and it is nice not to have to reinvent the wheel for every new site. Modular style sheets are a good time-saving and organizational device; however, they can be a problem for performance and caching. </p>
			<p class="body">If you use this method, it is recommended that you compile all of the styles into a single document before delivering them to a browser. Not to worry, you don’t need to do it manually; there are tools out there that will do it for you. The <a id="_idIndexMarker2569"></a><a id="_idIndexMarker2570"></a>LESS and Sass CSS preprocessors (which will be formally introduced in <a href="lwd5_chapter20.xhtml#_idTextAnchor256"><span class="Xref">Chapter </span><span class="Xref">20</span></a>) are just two tools that offer compiling functionality.</p>
			<h1 id="_idParaDest-131" class="HeadA"><a id="_idTextAnchor187"></a>Wrapping It Up</h1>
			<p class="body">We’ve covered a lot of ground (or <em class="Emphasis">background</em>, to be more accurate) in this chapter. We looked at ways to set the foreground and background colors for an element by using various numeric systems and color names. We looked at options for adjusting the level of transparency with the <span class="Literal-fc">opacity</span> property and RGBa, and HSLa color spaces. We spent a long time exploring the various ways to add a background image and adjust how it repeats, where the origin image is placed, and how it is sized. We saw how linear and radial gradients can be used as background images as well. Along the way, you picked up pseudo-class, pseudo-element, and attribute selectors and looked at ways to attach external style sheets. I think that’s enough for one chapter! See how much you remember with this little quiz.</p>
			<h1 id="_idParaDest-132" class="HeadA"><a id="_idTextAnchor188"></a>Test Yourself</h1>
			<p class="body">This time I’ll test your background prowess entirely with matching and multiple-choice questions. Answers appear in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix </span><span class="Xref">A</span></a>.</p>
			<ol>
				<li class="ListNumber" value="1">Which of these areas gets filled with a background color by default?<ol><li class="ListNumber_Indent">The area behind the content</li><li class="ListNumber_Indent">Any padding added around the content</li><li class="ListNumber_Indent">The area under the border</li><li class="ListNumber_Indent">The margin space around the element</li><li class="ListNumber_Indent">All of the above</li><li class="ListNumber_Indent">a and b</li><li class="ListNumber_Indent">a, b, and c</li></ol></li>
				<li class="ListNumber">Which of these is <em class="Emphasis">not</em> a way to specify the color white in CSS?<p class="ListNumber_cont">a.  <code class="Code">#FFFFFF</code></p><p class="ListNumber_cont">b.  <code class="Code">#FFF</code> </p><p class="ListNumber_cont">c.  <code class="Code">rgb(255, 255, 255)</code></p><p class="ListNumber_cont">d.  <code class="Code">rgb(FF, FF, FF)</code></p><p class="ListNumber_cont">e.  <code class="Code">white</code></p><p class="ListNumber_cont">f.  <code class="Code">rgb(100%, 100%, 100%)</code></p></li>
				<li class="ListNumber">Match the pseudo-class with the elements it targets.<table id="table003-3" class="table_invisible"><colgroup><col/><col/></colgroup><tbody><tr class="table_invisible"><td class="table_invisible"><p class="ListNumber_cont">a.  <code class="Code">a:link</code></p></td><td class="table_invisible"><p class="ListNumber_cont">1. Links that have already been clicked</p></td></tr><tr class="table_invisible"><td class="table_invisible"><p class="ListNumber_cont">b.  <code class="Code">a:visited</code></p></td><td class="table_invisible"><p class="ListNumber_cont">2. An element that is highlighted and ready for input</p></td></tr><tr class="table_invisible"><td class="table_invisible"><p class="ListNumber_cont">c.  <code class="Code">a:hover</code></p></td><td class="table_invisible"><p class="ListNumber_cont">3. An element that is the first child element of its parent</p></td></tr><tr class="table_invisible"><td class="table_invisible"><p class="ListNumber_cont">d.  <code class="Code">a:active</code></p></td><td class="table_invisible"><p class="ListNumber_cont">4. A link with the mouse pointer over it</p></td></tr><tr class="table_invisible"><td class="table_invisible"><p class="ListNumber_cont">e.  <code class="Code">:focus</code></p></td><td class="table_invisible"><p class="ListNumber_cont">5. Links that have not yet been visited</p></td></tr><tr class="table_invisible"><td class="table_invisible"><p class="ListNumber_cont">f.  <code class="Code">:first-child</code> </p></td><td class="table_invisible"><p class="ListNumber_cont">6. A link that is in the process of being clicked</p></td></tr></tbody></table></li>
				<li class="ListNumber">Match the following rules with their respective samples as shown in <span class="Xref-Figure">Figure 13-39</span>. All of the samples in the figure use the same source document, consisting of one paragraph element to which some padding and a border have been applied.<figure id="_idContainer847" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_1339_test-ebook.png" alt="" width="1338" height="1292"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 13-39.</span> Samples for Question 4.</figcaption></figure><ol><li class="ListNumber_Indent" value="1"><code class="Code">body {<br/>  </code><code class="Code">background-image: url(graphic.gif);<br/>}</code></li><li class="ListNumber_Indent"><code class="Code">p {</code><br/><code class="Code">  background-image: url(graphic.gif); <br/>  background-repeat: no-repeat; <br/>  background-position: 50% 0%;<br/>}</code></li><li class="ListNumber_Indent"><code class="Code">body {<br/></code><code class="Code">  background-image: url(graphic.gif); </code><br/><code class="Code">   background-repeat: repeat-x;<br/>}</code></li><li class="ListNumber_Indent"><code class="Code">p {</code><br/><code class="Code">  background: url(graphic.gif) no-repeat right center;<br/>}</code></li><li class="ListNumber_Indent"><code class="Code">body {</code><br/><code class="Code">  background-image: url(graphic.gif); <br/>  background-repeat: repeat-y;<br/>  }</code></li><li class="ListNumber_Indent"><code class="Code">body { </code><br/><code class="Code">  background: url(graphic.gif) no-repeat right center;<br/>}</code></li></ol></li>
			</ol>
			<h1 id="_idParaDest-133" class="HeadA"><a id="_idTextAnchor189"></a>CSS Review: Color and Background Properties</h1>
			<p class="body">Here is a summary of<a id="_idIndexMarker2571"></a> the properties covered in this chapter, in alphabetical order.</p>
			<table id="table004-3" class="Table">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Property</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Description</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Shorthand <a id="_idIndexMarker2572"></a>property that combines background properties</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-attachment</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker2573"></a>whether the background image scrolls or is fixed</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-clip</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies<a id="_idIndexMarker2574"></a> how far the background image should extend</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-color</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker2575"></a>the background color for an element</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-image</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Provides <a id="_idIndexMarker2576"></a>the location of an image to use as a background</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-origin</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Determines <a id="_idIndexMarker2577"></a>how the <span class="Literal-Sidebar">background-position</span> is calculated (from edge of border, padding, or content box)</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-position</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies the <a id="_idIndexMarker2578"></a>location of the origin background image</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-repeat</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker2579"></a>whether and how a background image repeats (tiles)</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">background-size</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies<a id="_idIndexMarker2580"></a> the size of the background image</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">color</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies<a id="_idIndexMarker2581"></a> the foreground (text and border) color</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">opacity</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Specifies <a id="_idIndexMarker2582"></a>the transparency level of the foreground and background</p>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>
</body>
</html>