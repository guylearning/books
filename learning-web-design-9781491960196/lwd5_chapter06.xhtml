<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer282" class="ch06">
			<p id="_idParaDest-53" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor075"></a>6. Adding Links</p>
		</div>
		<div id="_idContainer283" class="ch06">
			<h1 class="chapterLabel">6</h1>
		</div>
		<div id="_idContainer284" class="ch06">
			<h1 class="chapterTitle"><a id="_idTextAnchor076"></a><a id="_idTextAnchor077"></a>Adding Links</h1>
		</div>
		<div id="_idContainer285" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In this Chapter</p>
			<p class="chapterContents">Linking to external pages</p>
			<p class="chapterContents">Linking to documents on your own server</p>
			<p class="chapterContents">Linking to a specific point in a page</p>
			<p class="chapterContents">Targeting new windows</p>
		</div>
		<div id="_idContainer336" class="ch06">
			<p class="body">If you’re creating a <a id="_idIndexMarker854"></a><a id="_idIndexMarker855"></a>page for the web, chances are you’ll want to link to other web pages and resources, whether on your own site or someone else’s. Linking, after all, is what the web is all about. In this chapter, we’ll look at the markup that makes links work—links to other sites, to your own site, and within a page. There is one element that makes linking possible: the <span class="FirstTerm">anchor</span> (<span class="Literal-fc">a</span>). </p>
			<p class="refNameCode">&lt;a&gt;…&lt;/a&gt;</p>
			<p class="refPurpose">Anchor element (hypertext link)</p>
			<p class="body">To make a <a id="_idIndexMarker856"></a>selection of text a link, simply wrap it in opening and closing <span class="Literal-fc">&lt;a&gt;...&lt;/a&gt;</span> tags and use the <span class="Literal-fc">href</span> attribute to provide the URL of the target page. The content of the anchor element becomes the hypertext link. Here is an example that creates a link to the O’Reilly Media site:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;a href="http://www.oreilly.com"&gt;</code>Go to the O'Reilly Media site<code class="CodeColor">&lt;/a&gt;</code></pre>
			<p class="body">To make an image a link, simply put<a id="_idIndexMarker857"></a> the <span class="Literal-fc">img</span> element in the anchor element:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;a href="http://www.oreilly.com"&gt;</code>&lt;img src="tarsierlogo.gif" alt="O'Reilly Media site"&gt;<code class="CodeColor">&lt;/a&gt;</code></pre>
			<p class="body">By the way, you can put any HTML content element in an anchor to make it a link, not just images. </p>
			<p class="body">Nearly all graphical <a id="_idIndexMarker858"></a><a id="_idIndexMarker859"></a>browsers display linked text as blue and underlined by default. Some older browsers put a blue border around linked images, but most current ones do not. Visited links generally display in purple. Users can change these colors in their browser preferences, and, of course, you can change the appearance of links for your sites using style sheets. I’ll show you how in <a href="lwd5_chapter13.xhtml#_idTextAnchor169"><span class="Xref">Chapter </span><span class="Xref">13</span><span class="Xref">, Colors and Backgrounds</span></a>. </p>
			<div>
				<div id="_idContainer286" class="sidebar">
					<h5 class="SidebarSeries">usability TIp</h5>
					<p class="SidebarBody">One word of caution: if you choose to change your link colors, keep them consistent throughout your site so as not to confuse your users.</p>
				</div>
			</div>
			<p class="body">When a user clicks or taps the linked text or image, the page you specify in the anchor element loads in the browser window. The linked image markup sample shown previously might look like <span class="Xref-Figure">Figure 6-1</span>.</p>
			<div>
				<figure id="_idContainer288" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0601.png" alt="" width="1321" height="500"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-1.</span> When a user clicks or taps the linked text or image, the page specified in the anchor element loads in the browser window.</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-54" class="HeadA"><a id="_idTextAnchor078"></a>The href Attribute</h1>
			<div>
				<div id="_idContainer289" class="sidebar">
					<h5 class="SidebarSeries">AT A GLANCE </h5>
					<h5 class="SidebarTitle">Anchor Structure</h5>
					<p class="SidebarBody">The simplified structure of the anchor element is as follows:</p>
					<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;a href="</code><span class="Replaceable">url</span><code class="CodeColor">"&gt;</code><span class="Replaceable">linked content</span><code class="CodeColor">&lt;/a&gt;</code></pre>
				</div>
			</div>
			<p class="body">You’ll<a id="_idIndexMarker860"></a><a id="_idIndexMarker861"></a><a id="_idIndexMarker862"></a> need to tell the browser which document to link to, right? The <span class="Literal-fc">href</span> (hypertext reference) attribute provides the address of the page or resource (its URL) to the browser. The URL must always appear in quotation marks. Most of the time you’ll point to other HTML documents; however, you can also point to other web resources, such as images, audio, and video files.</p>
			<p class="body">Because there’s <a id="_idIndexMarker863"></a>not much to slapping anchor tags around some content, the real trick to linking comes in getting the URL correct. There are two ways to specify the URL:</p>
			<p class="ListVariableTerm">Absolute URLs</p>
			<p class="ListVariable">Absolute <a id="_idIndexMarker864"></a><a id="_idIndexMarker865"></a><a id="_idIndexMarker866"></a><a id="_idIndexMarker867"></a><a id="_idIndexMarker868"></a><a id="_idIndexMarker869"></a>URLs provide the full URL for the document, including the protocol (<span class="Literal-fc">http://</span> or <span class="Literal-fc">https://</span>), the <a id="_idIndexMarker870"></a>domain name, and the pathname as necessary. You need to use an absolute URL when pointing to a document out on the web (i.e., not on your own server):</p>
			<pre class="CodeFirst">href="<code class="CodeColor">http://</code>www.oreilly.com/"</pre>
			<p class="ListVariable_cont">Sometimes, when the page you’re linking to has a long URL pathname, the link can end up looking pretty confusing (<span class="Xref-Figure">Figure 6-2</span>). Just keep in mind that the structure is still a simple container element with one attribute. Don’t let the long pathname intimidate you. </p>
			<p class="ListVariableTerm">Relative URLs </p>
			<p class="ListVariable">Relative <a id="_idIndexMarker871"></a><a id="_idIndexMarker872"></a><a id="_idIndexMarker873"></a><a id="_idIndexMarker874"></a>URLs describe the pathname to a file <em class="Emphasis">relative</em> to the current document. Relative URLs can be used when you are linking to another document on your own site (i.e., on the same server). It doesn’t require the protocol or domain name—just the pathname:</p>
			<pre class="CodeFirst">href="recipes/index.html"</pre>
			<p class="body">In this chapter, we’ll add links using absolute and relative URLs to my cooking website, Jen’s Kitchen (see <span class="Xref-Figure">Figure 6-3</span>). Absolute URLs are easy, so let’s get them out of the way first.</p>
			<div>
				<figure id="_idContainer291" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0602.png" alt="" width="1338" height="413"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-2.</span> An example of a long URL. Although it may make the anchor tag look confusing, the structure is the same.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer292" class="sidebar">
					<h5 class="SidebarSeries">MARKUP TIP</h5>
					<h5 class="SidebarTitle">URL Wrangling</h5>
					<p class="SidebarBody">If you’re linking to a page with a long URL, it’s helpful to <a id="_idIndexMarker875"></a>copy the URL from the location toolbar in your browser and paste it into your document. That way, you avoid mistyping a single character and breaking the whole link.</p>
				</div>
			</div>
			<h1 id="_idParaDest-55" class="HeadA"><a id="_idTextAnchor079"></a>Linking to Pages on the Web</h1>
			<p class="body">Many times, <a id="_idIndexMarker876"></a>you’ll want to create a link to a page that you’ve found on the web. This is known as an <span class="FirstTerm">external link </span>because it is going to a page outside of your own server or site. To make an external link, provide the absolute URL, beginning with <span class="Literal-fc">http://</span> (the protocol). This tells the browser, “Go out on the web and get the following document.”</p>
			<p class="body">I want to add some external links to the Jen’s Kitchen home page (<span class="Xref-Figure">Figure 6-3</span>). First, I’ll link the list item “The Food Network” to the <a href="http://www.foodnetwork.com"><span class="URL-Email">www.foodnetwork.com </span></a>site. I marked up the link text in an anchor element by adding opening and closing anchor tags. Notice that I’ve added the anchor tags <em class="Emphasis">inside</em> the list item (<span class="Literal-fc">li</span>) <a id="_idIndexMarker877"></a>element. That’s because only <span class="Literal-fc">li</span> elements are permitted to be children of a <span class="Literal-fc">ul</span> <a id="_idIndexMarker878"></a>element; placing an <span class="Literal-fc">a</span> element directly inside the <span class="Literal-fc">ul</span> element would be invalid HTML.</p>
			<pre class="CodeFirst">&lt;li&gt;<code class="CodeColor">&lt;a&gt;</code>The Food Network<code class="CodeColor">&lt;/a&gt;</code>&lt;/li&gt;</pre>
			<p class="body">Next, I add the <span class="Literal-fc">href</span> attribute with the complete URL for the site:</p>
			<pre class="CodeFirst">&lt;li&gt;&lt;a <code class="CodeColor">href="http://www.foodnetwork.com"</code>&gt;The Food Network&lt;/a&gt;&lt;/li&gt;</pre>
			<p class="body">And <em class="Emphasis">voilà</em>! Now “The Food Network” appears as a link and takes my visitors to that site when they click or tap it. Give it a try in <span class="Xref-Figure">Exercise 6-1</span>.</p>
			<div>
				<div id="_idContainer295" class="sidebar">
					<h5 class="SidebarSeries">TRY IT </h5>
					<h5 class="SidebarTitle">Working Along with Jen’s Kitchen</h5>
					<div>
						<figure id="_idContainer294" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_0603_kitchensite.png" alt="" width="582" height="443"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-3.</span><span class="FigureLabel"> </span>The Jen’s Kitchen page.</figcaption>
						</figure>
					</div>
					<p class="SidebarBody">All the files for the Jen’s Kitchen website are available online at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a>. Download the entire directory, making sure not to change the way its contents are organized. The pages aren’t much to look at, but they will give you a chance to develop your linking skills. </p>
					<p class="SidebarBody">The resulting markup for all of the exercises is also provided.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer296" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">exercise 6-1.</span> Make an external link</h6>
					<p class="SidebarBody">Open the file <span class="Filename--Sidebar-">index.html</span> from the <span class="Filename--Sidebar-">jenskitchen</span> folder. Make the list item “Epicurious” link to its web page at <a href="http://www.epicurious.com"><span class="URL-Email--Sidebar-">www.epicurious.com</span></a>, following my Food Network link example:</p>
					<pre class="SidebarCodeFirst">&lt;ul&gt;<br/>  &lt;li&gt;&lt;a href="http://www.foodnetwork.com/"&gt;The Food Network&lt;/a&gt;&lt;/li&gt;<br/>  &lt;li&gt;Epicurious&lt;/li&gt;<br/>&lt;/ul&gt;</pre>
					<p class="SidebarBody">When you are done, save <span class="Filename--Sidebar-">index.html</span> and open it in a browser. If you have an internet connection, you can click your new link and go to the Epicurious site. If the link doesn’t take you there, go back and make sure that you didn’t miss anything in the markup. </p>
				</div>
			</div>
			<h1 id="_idParaDest-56" class="HeadA"><a id="_idTextAnchor080"></a>Linking Within Your Own Site </h1>
			<p class="body">A large <a id="_idIndexMarker879"></a><a id="_idIndexMarker880"></a><a id="_idIndexMarker881"></a><a id="_idIndexMarker882"></a><a id="_idIndexMarker883"></a><a id="_idIndexMarker884"></a><a id="_idIndexMarker885"></a>portion of the linking you do is between pages of your own site: from the home page to section pages, from section pages to content pages, and so on. In these cases, you can use a relative URL—one that calls for a page on your own server. </p>
			<p class="body">Without “http://”, the browser looks on the current server for the linked document. A <span class="FirstTerm">pathname</span>, the <a id="_idIndexMarker886"></a>notation used to point to a particular file or directory, (see <span class="Xref">Note</span>) tells the browser where to find the file. Web pathnames follow the Unix convention of separating directory and filenames with forward slashes (<em class="Emphasis">/</em>). A relative pathname describes how to get to the linked document starting from the location of the current document. </p>
			<div>
				<div id="_idContainer297" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">On PCs and Macs,<a id="_idIndexMarker887"></a><a id="_idIndexMarker888"></a><a id="_idIndexMarker889"></a><a id="_idIndexMarker890"></a> files are organized into “folders,” but in the web development world, it is more common to refer to the equivalent and more technical term “directory.” A folder is just a directory with a cute icon.</p>
				</div>
			</div>
			<p class="body">Relative pathnames can get a bit tricky. In my teaching experience, nothing stumps beginners like writing relative pathnames, so we’ll take it one step at a time. I recommend you do <span class="Xref-Figure">Exercises 6-2</span> through <span class="Xref-Figure">6-8</span> as we go along.</p>
			<p class="body">All of the pathname examples in this section are based on the structure of the Jen’s Kitchen site shown in <span class="Xref-Figure">Figure 6-4</span>. When you diagram the structure of the directories for a site, it generally ends up looking like an inverted tree with the root directory at the top of the hierarchy. For the Jen’s Kitchen site, the root directory is named <span class="Filename">jenskitchen</span>. For another way to look at it, there is also a view of the directory and subdirectories as they appear in the Finder on my Mac.</p>
			<div>
				<figure id="_idContainer299" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0604.png" alt="" width="1338" height="1021"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-4.</span> A diagram of the <span class="Filename--Sidebar-">jenskitchen</span> site structure.</figcaption>
				</figure>
			</div>
			<p class="Figure_Holder"> </p>
			<div>
				<div id="_idContainer300" class="sidebar">
					<h5 class="SidebarTitle">Important Pathname Don’ts</h5>
					<p class="SidebarBody">When writing relative pathnames, follow these rules to <a id="_idIndexMarker891"></a>avoid common errors:</p>
					<ul>
						<li class="SidebarListBullet">Don’t use<a id="_idIndexMarker892"></a><a id="_idIndexMarker893"></a> backslashes (\). Web URL pathnames use forward <a id="_idIndexMarker894"></a>slashes (/) only.	</li>
						<li class="SidebarListBullet">Don’t start with the drive name (D:, C:, etc.). Although your pages will link to each other successfully while they are on your own computer, once they are uploaded to the web server, the drive name is irrelevant and will break your links.</li>
						<li class="SidebarListBullet">Don’t start with file://. This also indicates that the file is local and causes the link to break when it is on the server.</li>
					</ul>
				</div>
			</div>
			<h2 class="HeadB">Linking Within a Directory</h2>
			<p class="body">The most straightforward <a id="_idIndexMarker895"></a><a id="_idIndexMarker896"></a>relative URL points to another file within the same directory. When linking to a file in the same directory, you need to provide only the name of the file<a id="_idIndexMarker897"></a> (its <span class="FirstTerm">filename</span>). When the URL is just a filename, the server looks in the current directory (that is, the directory that contains the document with the link) for the file.</p>
			<div>
				<div id="_idContainer301" class="callout">
					<p class="callout">A link to a filename indicates the linked file is in the same directory as the current document.</p>
				</div>
			</div>
			<p class="body">In this example, I want to make a link from my home page (<span class="Filename">index.html</span>) to a general information page (<span class="Filename">about.html</span>). Both files are in the same directory (<span class="Filename">jenskitchen</span>). So, from my home page, I can make a link to the information page by simply providing its filename in the URL (<span class="Xref-Figure">Figure 6-5</span>):</p>
			<pre class="CodeFirst">&lt;a href="<code class="CodeColor">about.html</code>"&gt;About the site...&lt;/a&gt;</pre>
			<p class="body"><span class="Xref-Figure">Exercise 6-2</span> gives you a chance to mark up a simple link yourself.</p>
			<div>
				<figure id="_idContainer303" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0605.png" alt="" width="1338" height="879"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-5.</span> Writing a relative URL to another document in the same directory.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer304" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-2.</span> Link in the same directory</h6>
					<p class="SidebarBody">Open the file <span class="Filename--Sidebar-">about.html</span> from the<span class="Filename--Sidebar-"> jenskitchen</span> folder. Make the paragraph “Back to the home page” at the bottom of the page link back to<span class="Filename"> </span><span class="Filename--Sidebar-">index.html</span>. The anchor element should be contained in the <span class="Literal-Sidebar">p</span> element:</p>
					<pre class="SidebarCodeFirst">&lt;p&gt;Back to the home page&lt;/p&gt;</pre>
					<p class="SidebarBody">When you are done, save <span class="Filename--Sidebar-">about.html</span> and open it in a browser. You don’t need an internet connection to test links locally (that is, on your own computer). Clicking the link should take you back to the home page.</p>
				</div>
			</div>
			<h2 class="HeadB">Linking to a Lower Directory</h2>
			<p class="body">But what if the<a id="_idIndexMarker898"></a><a id="_idIndexMarker899"></a> files aren’t in the same directory? You have to give the browser directions by including the pathname in the URL. Let’s see how this works.</p>
			<p class="body">Getting back to our example, my recipe files are stored in a subdirectory called <span class="Filename">recipes</span>. I want to make a link from <span class="Filename">index.html</span> to a file in the <span class="Filename">recipes</span> directory called <span class="Filename">salmon.html</span>. The pathname in the URL tells the browser to look in the current directory for a directory called <span class="Filename">recipes</span>, and then look for the file <span class="Filename">salmon.html</span> (<span class="Xref-Figure">Figure 6-6</span>):</p>
			<pre class="CodeFirst">&lt;li&gt;&lt;a href="<code class="CodeColor">recipes/salmon.html</code>"&gt;Garlic Salmon&lt;/a&gt;&lt;/li&gt;</pre>
			<div>
				<figure id="_idContainer306" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0606.png" alt="" width="1338" height="879"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-6.</span> Writing a relative URL to a document that is one directory level lower than the current document.</figcaption>
				</figure>
			</div>
			<p class="body">Have a try at linking to a file in a directory in <span class="Xref-Figure">Exercise 6-3</span>.</p>
			<div>
				<div id="_idContainer307" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-3.</span> Link to a file in a directory</h6>
					<p class="SidebarBody">Open the file <span class="Filename--Sidebar-">index.html</span> from<a id="_idIndexMarker900"></a><a id="_idIndexMarker901"></a> the <span class="Filename--Sidebar-">jenskitchen</span> folder. Make the list item “Tapenade (Olive Spread)” link to the file <span class="Filename--Sidebar-">tapenade.html</span> in the <span class="Filename--Sidebar-">recipes</span> directory. Remember to nest the elements correctly:</p>
					<pre class="SidebarCodeFirst">&lt;li&gt;Tapenade (Olive Spread)&lt;/li&gt;</pre>
					<p class="SidebarBody">When you are done, save <span class="Filename--Sidebar-">index.html</span> and open it in a browser. You should be able to click your new link and see the recipe page for tapenade. If not, make sure that your markup is correct and that the directory structure for <span class="Filename--Sidebar-">jenskitchen</span> matches the examples.</p>
				</div>
			</div>
			<p class="body">Now let’s link down to the file called <span class="Filename">couscous.html</span>, which is located in the <span class="Filename">pasta</span> subdirectory. All we need to do is provide the directions through two subdirectories (<span class="Filename">recipes</span>, then <span class="Filename">pasta</span>) to <span class="Filename">couscous.html</span> (<span class="Xref-Figure">Figure 6-7</span>):</p>
			<pre class="CodeFirst">&lt;li&gt;&lt;a href="<code class="CodeColor">recipes/pasta/couscous.html</code>"&gt;Couscous...&lt;/a&gt;&lt;/li&gt;</pre>
			<p class="body">Directories are separated by <a id="_idIndexMarker902"></a>forward slashes. The resulting anchor tag tells the browser, “Look in the current directory for a directory called <span class="Filename">recipes</span>. There you’ll find a directory called <span class="Filename">pasta</span>, and in there is the file <span class="Filename">couscous.html</span>.”</p>
			<div>
				<div id="_idContainer308" class="callout">
					<p class="callout">When you link to a file in a lower directory, the pathname contains the names of each subdirectory you go through to get to the file.</p>
				</div>
			</div>
			<p class="body">Now that we’ve done two directory levels, you should get the idea of how pathnames are assembled. This same method applies for relative pathnames that drill down through any number of directories. Just start with the name of the directory that is in the same location as the current file, and follow each directory name with a slash until you get to the linked filename.</p>
			<div>
				<figure id="_idContainer310" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0607.png" alt="" width="1338" height="879"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-7.</span> Writing a relative URL to a document that is two directory levels lower than the current document. You can try it yourself in <span class="Xref-Figure">Exercise 6-4</span>.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer311" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-4.</span> Link two directories down</h6>
					<p class="SidebarBody">Open the file <span class="Filename--Sidebar-">index.html</span> from the <span class="Filename--Sidebar-">jenskitchen</span> folder. Make the list item “Linguine with Clam Sauce” link to the file <span class="Filename--Sidebar-">linguine.html</span> in the <span class="Filename--Sidebar-">pasta</span> directory:</p>
					<pre class="SidebarCodeFirst">&lt;li&gt;Linguine with Clam Sauce&lt;/li&gt;</pre>
					<p class="SidebarBody">When you are done, save <span class="Filename--Sidebar-">index.html</span> and open it in a browser. Click the new link to get the delicious recipe.</p>
				</div>
			</div>
			<h2 class="HeadB">Linking to a Higher Directory</h2>
			<p class="body">So far, so <a id="_idIndexMarker903"></a><a id="_idIndexMarker904"></a>good, right? Now it gets more interesting. This time we’re going to go in the other direction and make a link from the salmon recipe page back to the home page, which is one directory level up.</p>
			<p class="body">In <a id="_idIndexMarker905"></a><a id="_idIndexMarker906"></a><a id="_idIndexMarker907"></a>Unix, there is a pathname convention just for this purpose, the “<a id="_idIndexMarker908"></a>dot-dot-slash” (<span class="Literal-fc">../</span>). When you begin a pathname with <span class="Literal-fc">../</span>, it’s the same as telling the browser “back up one directory level” and then follow the path to the specified file. If you are familiar with browsing files on your desktop, it is helpful to know that a  “<span class="Literal-fc">../</span>” has the same effect as clicking the Up button in Windows Explorer or the left-arrow button in the Finder on macOS.</p>
			<div>
				<div id="_idContainer312" class="callout">
					<p class="callout">Each ../ at the beginning of the pathname tells the browser to go up one directory level to look for the file.</p>
				</div>
			</div>
			<p class="body">Let’s start by making a link from <span class="Filename">salmon.html</span> back to the home page (<span class="Filename">index.html</span>). Because <span class="Filename">salmon.html</span> is in the <span class="Filename">recipes</span> subdirectory, we need to go back up to the <span class="Filename">jenskitchen</span> directory to find <span class="Filename">index.html</span>. This pathname tells the browser to “back up one level,” then look in that directory for <em class="Emphasis">index.html</em> (<span class="Xref-Figure">Figure 6-8</span>):</p>
			<pre class="CodeFirst">&lt;p&gt;&lt;a href="<code class="CodeColor">../index.html</code>"&gt;[Back to home page]&lt;/a&gt;&lt;/p&gt;</pre>
			<p class="body">Note that the <span class="Literal-fc">../</span> stands in for the name of the higher directory, and we don’t need to write out <span class="Filename">jenskitchen</span> in the pathname.</p>
			<div>
				<figure id="_idContainer314" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0608.png" alt="" width="1338" height="879"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-8.</span> Writing a relative URL to a document that is one directory level higher than the current document.</figcaption>
				</figure>
			</div>
			<p class="body">Try adding a dot-dot-slash pathname to a higher directory in <span class="Xref-Figure">Exercise 6-5</span>.</p>
			<div>
				<div id="_idContainer315" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-5.</span> Link to a higher directory</h6>
					<p class="SidebarBody">Open the file <span class="Filename--Sidebar-">tapenade.html</span> from the <span class="Filename--Sidebar-">recipes</span> directory. At the bottom of the page, you’ll find this paragraph: </p>
					<pre class="SidebarCodeFirst">&lt;p&gt;[Back to the home page]&lt;/p&gt;</pre>
					<p class="SidebarBody">Using the notation described in this section, make this text link back to the home page (<span class="Filename--Sidebar-">index.html</span>), located one directory level up.</p>
				</div>
			</div>
			<p class="body">But how about linking back to the home page from <span class="Filename">couscous.html</span>? Can you guess how you’d back your way out of two directory levels? Simple: just use the dot-dot-slash twice (<span class="Xref-Figure">Figure 6-9</span>).</p>
			<p class="body">A link on the <span class="Filename">couscous.html</span> page back to the home page (<span class="Filename">index.html</span>) would look like this:</p>
			<pre class="CodeFirst">&lt;p&gt;&lt;a href="<code class="CodeColor">../../index.html</code>"&gt;[Back to home page]&lt;/a&gt;&lt;/p&gt;</pre>
			<p class="body">The first <span class="Literal-fc">../</span> backs up to the <span class="Filename">recipes</span> directory; the second <span class="Literal-fc">../</span> backs up to the top-level directory (<span class="Filename">jenskitchen</span>), where <span class="Filename">index.html</span> can be found. Again, there is no need to write out the directory names; the <span class="Literal-fc">../</span> does it all.</p>
			<p class="body">Now you try (<span class="Xref-Figure">Exercise 6-6</span>). </p>
			<div>
				<figure id="_idContainer317" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0609.png" alt="" width="1338" height="879"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-9.</span> Writing a relative URL to a document that is two directory levels higher than the current document.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer318" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-6.</span> Link up two directory levels</h6>
					<p class="SidebarBody">OK, now it’s your turn to give it a try. Open the file <span class="Filename--Sidebar-">linguine.html</span> and make the last paragraph link back to the home page by using <span class="Literal-Sidebar">../../</span> as I have done:</p>
					<pre class="SidebarCodeFirst">&lt;p&gt;[Back to the home page]&lt;/p&gt;</pre>
					<p class="SidebarBody">When you are done, save the file and open it in a browser. You should be able to link to the home page.</p>
				</div>
			</div>
			<h2 class="HeadB">Linking with Site Root Relative Pathnames</h2>
			<p class="body">All sites <a id="_idIndexMarker909"></a>have a <span class="FirstTerm">root directory</span>, the directory that contains all the directories and files for the site. So far, all of the pathnames we’ve looked at are relative to the document with the link. Another way to write a relative pathname is to start at the root directory and list the subdirectory names to the file you want to link to. This type of pathname is <a id="_idIndexMarker910"></a><a id="_idIndexMarker911"></a><a id="_idIndexMarker912"></a><a id="_idIndexMarker913"></a><a id="_idIndexMarker914"></a>known as <span class="FirstTerm">site root relative</span>.</p>
			<div>
				<div id="_idContainer319" class="callout">
					<p class="callout">Site root relative links are generally preferred because of their flexibility.</p>
				</div>
			</div>
			<p class="body">In the Unix pathname convention, a forward slash (/) at the start of the pathname indicates that the path begins at the root directory. The site root relative pathname in the following link reads, “Go to the very top-level directory for this site, open the <span class="Filename">recipes</span> directory, and then find the <span class="Filename">salmon.html</span> file” (<span class="Xref-Figure">Figure 6-10</span>):</p>
			<pre class="CodeFirst">&lt;a href="<code class="CodeColor">/recipes/salmon.html</code>"&gt;Garlic Salmon&lt;/a&gt;</pre>
			<div>
				<figure id="_idContainer321" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0610.png" alt="" width="1338" height="879"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-10.</span> Writing a relative URL starting at the root directory.</figcaption>
				</figure>
			</div>
			<p class="body">Note that you don’t need to (and you shouldn’t) write the name of the root directory (<span class="Filename">jenskitchen</span>) in the path—the forward slash (/) at the beginning represents the top-level directory in the pathname. From there, just specify the directories the browser should look in. </p>
			<p class="body">Because this type of link starts at the root to describe the pathname, it works from any document on the server, regardless of which subdirectory it may be located in. Site root relative links are useful for content that might not always be in the same directory, or for dynamically generated material. They also make it easy to copy and paste links between documents. </p>
			<p class="body">On the downside, however, the links won’t work on your local machine, because they will be relative to your hard drive. You’ll have to wait until the site is on the final server to check that links are working.  </p>
			<div>
				<div id="_idContainer322" class="note">
					<h5 class="WarningHeader">WARNING</h5>
					<p class="note">Site root relative pathnames won’t work on your local computer unless it is set up as a server.</p>
				</div>
			</div>
			<h2 class="HeadB">Writing Pathnames to Images</h2>
			<p class="body">The <span class="Literal-fc">src</span> attribute<a id="_idIndexMarker915"></a><a id="_idIndexMarker916"></a> in <a id="_idIndexMarker917"></a>the <span class="Literal-fc">img</span> element works the same as the <span class="Literal-fc">href</span> attribute in anchors. Because you’ll most likely be using images from your own server, the <span class="Literal-fc">src</span> attributes within your image elements will be set to relative URLs. </p>
			<p class="body">Let’s look at a few examples from the Jen’s Kitchen site. First, to add an image to the <span class="Filename">index.html</span> page, you’d use the following markup:</p>
			<pre class="CodeFirst">&lt;img src="<code class="CodeColor">images/jenskitchen.gif</code>" alt=""&gt;</pre>
			<p class="body">The URL says, “Look in the current directory (<span class="Filename">jenskitchen</span>) for the <span class="Filename">images</span> directory; in there you will find <span class="Filename">jenskitchen.gif</span>.”</p>
			<p class="body">Now for the <em class="Emphasis">pièce de résistance</em>. Let’s add an image to the file <span class="Filename">couscous.html</span>: </p>
			<pre class="CodeFirst">&lt;img src="<code class="CodeColor">../../images/spoon.gif</code>" alt=""&gt;</pre>
			<p class="body">This is a little more complicated than what we’ve seen so far. This pathname tells the browser to go up two directory levels to the top-level directory and, once there, look in the <span class="Filename">images</span> directory for an image called <span class="Filename">spoon.gif</span>. Whew!</p>
			<p class="body">Of course, you could simplify that path by going the site root relative route, in which case the pathname to <span class="Filename">spoon.gif</span> (and any other file in the <span class="Filename">images</span> directory) could be accessed like this:</p>
			<pre class="CodeFirst">&lt;img src="<code class="CodeColor">/images/spoon.gif</code>" alt=""&gt;</pre>
			<p class="body">The trade-off is that you won’t see the image in place until the site is uploaded to the server, but it does make maintenance easier once it’s there.</p>
			<div>
				<div id="_idContainer324" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-7.</span> Try a few more</h6>
					<p class="SidebarBody">Before we move on, you may want to try your hand at writing a few more relative URLs to make sure you’ve really gotten it. You can write your answers here in the book, or if you want to test your markup to see whether it works, make changes in the actual files. Note that the text shown here isn’t included on the exercise pages—you’ll need to add it before you can create the link (for example, type in “Go to the Tapenade recipe” for the first question). The final code is in the finished exercise files in the <span class="Filename--Sidebar-">materials</span> folder for this chapter. I also included them in <span class="Xref--Sidebar-">Appendix A</span>.</p>
					<div>
						<div id="_idContainer323" class="note">
							<h5 class="noteHeader">NOTE</h5>
							<p class="note">Most of the pathnames in <span class="Xref-Figure">Exercise 6-7</span> could be site root relative, but write them relative to the listed document for the practice.</p>
						</div>
					</div>
					<ol>
						<li class="SidebarListNumber">Create a link on <span class="Filename--Sidebar-">salmon.html</span> to <span class="Filename--Sidebar-">tapenade.html</span>:<pre class="SidebarCodeFirst">Go to the Tapenade recipe</pre></li>
						<li class="SidebarListNumber">Create a <a id="_idTextAnchor081"></a>link on <span class="Filename--Sidebar-">couscous.html</span> to <span class="Filename--Sidebar-">salmon.html</span>:<pre class="SidebarCodeFirst">Try this with Garlic Salmon.</pre></li>
						<li class="SidebarListNumber">Create a link on <span class="Filename--Sidebar-">tapenade.html</span> to <span class="Filename--Sidebar-">linguine.html</span>:<pre class="SidebarCodeFirst">Try the Linguine with Clam Sauce</pre></li>
						<li class="SidebarListNumber">Create a link on <span class="Filename--Sidebar-">linguine.html</span> to <span class="Filename--Sidebar-">about.html</span><span class="Filename">:</span><pre class="SidebarCodeFirst">About Jen's Kitchen</pre></li>
						<li class="SidebarListNumber">Create a link on<span class="Filename"> </span><span class="Filename--Sidebar-">tapenade.html</span><span class="Filename"> </span>to<span class="Filename"> </span><a href="http://www.allrecipes.com"><span class="URL-Email--Sidebar-">www.allrecipes.com</span></a>:<pre class="SidebarCodeFirst">Go to Allrecipes.com</pre></li>
					</ol>
				</div>
			</div>
			<h2 class="HeadB">Linking to a Specific Point in a Page</h2>
			<p class="body">Did you know <a id="_idIndexMarker918"></a><a id="_idIndexMarker919"></a>you can link to a specific point in a web page? This is useful for providing shortcuts to information at the bottom of a long, scrolling page or for getting back to the top of a page with just one click or tap. Linking to a specific point in the page is also known as linking to a <a id="_idIndexMarker920"></a>document <span class="FirstTerm">fragment</span>.</p>
			<p class="body">Linking to a particular spot within a page is a two-part process. First, identify the destination, and then make a link to it. In the following example, I create an alphabetical index at the top of the page that links down to each alphabetical section of a glossary page (<span class="Xref-Figure">Figure 6-11</span>). When users click the letter H, they’ll jump to the “H” heading lower on the page.</p>
			<div>
				<div id="_idContainer325" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">Linking to another spot on the same page works well for long, scrolling pages, but the effect may be lost on a short web page.</p>
				</div>
			</div>
			<div>
				<figure id="_idContainer327" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0611_fragment.png" alt="" width="1321" height="1737"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-11.</span> Linking to a specific destination (a fragment) within a single web page.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Step 1: Identifying the destination</h3>
			<p class="body">I like to think of this step as planting a flag in the document so I can get back to it easily. To create a destination, use the <span class="Literal-fc">id</span> attribute to give the target element in the document a unique name (that’s “unique” as in the name may appear only once in the document, not “unique” as in funky and interesting). In web lingo, this is<a id="_idIndexMarker921"></a> the <span class="FirstTerm">fragment identifier</span>.</p>
			<p class="body">You may remember the <span class="Literal-fc">id</span> attribute from <a href="lwd5_chapter05.xhtml#_idTextAnchor059"><span class="Xref">Chapter </span><span class="Xref">5</span><span class="Xref">, Marking Up Text</span></a>, where we used it to name generic <span class="Literal-fc">div</span> and <span class="Literal-fc">span</span> elements. Here, we’re going to use it to name an element so that it can serve as a fragment identifier—that is, the destination of a link.</p>
			<p class="body">Here is a sample of the source for the glossary page. Because I want users to be able to link directly to the “H” heading, I’ll add the <span class="Literal-fc">id</span> attribute to it and give it the value “startH” (<span class="Xref-Figure">Figure 6-11</span> <span class="Circle-Frame-Neg">1</span>):</p>
			<pre class="CodeFirst">&lt;h2 <code class="CodeColor">id="startH"</code>&gt;H&lt;/h2&gt;</pre>
			<h3 class="HeadC">Step 2: Linking to the destination</h3>
			<p class="body">With the identifier in place, now I can make a link to it. </p>
			<p class="body">At the top of the page, I’ll create a link down to the “startH” fragment <span class="Circle-Frame-Neg">2</span>. As for any link, I use the <span class="Literal-fc">a</span> element with the <span class="Literal-fc">href</span> attribute to provide the location of the link. To indicate that I’m linking to a fragment, I use the octothorpe symbol (<span class="Literal-fc">#</span>), also called a hash, pound, or number symbol, before the fragment name:</p>
			<pre class="CodeFirst">&lt;p&gt;... F | G | <code class="CodeColor">&lt;a href="#startH"&gt;</code>H<code class="CodeColor">&lt;/a&gt;</code> | I | J ...&lt;/p&gt;</pre>
			<p class="body">And that’s it. Now when someone clicks the H from the listing at the top of the page, the browser will jump down and display the section starting with the “H” heading <span class="Circle-Frame-Neg">3</span>. </p>
			<div>
				<div id="_idContainer328" class="callout">
					<p class="callout">Fragment names are preceded by an octothorpe <a id="_idIndexMarker922"></a><a id="_idIndexMarker923"></a>symbol (#).</p>
				</div>
			</div>
			<div>
				<div id="_idContainer329" class="sidebar">
					<h5 class="SidebarSeries">Usability TIP</h5>
					<h5 class="SidebarTitle">To the Top!</h5>
					<p class="SidebarBody">It is common practice to add a link back up to the top of the page when linking into a long page of text. This alleviates the need for users to scroll back after every link.</p>
				</div>
			</div>
			<h2 class="HeadB">Linking to a Fragment in Another Document</h2>
			<p class="body">You can link to a <a id="_idIndexMarker924"></a>fragment in another document by adding the fragment name to the end of the URL (absolute or relative). For example, to make a link to the “H” heading of the glossary page from another document in that directory, the URL would look like this:</p>
			<pre class="CodeFirst">&lt;a href="glossary.html<code class="CodeColor">#startH</code>"&gt;See the Glossary, letter H&lt;/a&gt;</pre>
			<div>
				<div id="_idContainer330" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">Some developers help their brothers and sisters out by proactively adding <span class="Literal-Sidebar">id</span>s as anchors at the beginning of any thematic section of content (within a reasonable level, and depending on the site). That way, other people can link back to any section in their content. </p>
				</div>
			</div>
			<p class="body">You can even link to specific destinations in pages on other sites by putting the fragment identifier at the end of an absolute URL, like so:</p>
			<pre class="CodeFirst">&lt;a href="http://www.example.com/glossary.html<code class="CodeColor">#startH</code>"&gt;See the Glossary, letter H&lt;/a&gt;</pre>
			<p class="body">Of course, you don’t have any control over the named fragments in other people’s web pages. The destination points must be inserted by the author of those documents in order for them to be available to you. The only way to know whether they are there and where they are is to “View Source” for the page and look for them in the markup. If the fragments in external documents move or go away, the page will still load; the browser will just go to the top of the page as it does for regular links.</p>
			<p class="body"><span class="Xref-Figure">Exercise 6-8</span> gives you an opportunity to add links to fragments in the example glossary page.</p>
			<div>
				<div id="_idContainer331" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 6-8.</span> Linking to a fragment</h6>
					<p class="SidebarBody">Want some practice linking to specific destinations? Open <span class="Filename--Sidebar-">glossary.html</span> in the <span class="Filename--Sidebar-">materials</span> folder for this chapter. It looks just like the document in <span class="Xref-Figure">Figure 6-11</span>. </p>
					<ol>
						<li class="SidebarListNumber" value="1">Identify the <span class="Literal-Sidebar">h2</span> “A” as a destination for a link by naming it “startA” with an <span class="Literal-Sidebar">id </span>attribute:<pre class="SidebarCodeFirst">&lt;h2 id=<code class="CodeColor">"</code><code class="CodeColor">startA"</code>&gt;A&lt;/h2&gt;</pre></li>
						<li class="SidebarListNumber">Make the letter A at the top of the page a link to the identified fragment. Don’t forget the <span class="Literal-Sidebar">#</span>:<pre class="SidebarCodeFirst"><code class="CodeColor">&lt;a href="#startA"&gt;</code>A<code class="CodeColor">&lt;/a&gt;</code></pre><p class="SidebarListItem_cont">Repeat Steps 1 and 2 for every letter across the top of the page until you really know what you’re doing (or until you can’t stand it anymore). You can help users get back to the top of the page, too.</p></li>
						<li class="SidebarListNumber">Make the heading “Glossary” a destination named “top”:<pre class="SidebarCodeFirst">&lt;h1 <code class="CodeColor">id="top"</code>&gt;Glossary&lt;/h1&gt;</pre></li>
						<li class="SidebarListNumber">Add a paragraph element containing “TOP” at the end of each lettered section. Make “TOP” a link to the identifier that you just made at the top of the page:<pre class="SidebarCodeFirst">&lt;p&gt;<code class="CodeColor">&lt;a href="#top"&gt;</code>TOP<code class="CodeColor">&lt;/a&gt;</code>&lt;/p&gt;</pre></li>
					</ol>
					<p class="SidebarBody">Copy and paste this code to the end of every letter section. Now your readers can get back to the top of the page easily throughout the document.</p>
				</div>
			</div>
			<h1 id="_idParaDest-57" class="HeadA"><a id="_idTextAnchor082"></a>Targeting a New Browser Window</h1>
			<p class="body">One problem <a id="_idIndexMarker925"></a><a id="_idIndexMarker926"></a>with putting links on your page is that when people click them, they may never come back to your content. The traditional solution to this dilemma has been to make the linked page open in a new browser window. That way, your visitors can check out the link and still have your content available where they left it. </p>
			<p class="body">Be aware that opening new browser windows can cause hiccups in the user experience of your site. Opening new windows is problematic for accessibility, and may be confusing to some users. They might not be able to tell that a new window has opened or they may never find their way back to the original page. At the very least, new windows may be perceived as an annoyance rather than a convenience. So consider carefully whether you need a new window and whether the benefits outweigh the potential drawbacks.</p>
			<p class="body">The method you use to open a link in a new browser window depends on whether you want to control its size. If the size of the window doesn’t matter, you can use HTML markup alone. However, if you want to open the new window with particular pixel dimensions, then you need to use JavaScript (see the “<span class="Xref">Pop-up Windows”</span> sidebar). </p>
			<div>
				<div id="_idContainer332" class="sidebar">
					<h5 class="SidebarTitle">Pop-up Windows</h5>
					<p class="SidebarBody">It is possible to <a id="_idIndexMarker927"></a><a id="_idIndexMarker928"></a>open a browser window to specific dimensions and with parts of the browser chrome (toolbars, scrollbars, etc.) turned on or off, but you know what…I’m not going to go into that here. First of all, it requires JavaScript. Second, in the era of mobile devices, opening a new browser window at a particular pixel size is an antiquated technique. People often turn off pop-up windows anyway. </p>
					<p class="SidebarBody">For what it’s worth, the little interstitial panels you see popping up on every web page asking you to sign up for a mailing list or showing you an ad are done with HTML elements and JavaScript, not a whole new browser window, so that is an entirely different beast.</p>
					<p class="SidebarBody">That said, if you have a legitimate reason for opening a browser window to a specific size, I will refer you to this tutorial by<a id="_idIndexMarker929"></a> Peter-Paul Koch at Quirksmode: <a href="http://www.quirksmode.org/js/popup.html"><span class="URL-Email--Sidebar-">www.quirksmode.org/js/popup.html</span></a>.</p>
				</div>
			</div>
			<p class="body">To open a new window with markup, use the <span class="Literal-fc">target</span> attribute in the anchor (<span class="Literal-fc">a</span>) element to tell the browser the name of the window in which you want the linked document to open. Set the value of target to <span class="Literal-fc">_blank</span> or to any name of your choosing. Remember that with this method, you have no control over the size of the window, but it will generally open as a new tab or in a new window the same size as the most recently opened window in the user’s browser. The new window may or may not be brought to the front depending on the browser and device used. </p>
			<p class="body">Setting <a id="_idIndexMarker930"></a><a id="_idIndexMarker931"></a><span class="Literal-fc">target="_blank"</span> always causes the browser to open a fresh window. For example:</p>
			<pre class="CodeFirst">&lt;a href="http://www.oreilly.com" <code class="CodeColor">target="_blank"</code>&gt;O'Reilly&lt;/a&gt;</pre>
			<p class="body">If you include <span class="Literal-fc">target="_blank"</span> for every link, every link will launch a new window, potentially leaving your user with a mess of open windows. There’s nothing wrong with it, per se, as long as it is not overused. </p>
			<p class="body">Another method is to give the target window a specific name, which can then be used by subsequent links. You can give the window any name you like (“new,” “sample,” whatever), as long as it doesn’t start with an underscore. The following link will open a new window called “display”:</p>
			<pre class="CodeFirst">&lt;a href="http://www.oreilly.com" <code class="CodeColor">target="display"</code>&gt;O'Reilly&lt;/a&gt;</pre>
			<p class="body">If you target the “display” window from every link on the page, each linked document will open in the same second window. Unfortunately, if that second window stays hidden behind the user’s current window, it may look as though the link simply didn’t work.</p>
			<p class="body">You can decide which method (a new window for every link or reusing named windows) is most appropriate for your content and interface.</p>
			<h1 id="_idParaDest-58" class="HeadA"><a id="_idTextAnchor083"></a>Mail Links</h1>
			<p class="body">Here’s a nifty <a id="_idIndexMarker932"></a><a id="_idIndexMarker933"></a>little linking trick: the <span class="Literal-fc">mailto</span> link. By using the <span class="Literal-fc">mailto</span> protocol in a link, you can link to an email address. When the user clicks a <span class="Literal-fc">mailto</span> link, the browser opens a new mail message preaddressed to that address in a designated mail program (see the <span class="Xref">“Spam-Bots”</span> sidebar).</p>
			<div>
				<div id="_idContainer333" class="sidebar">
					<h5 class="SidebarTitle">Spam-Bots</h5>
					<p class="SidebarBody">Be aware <a id="_idIndexMarker934"></a>that putting an email address in your document source makes it susceptible to receiving unsolicited junk email (known as <span class="FirstTerm--Sidebar-">spam</span>). People who generate spam lists sometimes use automated search programs (called <span class="FirstTerm--Sidebar-">bots</span>) to scour the web for email addresses. </p>
					<p class="SidebarBody">If you want your email address to display on the page so that humans can figure it out but robots can’t, you can deconstruct the address in a way that is still understandable to people—for example, “you [-at-] example [dot] com.”</p>
					<p class="SidebarBody">That trick won’t work in a <span class="Literal-Sidebar">mailto</span> link, because the accurate email address must be provided as an attribute value. One solution is to encrypt the email address by using JavaScript. <a id="_idIndexMarker935"></a><a id="_idIndexMarker936"></a>The Enkoder Form at Hivelogic (<a href="http://hivelogic.com/enkoder/"><span class="URL-Email--Sidebar-">hivelogic.com/enkoder/</span></a>) does this for you. Simply enter the link text and the email address, and Enkoder generates code that you can copy and paste into your document. </p>
					<p class="SidebarBody">Otherwise, if you don’t want to risk getting spammed, keep your email address out of your HTML document. Using a contact form is a good alternative (web forms are coming up in <span class="Xref--Sidebar-">Chapter 9, Forms</span>).</p>
				</div>
			</div>
			<p class="body">A sample <span class="Literal-fc">mailto</span> link is shown here:</p>
			<pre class="CodeFirst">&lt;a href="<code class="CodeColor">mailto:alklecker@example.com</code>"&gt;Contact Al Klecker&lt;/a&gt;</pre>
			<p class="body">As you can see, it’s a standard anchor element with the <span class="Literal-fc">href</span> attribute. But the value is set to <span class="Literal-fc">mailto:</span><span class="Replaceable">name@address.com</span>.</p>
			<p class="body">The browser has to be configured to launch a mail program, so the effect won’t work for 100% of your audience. If you use the email address itself as the linked text, nobody will be left out if the <span class="Literal-fc">mailto</span> function does not work (a nice little example of progressive enhancement).</p>
			<h1 id="_idParaDest-59" class="HeadA"><a id="_idTextAnchor084"></a>Telephone Links</h1>
			<p class="body">Keep in mind <a id="_idIndexMarker937"></a><a id="_idIndexMarker938"></a>that the smartphones people are using to access your site can also be used to make phone calls! Why not save your visitors a step by letting them dial a phone number on your site simply by tapping on it on the page? The syntax uses the <span class="Literal-fc">tel:</span> protocol and is very simple:</p>
			<pre class="CodeFirst">&lt;a <code class="CodeColor">href="tel:+01-800-555-1212"</code>&gt;Call us free at (800) 555-1212&lt;/a&gt;</pre>
			<p class="body">When mobile users tap the link, what happens depends on the device: Android launches the phone app; BlackBerry and IE11 Mobile initiate the call immediately; and iOS launches a dialog box giving the option to call, message, or add the number to Contacts. Desktop browsers may launch a dialog box to switch apps (for example, to FaceTime on Safari) or they may ignore the link. </p>
			<p class="body">If you don’t want any interruption on desktop browsers, you could use a CSS rule that hides the link for non-mobile devices (unfortunately, that is beyond the scope of this discussion).</p>
			<p class="body">There are a few best practices for using telephone links:</p>
			<ul>
				<li class="ListBullet">It is recommended that you include the full international dialing number, including the country code, for the <span class="Literal-fc">tel:</span> value because there is no way of knowing where the user will be accessing your site.</li>
				<li class="ListBullet">Also include the telephone number in the content of the link so that if the link doesn’t work, the telephone number is still available.</li>
				<li class="ListBullet">Android and iPhone have a feature that detects phone numbers and automatically turns them into links. Unfortunately, some 10-digit numbers that are not telephone numbers might get turned into links, too. If your document has strings of numbers that might get confused as phone numbers, you can turn auto-detection off by including the following <span class="Literal-fc">meta</span> element in the <span class="Literal-fc">head</span> of your document. This will also prevent them from overriding any styles you’ve applied to telephone links.<pre class="CodeFirst">&lt;meta name="format-detection" content="telephone=no"&gt;</pre></li>
			</ul>
			<h1 id="_idParaDest-60" class="HeadA"><a id="_idTextAnchor085"></a>Test Yourself</h1>
			<p class="body">The most important lesson in this chapter is how to write URLs for links and images. Here’s another chance to brush up on your pathname skills.</p>
			<p class="body">Using the directory hierarchy shown in <span class="Xref-Figure">Figure 6-12</span>, write out the markup for the following links and graphics. </p>
			<div>
				<figure id="_idContainer335" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0612.png" alt="" width="2025" height="888"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 6-12.</span> The directory structure for the “Test Yourself” questions.</figcaption>
				</figure>
			</div>
			<p class="body">This diagram should provide you with enough information to answer the questions. If you need hands-on work to figure them out, the directory structure is available in the <span class="Filename">test</span> directory in the materials for this chapter. The documents are just dummy files and contain no content. I filled in the first one for you as an example. The answers are located in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix </span><span class="Xref">A</span></a>.</p>
			<ol>
				<li class="ListNumber" value="1">In <span class="Filename">index.html</span> (the site’s home page), write the markup for a link to the <span class="Filename">tutorial.html</span> page.<pre class="listCode"><code class="CodeColor">&lt;a href="tutorial.html"&gt;...&lt;/a&gt;</code></pre></li>
				<li class="ListNumber">In <span class="Filename">index.html</span>, write the anchor element for a link to <span class="Filename">instructions.html</span>.</li>
				<li class="ListNumber">Create a link to <span class="Filename">family.html </span>from the page <span class="Filename">tutorial.html</span>.</li>
				<li class="ListNumber">Create a link to <span class="Filename">boot.html</span> from the <span class="Filename">family.html</span> page, but this time, start with the root directory.</li>
				<li class="ListNumber">Create a link back to the home page (<span class="Filename">index.html</span>) from <span class="Filename">instructions.html</span>.</li>
				<li class="ListNumber">Create a link to the website for this book (<a href="http://learningwebdesign.com"><span class="URL-Email">learningwebdesign.com</span></a>) in the file <span class="Filename">intro.html</span>.</li>
				<li class="ListNumber">Create a link to <span class="Filename">instructions.html</span> from the page <span class="Filename">usa.html</span>.</li>
				<li class="ListNumber">Create a link back to the home page (<span class="Filename">index.html</span>) from <span class="Filename">acorn.html</span>.<p class="body">We haven’t covered the image (<span class="Literal-fc">img</span>) element in detail yet, but you should be able to fill in the relative URLs after the <span class="Literal-fc">src</span> attribute to specify the location of the image files for these examples.</p></li>
				<li class="ListNumber">To place the graphic <span class="Filename">arrow.gif</span> on the page <span class="Filename">index.html</span>, use this URL:<pre class="listCode">&lt;img src="                            " alt=""&gt;</pre></li>
				<li class="ListNumber"> To place the graphic <span class="Filename">arrow.gif</span> on the page <span class="Filename">intro.html</span>, use this URL:<pre class="listCode">&lt;img src="                            " alt=""&gt;</pre></li>
				<li class="ListNumber">To place the graphic <span class="Filename">bullet.gif</span> on the <span class="Filename">friends.html</span> page, use this URL:<pre class="listCode">&lt;img src="                            " alt=""&gt;</pre></li>
			</ol>
			<h1 id="_idParaDest-61" class="HeadA"><a id="_idTextAnchor086"></a>Element Review: Links</h1>
			<p class="body">There’s really only one element relevant to creating hypertext links.</p>
			<table id="table001-5" class="Table">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Element and attributes</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Description</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Body-Left">
							<pre class="cellCode">a</pre>
						</td>
						<td class="Table Remove-bottom-rule Table-Body-Right">
							<p class="TableBody">Anchor <a id="_idIndexMarker939"></a>(hypertext link) element</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Body-Left">
							<pre class="CellCode-indent">href="<span class="Replaceable-Sidebar">URL</span>"</pre>
						</td>
						<td class="Table Remove-bottom-rule Table-Body-Right">
							<p class="TableBody-Indent">Location<a id="_idIndexMarker940"></a> of the target file</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="CellCode-indent">target="<span class="Replaceable-Sidebar">text string</span>"</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody-Indent">Targets a <a id="_idIndexMarker941"></a>browser window by name</p>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>
</body>
</html>