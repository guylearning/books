<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer167" class="ch05">
			<p id="_idParaDest-39" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor058"></a>5. Marking Up Text</p>
		</div>
		<div id="_idContainer168" class="ch05">
			<h1 class="chapterLabel">5</h1>
		</div>
		<div id="_idContainer169" class="ch05">
			<h1 class="chapterTitle"><a id="_idTextAnchor059"></a><a id="_idTextAnchor060"></a>Marking Up Text</h1>
		</div>
		<div id="_idContainer170" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In this chapter</p>
			<p class="chapterContents">Choosing the best element for your content</p>
			<p class="chapterContents">Paragraphs and headings</p>
			<p class="chapterContents">Three types of lists</p>
			<p class="chapterContents">Organizing content into sections</p>
			<p class="chapterContents">Text-level (inline) elements</p>
			<p class="chapterContents">Generic elements, div and span</p>
			<p class="chapterContents">Special characters</p>
		</div>
		<div id="_idContainer281" class="ch05">
			<p class="body">Once your <a id="_idIndexMarker476"></a>content is ready to go (you’ve proofread it, right?) and you’ve added the markup to structure the document (<span class="Literal-fc">&lt;!DOCTYPE&gt;</span>, <span class="Literal-fc">html</span>, <span class="Literal-fc">head</span>, <span class="Literal-fc">title</span>, <span class="Literal-fc">meta charset</span>, and <span class="Literal-fc">body</span>), you are ready to identify the elements in the content. This chapter introduces the elements you have to choose from for marking up text. There probably aren’t as many of them as you might think, and really just a handful that you’ll use with regularity. That said, this chapter is a big one and covers a lot of ground.</p>
			<p class="body">As we begin our tour of elements, I want to reiterate how important it is to choose elements <span class="FirstTerm">semantically</span>—that is, in a way that most accurately describes the content’s meaning. If you don’t like how it looks, change it with a style sheet. A semantically marked-up document ensures your content is available and accessible in the widest range of browsing environments, from desktop computers and mobile devices to assistive screen readers. It also allows non-human readers, such as search engine indexing programs, to correctly parse your content and make decisions about the relative importance of elements on the page.</p>
			<p class="body">With these principles in mind, it is time to meet the HTML text elements, starting with the most basic element of them all, the humble paragraph.</p>
			<div>
				<div id="_idContainer171" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">I will be teaching markup according to the<a id="_idIndexMarker477"></a><a id="_idIndexMarker478"></a> HTML5 standard maintained by the W3C (<a href="http://www.w3.org/TR/html5/"><span class="URL-Email--Sidebar-">www.w3.org/TR/html5/</span></a>). As of this writing, the latest version is the HTML 5.2 Proposed Recommendation (<a href="http://www.w3.org/TR/html52/"><span class="URL-Email--Sidebar-">www.w3.org/TR/html52/</span></a>).</p>
				</div>
			</div>
			<h1 id="_idParaDest-40" class="HeadA"><a id="_idTextAnchor061"></a>Paragraphs</h1>
			<p class="refNameCode">&lt;p&gt;…&lt;/p&gt;</p>
			<p class="refPurpose">Paragraph element</p>
			<p class="body">Paragraphs are<a id="_idIndexMarker479"></a><a id="_idIndexMarker480"></a> the most rudimentary elements of a text document. Indicate a paragraph with the <span class="Literal-fc">p</span> element by inserting an opening <span class="Literal-fc">&lt;p&gt;</span> tag at the beginning of the paragraph and a closing <span class="Literal-fc">&lt;/p&gt;</span> tag after it, as shown in this example:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;p&gt;</code>Serif typefaces have small slabs at the ends of letter strokes. In general, serif fonts can make large amounts of text easier to read.<code class="CodeColor">&lt;/p&gt;</code></pre>
			<pre class="Code"> <code class="CodeColor">&lt;p&gt;</code>Sans-serif fonts do not have serif slabs; their strokes are square on the end. Helvetica and Arial are examples of sans-serif fonts. In general, sans-serif fonts appear sleeker and more modern.<code class="CodeColor">&lt;/p&gt;</code></pre>
			<p class="body">Visual browsers nearly always display paragraphs on new lines with a bit of space between them by default (to use a term from CSS, they are displayed as a <span class="FirstTerm">block</span>). <a id="_idIndexMarker481"></a>Paragraphs may contain text, images, and other inline elements (called <span class="FirstTerm">phrasing content</span>), <a id="_idIndexMarker482"></a><a id="_idIndexMarker483"></a><a id="_idIndexMarker484"></a>but they may <em class="Emphasis">not</em> contain headings, lists, sectioning elements, or any elements that typically display as blocks by default.</p>
			<p class="body">Technically, it is OK to omit the <a id="_idIndexMarker485"></a><a id="_idIndexMarker486"></a>closing <span class="Literal-fc">&lt;/p&gt;</span> tag because it is not required in order for the document to be valid. A browser just assumes it is closed when it encounters the next block element. Many web developers, including myself, prefer to close paragraphs and all elements for the sake of consistency and clarity. I recommend folks who are just learning markup do the same.</p>
			<div>
				<div id="_idContainer172" class="sidebar">
					<h5 class="SidebarTitle">No Naked Text!</h5>
					<p class="SidebarBody">You must <a id="_idIndexMarker487"></a>assign an element to all the text in a document. In other words, all text must be enclosed in some sort of element. Text that is not contained within tags is called <span class="FirstTerm">naked</span> or <span class="FirstTerm">anonymous</span> text, and it will cause a document to be invalid. </p>
				</div>
			</div>
			<h1 id="_idParaDest-41" class="HeadA"><a id="_idTextAnchor062"></a>Headings</h1>
			<div>
				<div id="_idContainer173" class="ref">
					<p class="refNameCode">&lt;h1&gt;…&lt;/h1&gt;</p>
					<p class="refNameCode">&lt;h2&gt;…&lt;/h2&gt;</p>
					<p class="refNameCode">&lt;h3&gt;…&lt;/h3&gt;</p>
					<p class="refNameCode">&lt;h4&gt;…&lt;/h4&gt;</p>
					<p class="refNameCode">&lt;h5&gt;…&lt;/h5&gt;</p>
					<p class="refNameCode">&lt;h6&gt;…&lt;/h6&gt;</p>
					<p class="refPurpose">Heading elements</p>
				</div>
			</div>
			<p class="body">In the last chapter, <a id="_idIndexMarker488"></a><a id="_idIndexMarker489"></a>we used the <span class="Literal-fc">h1</span> and <span class="Literal-fc">h2</span> elements to indicate headings for the Black Goose Bistro page. There are actually<a id="_idIndexMarker490"></a><a id="_idIndexMarker491"></a> six levels of headings, from <span class="Literal-fc">h1</span> to <span class="Literal-fc">h6</span>. When you add headings to content, the browser uses them to create a <span class="FirstTerm">document outline</span> for <a id="_idIndexMarker492"></a>the page. Assistive <a id="_idIndexMarker493"></a>reading devices such as screen readers use the document outline to help users quickly scan and navigate through a page. In addition, search engines look at heading levels as part of their algorithms (information in higher heading levels may be given more weight). For these reasons, it is a best practice to start with the Level 1 heading (<span class="Literal-fc">h1</span>) and work down in numerical order, creating a logical document structure and outline.</p>
			<p class="body">This example shows the markup for four heading levels. Additional heading levels would be <a id="_idIndexMarker494"></a><a id="_idIndexMarker495"></a><a id="_idIndexMarker496"></a><a id="_idIndexMarker497"></a>marked up in a similar manner.</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;h1&gt;</code>Type Design<code class="CodeColor">&lt;/h1&gt; </code> <br/><br/><code class="CodeColor">&lt;h2&gt;</code>Serif Typefaces<code class="CodeColor">&lt;/h2&gt;</code><br/>&lt;p&gt;Serif typefaces have small slabs at the ends of letter strokes. In general, serif fonts can make large amounts of text easier to read.&lt;/p&gt;<br/><br/><code class="CodeColor">&lt;h3&gt;</code>Baskerville<code class="CodeColor">&lt;/h3&gt;</code><br/><br/><code class="CodeColor">&lt;h4&gt;</code>Description<code class="CodeColor">&lt;/h4&gt;</code><br/>&lt;p&gt;Description of the Baskerville typeface.&lt;/p&gt;<br/><br/><code class="CodeColor">&lt;h4&gt;</code>History<code class="CodeColor">&lt;/h4&gt;</code><br/>&lt;p&gt;The history of the Baskerville typeface.&lt;/p&gt;<br/><br/><code class="CodeColor">&lt;h3&gt;</code>Georgia<code class="CodeColor">&lt;/h3&gt;</code><br/>&lt;p&gt;Description and history of the Georgia typeface.&lt;/p&gt;<br/><br/><code class="CodeColor">&lt;h2&gt;</code>Sans-serif Typefaces<code class="CodeColor">&lt;/h2&gt;</code><br/>&lt;p&gt;Sans-serif typefaces do not have slabs at the ends of strokes.&lt;/p&gt;</pre>
			<p class="body">The markup in this example would create the following document outline:</p>
			<p class="body"><img src="image/2.png" alt="" width="2025" height="811"/></p>
			<p class="body">By default, the headings in our example display in bold text, starting in very large type for <span class="Literal-fc">h1</span>s, with each consecutive level in smaller text, as shown in <span class="Xref-Figure">Figure 5-1</span>. You can use a style sheet to change their appearance.</p>
			<div>
				<figure id="_idContainer176" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0501_headings.png" alt="" width="1321" height="1088"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-1.</span> The default rendering of four heading levels.</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-42" class="HeadA"><a id="_idTextAnchor063"></a>Thematic Breaks (Horizontal Rule)</h1>
			<div>
				<div id="_idContainer177" class="ref">
					<p class="refNameCode">&lt;hr&gt; </p>
					<p class="refPurpose">A horizontal rule</p>
				</div>
			</div>
			<p class="body">If you want <a id="_idIndexMarker498"></a><a id="_idIndexMarker499"></a><a id="_idIndexMarker500"></a>to indicate that one topic has completed and another one is beginning, you can insert what the spec calls a “paragraph-level thematic break” with the <span class="Literal-fc">hr</span> element. The <span class="Literal-fc">hr</span> element adds a logical divider between sections of a page or paragraphs without introducing a new heading level.</p>
			<p class="body">In older HTML versions, <span class="Literal-fc">hr</span> was<a id="_idIndexMarker501"></a> defined as a “horizontal rule” because it inserts a horizontal line on the page. Browsers still render <span class="Literal-fc">hr</span> as a 3-D shaded rule and put it on a line by itself with some space above and below by default; but in the <span class="nobreak">HTML5</span> spec, it has a new semantic name and definition. If a decorative line is all you’re after, it is better to create a rule by specifying a colored border before or after an element with CSS. </p>
			<p class="body"><span class="Literal-fc">hr</span> is an empty element—you just drop it into place where you want the thematic break to occur, as shown in this example and <span class="Xref-Figure">Figure 5-2</span>:</p>
			<pre class="CodeFirst">&lt;h3&gt;Times&lt;/h3&gt;<br/>&lt;p&gt;Description and history of the Times typeface.&lt;/p&gt;<br/><code class="CodeColor">&lt;hr&gt;</code><br/>&lt;h3&gt;Georgia&lt;/h3&gt;<br/>&lt;p&gt;Description and history of the Georgia typeface.&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer179" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0502-green.png" alt="" width="887" height="312"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-2.</span><span class="FigureLabel"> </span>The default rendering of a thematic break (horizontal rule).</figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-43" class="HeadA"><a id="_idTextAnchor064"></a>Lists</h1>
			<p class="body">Humans are <a id="_idIndexMarker502"></a>natural list makers, and HTML provides elements for marking up three types of lists: </p>
			<p class="ListVariableTerm">Unordered lists</p>
			<p class="ListVariable">Collections <a id="_idIndexMarker503"></a><a id="_idIndexMarker504"></a>of items that appear in no particular order</p>
			<p class="ListVariableTerm">Ordered lists </p>
			<p class="ListVariable">Lists in which <a id="_idIndexMarker505"></a><a id="_idIndexMarker506"></a>the sequence of the items is important</p>
			<p class="ListVariableTerm">Description lists </p>
			<p class="ListVariable">Lists that <a id="_idIndexMarker507"></a><a id="_idIndexMarker508"></a>consist of name and value pairs, including but not limited to terms and definitions</p>
			<p class="body">All list elements—the lists themselves and the items that go in them—are displayed as block elements by default, which means that they start on a new line and have some space above and below, but that may be altered with CSS. In this section, we’ll look at each list type in detail. </p>
			<h2 class="HeadB">Unordered Lists</h2>
			<div>
				<div id="_idContainer180" class="ref">
					<p class="refNameCode">&lt;ul&gt;…&lt;/ul&gt;</p>
					<p class="refPurpose">Unordered list</p>
					<p class="refNameCode">&lt;li&gt;…&lt;/li&gt;</p>
					<p class="refPurpose">List item within an unordered list </p>
				</div>
			</div>
			<p class="body">Just about any list of examples, names, components, thoughts, or options qualifies as an unordered list. In fact, most lists fall into this category. By default, unordered lists display with a bullet before each list item, but you can change that with a style sheet, as you’ll see in a moment.</p>
			<p class="body">To identify an unordered list, mark it up as <a id="_idIndexMarker509"></a>a <span class="Literal-fc">ul</span> element. The opening <span class="Literal-fc">&lt;ul&gt;</span> tag goes before the first list item, and the closing tag <span class="Literal-fc">&lt;/ul&gt;</span> goes after the last item. Then, to mark up each item in the list as a <a id="_idIndexMarker510"></a>list item (<span class="Literal-fc">li</span>), enclose it in opening and closing <span class="Literal-fc">li</span> tags, as shown in this example. Notice that there are no bullets in the source document. The browser adds them automatically (<span class="Xref-Figure">Figure 5-3</span>).</p>
			<p class="body">The only thing that is permitted within an unordered list (that is, between the start and end <span class="Literal-fc">ul</span> tags) is one or more list items. You can’t put other elements in there, and there may not be any untagged text. However, you can put any type of content element within a list item (<span class="Literal-fc">li</span>):</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;ul&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Serif<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Sans-serif<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Script<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Display<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Dingbats<code class="CodeColor">&lt;/li&gt;<br/>&lt;/ul&gt;</code></pre>
			<div>
				<figure id="_idContainer182" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0503-green.png" alt="" width="790" height="175"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-3.</span> The default rendering of the sample unordered list. The browser adds the bullets automatically.</figcaption>
				</figure>
			</div>
			<p class="body">But here’s the cool part. We can take that same unordered list markup and radically change its appearance by applying different style sheets, as shown in <span class="Xref-Figure">Figure 5-4</span>. In the figure, I’ve turned off the bullets, added bullets of my own, made the items line up horizontally, and even made them look like graphical buttons. The markup stays exactly the same.</p>
			<div>
				<figure id="_idContainer184" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0504_lists.png" alt="" width="1078" height="826"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-4.</span><span class="FigureLabel"> </span>With style sheets, you can give the same unordered list many looks.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer185" class="sidebar">
					<h5 class="SidebarTitle">Nesting Lists</h5>
					<p class="SidebarBody">Any list <a id="_idIndexMarker511"></a><a id="_idIndexMarker512"></a>can be nested within another list; it just has to be placed within a list item. This example shows the structure of an unordered list nested in the second item of an ordered list:</p>
					<pre class="SidebarCodeFirst">&lt;ol&gt;<br/>  &lt;li&gt;&lt;/li&gt;<br/>  &lt;li&gt;<br/>    <code class="CodeColor">&lt;ul&gt;</code><br/>      &lt;li&gt;&lt;/li&gt;<br/>      &lt;li&gt;&lt;/li&gt;<br/>      &lt;li&gt;&lt;/li&gt;<br/>    <code class="CodeColor">&lt;/ul&gt;</code><code class="CodeColor"> </code><br/>  &lt;/li&gt;<br/>&lt;/ol&gt;</pre>
					<p class="SidebarBody">When you nest an unordered list within another unordered list, the browser automatically changes the bullet style for the second-level list. Unfortunately, the numbering style is not changed by default when you nest ordered lists. You need to set the numbering styles yourself with CSS rules.</p>
				</div>
			</div>
			<h2 class="HeadB">Ordered Lists</h2>
			<div>
				<div id="_idContainer186" class="ref">
					<p class="refNameCode">&lt;ol&gt;…&lt;/ol&gt;</p>
					<p class="refPurpose">Ordered list</p>
					<p class="refNameCode">&lt;li&gt;…&lt;/li&gt;</p>
					<p class="refPurpose">List item within an ordered list</p>
				</div>
			</div>
			<p class="body">Ordered <a id="_idIndexMarker513"></a><a id="_idIndexMarker514"></a>lists are for items that occur in a particular order, such as step-by-step instructions or driving directions. They work just like the unordered lists described earlier, but they are defined with <a id="_idIndexMarker515"></a>the <span class="Literal-fc">ol</span> element (for “ordered list,” of course). Instead of bullets, the browser automatically inserts numbers before ordered list items (see <span class="Xref">Note</span>), so you don’t need to number them in the source document. This makes it easy to rearrange list items without renumbering them. </p>
			<div>
				<div id="_idContainer187" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">If something is logically an ordered list, but you don’t want numbers to display, remember that you can always remove the numbering with style sheets. So go ahead and mark up the list semantically as an <span class="Literal-Sidebar">ol</span> and adjust how it displays with a style rule.</p>
				</div>
			</div>
			<p class="body">Ordered list elements must contain one or more list item elements, as shown in this example and in <span class="Xref-Figure">Figure 5-5</span>:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;ol&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Gutenberg develops moveable type (1450s)<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Linotype is introduced (1890s)<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Photocomposition catches on (1950s)<code class="CodeColor">&lt;/li&gt;</code><br/>  <code class="CodeColor">&lt;li&gt;</code>Type goes digital (1980s)<code class="CodeColor">&lt;/li&gt;<br/>&lt;/ol&gt;</code></pre>
			<div>
				<figure id="_idContainer189" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0505-green.png" alt="" width="811" height="203"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-5.</span> The default rendering of an ordered list. The browser adds the numbers automatically.</figcaption>
				</figure>
			</div>
			<p class="body">If you want a numbered list to start at a number other than 1, you can use the <span class="Literal-fc">start</span> attribute in the <span class="Literal-fc">ol</span> element to specify another starting number, as shown here:</p>
			<pre class="CodeFirst">&lt;ol <code class="CodeColor">start="17"</code>&gt;<br/>  &lt;li&gt;Highlight the text with the text tool.&lt;/li&gt;<br/>  &lt;li&gt;Select the Character tab.&lt;/li&gt;<br/>  &lt;li&gt;Choose a typeface from the pop-up menu.&lt;/li&gt;<br/>&lt;/ol&gt;</pre>
			<p class="body">The resulting list items would be numbered 17, 18, and 19, consecutively.</p>
			<div>
				<div id="_idContainer190" class="sidebar">
					<h5 class="SidebarTitle">Changing Bullets and Numbering</h5>
					<p class="SidebarBody">You can <a id="_idIndexMarker516"></a><a id="_idIndexMarker517"></a><a id="_idIndexMarker518"></a><a id="_idIndexMarker519"></a>use the <span class="Literal-Sidebar">list-style-type </span>style sheet property to change the bullets and numbers for lists. For example, for unordered lists, you can change the shape from the default dot to a square or an open circle, substitute your own image, or remove the bullet altogether. For ordered lists, you can change the numbers to Roman numerals (I, II, III, or i, ii, iii), letters (A, B, C, or a, b, c), and several other numbering schemes. In fact, as long as the list is marked up semantically, it doesn’t need to display with bullets or numbering at all. Changing the style of lists with CSS is covered in <span class="Xref--Sidebar-">Chapter 12, Formatting Text</span>. </p>
				</div>
			</div>
			<h2 class="HeadB">Description Lists</h2>
			<div>
				<div id="_idContainer191" class="ref_inline">
					<p class="refNameCode">&lt;dl&gt;…&lt;/dl&gt;</p>
					<p class="refPurpose">A description list</p>
					<p class="refNameCode">&lt;dt&gt;…&lt;/dt&gt;</p>
					<p class="refPurpose">A name, such as a term or label</p>
					<p class="refNameCode">&lt;dd&gt;…&lt;/dd&gt;</p>
					<p class="refPurpose">A value, such as a description or definition</p>
				</div>
			</div>
			<p class="body">Description lists<a id="_idIndexMarker520"></a><a id="_idIndexMarker521"></a><a id="_idIndexMarker522"></a><a id="_idIndexMarker523"></a><a id="_idIndexMarker524"></a> are used for any type of name/value pairs, such as terms and their definitions, questions and answers, or other types of terms and their associated information. Their structure is a bit different from the other two lists that we just discussed. The whole description list is marked up as a <span class="Literal-fc">dl</span> element. The content of a <span class="Literal-fc">dl</span> is some number of <span class="Literal-fc">dt</span> elements indicating the names, and <span class="Literal-fc">dd</span> elements for their respective values. I find it helpful to think of them as “terms” (to remember the “t” in <span class="Literal-fc">dt</span>) and “definitions” (for the “d” in <span class="Literal-fc">dd</span>), even though that is only one use of description lists.</p>
			<p class="body">Here is an example of a list that associates forms of typesetting with their descriptions (<span class="Xref-Figure">Figure 5-6</span>):</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;dl&gt;</code><br/>  <code class="CodeColor">&lt;dt&gt;</code>Linotype<code class="CodeColor">&lt;/dt&gt;</code><br/>  <code class="CodeColor">&lt;dd&gt;</code>Line-casting allowed type to be selected, used, then recirculated into the machine automatically. This advance increased the speed of typesetting and printing dramatically.<code class="CodeColor">&lt;/dd&gt;</code><br/><br/>  <code class="CodeColor">&lt;dt&gt;</code>Photocomposition<code class="CodeColor">&lt;/dt&gt;</code><br/>  <code class="CodeColor">&lt;dd&gt;</code>Typefaces are stored on film then projected onto photo-sensitive paper. Lenses adjust the size of the type.<code class="CodeColor">&lt;/dd&gt;</code><br/><br/>  <code class="CodeColor">&lt;dt&gt;</code>Digital type<code class="CodeColor">&lt;/dt&gt;</code><br/>  <code class="CodeColor">&lt;dd&gt;</code>&lt;p&gt;Digital typefaces store the outline of the font shape in a format such as Postscript. The outline may be scaled to any size for output.&lt;/p&gt;	 &lt;p&gt;Postscript emerged as a standard due to its support of graphics and its early support on the Macintosh computer and Apple laser printer.&lt;/p&gt;<br/>  <code class="CodeColor">&lt;/dd&gt;<br/>&lt;/dl&gt;</code></pre>
			<div>
				<figure id="_idContainer193" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0506-green.png" alt="" width="944" height="453"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-6.</span> The default rendering of a definition list. Definitions are set off from the terms by an indent.</figcaption>
				</figure>
			</div>
			<p class="body">The <span class="Literal-fc">dl</span> element is allowed to contain only <span class="Literal-fc">dt</span> and <span class="Literal-fc">dd</span> elements. You cannot put headings or content-grouping elements (like paragraphs) in names (<span class="Literal-fc">dt</span>), but the value (<span class="Literal-fc">dd</span>) can contain any type of flow content. For example, the last <span class="Literal-fc">dd</span> element in the previous example contains two paragraph elements (the awkward default spacing could be cleaned up with a style sheet).</p>
			<p class="body">It is permitted to have multiple definitions with one term and vice versa. Here, each term-description group has one term and multiple definitions:</p>
			<pre class="CodeFirst">&lt;dl&gt;<br/>  &lt;dt&gt;Serif examples&lt;/dt&gt;<br/>  &lt;dd&gt;Baskerville&lt;/dd&gt;<br/>  &lt;dd&gt;Goudy&lt;/dd&gt;<br/><br/>  &lt;dt&gt;Sans-serif examples&lt;/dt&gt;<br/>  &lt;dd&gt;Helvetica&lt;/dd&gt;<br/>  &lt;dd&gt;Futura&lt;/dd&gt;<br/>  &lt;dd&gt;Avenir&lt;/dd&gt;<br/>&lt;/dl&gt;</pre>
			<h1 id="_idParaDest-44" class="HeadA"><a id="_idTextAnchor065"></a>More Content Elements</h1>
			<p class="body">We’ve covered paragraphs, headings, and lists, but there are a few more special text elements to add to your HTML toolbox that don’t fit into a neat category: long <a id="_idIndexMarker525"></a><a id="_idIndexMarker526"></a><a id="_idIndexMarker527"></a><a id="_idIndexMarker528"></a>quotations (<span class="Literal-fc">blockquote</span>), <a id="_idIndexMarker529"></a><a id="_idIndexMarker530"></a>preformatted text (<span class="Literal-fc">pre</span>), and <a id="_idIndexMarker531"></a>figures (<span class="Literal-fc">figure</span> <a id="_idIndexMarker532"></a><a id="_idIndexMarker533"></a>and <span class="Literal-fc">figcaption</span>). One thing these elements do have in common is that they are <a id="_idIndexMarker534"></a>considered “grouping content” in the <span class="nobreak">HTML5</span> spec (along with <span class="Literal-fc">p</span>, <span class="Literal-fc">hr</span>, the list elements, <span class="Literal-fc">main</span>, and the generic <span class="Literal-fc">div</span>, covered later in this chapter). The other thing they share is that browsers typically display them as block elements by default. The one exception is the newer <span class="Literal-fc">main</span> element, which is not recognized by any version of Internet Explorer (although it is supported in the Edge browser); see the sidebar <span class="Xref">“</span><span class="nobreak"><span class="Xref">HTML5</span></span><span class="Xref"> Support in Internet Explorer,”</span> later in this chapter, for a workaround.</p>
			<h2 class="HeadB">Long Quotations</h2>
			<div>
				<div id="_idContainer194" class="ref">
					<p class="refNameCode">&lt;blockquote&gt;…&lt;/blockquote&gt;</p>
					<p class="refPurpose">A lengthy, block-level quotation</p>
				</div>
			</div>
			<p class="body">If you have a long quotation, a testimonial, or a section of copy from another source, mark it up as a <span class="Literal-fc">blockquote</span> element. It is recommended that content within <span class="Literal-fc">blockquote</span> elements be contained in other elements, such as paragraphs, headings, or lists, as shown in this example:</p>
			<pre class="CodeFirst">&lt;p&gt;Renowned type designer, Matthew Carter, has this to say about his profession:&lt;/p&gt;<br/><br/> <code class="CodeColor">&lt;blockquote&gt;</code><br/>  &lt;p&gt;Our alphabet hasn't changed in eons; there isn't much latitude in what a designer can do with the individual letters.&lt;/p&gt;<br/><br/>   &lt;p&gt;Much like a piece of classical music, the score is written down. It's not something that is tampered with, and yet, each conductor interprets that score differently. There is tension in the interpretation.&lt;/p&gt;<br/><code class="CodeColor">&lt;/blockquote&gt;</code></pre>
			<div>
				<div id="_idContainer195" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">There is also the inline <a id="_idIndexMarker535"></a>element <span class="Literal-Sidebar">q</span> for short quotations in the flow of text. We’ll talk about it later in this chapter.</p>
				</div>
			</div>
			<p class="body"><span class="Xref-Figure">Figure 5-7</span> shows the default <a id="_idIndexMarker536"></a>rendering of the <span class="Literal-fc">blockquote</span> example. This can be altered with CSS.</p>
			<div>
				<figure id="_idContainer197" class="figWCaption">
					<p class="Figure_Holder"> <img src="image/lwd5_0507-green.png" alt="" width="864" height="282"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-7.</span> The default rendering of a <span class="Literal-Sidebar">blockquote</span> element.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Preformatted Text</h2>
			<div>
				<div id="_idContainer198" class="ref">
					<p class="refNameCode">&lt;pre&gt;…&lt;/pre&gt;</p>
					<p class="refPurpose">Preformatted text</p>
				</div>
			</div>
			<p class="body">In the previous chapter, you learned that browsers ignore whitespace such as line returns and character spaces in the source document. But in some types of information, such as code examples or certain poems, the whitespace is important for conveying meaning. For content in which whitespace is semantically significant, use the preformatted text (<span class="Literal-fc">pre</span>) element. It is a unique element in that it is displayed exactly as it is typed—including all the carriage returns and multiple character spaces. By default, preformatted text is also displayed in a constant-width font (one in which all the characters are the same width, also <a id="_idIndexMarker537"></a><a id="_idIndexMarker538"></a>called <span class="FirstTerm">monospace</span>), such as Courier; however, you can easily change the font with a style sheet rule.</p>
			<div>
				<div id="_idContainer199" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">The <span class="Literal-Sidebar">white-space:pre</span> CSS property <a id="_idIndexMarker539"></a>can also be used to preserve spaces and returns in the source. </p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">pre</span> element in this example displays as shown in <span class="Xref-Figure">Figure 5-8</span>. The second part of the figure shows the same content marked up as a paragraph (<span class="Literal-fc">p</span>) element for comparison. </p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;pre&gt; </code><br/>This is               an             example of<br/>       text with a          lot of<br/>                           curious<br/>                           whitespace. <br/><code class="CodeColor">&lt;/pre&gt; </code></pre><br/>
			<pre class="Code"> &lt;p&gt;<br/>This is               an             example of<br/>       text with a          lot of<br/>                           curious<br/>                           whitespace. <br/>&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer201" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0508_pre_green.png" alt="" width="774" height="217"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-8.</span> Preformatted text is unique in that the browser displays the whitespace exactly as it is typed into the source document. Compare it to the paragraph element, in which multiple line returns and character spaces are reduced to a single space.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Figures</h2>
			<div>
				<div id="_idContainer202" class="ref">
					<p class="refNameCode">&lt;figure&gt;…&lt;/figure&gt; </p>
					<p class="refPurpose">Related image or resource</p>
					<p class="refNameCode">&lt;figcaption&gt;…&lt;/figcaption&gt; </p>
					<p class="refPurpose">Text description of a figure</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">figure</span> <a id="_idIndexMarker540"></a><a id="_idIndexMarker541"></a>element identifies content that illustrates or supports some point in the text. A figure may contain an image, a video, a code snippet, text, or even a table—pretty much anything that can go in the flow of web content. Content in a <span class="Literal-fc">figure</span> element should be treated and referenced as a self-contained unit. That means if a figure is removed from its original placement in the main flow (to a sidebar or appendix, for example), both the figure and the main flow should continue to make sense.</p>
			<p class="body">Although you can simply add an image to a page, wrapping it in <span class="Literal-fc">figure</span> tags makes its purpose explicitly clear semantically. It also works as a hook for applying special styles to figures but not to other images on the page:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;figure&gt;</code><br/>   &lt;img src="piechart.png" alt="chart showing fonts on mobile devices"&gt;<br/><code class="CodeColor">&lt;/figure&gt;</code></pre>
			<p class="body">If you want to provide a text caption for the figure, use <a id="_idIndexMarker542"></a>the <span class="Literal-fc">figcaption</span> element above or below the content inside the <span class="Literal-fc">figure</span> element. It is a more semantically rich way to mark up the caption than using a simple <span class="Literal-fc">p</span> element.</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;figure&gt;</code><br/>   &lt;pre&gt;<br/>      &lt;code&gt;<br/>        body {<br/>           background-color: #000;<br/>          color: red;<br/>        }<br/>      &lt;/code&gt;<br/>    &lt;/pre&gt;<br/>   <code class="CodeColor">&lt;figcaption&gt;</code>Sample CSS rule.<code class="CodeColor">&lt;/figcaption&gt;<br/>&lt;/figure&gt;</code></pre>
			<div>
				<div id="_idContainer203" class="note">
					<h5 class="WarningHeader">Browser SUPPORT note</h5>
					<p class="note">The <span class="Literal-Sidebar">figure</span> and <span class="Literal-Sidebar">figcaption</span> elements are not supported in<a id="_idIndexMarker543"></a> Internet Explorer versions 8 and earlier (see the sidebar <span class="Xref">“</span><span class="Xref--Sidebar-">HTML5 Support in Internet Explorer,</span><span class="Xref">”</span> later in this chapter, for a workaround). </p>
				</div>
			</div>
			<p class="body">In <span class="Xref-Figure">Exercise 5-1</span>, you’ll get a chance to mark up a document yourself and try out the basic text elements we’ve covered so far.</p>
			<div>
				<div id="_idContainer204" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 5-1.</span> Marking up a recipe</h6>
					<p class="SidebarBody">The owners of the Black Goose Bistro have decided to share recipes and news on their site. In the exercises in this chapter, we’ll assist them with content markup.</p>
					<p class="SidebarBody">In this exercise, you will find the raw text of a recipe. It’s up to you to decide which element is the best semantic match for each chunk of content. You’ll use paragraphs, headings, lists, and at least one special content element.</p>
					<p class="SidebarBody">You can write the tags right on this page. Or, if you want to use a text editor and see the results in a browser, this text file, as well as the final version with markup, is available at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a>. </p>
					<pre class="SidebarCodeFirst">Tapenade (Olive Spread) <br/><br/>This is a really simple dish to prepare and it’s always a big hit at parties. My father recommends: <br/><br/>"Make this the night before so that the flavors have time to blend. Just bring it up to room temperature before you serve it. In the winter, try serving it warm."<br/><br/>Ingredients  <br/><br/>1 8oz. jar sundried tomatoes <br/>2 large garlic cloves <br/>2/3 c. kalamata olives 1 t. capers <br/><br/>Instructions <br/><br/>Combine tomatoes and garlic in a food processor. Blend until as smooth as possible.<br/><br/>Add capers and olives. Pulse the motor a few times until they are incorporated, but still retain some texture.<br/><br/>Serve on thin toast rounds with goat cheese and fresh basil garnish (optional).</pre>
				</div>
			</div>
			<h1 id="_idParaDest-45" class="HeadA"><a id="_idTextAnchor066"></a>Organizing Page Content</h1>
			<p class="body">So far, <a id="_idIndexMarker544"></a><a id="_idIndexMarker545"></a><a id="_idIndexMarker546"></a>the elements we’ve covered handle very specific tidbits of content: a paragraph, a heading, a figure, and so on. Prior to <span class="nobreak">HTML5</span>, there was no way to group these bits into larger parts other than wrapping them in a generic division (<span class="Literal-fc">div</span>) element (I’ll cover <span class="Literal-fc">div</span> in more detail later). <span class="nobreak">HTML5</span> introduced new elements that give semantic meaning to sections of a typical web page or application (see <span class="Xref">Note</span>), including <a id="_idIndexMarker547"></a><a id="_idIndexMarker548"></a><a id="_idIndexMarker549"></a>main<a id="_idIndexMarker550"></a> content (<span class="Literal-fc">main</span>), <a id="_idIndexMarker551"></a>headers (<span class="Literal-fc">header</span>), footers (<span class="Literal-fc">footer</span>), <a id="_idIndexMarker552"></a>sections (<span class="Literal-fc">section</span>), articles (<span class="Literal-fc">article</span>), <a id="_idIndexMarker553"></a>navigation (<span class="Literal-fc">nav</span>), and tangentially related or complementary <a id="_idIndexMarker554"></a>content (<span class="Literal-fc">aside</span>). Curiously, the spec lists the <a id="_idIndexMarker555"></a>old <span class="Literal-fc">address</span> element as a section as well, so we’ll look at that one here too.</p>
			<div>
				<div id="_idContainer205" class="sidebar">
					<h5 class="SidebarTitle">HTML5 Support in Internet Explorer</h5>
					<p class="SidebarBody">Nearly all <a id="_idIndexMarker556"></a>browsers<a id="_idIndexMarker557"></a> today support the <span class="nobreak">HTML5</span> semantic elements, and for those that don’t, creating a style sheet rule that tells browsers to format each one as a block-level element is all you need to make them behave correctly:</p>
					<pre class="SidebarCodeFirst">section, article, nav, aside, header, footer, main {<br/>   display: block;<br/>}</pre>
					<p class="SidebarBody">Unfortunately, that fix won’t work for the small fraction of users who are still using Internet Explorer versions 8 and earlier (less than 1.5% of browser traffic as of 2017). IE8 has been hanging around well past its prime because it is tied to the popular Windows Vista operating system. If you work on a large site for which 1% of users represents thousands of people, you may want to be familiar with workarounds and fallbacks for IE8. Most likely, you won’t need to support it. Still, at the risk of looking outdated, I will provide notes about IE8 support throughout this book. </p>
					<p class="SidebarBody">For example, the following is a workaround that applies only to IE8 and earlier. Not only do those browsers not recognize the <span class="nobreak">HTML5</span> elements, but they also ignore any styles applied to them. The solution is to use JavaScript to create each element so IE knows it exists and will allow nesting and styling. Here’s what a JavaScript command creating the <span class="Literal-Sidebar">section</span> element looks like:</p>
					<pre class="SidebarCodeFirst">documencreateElement("section");</pre>
					<p class="SidebarBody">Fortunately, <a id="_idIndexMarker558"></a>Remy Sharp wrote a script that creates all of the <span class="nobreak">HTML5</span> elements for IE8 and earlier in one fell swoop. It is <a id="_idIndexMarker559"></a><a id="_idIndexMarker560"></a>called “<span class="nobreak">HTML5</span> Shiv” (or Shim) and it is available on a server that you can point to in your documents. Just copy this code in the <span class="Literal-Sidebar">head</span> of your document and use a style sheet to style the new elements as blocks:</p>
					<pre class="SidebarCodeFirst">&lt;!--[if lt IE 9]&gt;<br/>&lt;script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/ <br/>html5shiv.min.js"&gt;<br/>&lt;/script &gt;<br/>&lt;![endif]--&gt;</pre>
					<p class="SidebarBody">The <span class="nobreak">HTML5</span> Shiv is also part of the <a id="_idIndexMarker561"></a><a id="_idIndexMarker562"></a>Modernizr polyfill script that adds <span class="nobreak">HTML5</span> and CSS3 functionality to older non-supporting browsers. Read more about Modernizr online at <a href="http://modernizr.com"><span class="URL-Email--Sidebar-">modernizr.com</span></a>. It is also covered in <span class="Xref--Sidebar-">Chapter 20, Modern Web Development Tools</span>.</p>
				</div>
			</div>
			<p class="Sidebar-Holder"> </p>
			<h2 class="HeadB">Main Content</h2>
			<div>
				<div id="_idContainer206" class="ref">
					<p class="refNameCode">&lt;main&gt;…&lt;/main&gt;</p>
					<p class="refPurpose">Primary content area of page or app </p>
				</div>
			</div>
			<p class="body">Web pages these days are loaded with different types of content: mastheads, sidebars, ads, footers, more ads, even more ads, and so on. It is helpful to cut to the chase and explicitly point out the main content on the page. Use the <span class="Literal-fc">main</span> element to identify the primary content of a page or application. It helps screen readers and other assistive technologies know where the main content of the page begins and replaces the “Skip to main content” links that have been utilized in the past. The content of a <span class="Literal-fc">main</span> element should be unique to that page. In other words, headers, sidebars, and other elements that appear across multiple pages in a site should not be included in the <span class="Literal-fc">main</span> section: </p>
			<pre class="CodeFirst">&lt;body&gt;<br/>&lt;header&gt;…&lt;/header&gt;<br/><code class="CodeColor">&lt;main&gt;</code><br/>  &lt;h1&gt;Humanist Sans Serif&lt;/h1&gt;<br/><span class="Replaceable">  </span><span class="Code-Comment">&lt;!-- code continues --&gt;</span><br/><span class="Replaceable"> </span><code class="CodeColor">&lt;/main&gt;</code><br/>&lt;/body&gt;</pre>
			<p class="body">The W3C <a id="_idIndexMarker563"></a><a id="_idIndexMarker564"></a><span class="nobreak">HTML5</span> specification states that pages should have only one <span class="Literal-fc">main</span> section and that it should not be nested within an <span class="Literal-fc">article</span>, <span class="Literal-fc">aside</span>, <span class="Literal-fc">header</span>, <span class="Literal-fc">footer</span>, or <span class="Literal-fc">nav</span>. Doing so will cause the document to be invalid. </p>
			<p class="body">The <span class="Literal-fc">main</span> element is the most recent addition to the roster of <span class="nobreak">HTML5</span> grouping elements. You can use it and style it in most browsers, but for Internet Explorer (including version 11, the most current as of this writing), you’ll need to create the element with JavaScript and set its display to <span class="Literal-fc">block</span> with a style sheet, as discussed in the <span class="Xref">“</span><span class="nobreak"><span class="Xref">HTML5</span></span><span class="Xref"> Support in Internet Explorer”</span> sidebar. Note that <span class="Literal-fc">main</span> is supported in MS Edge.</p>
			<h2 class="HeadB">Headers and Footers</h2>
			<div>
				<div id="_idContainer207" class="ref">
					<p class="refNameCode">&lt;header&gt;…&lt;/header&gt;</p>
					<p class="refPurpose">Introductory material for page, section, or article </p>
					<p class="refNameCode">&lt;footer&gt;…&lt;/footer&gt;</p>
					<p class="refPurpose">Footer for page, section, or article</p>
				</div>
			</div>
			<p class="body">Because web authors have been labeling header and footer sections in their documents for years, it was kind of a no-brainer that full-fledged <span class="Literal-fc">header</span> and <span class="Literal-fc">footer</span> elements would come in handy. Let’s start with headers.</p>
			<h3 class="HeadC">Headers</h3>
			<p class="body">The <span class="Literal-fc">header</span> element is used for introductory material that typically appears at the beginning of a web page or at the top of a section or article (we’ll get to those elements next). There is no specified list of what a <span class="Literal-fc">header</span> must or should contain; anything that makes sense as the introduction to a page or section is acceptable. In the following example, the document header includes a logo image, the site title, and navigation:</p>
			<pre class="CodeFirst">&lt;body&gt;<br/><code class="CodeColor">&lt;header&gt;</code><br/>  &lt;img src="/images/logo.png" alt="logo"&gt;<br/>  &lt;h1&gt;Nuts about Web Fonts&lt;/h1&gt;<br/>  &lt;nav&gt;<br/>    &lt;ul&gt;<br/>      &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;<br/>      &lt;li&gt;&lt;a href="/"&gt;Blog&lt;/a&gt;&lt;/li&gt;<br/>      &lt;li&gt;&lt;a href="/"&gt;Shop&lt;/a&gt;&lt;/li&gt;<br/>    &lt;/ul&gt;<br/>  &lt;/nav&gt;<br/><code class="CodeColor">&lt;/header&gt;</code> <br/><span class="Code-Comment">&lt;!--page content--&gt;</span><br/>&lt;/body&gt;</pre>
			<div>
				<div id="_idContainer208" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The <span class="Literal-Sidebar">&lt;a href="/"&gt;&lt;/a&gt;</span> code in the examples is the markup <a id="_idIndexMarker565"></a>for<a id="_idIndexMarker566"></a><a id="_idIndexMarker567"></a> adding links to other web pages. We’ll take on links in <span class="Xref--Sidebar-">Chapter 6, Adding Links</span>. Normally the value would be the URL to the page, but I’ve used a simple slash as a space-saving measure. </p>
				</div>
			</div>
			<p class="body">When used in an individual article, the <span class="Literal-fc">header</span> might include the article title, author, and the publication date, as shown here:</p>
			<pre class="CodeFirst">&lt;article&gt;<br/>  <code class="CodeColor">&lt;header&gt;</code><br/>    &lt;h1&gt;More about WOFF&lt;/h1&gt;<br/>    &lt;p&gt;by Jennifer Robbins, &lt;time datetime="2017-11-11"&gt;November 11, 2017&lt;/time&gt;&lt;/p&gt;<br/>  <code class="CodeColor">&lt;/header&gt;</code><br/>  <span class="Code-Comment">&lt;!-- article content here --&gt;</span> <br/>&lt;/article&gt;</pre>
			<div>
				<div id="_idContainer209" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">Neither <span class="Literal-Sidebar">header</span> nor <span class="Literal-Sidebar">footer</span> elements are permitted to contain nested <span class="Literal-Sidebar">header</span> or <span class="Literal-Sidebar">footer</span> elements.</p>
				</div>
			</div>
			<h3 class="HeadC">Footers</h3>
			<p class="body">The <span class="Literal-fc">footer</span> element is used to indicate the type of information that typically comes at the end of a page or an article, such as its author, copyright information, related documents, or navigation. The <span class="Literal-fc">footer</span> element may apply to the entire document, or it could be associated with a particular section or article. If the footer is contained directly within the <span class="Literal-fc">body</span> element, either before or after all the other <span class="Literal-fc">body</span> content, then it applies to the entire page or application. If it is contained in a sectioning <a id="_idIndexMarker568"></a>element (<span class="Literal-fc">section</span>, <span class="Literal-fc">article</span>, <span class="Literal-fc">nav</span>, or <span class="Literal-fc">aside</span>), it is parsed as the footer for just that section. Note that although it is called “footer,” there is no requirement that it appear last in the document or sectioning element. It could also appear at or near the beginning if that makes sense. </p>
			<p class="body">In this simple example, we see the typical information listed at the bottom of an article marked up as a <span class="Literal-fc">footer</span>:</p>
			<pre class="CodeFirst">&lt;article&gt;<br/>  &lt;header&gt;<br/>    &lt;h1&gt;More about WOFF&lt;/h1&gt;<br/>    &lt;p&gt;by Jennifer Robbins, &lt;time datetime="2017-11-11"&gt;November 11, 2017&lt;/time&gt;&lt;/p&gt;<br/>  &lt;/header&gt;<br/> <span class="Code-Comment"> &lt;!-- article content here --&gt;</span> <br/><code class="CodeColor">  &lt;footer&gt;</code><br/>    &lt;p&gt;&lt;small&gt;Copyright &amp;copy;2017 Jennifer Robbins.&lt;/small&gt;&lt;/p&gt;<br/>    &lt;nav&gt;<br/>      &lt;ul&gt;<br/>        &lt;li&gt;&lt;a href="/"&gt;Previous&lt;/a&gt;&lt;/li&gt;<br/>        &lt;li&gt;&lt;a href="/"&gt;Next&lt;/a&gt;&lt;/li&gt;<br/>      &lt;/ul&gt;<br/>    &lt;/nav&gt;<br/>  <code class="CodeColor">&lt;/footer&gt;</code><br/>&lt;/article&gt;</pre>
			<div>
				<div id="_idContainer210" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The <span class="Literal-Sidebar">time</span> <a id="_idIndexMarker569"></a>element will be discussed in the section <span class="Xref--Sidebar-">“Dates and times”</span> later in this chapter.</p>
				</div>
			</div>
			<h2 class="HeadB">Sections and Articles</h2>
			<div>
				<div id="_idContainer211" class="ref">
					<p class="refNameCode">&lt;section&gt;…&lt;/section&gt;  </p>
					<p class="refPurpose">Thematic group of content </p>
					<p class="refNameCode">&lt;article&gt;…&lt;/article&gt; </p>
					<p class="refPurpose">Self-contained, reusable composition </p>
				</div>
			</div>
			<p class="body">Long documents are easier to use when they are divided into smaller parts. For example, books are divided into chapters, and newspapers have sections for local news, sports, comics, and so on. To divide long web documents into thematic sections, use the aptly named <span class="Literal-fc">section</span> element. Sections typically include a heading (inside the <span class="Literal-fc">section</span> element) plus content that has a meaningful reason to be grouped together.  </p>
			<div>
				<div id="_idContainer212" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">The HTML5 spec recommends that if the purpose for grouping the elements is simply to <a id="_idIndexMarker570"></a>provide a hook for styling, use the generic <span class="Literal-Sidebar">div</span> element instead.</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">section</span> element has a broad range of uses, from dividing a whole page into major sections or identifying thematic sections within a single article. In the following example, a document with information about typography resources has been divided into two sections based on resource type:  </p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;section&gt;</code><br/>  &lt;h2&gt;Typography Books&lt;/h2&gt;<br/>  &lt;ul&gt;<br/>     &lt;li&gt;…&lt;/li&gt;<br/>  &lt;/ul&gt;<br/><code class="CodeColor">&lt;/section&gt;</code></pre>
			<pre class="Code"> <code class="CodeColor">&lt;section&gt;</code><br/>  &lt;h2&gt;Online Tutorials&lt;/h2&gt;<br/>  &lt;p&gt;These are the best tutorials on the web.&lt;/p&gt;<br/>  &lt;ul&gt;<br/>    &lt;li&gt;…&lt;/li&gt;<br/>  &lt;/ul&gt;<br/><code class="CodeColor">&lt;/section&gt;</code></pre>
			<p class="body">Use the <span class="Literal-fc">article</span> element for self-contained works that could stand alone or be reused in a different context (such as syndication). It is useful for magazine or newspaper articles, blog posts, comments, or other items that could be extracted for external use. You can think of it as a specialized <span class="Literal-fc">section</span> element that answers “yes” to the question “Could this appear on another site and make sense?”</p>
			<p class="body">A long <span class="Literal-fc">article</span> could be broken into a number of sections, as shown here:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;article&gt;</code><br/>  &lt;h1&gt;Get to Know Helvetica&lt;/h1&gt;<br/>  &lt;section&gt;<br/>    &lt;h2&gt;History of Helvetica&lt;/h2&gt;<br/>    &lt;p&gt;…&lt;/p&gt;<br/>  &lt;/section&gt;</pre>
			<pre class="Code">   &lt;section&gt;<br/>    &lt;h2&gt;Helvetica Today&lt;/h2&gt;<br/>    &lt;p&gt;…&lt;/p&gt;<br/>  &lt;/section&gt;<br/><code class="CodeColor">&lt;/article&gt;</code></pre>
			<p class="body">Conversely, a <span class="Literal-fc">section</span> in a web document might be composed of a number of articles:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;section id="essays"&gt;</code><br/>  &lt;article&gt;<br/>    &lt;h1&gt;A Fresh Look at Futura&lt;/h1&gt;<br/>    &lt;p&gt;…&lt;/p&gt;<br/>  &lt;/article&gt;</pre>
			<pre class="Code">   &lt;article&gt;<br/>    &lt;h1&gt;Getting Personal with Humanist&lt;/h1&gt;<br/>    &lt;p&gt;…&lt;/p&gt;<br/>  &lt;/article&gt;<br/><code class="CodeColor">&lt;/section&gt;</code></pre>
			<p class="body">The <span class="Literal-fc">section</span> and <span class="Literal-fc">article</span> elements are easily confused, particularly because it is possible to nest one in the other and vice versa. Keep in mind that if the content is self-contained and could appear outside the current context, it is best marked up as an <span class="Literal-fc">article</span>. </p>
			<h2 class="HeadB">Aside (Sidebars)</h2>
			<div>
				<div id="_idContainer213" class="ref">
					<p class="refNameCode">&lt;aside&gt;…&lt;/aside&gt;</p>
					<p class="refPurpose">Tangentially related material </p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">aside</span> element <a id="_idIndexMarker571"></a><a id="_idIndexMarker572"></a>identifies content that is separate from, but tangentially related to, the surrounding content. In print, its equivalent is a sidebar, but it couldn’t be called “sidebar” because putting something on the “side” is a presentational description, not semantic. Nonetheless, a sidebar is a good mental model for using the <span class="Literal-fc">aside</span> element. <span class="Literal-fc">aside</span> can be used for pull quotes, background information, lists of links, callouts, or anything else that might be associated with (but not critical to) a document.</p>
			<p class="body">In this example, an <span class="Literal-fc">aside</span> element is used for a list of links related to the main article:</p>
			<pre class="CodeFirst">&lt;h1&gt;Web Typography&lt;/h1&gt;<br/>&lt;p&gt;Back in 1997, there were competing font formats and tools for making them…&lt;/p&gt;<br/>&lt;p&gt;We now have a number of methods for using beautiful fonts on web pages…&lt;/p&gt;<br/><code class="CodeColor">&lt;aside&gt;</code><br/>  &lt;h2&gt;Web Font Resources&lt;/h2&gt;<br/>  &lt;ul&gt;<br/>    &lt;li&gt;&lt;a href="http://typekit.com/"&gt;Typekit&lt;/a&gt;&lt;/li&gt;<br/>    &lt;li&gt;&lt;a href="http://fonts.google.com"&gt;Google Fonts&lt;/a&gt;&lt;/li&gt;<br/>  &lt;/ul&gt;<br/><code class="CodeColor">&lt;/aside&gt;</code></pre>
			<p class="body">The <span class="Literal-fc">aside</span> element has no default rendering, so you will need to make it a block element and adjust its appearance and layout with style sheet rules.</p>
			<h2 class="HeadB">Navigation</h2>
			<div>
				<div id="_idContainer214" class="ref">
					<p class="refNameCode">&lt;nav&gt;…&lt;/nav&gt;</p>
					<p class="refPurpose">Primary navigation links</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">nav</span> element <a id="_idIndexMarker573"></a><a id="_idIndexMarker574"></a>gives developers a semantic way to identify navigation for a site. Earlier in this chapter, we saw an unordered list that might be used as the top-level navigation for a font catalog site. Wrapping that list in a <span class="Literal-fc">nav</span> element makes its purpose explicitly clear:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;nav&gt;</code><br/>  &lt;ul&gt;<br/>    &lt;li&gt;&lt;a href="/"&gt;Serif&lt;/a&gt;&lt;/li&gt;<br/>    &lt;li&gt;&lt;a href="/"&gt;Sans-serif&lt;/a&gt;&lt;/li&gt;<br/>    &lt;li&gt;&lt;a href="/"&gt;Script&lt;/a&gt;&lt;/li&gt;<br/>    &lt;li&gt;&lt;a href="/"&gt;Display&lt;/a&gt;&lt;/li&gt;<br/>    &lt;li&gt;&lt;a href="/"&gt;Dingbats&lt;/a&gt;&lt;/li&gt;<br/>  &lt;/ul&gt;<br/><code class="CodeColor">&lt;/nav&gt;</code></pre>
			<p class="body">Not all lists of links should be wrapped in <span class="Literal-fc">nav</span> tags, however. The spec makes it clear that <span class="Literal-fc">nav</span> should be used for links that provide primary navigation around a site or a lengthy section or article. The <span class="Literal-fc">nav</span> element may be especially helpful from an accessibility perspective. </p>
			<h2 class="HeadB">Addresses</h2>
			<div>
				<div id="_idContainer215" class="ref">
					<p class="refNameCode">&lt;address&gt;…&lt;/address&gt;</p>
					<p class="refPurpose">Contact information</p>
				</div>
			</div>
			<p class="body">Last, and <a id="_idIndexMarker575"></a>well, least, is the <span class="Literal-fc">address</span> element that is used to create an area for contact information for the author or maintainer of the document. It is generally placed at the end of the document or in a section or article within a document. An <span class="Literal-fc">address</span> would be right at home in a <span class="Literal-fc">footer</span> element. It is important to note that the <span class="Literal-fc">address</span> element should <em class="Emphasis">not</em> be used for any old address on a page, such as mailing addresses. It is intended specifically for author contact information (although that could potentially be a mailing address). Following is an example of its intended use: </p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;address&gt;</code><br/>Contributed by &lt;a href="../authors/robbins/"&gt;Jennifer Robbins&lt;/a&gt;, &lt;a href="http://www.oreilly.com/"&gt;O'Reilly Media&lt;/a&gt; <br/><code class="CodeColor">&lt;/address&gt; </code></pre>
			<div>
				<div id="_idContainer216" class="sidebar">
					<h5 class="SidebarTitle">Document Outlines</h5>
					<p class="SidebarBody">Behind the scenes, <a id="_idIndexMarker576"></a>browsers look at the markup in a document and generate a hierarchical outline based on the headings in the content. A new section gets added to the outline whenever the browser encounters a new heading level. </p>
					<p class="SidebarBody">In past versions of HTML, that was the only way the outline was created. <span class="nobreak">HTML5</span> introduced a new outline algorithm that enables authors to explicitly add a new section to the outline by inserting a sectioning element: <span class="Literal-Sidebar">article</span>, <span class="Literal-Sidebar">section</span>, <span class="Literal-Sidebar">aside</span>, and <span class="Literal-fc">nav</span>. In addition <a id="_idIndexMarker577"></a><a id="_idIndexMarker578"></a>to the four sectioning elements, the spec defines some elements (<span class="Literal-Sidebar">blockquote</span>, <span class="Literal-Sidebar">fieldset</span>, <span class="Literal-Sidebar">figure</span>, <span class="Literal-Sidebar">dialog</span>, <span class="Literal-Sidebar">details</span>, and <span class="Literal-Sidebar">td</span>) as sectioning roots, which means headings in those elements do not become part of the overall document outline.</p>
					<p class="SidebarBody">It’s a nice idea because it allows content to be repurposed and merged without breaking the outline, but unfortunately, no browsers to date have implemented it and they are unlikely to do so. The W3C has kept the sectioning elements and their intended behavior in the spec (which is why I mention this at all), but now precede it with a banner recommending sticking with the old hierarchical heading method.</p>
				</div>
			</div>
			<h1 id="_idParaDest-46" class="HeadA"><a id="_idTextAnchor067"></a>The Inline Element Roundup</h1>
			<p class="body">Now that we’ve identified the larger chunks of content, we can provide semantic meaning to phrases within the chunks by using what the <span class="nobreak">HTML5</span> specification calls <span class="FirstTerm">text-level semantic elements</span>. On the street, you are likely to hear them called <span class="FirstTerm">inline elements</span> because they display in the flow of text by default and do not cause any line breaks. That’s also how they were referred to in HTML versions prior to <span class="nobreak">HTML5</span>. </p>
			<h2 class="HeadB">Text-Level (Inline) Elements</h2>
			<p class="body">Despite all the <a id="_idIndexMarker579"></a><a id="_idIndexMarker580"></a><a id="_idIndexMarker581"></a>types of information you could add to a document, there are only a couple dozen text-level semantic elements. <span class="Xref-Figure">Table 5-1</span> lists all of them.</p>
			<div>
				<div id="_idContainer217" class="contents">
					<table id="table001-4" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Title Table-Head" colspan="2">
									<p class="TableTitle"><span class="Table-Label">Table 5-1.</span> Text-level semantic elements</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Head Table-Head">
									<p class="TableHeader">Element</p>
								</td>
								<td class="Table Table-Head Table-Head">
									<p class="TableSubhead">Description</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">a</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">An anchor or <a id="_idIndexMarker582"></a>hypertext link (see <span class="Xref--Sidebar-">Chapter 6</span> for details)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">abbr</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker583"></a>Abbreviation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">b</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Added <a id="_idIndexMarker584"></a>visual attention, such as keywords (bold) </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">bdi</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Indicates <a id="_idIndexMarker585"></a>text that may have directional requirements</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">bdo</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Bidirectional <a id="_idIndexMarker586"></a>override; explicitly indicates text direction (left to right, <span class="Literal-Sidebar">ltr</span>, or right to left, <span class="Literal-Sidebar">rtl</span>)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">br</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker587"></a>Line<a id="_idIndexMarker588"></a> break</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">cite</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Citation; <a id="_idIndexMarker589"></a>a reference to the title of a work, such as a book title</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">code</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Computer <a id="_idIndexMarker590"></a>code sample</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">data</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Machine-readable <a id="_idIndexMarker591"></a>equivalent dates, time, weights, and other measurable values</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">del</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Deleted <a id="_idIndexMarker592"></a>text; indicates an edit made to a document</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">dfn</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">The <a id="_idIndexMarker593"></a>defining instance or first occurrence of a term</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">em</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Emphasized text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">i</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Alternative <a id="_idIndexMarker594"></a>voice (italic) or alternate language</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">ins</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Inserted <a id="_idIndexMarker595"></a>text; indicates an insertion in a document</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">kbd</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Keyboard; <a id="_idIndexMarker596"></a>text entered by a user (for technical documents)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">mark</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker597"></a>Contextually<a id="_idIndexMarker598"></a> relevant text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">q</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Short,<a id="_idIndexMarker599"></a> inline quotation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">ruby, rt, rp</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Provides<a id="_idIndexMarker600"></a><a id="_idIndexMarker601"></a><a id="_idIndexMarker602"></a> annotations or pronunciation guides under East Asian typography and ideographs</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">s</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Incorrect <a id="_idIndexMarker603"></a>text (strike-through)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">samp</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Sample <a id="_idIndexMarker604"></a>output from programs</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">small</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Small <a id="_idIndexMarker605"></a>print, such as a copyright or legal notice (displayed in a smaller type size) </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">span</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Generic <a id="_idIndexMarker606"></a>phrase content</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">strong</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Content of strong importance</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">sub</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker607"></a><a id="_idIndexMarker608"></a>Subscript</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">sup</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker609"></a><a id="_idIndexMarker610"></a>Superscript</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">time</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Machine-readable <a id="_idIndexMarker611"></a>time data</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">u</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Indicates a<a id="_idIndexMarker612"></a> formal name, misspelled word, or text that would be underlined </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">var</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">A <a id="_idIndexMarker613"></a>variable or program argument (for technical documents)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">wbr</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Word <a id="_idIndexMarker614"></a>break</p>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			<div>
				<div id="_idContainer218" class="sidebar">
					<h5 class="SidebarTitle">The Inline Elements Backstory</h5>
					<p class="SidebarBody">Many of the<a id="_idIndexMarker615"></a> inline elements that have been around since the dawn of the web were introduced to change the visual formatting of text selections because of the lack of a style sheet system. If you wanted bolded text, you marked it as <span class="Literal-Sidebar">b</span>. Italics? Use the <span class="Literal-Sidebar">i</span> element. In fact, there was once a <span class="Literal-Sidebar">font</span> element used solely to change the font, color, and size of text (the horror!). Not surprisingly, <span class="nobreak">HTML5</span> kicked the purely presentational <span class="Literal-Sidebar">font</span> element to the curb. However, many of the old-school presentational inline elements (for example, <span class="Literal-Sidebar">u</span> for underline and <span class="Literal-Sidebar">s</span> for strike-through) have been kept in <span class="nobreak">HTML5</span> and given new semantic definitions (<span class="Literal-Sidebar">b</span> is now for “keywords,” <span class="Literal-Sidebar">s</span> for “inaccurate text”). </p>
					<p class="SidebarBody">Many inline elements have the expected style rendering (bold for the <span class="Literal-Sidebar">b</span> element, for example). Other inline elements are purely semantic (such as <span class="Literal-Sidebar">abbr</span> or <span class="Literal-Sidebar">time</span>) and don’t have default renderings. For any inline elements, you can use CSS rules if you want to change the way they display.</p>
				</div>
			</div>
			<div>
				<div id="_idContainer219" class="sidebar">
					<h5 class="SidebarTitle">Obsolete HTML 4.01 Text Elements</h5>
					<p class="SidebarBody">Here are<a id="_idIndexMarker616"></a> <a id="_idIndexMarker617"></a>some old text elements that were made<a id="_idIndexMarker618"></a> <a id="_idIndexMarker619"></a><a id="_idIndexMarker620"></a><a id="_idIndexMarker621"></a><a id="_idIndexMarker622"></a><a id="_idIndexMarker623"></a><a id="_idIndexMarker624"></a><a id="_idIndexMarker625"></a><a id="_idIndexMarker626"></a><a id="_idIndexMarker627"></a>obsolete in <span class="nobreak">HTML5</span>: <span class="Literal-Sidebar">acronym</span>, <span class="Literal-Sidebar">applet</span>, <span class="Literal-Sidebar">basefont</span>, <span class="Literal-Sidebar">big</span>, <span class="Literal-Sidebar">center</span>, <span class="Literal-Sidebar">dir</span> (directory), <span class="Literal-Sidebar">font</span>, <span class="Literal-Sidebar">isindex</span> (search box), <span class="Literal-Sidebar">menu</span>, <span class="Literal-Sidebar">strike</span>, <span class="Literal-Sidebar">tt</span> (teletype). I mention them here in case you run across them in an old document when viewing its source or if you are using an older web authoring tool. There is no reason to use them today. </p>
				</div>
			</div>
			<p class="body">Although it may be handy seeing all of the text-level elements listed together in a table, they certainly deserve more detailed explanations.</p>
			<h3 class="HeadC">Emphasized text</h3>
			<div>
				<div id="_idContainer220" class="ref">
					<p class="refNameCode">&lt;em&gt;…&lt;/em&gt;</p>
					<p class="refPurpose">Stressed emphasis</p>
				</div>
			</div>
			<p class="body">Use the <span class="Literal-fc">em</span> element <a id="_idIndexMarker628"></a>to indicate which part of a sentence should be stressed or emphasized. The placement of <span class="Literal-fc">em</span> elements affects how a sentence’s meaning is interpreted. Consider the following sentences that are identical, except for which words are stressed:</p>
			<pre class="CodeFirst">&lt;p&gt;<code class="CodeColor">&lt;em&gt;</code>Arlo<code class="CodeColor">&lt;/em&gt;</code> is very smart.&lt;/p&gt;<br/>&lt;p&gt;Arlo is <code class="CodeColor">&lt;em&gt;</code>very<code class="CodeColor">&lt;/em&gt;</code> smart.&lt;/p&gt;</pre>
			<p class="body">The first sentence indicates <em class="Emphasis">who</em> is very smart. The second example is about <em class="Emphasis">how</em> smart he is. Notice that the <span class="Literal-fc">em</span> element has an effect on the meaning of the sentence.</p>
			<p class="body">Emphasized text (<span class="Literal-fc">em</span>) elements nearly always display in italics by default (<span class="Xref-Figure">Figure 5-9</span>), but of course you can make them display any way you like with a style sheet. Screen <a id="_idIndexMarker629"></a>readers may use a different tone of voice to convey stressed content, which is why you should use an <span class="Literal-fc">em</span> element only when it makes sense semantically, not just to achieve italic text.</p>
			<h3 class="HeadC">Important text</h3>
			<div>
				<div id="_idContainer221" class="ref">
					<p class="refNameCode">&lt;strong&gt;…&lt;/strong&gt;</p>
					<p class="refPurpose">Strong importance</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">strong</span> element <a id="_idIndexMarker630"></a>indicates that a word or phrase is important, serious, or urgent. In the following example, the <span class="Literal-fc">strong</span> element identifies the portion of instructions that requires extra attention. The <span class="Literal-fc">strong</span> element does not change the meaning of the sentence; it merely draws attention to the important parts:</p>
			<pre class="CodeFirst">&lt;p&gt;When returning the car, <code class="CodeColor">&lt;strong&gt;</code>drop the keys in the red box by the front desk<code class="CodeColor">&lt;/strong&gt;</code>.&lt;/p&gt;</pre>
			<p class="body">Visual browsers typically display <span class="Literal-fc">strong</span> text elements in bold text by default. Screen readers may use a distinct tone of voice for important content, so mark text as <span class="Literal-fc">strong</span> only when it makes sense semantically, not just to make text bold.</p>
			<p class="body">The following is a brief example of our <span class="Literal-fc">em</span> and <span class="Literal-fc">strong</span> text examples. <span class="Xref-Figure">Figure 5-9</span> should hold no surprises.</p>
			<div>
				<figure id="_idContainer223" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0509-green.png" alt="" width="834" height="248"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-9.</span> The default rendering of emphasized and strong text.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Elements originally named for their presentational properties</h3>
			<div>
				<div id="_idContainer224" class="ref">
					<p class="refNameCode">&lt;b&gt;…&lt;/b&gt;</p>
					<p class="refPurpose">Keywords or visually emphasized text (bold)</p>
					<p class="refNameCode">&lt;i&gt;…&lt;/i&gt;</p>
					<p class="refPurpose">Alternative voice (italic)</p>
					<p class="refNameCode">&lt;s&gt;…&lt;/s&gt;</p>
					<p class="refPurpose">Incorrect text (strike-through)</p>
					<p class="refNameCode">&lt;u&gt;…&lt;/u&gt;</p>
					<p class="refPurpose">Annotated text (underline)</p>
					<p class="refNameCode">&lt;small&gt;…&lt;/small&gt;</p>
					<p class="refPurpose">Legal text; small print (smaller type size)</p>
				</div>
			</div>
			<p class="body">As long as we’re talking about bold and italic text, let’s see what the old <span class="Literal-fc">b</span> and <span class="Literal-fc">i</span> elements are up to now. The elements <span class="Literal-fc">b</span>, <span class="Literal-fc">i</span>, <span class="Literal-fc">u</span>, <span class="Literal-fc">s</span>, and <span class="Literal-fc">small</span> were introduced in the old days of the web as a way to provide typesetting instructions (bold, italic, underline, strike-through, and smaller text, respectively). Despite their original presentational purposes, these elements have been included in <span class="nobreak">HTML5</span> and given updated, semantic definitions based on patterns of how they’ve been used. Browsers still render them by default as you’d expect (<span class="Xref-Figure">Figure 5-10</span>). However, if a type style change is all you’re after, using a style sheet rule is the appropriate solution. Save these for when they are semantically appropriate.</p>
			<div>
				<figure id="_idContainer226" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0510.png" alt="" width="1321" height="516"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-10.</span> The default rendering of <span class="Literal-fc">b</span>, <span class="Literal-fc">i</span>, <span class="Literal-fc">s</span>, <span class="Literal-fc">u</span>, and <span class="Literal-fc">small</span> elements.</figcaption>
				</figure>
			</div>
			<p class="body">Let’s look at these elements and their correct usage, as well as the style sheet alternatives.</p>
			<h4 class="HeadD"><span class="Codenames">b</span></h4>
			<p class="body">Keywords, product names, and other phrases that need to stand out from the surrounding text without conveying added importance or emphasis (see <span class="Xref">Note</span>). [<em class="Emphasis">Old definition:</em> Bold]</p>
			<p class="body"><em class="Emphasis">CSS Property:</em> For bold text, use <span class="Literal-fc">font-weight</span>. Example: <span class="Literal-fc">font-weight: bold;</span></p>
			<p class="body"><em class="Emphasis">Example:</em> <code class="Code">&lt;p&gt;The slabs at the ends of letter strokes are called </code><code class="Code">&lt;b&gt;</code><code class="Code">serifs</code><code class="Code">&lt;/b&gt;</code><code class="Code">.&lt;/p&gt;</code></p>
			<div>
				<div id="_idContainer227" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">It helps me to think about how a screen reader <a id="_idIndexMarker631"></a>would read the text. If I don’t want the word read in a loud, emphatic tone of voice, but it really should be bold, then <span class="Literal-Sidebar">b</span> may be more appropriate than <span class="Literal-Sidebar">strong</span>.</p>
				</div>
			</div>
			<h4 class="HeadD"><span class="Codenames">i</span></h4>
			<p class="body">Indicates text that is in a different voice or mood than the surrounding text, such as a phrase from another language, a technical term, or a thought. [<em class="Emphasis">Old definition:</em> Italic]</p>
			<p class="body"><em class="Emphasis">CSS Property:</em> For italic text, use <span class="Literal-fc">font-style</span>. Example: <span class="Literal-fc">font-style: italic;</span></p>
			<p class="body"><em class="Emphasis">Example:</em> <code class="Code">&lt;p&gt;Simply change the font and </code><code class="Code">&lt;i&gt;</code><code class="Code">Voila!</code><code class="Code">&lt;/i&gt;</code><code class="Code">, a new personality!&lt;/p&gt;</code></p>
			<h4 class="HeadD"><span class="Codenames">s</span></h4>
			<p class="body">Indicates text that is incorrect. [<em class="Emphasis">Old definition:</em> Strike-through text]</p>
			<p class="body"><em class="Emphasis">CSS Property:</em> To draw a line through a selection of text, use <span class="Literal-fc">text-decoration</span>. Example: <span class="Literal-fc">text-decoration: line-through</span></p>
			<p class="body"><em class="Emphasis">Example:</em> <code class="Code">&lt;p&gt;Scala Sans was designed by </code><code class="Code">&lt;s&gt;</code><code class="Code">Eric Gill</code><code class="Code">&lt;/s&gt;</code><code class="Code"> Martin Majoor.&lt;/p&gt;</code></p>
			<h4 class="HeadD"><span class="Codenames">u</span></h4>
			<p class="body">There are a few instances when underlining has semantic significance, such as underlining a formal name in Chinese or indicating a misspelled word after a spell check, such as the misspelled “Helvitica” in the following example. Note that underlined text is easily confused with a link and should generally be avoided except for a few niche cases. [<em class="Emphasis">Old definition:</em> Underline]</p>
			<p class="body"><em class="Emphasis">CSS Property:</em> For underlined text, use <span class="Literal-fc">text-decoration</span>. Example: <span class="Literal-fc">text-decoration: underline</span></p>
			<p class="body"><em class="Emphasis">Example:</em> <code class="Code">&lt;p&gt;New York subway signage is set in </code><code class="Code">&lt;u&gt;</code><code class="Code">Helviteca</code><code class="Code">&lt;/u&gt;</code><code class="Code">.&lt;/p&gt;</code></p>
			<h4 class="HeadD"><span class="Codenames">small</span></h4>
			<p class="body">Indicates an addendum or side note to the main text, such as the legal “small print” at the bottom of a document. [<em class="Emphasis">Old definition:</em> Renders in font smaller than the surrounding text]</p>
			<p class="body"><em class="Emphasis">CSS Property:</em> To make text smaller, <a id="_idIndexMarker632"></a>use <span class="Literal-fc">font-size</span>. Example: <span class="Literal-fc">font-size: 80%</span></p>
			<p class="body"><em class="Emphasis">Example:</em> <code class="Code">&lt;p&gt;</code><code class="Code">&lt;small&gt;</code><code class="Code">(This font is free for personal and commercial use.)</code><code class="Code">&lt;/small&gt;</code><code class="Code">&lt;/p&gt;</code></p>
			<h3 class="HeadC">Short quotations</h3>
			<div>
				<div id="_idContainer228" class="ref">
					<p class="refNameCode">&lt;q&gt;…&lt;/q&gt;</p>
					<p class="refPurpose">Short inline quotation</p>
				</div>
			</div>
			<p class="body">Use the <a id="_idIndexMarker633"></a><a id="_idIndexMarker634"></a><a id="_idIndexMarker635"></a><a id="_idIndexMarker636"></a>quotation (<span class="Literal-fc">q</span>) element to mark up short quotations, such as “To be or not to be,” in the flow of text, as shown in this example (<span class="Xref-Figure">Figure 5-11</span>):</p>
			<pre class="CodeFirst">Matthew Carter says, <code class="CodeColor">&lt;q&gt;</code>Our alphabet hasn't changed in eons.<code class="CodeColor">&lt;/q&gt;</code></pre>
			<p class="body">According to the HTML spec, browsers should add quotation marks around <span class="Literal-fc">q</span> elements automatically, so you don’t need to include them in the source document. Some browsers, like Firefox, render curly quotes, which is preferable. Others (Safari and Chrome, which I used for my examples) render them as straight quotes as shown in the figure.</p>
			<div>
				<figure id="_idContainer230" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0511-green.png" alt="" width="731" height="137"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-11.</span> Browsers add <a id="_idIndexMarker637"></a>quotation marks automatically around <span class="Literal-Sidebar">q</span> elements. </figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer231" class="sidebar">
					<h5 class="SidebarTitle">Nesting Elements</h5>
					<p class="SidebarBody">You can <a id="_idIndexMarker638"></a><a id="_idIndexMarker639"></a>apply two elements to a string of text (for example, a phrase that is both a quote and in another language), but be sure they are nested properly. That means the inner element, including its closing tag, must be completely contained within the outer element, and not overlap:</p>
					<pre class="SidebarCodeFirst">&lt;q&gt;<code class="CodeColor">&lt;i&gt;</code>Je ne sais pas.<code class="CodeColor">&lt;/i&gt;</code>&lt;/q&gt;</pre>
					<p class="SidebarBody">Here is an example of elements that are nested incorrectly. Notice that the inner <span class="Literal-fc">i</span> element is not closed within the containing <span class="Literal-fc">q</span> element:</p>
					<pre class="SidebarCodeFirst"><code class="CodeRed">&lt;q&gt;&lt;i&gt;</code>Je ne sais pas.<code class="CodeRed">&lt;/q&gt;&lt;/i&gt;</code></pre>
					<p class="SidebarBody">It is easy to spot the nesting error in an example that is this short, but when you’re nesting long passages or nesting multiple levels deep, it is easy to end up with overlaps. One advantage to using an HTML code editor is that it can automatically close elements for you correctly or point out when you’ve made a mistake.</p>
				</div>
			</div>
			<h3 class="HeadC">Abbreviations and acronyms</h3>
			<div>
				<div id="_idContainer232" class="ref">
					<p class="refNameCode">&lt;abbr&gt;…&lt;/abbr&gt;</p>
					<p class="refPurpose">Abbreviation or acronym</p>
				</div>
			</div>
			<p class="body">Marking up <a id="_idIndexMarker640"></a><a id="_idIndexMarker641"></a>acronyms and abbreviations with the <span class="Literal-fc">abbr</span> element provides useful information for search engines, screen readers, and other devices. Abbreviations are shortened versions of a word ending in a period (“Conn.” for “Connecticut,” for example). Acronyms are abbreviations formed by the first letters of the words in a phrase (such as NASA or USA). The <span class="Literal-fc">title</span> attribute provides the long version of the shortened term, as shown in this example:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;abbr title="</code>Points<code class="CodeColor">"&gt;</code>pts.<code class="CodeColor">&lt;/abbr&gt;</code> <br/><code class="CodeColor">&lt;abbr title="</code>American Type Founders<code class="CodeColor">"&gt;</code>ATF<code class="CodeColor">&lt;/abbr&gt;</code> </pre>
			<div>
				<div id="_idContainer233" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">In HTML 4.01, there was an <span class="Literal-Sidebar">acronym</span> element especially for acronyms, but HTML5 has made it obsolete in favor of using the <span class="Literal-Sidebar">abbr</span> for both.</p>
				</div>
			</div>
			<h3 class="HeadC">Citations</h3>
			<div>
				<div id="_idContainer234" class="ref">
					<p class="refNameCode">&lt;cite&gt;…&lt;/cite&gt;</p>
					<p class="refPurpose">Citation</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">cite</span> element is used to identify a reference to another document, such as a book, magazine, article title, and so on.<a id="_idIndexMarker642"></a> Citations are typically rendered in italic text by default. Here’s an example:</p>
			<pre class="CodeFirst">&lt;p&gt;Passages of this article were inspired by <code class="CodeColor">&lt;cite&gt;</code>The Complete Manual of Typography<code class="CodeColor">&lt;/cite&gt;</code> by James Felici.&lt;/p&gt;</pre>
			<h3 class="HeadC">Defining terms</h3>
			<div>
				<div id="_idContainer235" class="ref">
					<p class="refNameCode">&lt;dfn&gt;…&lt;/dfn&gt;</p>
					<p class="refPurpose">Defining term</p>
				</div>
			</div>
			<p class="body">It is common to <a id="_idIndexMarker643"></a>point out the first and defining instance of a word in a document in some fashion. In this book, defining terms are set in blue text. In HTML, you can identify them with the <span class="Literal-fc">dfn</span> element and format them visually using style sheets. </p>
			<pre class="CodeFirst">&lt;p&gt;<code class="CodeColor">&lt;dfn&gt;</code>Script typefaces<code class="CodeColor">&lt;/dfn&gt;</code> are based on handwriting.&lt;/p&gt;</pre>
			<h3 class="HeadC">Program code elements</h3>
			<div>
				<div id="_idContainer236" class="ref">
					<p class="refNameCode">&lt;code&gt;…&lt;/code&gt;</p>
					<p class="refPurpose">Code</p>
					<p class="refNameCode">&lt;var&gt;…&lt;/var&gt;</p>
					<p class="refPurpose">Variable</p>
					<p class="refNameCode">&lt;samp&gt;…&lt;/samp&gt;</p>
					<p class="refPurpose">Program sample</p>
					<p class="refNameCode">&lt;kbd&gt;…&lt;/kbd&gt;</p>
					<p class="refPurpose">User-entered keyboard strokes</p>
				</div>
			</div>
			<p class="body">A number of inline<a id="_idIndexMarker644"></a><a id="_idIndexMarker645"></a><a id="_idIndexMarker646"></a><a id="_idIndexMarker647"></a> elements are used for describing the parts of technical documents, such as code (<span class="Literal-fc">code</span>), <a id="_idIndexMarker648"></a>variables (<span class="Literal-fc">var</span>), program samples (<span class="Literal-fc">samp</span>), and user-entered keyboard strokes (<span class="Literal-fc">kbd</span>). For me, it’s a quaint reminder of HTML’s origins in the scientific world (<a id="_idIndexMarker649"></a>Tim Berners-Lee developed HTML to share documents at the CERN particle physics lab in 1989).</p>
			<p class="body">Code, sample, and keyboard elements typically render in a constant-width (also <a id="_idIndexMarker650"></a><a id="_idIndexMarker651"></a>called <span class="FirstTerm">monospace</span>) font such as Courier by default. Variables usually render in italics.</p>
			<h3 class="HeadC">Subscript and superscript</h3>
			<div>
				<div id="_idContainer237" class="ref">
					<p class="refNameCode">&lt;sub&gt;…&lt;/sub&gt;</p>
					<p class="refPurpose">Subscript</p>
					<p class="refNameCode">&lt;sup&gt;…&lt;/sup&gt;</p>
					<p class="refPurpose">Superscript</p>
				</div>
			</div>
			<p class="body">The <a id="_idIndexMarker652"></a><a id="_idIndexMarker653"></a><a id="_idIndexMarker654"></a><a id="_idIndexMarker655"></a>subscript (<span class="Literal-fc">sub</span>) and superscript (<span class="Literal-fc">sup</span>) elements cause the selected text to display in a smaller size, positioned slightly below (<span class="Literal-fc">sub</span>) or above (<span class="Literal-fc">sup</span>) the baseline. These elements may be helpful for indicating chemical formulas or mathematical equations.</p>
			<p class="body"><span class="Xref-Figure">Figure 5-12</span> shows how these examples of subscript and superscript typically render in a browser.</p>
			<pre class="CodeFirst"> &lt;p&gt;H<code class="CodeColor">&lt;sub&gt;</code>2<code class="CodeColor">&lt;/sub&gt;</code>0&lt;/p&gt; <br/><br/> &lt;p&gt;E=MC<code class="CodeColor">&lt;sup&gt;</code>2<code class="CodeColor">&lt;/sup&gt;</code>&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer239" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0512-green.png" alt="" width="743" height="88"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-12.</span> Subscript and superscript</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Highlighted text</h3>
			<div>
				<div id="_idContainer240" class="ref">
					<p class="refNameCode">&lt;mark&gt;…&lt;/mark&gt;</p>
					<p class="refPurpose">Contextually relevant text </p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">mark</span> <a id="_idIndexMarker656"></a><a id="_idIndexMarker657"></a>element indicates a word that may be considered especially relevant to the reader.  One might use it to dynamically highlight a search term in a page of results, to manually call attention to a passage of text, or to indicate the current page in a series. Some designers (and browsers) give marked text a light colored background as though it were marked with a highlighter marker, as shown in <span class="Xref-Figure">Figure 5-13</span>.</p>
			<pre class="CodeFirst">&lt;p&gt; ... PART I. ADMINISTRATION OF THE GOVERNMENT. TITLE IX.TAXATION. CHAPTER 65C. MASS. <code class="CodeColor">&lt;mark&gt;</code>ESTATE TAX<code class="CodeColor">&lt;/mark&gt;</code>. Chapter 65C: Sect. 2. Computation of <code class="CodeColor">&lt;mark&gt;</code>estate tax<code class="CodeColor">&lt;/mark&gt;</code>.&lt;/p&gt; </pre>
			<div>
				<figure id="_idContainer242" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0513-green.png" alt="" width="805" height="186"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-13.</span> In this example, search terms are identified with <span class="Literal-Sidebar">mark</span> elements and given a yellow background with a style sheet so they are easier for the reader to find.</figcaption>
				</figure>
			</div>
			<h3 class="HeadC">Dates and times</h3>
			<div>
				<div id="_idContainer243" class="ref">
					<p class="refNameCode">&lt;time&gt;…&lt;/time&gt;</p>
					<p class="refPurpose">Time data </p>
				</div>
			</div>
			<p class="body">When we look at the phrase “noon on November 4,” we know that it is a date and a time. But the context might not be so obvious to a computer program. The <span class="Literal-fc">time</span> element allows us to mark up dates and times in a way that is comfortable for a human to read, but also encoded in a standardized way that computers can use. The content of the element presents the information to people, and the <a id="_idIndexMarker658"></a><span class="Literal-fc">datetime</span> attribute presents the same information in a machine-readable way.</p>
			<div>
				<div id="_idContainer244" class="note">
					<h5 class="noteHeader">note</h5>
					<p class="note">The <span class="Literal-Sidebar">time</span> element is not intended for marking up times for which a precise time or date cannot be established, such as “the end of last year” or “the turn of the century.”</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">time</span> element <a id="_idIndexMarker659"></a>indicates dates, times, or date-time combos. It might be used to pass the date and time information to an application, such as saving an event to a personal calendar. It might be used by search engines to find the most recently published articles. Or it could be used to restyle time information into an alternate format (e.g., changing 18:00 to 6 p.m.). </p>
			<p class="body">The <span class="Literal-fc">datetime</span> attribute specifies the date and/or time information in a standardized time format illustrated in <span class="Xref-Figure">Figure 5-14</span>. The full time format begins with the date (year–month–day). The time section begins with a letter “T” and lists hours (on the 24-hour clock), minutes, seconds (optional), and milliseconds (also optional). Finally, the time zone is indicated by the number of hours behind (<span class="Literal-fc">-</span>) or ahead (<span class="Literal-fc">+</span>) of <a id="_idIndexMarker660"></a><a id="_idIndexMarker661"></a>Greenwich Mean Time (GMT). For example, “-05:00” indicates the Eastern Standard time zone, which is five hours behind GMT. When identifying dates and times alone, you can omit the other sections.</p>
			<div>
				<figure id="_idContainer246" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0514-timesyntax.png" alt="" width="1338" height="663"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-14.</span> Standardized date and time syntax.</figcaption>
				</figure>
			</div>
			<p class="body">Here are a few examples of valid values for <span class="Literal-fc">datetime</span>:</p>
			<ul>
				<li class="ListBullet"><span class="ListStartItem">Time only:</span> 9:30 p.m.<pre class="CodeFirst">&lt;time datetime="<code class="CodeColor">21:30</code>"&gt;9:30p.m.&lt;/time&gt;</pre></li>
				<li class="ListBullet"><span class="ListStartItem">Date only:</span> June 19, 2016<pre class="CodeFirst">&lt;time datetime="<code class="CodeColor">2016-06-19</code>"&gt;June 19, 2016&lt;/time&gt;</pre></li>
				<li class="ListBullet"><span class="ListStartItem">Date and time:</span> Sept. 5, 1970, 1:11a.m.<pre class="CodeFirst">&lt;time datetime="<code class="CodeColor">1970-09-05T01:11:00</code>"&gt;Sept. 5, 1970, 1:11a.m.&lt;/time&gt;</pre></li>
				<li class="ListBullet"><span class="ListStartItem">Date and time, with time zone information:</span> 8:00am on July 19, 2015, in Providence, RI	<pre class="CodeFirst">&lt;time datetime="<code class="CodeColor">2015-07-19T08:00:00-05:00</code>"&gt;July 19, 2015, 8am, Providence RI&lt;/time&gt;</pre><div id="_idContainer247" class="note"><h5 class="noteHeader">Note</h5><p class="note">You can also use the <span class="Literal-Sidebar">time</span> element without the <span class="Literal-Sidebar">datetime</span> attribute, but its content must be a valid date/time string:</p><pre class="SidebarCodeFirst"><code class="CodeColor">&lt;time&gt;</code>2016-06-19<code class="CodeColor">&lt;/time&gt;</code></pre></div><div id="_idContainer248" class="sidebar"><h5 class="SidebarSeries">Further Reading</h5><p class="SidebarBody">For more information on the intricate ins and outs of specifying dates and times, with examples, check out the <span class="Literal-Sidebar">time</span> element entry in the <span class="nobreak">HTML5</span> specification: <a href="https://www.w3.org/TR/2014/REC-html5-20141028/text-level-semantics.html#the-time-element"><span class="URL-Email--Sidebar-">www.w3.org/TR/2014/REC-html5-20141028/text-level-semantics.html#the-time-element</span></a>.</p></div></li>
			</ul>
			<h3 class="HeadC">Machine-readable information</h3>
			<div>
				<div id="_idContainer249" class="ref">
					<p class="refNameCode">&lt;data&gt;…&lt;/data&gt;</p>
					<p class="refPurpose">Machine-readable data </p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">data</span> element<a id="_idIndexMarker662"></a><a id="_idIndexMarker663"></a> is another tool for helping computers make sense of content. It can be used for all sorts of data, including dates, times, measurements, weights, microdata, and so on. The <a id="_idIndexMarker664"></a>required <span class="Literal-fc">value</span> attribute provides the machine-readable information. Here are a couple of examples:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;data value="12"&gt;</code>Twelve<code class="CodeColor">&lt;/data&gt;<br/>&lt;data value="978-1-449-39319-9"&gt;</code>CSS: The Definitive Guide<code class="CodeColor">&lt;/data&gt;</code></pre>
			<p class="body">I’m not going to go into more detail on the <span class="Literal-fc">data</span> element, because as a beginner, you are unlikely to be dealing with machine-readable data quite yet. But it is interesting to see how markup can be used to provide usable information to computer programs and scripts as well as to your fellow humans.</p>
			<h3 class="HeadC">Inserted and deleted text</h3>
			<div>
				<div id="_idContainer250" class="ref">
					<p class="refNameCode">&lt;ins&gt;…&lt;/ins&gt;</p>
					<p class="refPurpose">Inserted text</p>
					<p class="refNameCode">&lt;del&gt;…&lt;/del&gt;</p>
					<p class="refPurpose">Deleted text</p>
				</div>
			</div>
			<p class="body">The <span class="Literal-fc">ins</span> and <span class="Literal-fc">del</span> elements<a id="_idIndexMarker665"></a><a id="_idIndexMarker666"></a> are used to mark up edits indicating parts of a document that have been inserted or deleted (respectively). These elements rely on style rules for presentation (i.e., there is no dependable browser default). Both the <span class="Literal-fc">ins</span> and <span class="Literal-fc">del</span> elements can contain either inline or block elements, depending on what type of content they contain:</p>
			<pre class="CodeFirst">Chief Executive Officer: <code class="CodeColor">&lt;del title="retired"&gt;</code>Peter Pan<code class="CodeColor">&lt;/del&gt;&lt;ins&gt;</code>Pippi Longstocking<code class="CodeColor">&lt;/ins&gt;</code></pre>
			<h2 class="HeadB">Adding Breaks</h2>
			<h3 class="HeadC">Line breaks</h3>
			<div>
				<div id="_idContainer251" class="ref">
					<p class="refNameCode">&lt;br&gt;</p>
					<p class="refPurpose">Line break</p>
				</div>
			</div>
			<p class="body">Occasionally, you may need to add a line break within the flow of text. We’ve seen how browsers ignore line breaks in the source document, so we need a specific directive to tell the browser to “add a line break here.”</p>
			<p class="body">The inline line break element (<span class="Literal-fc">br</span>) does exactly that. The <span class="Literal-fc">br</span> element <a id="_idIndexMarker667"></a><a id="_idIndexMarker668"></a>could be used to break up lines of addresses or poetry. It is an empty element, which means it does not have content. Just add the <span class="Literal-fc">br</span> element in the flow of text where you want a break to occur, as shown here and in <span class="Xref-Figure">Figure 5-15</span>:</p>
			<pre class="CodeFirst">&lt;p&gt;So much depends <code class="CodeColor">&lt;br&gt;</code>upon <code class="CodeColor">&lt;br&gt;&lt;br&gt;</code>a red wheel <code class="CodeColor">&lt;br&gt;</code>barrow&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer253" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0515-green.png" alt="" width="787" height="184"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-15.</span> Line breaks are inserted at each <span class="Literal-Sidebar">br</span> element. (Example extracted from “The Red Wheelbarrow” by William Carlos Williams.)</figcaption>
				</figure>
			</div>
			<p class="body">Unfortunately, the <span class="Literal-fc">br</span> element is easily abused. Be careful that you aren’t using <span class="Literal-fc">br</span> elements to force breaks into text that really ought to be a list. For example, don’t do this:</p>
			<pre class="CodeFirst">&lt;p&gt;Times&lt;br&gt;<br/>Georgia&lt;br&gt;<br/>Garamond <br/>&lt;/p&gt;</pre>
			<p class="body">If it’s a list, use the semantically correct unordered list element instead, and turn off the bullets with style sheets:</p>
			<pre class="CodeFirst">&lt;ul&gt;<br/>  &lt;li&gt;Times&lt;/li&gt;<br/>  &lt;li&gt;Georgia&lt;/li&gt;<br/>  &lt;li&gt;Garamond&lt;/li&gt;<br/>&lt;/ul&gt;</pre>
			<h3 class="HeadC">Word breaks</h3>
			<div>
				<div id="_idContainer254" class="ref">
					<p class="refNameCode">&lt;wbr&gt;</p>
					<p class="refPurpose">Word break </p>
				</div>
			</div>
			<p class="body">The word break (<span class="Literal-fc">wbr</span>) <a id="_idIndexMarker669"></a>element lets you mark the place where a word should break (a “line break opportunity” according to the spec) should there not be enough room for the whole word (<span class="Xref-Figure">Figure 5-16</span>). It takes some of the guesswork away from the browser and allows authors to control the best spot for the word to be split over two lines. If there is enough room, the word stays in one piece. Without word breaks, the word stays together, and if there is not enough room, the whole word wraps to the next line. Note that the browser does not add a hyphen when the word breaks over two lines. The <span class="Literal-fc">wbr</span> behaves as though it were a character space in the middle of the word:</p>
			<pre class="CodeFirst">&lt;p&gt;The biggest word you've ever heard and this is how it goes: &lt;em&gt;supercali<code class="CodeColor">&lt;wbr&gt;</code>fragilistic<code class="CodeColor">&lt;wbr&gt;</code>expialidocious&lt;/em&gt;!&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer256" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0516-green.png" alt="" width="841" height="127"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-16.</span> When there is not enough room for a word to fit on a line, it will break at the location of the <span class="Literal-Sidebar">wbr</span> element.</figcaption>
				</figure>
			</div>
			<div>
				<div id="_idContainer257" class="note">
					<h5 class="WarningHeader">Browser support note</h5>
					<p class="note">The <span class="Literal-Sidebar">wbr</span> element is not supported by any version of Internet Explorer as of this writing. It is supported in MS Edge.</p>
				</div>
			</div>
			<p class="body">You’ve been introduced to 32 new elements since your last exercise. I’d say it’s time to give some of the inline elements a try in <span class="Xref-Figure">Exercise 5-2</span>.</p>
			<div>
				<div id="_idContainer258" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 5-2.</span> Identifying inline elements</h6>
					<p class="SidebarBody">This little post for the Black Goose Bistro News page will give you an opportunity to identify and mark up a variety of inline elements. See if you can find phrases to mark up accurately with the following elements:</p>
					<pre class="SidebarCodeFirst">b   br   cite    dfn   em </pre>
					<pre class="SidebarCodeFirst">i   q    small   time </pre>
					<p class="SidebarBody">Because markup is always somewhat subjective, your resulting markup may not look exactly like my final markup, but there is an opportunity to use all of the preceding elements in the article. For extra credit, there is a phrase that could have two elements applied to it. (Hint: look for a term in another language.) Remember to nest them properly by closing the inner element before you close the outer one. Also, be sure that all text-level elements are contained <em class="Emphasis">within</em> block elements.</p>
					<p class="SidebarBody">You can write the tags right on this page. Or, if you want to use a text editor and see the results in a browser, this text file is available online at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a> along with the resulting code.</p>
					<pre class="SidebarCodeFirst">&lt;article&gt;<br/><br/>&lt;header&gt;<br/>&lt;p&gt;posted by BGB, November 15, 2016&lt;/p&gt;<br/>&lt;/header&gt;<br/><br/>&lt;h2&gt;Low and Slow&lt;/h2&gt;<br/>&lt;p&gt;This week I am extremely excited about a new cooking technique called sous vide. In sous vide cooking, you submerge the food (usually vacuum-sealed in plastic) into a water bath that is precisely set to the target temperature you want the food to be cooked to. In his book, Cooking for Geeks, Jeff Potter describes it as ultra-low-temperature poaching.&lt;/p&gt;<br/>&lt;p&gt;Next month, we will be serving Sous Vide Salmon with Dill Hollandaise. To reserve a seat at the chef table, contact us before November 30.&lt;/p&gt;<br/><br/>&lt;p&gt;<a href="mailto:blackgoose@example.com">blackgoose@example.com</a> <br/>555-336-1800&lt;/p&gt;<br/><br/>&lt;p&gt;Warning: Sous vide cooked salmon is not pasteurized. Avoid it if you are pregnant or have immunity issues.&lt;/p&gt;<br/>&lt;/article&gt;</pre>
				</div>
			</div>
			<div>
				<div id="_idContainer259" class="sidebar">
					<h5 class="SidebarTitle">Accommodating Non-Western Languages</h5>
					<p class="SidebarBody">If the web <a id="_idIndexMarker670"></a>is to reach a truly worldwide audience, it needs to be able to support the display of all the languages of the world, with all their unique alphabets, symbols, directionality, and specialized punctuation. The <a id="_idIndexMarker671"></a>W3C’s efforts for internationalization (often referred to<a id="_idIndexMarker672"></a><a id="_idIndexMarker673"></a> as “i18n” —an i, then 18 letters, then an n) ensure that the formats and protocols defined in web technologies are usable worldwide.</p>
					<p class="SidebarBody">Internationalization efforts include the following:</p>
					<ul>
						<li class="SidebarListBullet">Using the <a id="_idIndexMarker674"></a>Unicode character encoding that contains the characters, glyph, symbols, ideographs, and the like from all active, modern languages. Unicode is discussed in <span class="Xref--Sidebar-">Chapter 4, Creating a Simple Page</span>.</li>
						<li class="SidebarListBullet">Declaring the primary language of a document by using a two-letter language code from the ISO 639-1 standard (available at <a href="http://www.loc.gov/standards/iso639-2/php/code_list.php"><span class="URL-Email--Sidebar-">www.loc.gov/standards/iso639-2/php/code_list.php</span></a>). For example, English is “EN,” Czech is “CS, “and German is “DE.” Use the <a id="_idIndexMarker675"></a><a id="_idIndexMarker676"></a><span class="Literal-Sidebar">lang</span> attribute in the <span class="Literal-Sidebar">html</span> element to declare the language for the whole document, or in individual elements that require clarification.</li>
						<li class="SidebarListBullet">Accommodating the various writing directions of languages. In HTML, <a id="_idIndexMarker677"></a>the <span class="Literal-Sidebar">dir</span> attribute explicitly sets the direction for the document or an element to <span class="Literal-Sidebar">ltr</span> (left-to-right) or <span class="Literal-Sidebar">rtl</span> (right-to-left). On phrase-level elements, it also creates a bidirectional isolation, preventing text within the element from influencing the ordering of text outside it. (This can be an important consideration when you are embedding user-generated text.)<p class="SidebarListItem_cont">For example, to include a passage of Hebrew in an English document, use the <span class="Literal-Sidebar">dir</span> attribute to indicate that the phrase should be displayed right-to-left:</p><pre class="CodeFirst">&lt;p&gt;This is how you write Shalom: <br/>&lt;span <code class="CodeColor">dir="rtl"</code>&gt;<span class="unicode">שלום</span>&lt;/span&gt;&lt;/p&gt;</pre></li>
						<li class="SidebarListBullet">Providing a system that allows for <span class="FirstTerm--Sidebar-">ruby annotation</span>, notes that typically appear above ideographs from <a id="_idIndexMarker678"></a>East Asian languages to give pronunciation clues or <a id="_idIndexMarker679"></a><a id="_idIndexMarker680"></a><a id="_idIndexMarker681"></a><a id="_idIndexMarker682"></a>translations (<span class="Literal-Sidebar">ruby</span>, <span class="Literal-Sidebar">rt</span>, and <span class="Literal-Sidebar">rp</span> elements). See the spec for details if this is something you need to do.</li>
					</ul>
					<p class="SidebarBody">The W3C Internationalization Activity site provides a thorough collection of HTML and CSS authoring techniques and resources to help with your internationalization efforts: <a href="http://www.w3.org/International/techniques/authoring-html"><span class="URL-Email--Sidebar-">www.w3.org/International/techniques/authoring-html</span></a>. </p>
				</div>
			</div>
			<h1 id="_idParaDest-47" class="HeadA"><a id="_idTextAnchor068"></a>Generic Elements (div and span)</h1>
			<div>
				<div id="_idContainer260" class="ref">
					<p class="refNameCode">&lt;div&gt;…&lt;/div&gt;</p>
					<p class="refPurpose">Generic block-level element</p>
					<p class="refNameCode">&lt;span&gt;…&lt;/span&gt;</p>
					<p class="refPurpose">Generic inline element </p>
				</div>
			</div>
			<p class="body">What if none of <a id="_idIndexMarker683"></a><a id="_idIndexMarker684"></a>the elements we’ve talked about so far accurately describes your content? After all, there are endless types of information in the world, but as you’ve seen, not all that many semantic elements. Fortunately, HTML provides two generic elements that can be customized to describe your content perfectly. The <span class="Literal-fc">div</span> element indicates a division of content, and <span class="Literal-fc">span</span> indicates a word or phrase for which no text-level element currently exists. The generic elements are given meaning and context with the <span class="Literal-fc">id</span> and <span class="Literal-fc">class</span> attributes, which we’ll discuss in a moment.</p>
			<p class="body">The <span class="Literal-fc">div</span> and <span class="Literal-fc">span</span> elements <a id="_idIndexMarker685"></a><a id="_idIndexMarker686"></a>have no inherent presentation qualities of their own, but you can use style sheets to format them however you like. In fact, generic elements are a primary tool in standards-based web design because they enable authors to accurately describe content and offer plenty of “hooks” for adding style rules. They also allow elements on the page to be accessed and manipulated by JavaScript.</p>
			<p class="body">We’re going to spend a little time on <span class="Literal-fc">div</span> and <span class="Literal-fc">span</span> elements, as well as the <span class="Literal-fc">id</span> and <span class="Literal-fc">class</span> attributes, to learn how authors use them to structure content.</p>
			<h2 class="HeadB">Divide It Up with a div</h2>
			<p class="body">Use the <span class="Literal-fc">div</span> element to create a logical grouping of content or elements on the page. It indicates that they belong together in a conceptual unit or should be treated as a unit by CSS or JavaScript. By marking related content as a <span class="Literal-fc">div</span> and giving it a unique <span class="Literal-fc">id</span> or indicating that it is part <a id="_idIndexMarker687"></a>of a <span class="Literal-fc">class</span>, you give context to the elements in the grouping. Let’s look at a few examples of <span class="Literal-fc">div</span> elements.</p>
			<div>
				<div id="_idContainer261" class="sidebar">
					<h5 class="SidebarSeries">MARKUP TIP</h5>
					<p class="SidebarBody">It is possible to nest <span class="Literal-Sidebar">div</span> elements within other <span class="Literal-Sidebar">div</span> elements, but don’t go overboard. You should always strive to keep your markup as simple as possible, so add a <span class="Literal-Sidebar">div</span> element only if it is necessary for logical structure, styling, or scripting.</p>
				</div>
			</div>
			<p class="body">In this example, a <span class="Literal-fc">div</span> element is used as a container to group an image and two paragraphs into a product “listing”:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;div class="listing"&gt;</code><br/>  &lt;img src="images/felici-cover.gif" alt=""&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Complete Manual of Typography&lt;/cite&gt;, James Felici&lt;/p&gt;<br/>  &lt;p&gt;A combination of type history and examples of good and bad type design.&lt;/p&gt;<br/><code class="CodeColor">&lt;/div&gt; </code></pre>
			<p class="body">By putting those elements in a <span class="Literal-fc">div</span>, I’ve made it clear that they are conceptually related. It also allows me to style <span class="Literal-fc">p</span> elements within listings differently than other <span class="Literal-fc">p</span> elements in the document.  </p>
			<p class="body">Here is another common use of a <span class="Literal-fc">div</span> used to break a page into sections for layout purposes. In this example, a heading and several paragraphs are enclosed in a <span class="Literal-fc">div</span> and identified as the “news” division:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;div id="news"&gt;</code><br/>  &lt;h1&gt;New This Week&lt;/h1&gt;<br/>  &lt;p&gt;We've been working on...&lt;/p&gt;<br/>  &lt;p&gt;And last but not least,... &lt;/p&gt;<br/><code class="CodeColor">&lt;/div&gt;</code></pre>
			<p class="body">Now I have a custom element that I’ve given the name “news.” You might be thinking, “Hey Jen, couldn’t you use a <span class="Literal-fc">section</span> element for that?” You could! In fact, authors may turn to generic <span class="Literal-fc">div</span>s less often now that we have better semantic sectioning elements in <span class="nobreak">HTML5</span>.</p>
			<h2 class="HeadB">Define a Phrase with span</h2>
			<p class="body">A <span class="Literal-fc">span</span> offers the same benefits as the <span class="Literal-fc">div</span> element, except it is used for phrase elements and does not introduce line breaks. Because <span class="Literal-fc">span</span>s are inline elements, they may contain only text and other inline elements (in other words, you cannot put headings, lists, content-grouping elements, and so on, in a <span class="Literal-fc">span</span>). Let’s get right to some examples.</p>
			<p class="body">There is no <span class="Literal-fc">telephone</span> element, but we can use a <span class="Literal-fc">span</span> to give meaning to telephone numbers. In this example, each telephone number is marked up as a <span class="Literal-fc">span</span> and classified as “tel”:</p>
			<pre class="CodeFirst">&lt;ul&gt;<br/>  &lt;li&gt;John: <code class="CodeColor">&lt;span class="tel"&gt;</code>999.8282<code class="CodeColor">&lt;/span&gt;</code>&lt;/li&gt;<br/>  &lt;li&gt;Paul: <code class="CodeColor">&lt;span class="tel"&gt;</code>888.4889<code class="CodeColor">&lt;/span&gt;</code>&lt;/li&gt;<br/>  &lt;li&gt;George: <code class="CodeColor">&lt;span class="tel"&gt;</code>888.1628<code class="CodeColor">&lt;/span&gt;</code>&lt;/li&gt;<br/>  &lt;li&gt;Ringo: <code class="CodeColor">&lt;span class="tel"&gt;</code>999.3220<code class="CodeColor">&lt;/span&gt;</code>&lt;/li&gt;<br/>&lt;/ul&gt;</pre>
			<p class="body">You can see how the classified <span class="Literal-fc">span</span>s add meaning to what otherwise might be a random string of digits. As a bonus, the <span class="Literal-fc">span</span> element enables us to apply the same style to phone numbers throughout the site (for example, ensuring line breaks never happen within them, using a <a id="_idIndexMarker688"></a>CSS <span class="Literal-fc">white-space: nowrap</span> declaration). It makes the information recognizable not only to humans but also to computer programs that know that “tel” is telephone number information. In fact, some values—including “tel”—have been standardized in a markup system known as <a id="_idIndexMarker689"></a>Microformats that makes web content more useful to software (see the upcoming sidebar <span class="Xref">“Structured Data in a Nutshell”</span>).  </p>
			<h2 class="HeadB">id and class Attributes</h2>
			<p class="body">In the previous<a id="_idIndexMarker690"></a> examples, we saw the <span class="Literal-fc">id</span> and <span class="Literal-fc">class</span> attributes used to provide context to generic <span class="Literal-fc">div</span> and <span class="Literal-fc">span</span> elements. <span class="Literal-fc">id</span> and <span class="Literal-fc">class</span> have different purposes, however, and it’s important to know the difference.</p>
			<h3 class="HeadC">Identification with id</h3>
			<p class="body">The <span class="Literal-fc">id</span> attribute is used to assign a <em class="Emphasis">unique</em> identifier to an element in the document. In other words, the value of <span class="Literal-fc">id</span> must be used only once in the document. This makes it useful for assigning a name to a particular element, as though it were a piece of data. See the sidebar <span class="Xref">“id and class Values”</span> for information on providing values for the <span class="Literal-fc">id</span> attribute.</p>
			<div>
				<div id="_idContainer262" class="sidebar">
					<h5 class="SidebarTitle">id and class Values</h5>
					<p class="SidebarBody">In <span class="nobreak">HTML5</span>, the values for <span class="Literal-Sidebar">id</span> and <span class="Literal-Sidebar">class</span> attributes must contain one character (that is, they may not be empty) and may not contain any character spaces. You can use pretty much any character in the value. </p>
					<p class="SidebarBody">Earlier versions of HTML had restrictions on <span class="Literal-Sidebar">id</span> values (for example, they needed to start with a letter), but those restrictions were removed in <span class="nobreak">HTML5</span>.</p>
				</div>
			</div>
			<p class="body">This example uses the books’ <a id="_idIndexMarker691"></a><a id="_idIndexMarker692"></a>ISBNs (International Standard Book Numbers) to uniquely identify each listing. No two book listings may share the same <span class="Literal-fc">id</span>.</p>
			<pre class="CodeFirst">&lt;div <code class="CodeColor">id="ISBN0321127307"</code>&gt;<br/>  &lt;img src="felici-cover.gif" alt=""&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Complete Manual of Typography&lt;/cite&gt;, James Felici&lt;/p&gt;<br/>  &lt;p&gt;A combination of type history and examples of good and bad type.<br/>  &lt;/p&gt;<br/>&lt;/div&gt; </pre>
			<pre class="Code"> &lt;div <code class="CodeColor">id="ISBN0881792063"</code>&gt;<br/>  &lt;img src="bringhurst-cover.gif" alt=""&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Elements of Typographic Style&lt;/cite&gt;, Robert Bringhurst<br/>   &lt;/p&gt;<br/>  &lt;p&gt;This lovely, well-written book is concerned foremost with creating beautiful typography.&lt;/p&gt;<br/>&lt;/div&gt;</pre>
			<p class="body">Web authors also use <span class="Literal-fc">id</span> when identifying the various sections of a page. In the following example, there may not be more than one element with the <span class="Literal-fc">id</span> of “links” or “news” in the document:</p>
			<pre class="CodeFirst">&lt;section <code class="CodeColor">id="news"</code>&gt;<br/>  <span class="Code-Comment">&lt;!-- news items here --&gt;</span> <br/>&lt;/section&gt;</pre>
			<pre class="Code"> &lt;aside <code class="CodeColor">id="links"</code>&gt;<br/>  &lt;<span class="Code-Comment">!-- list of links here --&gt;</span> <br/>&lt;/aside&gt;</pre>
			<h3 class="HeadC">Classification with class </h3>
			<p class="body">The <span class="Literal-fc">class</span> attribute classifies elements into conceptual groups; therefore, unlike the <span class="Literal-fc">id</span> attribute, a <span class="Literal-fc">class</span> name may be shared by multiple elements. By making elements part of the same class, you can apply styles to all of the labeled elements at once with a single style rule or manipulate them all with a script. Let’s start by classifying some elements in the earlier book example. In this first example, I’ve added <span class="Literal-fc">class</span> attributes to classify each <span class="Literal-fc">div</span> as a “listing” and to classify paragraphs as “descriptions”:</p>
			<pre class="CodeFirst">&lt;div id="ISBN0321127307" <code class="CodeColor">class="listing"</code>&gt;<br/>  &lt;header&gt;<br/>  &lt;img src="felici-cover.gif" alt=""&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Complete Manual of Typography&lt;/cite&gt;, James Felici&lt;/p&gt;<br/>  &lt;/header&gt;<br/>  &lt;p <code class="CodeColor">class="description"</code>&gt;A combination of type history and examples of good and bad type.&lt;/p&gt;<br/>&lt;/div&gt; </pre>
			<pre class="Code"> &lt;div id="ISBN0881792063" <code class="CodeColor">class="listing"</code>&gt;<br/>  &lt;header&gt;<br/>  &lt;img src="bringhurst-cover.gif" alt=""&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Elements of Typographic Style&lt;/cite&gt;, Robert Bringhurst<br/>   &lt;/p&gt;<br/>  &lt;/header&gt;<br/>  &lt;p <code class="CodeColor">class="description"</code>&gt;This lovely, well-written book is concerned foremost with creating beautiful typography.&lt;/p&gt;<br/>&lt;/div&gt;</pre>
			<p class="body">Notice how the same element may have both a <span class="Literal-fc">class</span> and an <span class="Literal-fc">id</span>. It is also possible for elements to belong to multiple classes. When there is a list of <span class="Literal-fc">class</span> values, simply separate them with character spaces. In this example, I’ve classified each <span class="Literal-fc">div</span> as a “book” to set them apart from possible “cd” or “dvd” listings elsewhere in the document:</p>
			<pre class="CodeFirst">&lt;div id="ISBN0321127307" <code class="CodeColor">class="listing book"</code>&gt;<br/>  &lt;img src="felici-cover.gif" alt="CMT cover"&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Complete Manual of Typography&lt;/cite&gt;, James Felici&lt;/p&gt;<br/>  &lt;p class="description"&gt;A combination of type history and examples of good and bad type.&lt;/p&gt;<br/>&lt;/div&gt; </pre>
			<pre class="Code"> &lt;div id="ISBN0881792063" <code class="CodeColor">class="listing book"</code>&gt;<br/>  &lt;img src="bringhurst-cover.gif" alt="ETS cover"&gt;<br/>  &lt;p&gt;&lt;cite&gt;The Elements of Typographic Style&lt;/cite&gt;, Robert Bringhurst<br/>   &lt;/p&gt;<br/>  &lt;p class="description"&gt;This lovely, well-written book is concerned   foremost with creating beautiful typography.&lt;/p&gt;<br/>&lt;/div&gt;</pre>
			<div>
				<div id="_idContainer263" class="sidebar">
					<h5 class="SidebarSeries">Markup TIP</h5>
					<p class="SidebarBody">Use the id attribute to <em class="Emphasis">identify</em>.</p>
					<p class="SidebarBody">Use the class attribute to <em class="Emphasis">classify</em>.</p>
				</div>
			</div>
			<h2 class="HeadB">Identify and Classify All Elements</h2>
			<p class="body">The <span class="Literal-fc">id</span> and <span class="Literal-fc">class</span> attributes are not limited to just <span class="Literal-fc">div</span> and <span class="Literal-fc">span</span>—they are two of the <span class="FirstTerm">global attributes</span> (see the <span class="Xref">“Global Attributes”</span> sidebar) in HTML, which means you may use them with all HTML elements. For example, you could identify an ordered list as “directions” instead of wrapping it in a <span class="Literal-fc">div</span>:</p>
			<pre class="CodeFirst">&lt;ol <code class="CodeColor">id="directions"</code>&gt;<br/>  &lt;li&gt;...&lt;/li&gt;<br/>  &lt;li&gt;...&lt;/li&gt;<br/>  &lt;li&gt;...&lt;/li&gt;<br/>&lt;/ol&gt;</pre>
			<div>
				<div id="_idContainer264" class="sidebar">
					<h5 class="SidebarTitle">Global Attributes</h5>
					<p class="SidebarBody"><span class="nobreak">HTML5</span> defines a <a id="_idIndexMarker693"></a><a id="_idIndexMarker694"></a><a id="_idIndexMarker695"></a><a id="_idIndexMarker696"></a><a id="_idIndexMarker697"></a><a id="_idIndexMarker698"></a><a id="_idIndexMarker699"></a><a id="_idIndexMarker700"></a><a id="_idIndexMarker701"></a><a id="_idIndexMarker702"></a><a id="_idIndexMarker703"></a><a id="_idIndexMarker704"></a><a id="_idIndexMarker705"></a><a id="_idIndexMarker706"></a><a id="_idIndexMarker707"></a>set of attributes that can be used with every HTML element. They are called the <span class="FirstTerm--Sidebar-">global attributes</span>: </p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">accesskey</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">class</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">contenteditable</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">dir</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">draggable</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">hidden</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">id</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">lang</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">spellcheck</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">style</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">tabindex</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">title</span></p>
					<p class="SidebarListSimple"><span class="Literal-Sidebar">translate </span></p>
					<p class="SidebarBody"><span class="Xref--Sidebar-">Appendix B</span> lists all of the global attributes, their values, and definitions.</p>
				</div>
			</div>
			<p class="body">This should have given you a good introduction to how to use the <span class="Literal-fc">class</span> and <span class="Literal-fc">id</span> attributes to add meaning and organization to documents. We’ll work with them even more in the style sheet chapters in <a href="lwd5_chapter11.xhtml#_idTextAnchor131"><span class="Xref">Part III</span></a>. The sidebar <span class="Xref">“Structured Data in a Nutshell”</span> discusses more advanced ways of adding meaning and machine-readable data to documents. </p>
			<div>
				<div id="_idContainer265" class="sidebar">
					<h5 class="SidebarTitle">Structured Data in a Nutshell</h5>
					<p class="SidebarBody">It is pretty easy for<a id="_idIndexMarker708"></a> us humans to tell the difference between a recipe and a movie review. For search engines and other computer programs, however, it’s not so obvious. When we use HTML alone, all browsers see is paragraphs, headings, and other semantic elements of a document. Enter structured data! <span class="FirstTerm--Sidebar-">Structured data</span> allows content to be <a id="_idIndexMarker709"></a>machine-readable as well, which helps search engines provide smarter, user-friendly results and can provide a better user experience—for example, by extracting event information from a page and adding it to the user’s calendar app.</p>
					<p class="SidebarBody">There are several standards for structured data, but they share a similar approach. First, they identify and name the “thing” being presented.  Then they point out the properties of that thing. The “thing” might be a person, an event, a product, a movie…pretty much anything you can imagine seeing on a web page. Properties consist of name/value pairs. For example, “actor,” “director,” and “duration” are properties of a movie. The values of those properties appear as the content of an HTML element. A collection of the standardized terms assigned to “things,” as well as their respective properties, form what is<a id="_idIndexMarker710"></a> called a <span class="FirstTerm--Sidebar-">vocabulary</span>.</p>
					<p class="SidebarBody">The most popular standards for adding structured data are Microformats, Microdata, RDFa (and RDFa Lite), and JSON-LD. They differ in the syntax they use to add information about objects and their properties.</p>
					<p class="SidebarListVariableTerm">Microformats</p>
					<p class="SidebarListVariable"><a href="http://microformats.org"><span class="URL-Email--Sidebar-">microformats.org</span></a></p>
					<p class="SidebarListItem_cont">This early <a id="_idIndexMarker711"></a>effort to make web content more useful created standardized <em class="Emphasis">values</em> for the <a id="_idIndexMarker712"></a><a id="_idIndexMarker713"></a>existing <span class="Literal-Sidebar">id</span>, <span class="Literal-Sidebar">class</span>, and <span class="Literal-Sidebar">rel</span> HTML attributes. It is not a documented standard, but it is a convention that is in widespread use because it is very simple to implement. There are about a dozen stable Microformat vocabularies for defining people, organizations, events, products, and more. Here is a short example of how a person might be marked up using Microformats:</p>
					<pre class="SidebarCodeFirst">&lt;div <code class="CodeColor">class="h-card"</code>&gt;<br/>  &lt;p <code class="CodeColor">class="p-name"</code>&gt;Cindy Sherman&lt;/p&gt;<br/>  &lt;p <code class="CodeColor">class="p-tel"</code>&gt;555.999-2456&lt;/p&gt;<br/>&lt;/div&gt;</pre>
					<p class="SidebarListVariableTerm">Microdata</p>
					<p class="SidebarListVariable"><a href="http://html.spec.whatwg.org/multipage/microdata.html"><span class="URL-Email--Sidebar-">html.spec.whatwg.org/multipage/microdata.html</span></a></p>
					<p class="SidebarListItem_cont">Microdata<a id="_idIndexMarker714"></a><a id="_idIndexMarker715"></a> is a <a id="_idIndexMarker716"></a>WHATWG (Web Hypertext Application Technology Working Group) HTML standard that uses microdata-specific attributes (<span class="Literal-Sidebar">itemscope</span>, <span class="Literal-Sidebar">itemtype</span>, <span class="Literal-Sidebar">itemprop</span>, <span class="Literal-Sidebar">itemid</span>, and <span class="Literal-Sidebar">itemref</span>) to define objects and their properties. Here is an example of a person defined using Microdata. </p>
					<pre class="SidebarCodeFirst">&lt;div <code class="CodeColor">itemscope</code> <code class="CodeColor">itemtype="</code><a href="http://schema.org/Person"><code class="CodeColor">http://schema.org/Person</code></a><code class="CodeColor">"</code>&gt;<br/>  &lt;p <code class="CodeColor">itemprop="name"</code>&gt;Cindy Sherman&lt;/p&gt;<br/>  &lt;p <code class="CodeColor">itemprop="telephone"</code>&gt;555.999-2456&lt;/p&gt;<br/>&lt;/div&gt;</pre>
					<p class="SidebarListItem_cont">For more information on the WHATWG, see <span class="Xref--Sidebar-">Appendix D, From HTML+ to </span><span class="nobreak"><span class="Xref--Sidebar-">HTML5</span></span>.</p>
					<p class="SidebarListVariableTerm">RDFa and RDFa Lite</p>
					<p class="SidebarListVariable"><a href="http://www.w3.org/TR/xhtml-rdfa-primer/"><span class="URL-Email--Sidebar-">www.w3.org/TR/xhtml-rdfa-primer/</span></a></p>
					<p class="SidebarListVariable">The W3C <a id="_idIndexMarker717"></a>dropped Microdata from the <span class="nobreak">HTML5</span> spec in 2013, putting all of its structured data efforts behind RDFa (Resource Description Framework in Attributes) and its simplified subset, RDFa Lite. It uses specified attributes (<span class="Literal-Sidebar">vocab</span>, <span class="Literal-Sidebar">typeof</span>, <span class="Literal-Sidebar">property</span>, <span class="Literal-Sidebar">resource</span>, and <span class="Literal-Sidebar">prefix</span>) to enhance HTML content. Here is that same person marked up with RDFa:</p>
					<pre class="SidebarCodeFirst">&lt;div <code class="CodeColor">vocab="http://schema.org"</code> <code class="CodeColor">typeof="Person"</code>&gt;<br/>  &lt;p <code class="CodeColor">property="name"</code>&gt;Cindy Sherman&lt;/p&gt;<br/>  &lt;p <code class="CodeColor">property="telephone"</code>&gt;555.999-2456&lt;/p&gt;<br/>&lt;/div&gt;</pre>
					<p class="SidebarListVariableTerm">JSON-LD</p>
					<p class="SidebarListVariable"><a href="http://json-ld.org"><span class="URL-Email--Sidebar-">json-ld.org</span></a></p>
					<p class="SidebarListItem_cont"><a href="http://json-ld.org"><span class="URL-Email--Sidebar-"><span id="_idIndexMarker718"></span></span></a>JSON-LD (JavaScript Object Notation to serialize Linked Data) is a different animal in that it puts the object types and their properties in a script removed from the HTML markup. Here is the JSON-LD version of the same person:</p>
					<pre class="SidebarCodeFirst">&lt;script type="application/ld+json"&gt;<br/>{<br/>  <code class="CodeColor">"</code><code class="CodeColor">@context": "http://schema.org/"</code>,<br/>  <code class="CodeColor">"@type": "Person"</code>,<br/>  <code class="CodeColor">"name"</code>: "Cindy Sherman"<br/>  <code class="CodeColor">"telephone"</code>: "555.999-2456"<br/>}<br/>&lt;/script&gt;</pre>
					<p class="SidebarBody">It is possible to make up your own vocabulary for use on your sites, but it is more powerful to use a standardized vocabulary. The big search engines have created Schema.org, a mega-vocabulary that includes standardized properties for hundreds of “things” like blog posts, movies, books, products, reviews, people, organizations, and so on. <a id="_idIndexMarker719"></a>Schema.org vocabularies may be used with Microdata, RDFa, and JSON-LD (Microformats maintain their own separate vocabularies). You can see pointers to the Schema.org “Person” vocabulary in the preceding examples. For more information, the Schema.org “Getting Started” page provides an easy-to-read introduction: <a href="http://schema.org/docs/gs.html"><span class="URL-Email--Sidebar-">schema.org/docs/gs.html</span></a>.</p>
					<p class="SidebarBody">There is a lot more to say about structured data than I can fit in this book, but once you get the basic semantics of HTML down, it is definitely a topic worthy of further exploration.</p>
				</div>
			</div>
			<h1 id="_idParaDest-48" class="HeadA"><a id="_idTextAnchor069"></a>Improving Accessibility with ARIA</h1>
			<p class="body">As web designers, <a id="_idIndexMarker720"></a><a id="_idIndexMarker721"></a><a id="_idIndexMarker722"></a><a id="_idIndexMarker723"></a>we must always consider the experience of users with assistive technologies for navigating pages and interacting with web applications. Your users may be listening to the content on the page read aloud by a screen reader and using keyboards, joysticks, voice commands, or other non-mouse input devices to navigate through the page. </p>
			<p class="body">Many HTML elements are plainly understood when you look at (or read) only the HTML source. Elements like the title, headings, lists, images, and tables have implicit meanings in the context of a page, but generic elements like <span class="Literal-fc">div</span> and <span class="Literal-fc">span</span> lack the semantics necessary to be interpreted by an assistive device. In <a id="_idIndexMarker724"></a>rich web applications, especially those that rely heavily on JavaScript and <a id="_idIndexMarker725"></a><a id="_idIndexMarker726"></a>AJAX (see <span class="Xref">Note</span>), the markup alone does not provide enough clues as to how elements are being used or whether a form control is currently selected, required, or in some other state.</p>
			<div>
				<div id="_idContainer266" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">AJAX (Asynchronous JavaScript and XML) is explained in a sidebar in <a href="lwd5_chapter22.xhtml#_idTextAnchor280"><span class="Xref--Sidebar-">Chapter </span><span class="Xref--Sidebar-">22</span><span class="Xref--Sidebar-">, Using JavaScript</span></a>.</p>
				</div>
			</div>
			<p class="body">Fortunately, we have <span class="FirstTerm">ARIA</span> (<span class="FirstTerm">Accessible Rich Internet Applications</span>), a standardized set of <a id="_idIndexMarker727"></a>attributes for making pages easier to navigate and interactive features easier to use. The specification was created and is maintained by a Working Group of the <a id="_idIndexMarker728"></a>Web Accessibility Initiative (WAI), which is why you also hear it referred to as <a id="_idIndexMarker729"></a>WAI-ARIA. ARIA defines <span class="FirstTerm">roles</span>, <span class="FirstTerm">states</span>, and <span class="FirstTerm">properties</span> that developers can add to markup and scripts to provide richer semantic information. </p>
			<h2 class="HeadB">Roles</h2>
			<p class="body"><span class="FirstTerm">Roles</span> <a id="_idIndexMarker730"></a>describe an element’s function or purpose in the context of the document. Some roles <a id="_idIndexMarker731"></a><a id="_idIndexMarker732"></a><a id="_idIndexMarker733"></a><a id="_idIndexMarker734"></a><a id="_idIndexMarker735"></a>include <span class="Literal-fc">alert</span>, <span class="Literal-fc">button</span>, <span class="Literal-fc">dialog</span>, <span class="Literal-fc">slider</span>, and <span class="Literal-fc">menubar</span>, to name only a few. For example, as we saw earlier, you can turn an unordered list into a tabbed menu of options using style sheets, but what if you can’t <em class="Emphasis">see</em> that it is styled that way? Adding <span class="Literal-fc">role="toolbar"</span> to the list makes its purpose clear:</p>
			<pre class="CodeFirst">&lt;ul id="tabs" <code class="CodeColor">role="toolbar"</code>&gt;<br/>  &lt;li&gt;A-G&lt;/li&gt;<br/>  &lt;li&gt;H-O&lt;/li&gt;<br/>  &lt;li&gt;P-T&lt;/li&gt;<br/>  &lt;li&gt;U-Z&lt;/li&gt;<br/>&lt;/ul&gt;</pre>
			<p class="body">Here’s another example that reveals that the “status” <span class="Literal-fc">div</span> is used as an alert message:</p>
			<pre class="CodeFirst">&lt;div id="status" <code class="CodeColor">role="alert"</code>&gt;You are no longer connected to the server.&lt;/div&gt;</pre>
			<p class="body">Some roles describe “landmarks” that help readers find their way through the document, such as <span class="Literal-fc">navigation</span>, <span class="Literal-fc">banner</span>, <span class="Literal-fc">contentinfo</span>, <span class="Literal-fc">complementary</span>, and <span class="Literal-fc">main</span>. You may notice that some of these sound similar to the page-structuring elements that were added in <span class="nobreak">HTML5</span>, and that’s no coincidence. One of the benefits of having improved semantic section elements is that they can be used as landmarks, replacing <span class="Literal-fc">&lt;div id=</span>"<span class="Literal-fc">main</span>"<span class="Literal-fc"> role=</span>"<span class="Literal-fc">main</span>"<span class="Literal-fc">&gt;</span> with <span class="Literal-fc">main</span>.</p>
			<p class="body">Most current browsers already recognize the implicit roles of the new elements, but some developers explicitly add ARIA roles until all browsers comply. The sectioning elements pair with the ARIA landmark roles in the following way:</p>
			<pre class="CodeFirst">&lt;nav <code class="CodeColor">role="navigation"</code>&gt;</pre>
			<pre class="CodeFirst">&lt;header <code class="CodeColor">role="banner"</code>&gt; <span class="Replaceable">(</span>see <span class="Xref--Sidebar-">Note</span><span class="Replaceable">)</span></pre>
			<pre class="CodeFirst">&lt;main <code class="CodeColor">role="main"</code>&gt;</pre>
			<pre class="CodeFirst">&lt;aside <code class="CodeColor">role="complementary"</code>&gt;</pre>
			<pre class="CodeFirst">&lt;footer <code class="CodeColor">role="contentinfo"</code>&gt;</pre>
			<div>
				<div id="_idContainer267" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">The banner role is used when the <span class="Literal-Sidebar">header</span> applies to only the whole page, not just a section or article.</p>
				</div>
			</div>
			<h2 class="HeadB">States and Properties</h2>
			<p class="body">ARIA also <a id="_idIndexMarker736"></a><a id="_idIndexMarker737"></a>defines a long list of states and properties that apply to interactive elements such as form widgets and dynamic content. States and properties are indicated with attributes prefixed with <span class="Literal-fc">aria-</span>, such as <span class="Literal-fc">aria-disabled</span>, <span class="Literal-fc">aria-describedby</span>, and many more. </p>
			<p class="body">The difference between a state and property is subtle. For properties, the value of the attribute is more likely to be stable, such as <span class="Literal-fc">aria-labelledby</span>, which associates labels with their respective form controls, or <span class="Literal-fc">aria-haspopup</span>, which indicates the element has a related pop-up menu. States have values that are more likely to be changed as the user interacts with the element, such as <span class="Literal-fc">aria-selected</span>. </p>
			<div>
				<div id="_idContainer268" class="sidebar">
					<h5 class="SidebarSeries">SPEC TIP</h5>
					<p class="SidebarBody">The W3C HTML specification now lists which ARIA roles and properties apply in the descriptions of every HTML element (<a href="http://www.w3.org/TR/html52/"><span class="URL-Email--Sidebar-">www.w3.org/TR/html52/</span></a>).</p>
				</div>
			</div>
			<h2 class="HeadB">For Further Reading</h2>
			<p class="body">Obviously, this is not enough ARIA coaching to allow you to start confidently using it today, but it should give you a good feel for how it works and its potential value. When you are ready to dig in and take your skills to a professional level, here is some recommended reading:</p>
			<p class="ListVariableTerm">The WAI-ARIA <a id="_idIndexMarker738"></a>Working Draft (<a href="https://www.w3.org/TR/wai-aria-1.1/"><span class="URL-Email">www.w3.org/TR/wai-aria-1.1/</span></a>)</p>
			<p class="ListVariable">This is the current Working Draft of the specification as of this writing.</p>
			<p class="ListVariableTerm">ARIA in HTML (<a href="http://www.w3.org/TR/html-aria/"><span class="URL-Email">www.w3.org/TR/html-aria/</span></a>)</p>
			<p class="ListVariable">This W3C Working Draft helps developers use ARIA attributes with HTML correctly. It features a great list of every HTML element, whether it has an implicit role (in which ARIA should <em class="Emphasis">not</em> be used), and what roles, states, and properties apply.  </p>
			<p class="ListVariableTerm">ARIA Resources at MDN Web Docs (<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"><span class="URL-Email">developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA</span></a>)</p>
			<p class="ListVariable">This site features lots of links to ARIA-related and up-to-date resources. It is a good starting point for exploration.</p>
			<p class="ListVariableTerm"><span class="nobreak">HTML5</span> Accessibility (<a href="http://www.html5accessibility.com"><span class="URL-Email">www.html5accessibility.com</span></a>)</p>
			<p class="ListVariable">This site tests which new <span class="nobreak">HTML5</span> features are accessibly supported by major browsers. </p>
			<h1 id="_idParaDest-49" class="HeadA"><a id="_idTextAnchor070"></a>Character Escapes</h1>
			<p class="body">There’s just <a id="_idIndexMarker739"></a><a id="_idIndexMarker740"></a>one more text-related topic before we close out this chapter. The section title makes it sound like someone left the gate open and all the characters got out. The real meaning is more mundane, albeit useful to know.</p>
			<p class="body">You already know that as a <a id="_idIndexMarker741"></a>browser parses an HTML document, when it runs into a <span class="Literal-fc">&lt;</span> symbol, it interprets it as the beginning of a tag. But what if you just need a less-than symbol in your text? Characters that might be misinterpreted as code need to be <span class="FirstTerm">escaped</span> in the source document. Escaping means that instead of typing in the character itself, you represent it by its numeric or <a id="_idIndexMarker742"></a>named <span class="FirstTerm">character entity reference</span>. When the browser sees the character reference, it substitutes the proper character in that spot when the page is displayed.</p>
			<p class="body">There are two ways of referring to (escaping) a specific character: </p>
			<ul>
				<li class="ListBullet">Using a predefined abbreviated name for the character (called <a id="_idIndexMarker743"></a>a <span class="FirstTerm">named entity</span>; see <span class="Xref">Note</span>).<div id="_idContainer269" class="note"><h5 class="noteHeader">Note</h5><p class="note">HTML defines hundreds of named entities as part of the markup language, which is to say you can’t make up your own entity.</p></div></li>
				<li class="ListBullet">Using an assigned numeric value that corresponds to its position in a coded<a id="_idIndexMarker744"></a> character set (<span class="FirstTerm">numeric entity</span>). Numeric values may be in decimal or hexadecimal format.</li>
			</ul>
			<p class="body">All character references begin with<a id="_idIndexMarker745"></a><a id="_idIndexMarker746"></a><a id="_idIndexMarker747"></a><a id="_idIndexMarker748"></a> an <span class="Literal-fc">&amp;</span> (ampersand) and end with a <span class="Literal-fc">;</span> (semicolon). </p>
			<p class="body">An example should make this clear. I’d like to use a less-than symbol in my text, so I must use the named entity (<span class="Literal-fc">&amp;lt;</span>) or its numeric equivalent (<span class="Literal-fc">&amp;#060;</span>) where I want the symbol to appear (<span class="Xref-Figure">Figure 5-17</span>):</p>
			<pre class="CodeFirst">&lt;p&gt;3 tsp. <code class="CodeColor">&amp;lt;</code> 3 Tsp.&lt;/p&gt;</pre>
			<p class="body">or:</p>
			<pre class="CodeFirst">&lt;p&gt;3 tsp. <code class="CodeColor">&amp;#060;</code> 3 Tsp.&lt;/p&gt;</pre>
			<div>
				<figure id="_idContainer271" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_0517-green.png" alt="" width="809" height="123"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-17.</span> The special character is substituted for the character reference when the document is displayed in the browser.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">When to Escape Characters</h2>
			<p class="body">There are a few instances in which you may need or want to use a character reference.</p>
			<h3 class="HeadC">HTML syntax characters</h3>
			<p class="body">The &lt;, &gt;, &amp;,  ", and ' characters <a id="_idIndexMarker749"></a><a id="_idIndexMarker750"></a><a id="_idIndexMarker751"></a><a id="_idIndexMarker752"></a><a id="_idIndexMarker753"></a><a id="_idIndexMarker754"></a><a id="_idIndexMarker755"></a><a id="_idIndexMarker756"></a>have special syntax meaning in HTML, and may be misinterpreted as code. Therefore, the W3C recommends that you escape &lt;, &gt;, and &amp; characters in content. If attribute values contain single or double quotes, escaping the quote characters in the values is advised. Quote marks are fine in the content and do not need to be escaped. (See <span class="Xref-Figure">Table 5-2</span>.)</p>
			<table id="table002-3" class="Table">
				<colgroup>
					<col/>
					<col/>
					<col/>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Head" colspan="5">
							<p class="TableTitle"><span class="Table-Label">Table 5-2.</span> Syntax <a id="_idIndexMarker757"></a>characters and their character references</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Character</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Description</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Entity name</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Decimal no.</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Hexadecimal no.</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">&lt;</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Less-than symbol </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;lt;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#060;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x3C;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">&gt;</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Greater-than symbol </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;gt;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#062;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x3E;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">"</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Quotation mark</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;quot;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#034;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x22;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody"><span class="Literal-fc">'</span></p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Apostrophe</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;apos;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#039;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x27;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">&amp;</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Ampersand</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;amp;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#038;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x26;</pre>
						</td>
					</tr>
				</tbody>
			</table>
			<div>
				<div id="_idContainer272" class="sidebar">
					<h5 class="SidebarSeries">MARKUP Tip</h5>
					<p class="SidebarBody">These character entities are useful when you need to show an example of HTML markup on a web page.</p>
				</div>
			</div>
			<h3 class="HeadC">Invisible or ambiguous characters</h3>
			<p class="body">Some characters have <a id="_idIndexMarker758"></a><a id="_idIndexMarker759"></a>no graphic display and are difficult to see in the markup (<span class="Xref-Figure">Table 5-3</span>). These include the <a id="_idIndexMarker760"></a>non-breaking space (<span class="Literal-fc">&amp;nbsp;</span>), which is used to ensure that a line doesn’t break between two words. So, for instance, if I mark up my name like this:</p>
			<pre class="CodeFirst">Jennifer<code class="CodeColor">&amp;nbsp;</code>Robbins</pre>
			<p class="body">I can be sure that my first and last names will always stay together on a line. Another use for non-breaking spaces is to separate digits in a long number, such as 32 000 000. </p>
			<p class="body">Zero-width <a id="_idIndexMarker761"></a>space can be placed in languages that do not use spaces between words to indicate where the line should break. A <a id="_idIndexMarker762"></a>zero-width joiner is a non-printing space that causes neighboring characters to display in their connected forms (common in Arabic and Indic languages). <a id="_idIndexMarker763"></a>Zero-width non-joiners prevent neighboring characters from joining to form ligatures or other connected <a id="_idIndexMarker764"></a><a id="_idIndexMarker765"></a>forms.</p>
			<table id="table003" class="Table">
				<colgroup>
					<col/>
					<col/>
					<col/>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Head" colspan="5">
							<p class="TableTitle"><span class="Table-Label">Table 5-3.</span> Invisible characters and their character references</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Character</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Description</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Entity name</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Decimal no.</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Hexadecimal no.</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">(non-printing)</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Non-breaking space</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;nbsp;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#160;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#xA0;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">(non-printing)</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">En space</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;ensp;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8194;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2002;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">(non-printing)</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Em space</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;emsp;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8195;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2003;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">(non-printing)</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Zero-width space</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">(none)</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8203;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x200B;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">(non-printing)</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Zero-width non-joiner</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;zwnj;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8204;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x200C;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">(non-printing)</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Zero-width joiner</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;zwj;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8205;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x200D;</pre>
						</td>
					</tr>
				</tbody>
			</table>
			<h3 class="HeadC">Input limitations</h3>
			<p class="body">If your keyboard or editing software does not include the character you need (or if you simply can’t find it), you can use a character entity to make sure you get the character you want. The W3C doesn’t endorse this practice, so use the proper character in your source if you are able. <span class="Xref-Figure">Table 5-4</span> lists some special characters that may be less straightforward to type into the source.</p>
			<table id="table004" class="Table">
				<colgroup>
					<col/>
					<col/>
					<col/>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Head" colspan="5">
							<p class="TableTitle"><span class="Table-Label">Table 5-4.</span> Special characters and their character references</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Character</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Description</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Entity name</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Decimal no.</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Hexadecimal no.</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">‘</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Left curly<a id="_idIndexMarker766"></a> single quote</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;lsquo;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8216;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2018;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">’</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Right curly single quote</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;rsquo;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8217;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2019;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">“</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Left curly double quote</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;ldquo;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8220;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x201C;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">”</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Right curly double quote</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;rdquo;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8221;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x201D;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">...</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody"><a id="_idIndexMarker767"></a>Horizontal<a id="_idIndexMarker768"></a> ellipsis</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;hellip;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8230;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2026;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">© </p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody"><a id="_idIndexMarker769"></a><a id="_idIndexMarker770"></a>Copyright </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;copy; </pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#169;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#xA9;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">®</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Registered <a id="_idIndexMarker771"></a><a id="_idIndexMarker772"></a>trademark </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;reg; </pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#174;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#xAE;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">™</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody"><a id="_idIndexMarker773"></a><a id="_idIndexMarker774"></a>Trademark </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;trade;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8482;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2026;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">£</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody"><a id="_idIndexMarker775"></a><a id="_idIndexMarker776"></a>Pound  </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;pound; </pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#163;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#xA3;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">¥ </p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody"><a id="_idIndexMarker777"></a><a id="_idIndexMarker778"></a>Yen </p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;yen; </pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#165;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#xA5;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">€</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody"><a id="_idIndexMarker779"></a><a id="_idIndexMarker780"></a>Euro</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;euro;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8364;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x20AC;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">–</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">En<a id="_idIndexMarker781"></a> <a id="_idIndexMarker782"></a>dash</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;ndash;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8211;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2013;</pre>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<p class="TableBody">—</p>
						</td>
						<td class="Table Table-Body">
							<p class="TableBody">Em<a id="_idIndexMarker783"></a> <a id="_idIndexMarker784"></a>dash</p>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;mdash;</pre>
						</td>
						<td class="Table Table-Body">
							<pre class="cellCode">&amp;#8212;</pre>
						</td>
						<td class="Table Table-Body-Right">
							<pre class="cellCode">&amp;#x2014;</pre>
						</td>
					</tr>
				</tbody>
			</table>
			<p class="body">A complete list of HTML named entities and their <a id="_idIndexMarker785"></a><a id="_idIndexMarker786"></a>Unicode code-points can be found as part of the <span class="nobreak">HTML5</span> specification at<a href="https://www.w3.org/TR/html5/syntax.html#named-character-references"> <span class="URL-Email">www.w3.org/TR/html5/syntax.html#named-character-references</span></a>. For a more user-friendly listing of named and numerical entities, I recommend this archived page at the Web Standards Project: <a href="http://www.webstandards.org/learn/reference/charts/entities"><span class="URL-Email">www.webstandards.org/learn/reference/charts/entities</span></a>.</p>
			<h1 id="_idParaDest-50" class="HeadA"><a id="_idTextAnchor071"></a>Putting It All Together</h1>
			<p class="body">So far, you’ve learned how to mark up elements, and you’ve met all of the HTML elements for adding structure and meaning to text content. Now it’s just a matter of practice. <span class="Xref-Figure">Exercise 5-3</span> gives you an opportunity to try out everything we’ve covered so far: document structure elements, grouping (block) elements, phrasing (inline) elements, sectioning elements, and character entities. Have fun!</p>
			<div>
				<div id="_idContainer279" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 5-3.</span> The Black Goose Bistro News page</h6>
					<p class="SidebarBody">Now that you’ve been introduced to all of the text elements, you can put them to work by marking up the News page for the Black Goose Bistro site. Get the starter text and finished markup files at <a href="http://learningwebdesign.com/5e/materials"><span class="URL-Email--Sidebar-">learningwebdesign.com/5e/materials</span></a>. Once you have the text, follow the instructions listed after it. The resulting page is shown in <span class="Xref-Figure">Figure 5-18</span>.</p>
					<div>
						<div id="_idContainer273" class="sidebar">
							<h5 class="SidebarSeries">Markup TIP</h5>
							<p class="SidebarBody">Remember that indenting each hierarchical level in your HTML source consistently makes the document easier to scan and update later.</p>
						</div>
					</div>
					<div>
						<div id="_idContainer274" class="note">
							<h5 class="noteHeader">Note</h5>
							<p class="note">The “Low and Slow” paragraph is already marked up with the inline elements from <span class="Xref-Figure">Exercise 5-2</span>).</p>
						</div>
					</div>
					<pre class="SidebarCodeFirst">The Black Goose Bistro News</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Home</pre>
					<pre class="SidebarCode">Menu</pre>
					<pre class="SidebarCode">News</pre>
					<pre class="SidebarCode">Contact</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Summer Menu Items</pre>
					<pre class="SidebarCode">posted by BGB, June 18, 2017</pre>
					<pre class="SidebarCode">Our chef has been busy putting together the perfect menu for the summer months. Stop by to try these appetizers and main courses while the days are still long.</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Appetizers</pre>
					<pre class="SidebarCode">Black bean purses</pre>
					<pre class="SidebarCode">Spicy black bean and a blend of Mexican cheeses wrapped in sheets of phyllo and baked until golden. $3.95</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Southwestern napoleons with lump crab -- new item!</pre>
					<pre class="SidebarCode">Layers of light lump crab meat, bean and corn salsa, and our handmade flour tortillas. $7.95</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Main courses</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Shrimp sate kebabs with peanut sauce</pre>
					<pre class="SidebarCode">Skewers of shrimp marinated in lemongrass, garlic, and fish sauce then grilled to perfection. Served with spicy peanut sauce and jasmine rice. $12.95</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Jerk rotisserie chicken with fried plantains -- new item!</pre>
					<pre class="SidebarCode">Tender chicken slow-roasted on the rotisserie, flavored with spicy and fragrant jerk sauce and served with fried plantains and fresh mango. $12.95</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Low and Slow</pre>
					<pre class="SidebarCode">posted by BGB, November 15, 2016</pre>
					<pre class="SidebarCode">&lt;p&gt;This week I am &lt;em&gt;extremely&lt;/em&gt; excited about a new cooking technique called &lt;dfn&gt;&lt;i&gt;sous vide&lt;/i&gt;&lt;/dfn&gt;. In &lt;i&gt;sous vide&lt;/i&gt; cooking, you submerge the food (usually vacuum-sealed in plastic) into a water bath that is precisely set to the target temperature you want the food to be cooked to. In his book, &lt;cite&gt;Cooking for Geeks&lt;/cite&gt;, Jeff Potter describes it as &lt;q&gt;ultra-low-temperature poaching.&lt;/q&gt;&lt;/p&gt;</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">&lt;p&gt;Next month, we will be serving &lt;b&gt;&lt;i&gt;Sous Vide&lt;/i&gt; Salmon with Dill Hollandaise&lt;/b&gt;. To reserve a seat at the chef table, contact us before &lt;time datetime="20161130"&gt;November 30&lt;/time&gt;.&lt;/p&gt;</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">Location: Baker’s Corner, Seekonk, MA</pre>
					<pre class="SidebarCode">Hours: Tuesday to Saturday, 11am to 11pm</pre>
					<pre class="SidebarCode"> </pre>
					<pre class="SidebarCode">All content copyright 2017, Black Goose Bistro and Jennifer Robbins</pre>
					<div>
						<figure id="_idContainer276" class="figWCaption">
							<p class="Figure_Holder"><img src="image/lwd5_0518_exercise3.png" alt="" width="962" height="1003"/></p>
							<figcaption class="FigureCaption"><span class="FigureLabel">Figure 5-18.</span> The finished menu page.</figcaption>
						</figure>
					</div>
					<div>
						<div id="_idContainer277" class="sidebar">
							<h5 class="SidebarSeries">Markup tips</h5>
							<ul>
								<li class="SidebarListBullet">Choose the element that best fits the meaning of the selected text.</li>
								<li class="SidebarListBullet">Don’t forget to close elements with closing tags.</li>
								<li class="SidebarListBullet">Put all attribute values in quotation marks for clarity.</li>
								<li class="SidebarListBullet">“Copy and paste” is your friend when adding the same markup to multiple elements. Just be sure what you copied is correct before you paste it throughout the document.</li>
							</ul>
						</div>
					</div>
					<ol>
						<li class="SidebarListNumber">Start by adding the DOCTYPE declaration to tell browsers this is an <span class="nobreak">HTML5</span> document.</li>
						<li class="SidebarListNumber">Add all the document structure elements first (<span class="Literal-Sidebar">html</span>, <span class="Literal-Sidebar">head</span>, <span class="Literal-Sidebar">meta</span>, <span class="Literal-Sidebar">title</span>, and <span class="Literal-Sidebar">body</span>). Give the document the title “The Black Goose Bistro News.”</li>
						<li class="SidebarListNumber">The first thing we’ll do is identify the top-level heading and the list of links as the header for the document by wrapping them in a <span class="Literal-Sidebar">header</span> element (don’t forget the closing tag). Within the header, the headline should be an <span class="Literal-Sidebar">h1</span> and the list of links should be an unordered list (<span class="Literal-Sidebar">ul</span>). Don’t worry about making the list items links; we’ll get to linking in the next chapter. Give the list more meaning by identifying it as the primary navigation for the site (<span class="Literal-Sidebar">nav</span>). </li>
						<li class="SidebarListNumber">The News page has two posts titled “Summer Menu Items” and “Low and Slow.” Mark up each one as an article. </li>
						<li class="SidebarListNumber">Now we’ll get the first article into shape. Let’s create a header for this article that contains the heading (<span class="Literal-Sidebar">h2</span> this time because we’ve moved down in the document hierarchy) and the publication information (<span class="Literal-Sidebar">p</span>). Identify the publication date for the article with the <span class="Literal-Sidebar">time</span> element, just as in <span class="Xref-Figure">Exercise 5-2</span>. </li>
						<li class="SidebarListNumber">The content after the header is a simple paragraph. However, the menu has some interesting things going on. It is divided into two conceptual sections (Appetizers and Main Courses), so mark those up as section elements. Be careful that the final closing section tag (<span class="Literal-Sidebar">&lt;/section&gt;</span>) appears before the closing article tag (<span class="Literal-Sidebar">&lt;/article&gt;</span>) so the elements are nested correctly and don’t overlap. Finally, let’s identify the sections with <span class="Literal-Sidebar">id</span> attributes. Name the first one “appetizers” and the second “maincourses.”</li>
						<li class="SidebarListNumber">With our sections in place, now we can mark up the content. We’re down to <span class="Literal-Sidebar">h3</span> for the headings in each section. Choose the most appropriate list elements to describe the menu item names and their descriptions. Mark up the lists and each item within the lists.</li>
						<li class="SidebarListNumber">Now we can add a few fine details. <em class="Emphasis">Classify</em> each price as “price” using <span class="Literal-Sidebar">span</span> elements. </li>
						<li class="SidebarListNumber">Two of the dishes are new items. Change the double hyphens to an em dash character and mark up “new item!” as “strongly important.” Classify the title of each new dish as “newitem” (use the existing <span class="Literal-Sidebar">dt</span> element; there is no need to add a <span class="Literal-Sidebar">span</span> this time). This allows us to target menu titles with the “newitem” class and style them differently than other menu items.</li>
						<li class="SidebarListNumber">That takes care of the first article. The second article is already mostly marked up from the previous exercise, but you should mark up the header with the appropriate heading and publication date information.</li>
						<li class="SidebarListNumber">So far, so good, right? Now make the remaining content that applies to the whole page a <span class="Literal-Sidebar">footer</span>. Mark each line of content within the footer as a paragraph. </li>
						<li class="SidebarListNumber">Let’s give the location and hours information some context by putting them in a <span class="Literal-Sidebar">div</span> named “about.” Make the labels “Location” and “Hours” appear on a line by themselves by adding line breaks after them. Mark up the hours with the <span class="Literal-Sidebar">time</span> element (you don’t need the date or time zone portions).</li>
						<li class="SidebarListNumber">Finally, copyright information is typically “small print” on a document, so mark it up accordingly. As the final touch, add a copyright symbol after the word “copyright” using the keyboard or the <span class="Literal-Sidebar">&amp;copy;</span> character entity.</li>
					</ol>
					<p class="SidebarBody">Save the as <span class="Filename--Sidebar-">bistro_news.html</span>, and check your page in a modern browser. You can also upload it to <a href="http://validator.nu"><span class="URL-Email--Sidebar-">validator.nu</span></a> and make sure it is valid (it’s a great way to spot mistakes). How did you do?</p>
					<div>
						<div id="_idContainer278" class="sidebar">
							<h5 class="SidebarTitle">Want More Practice?</h5>
							<p class="SidebarBody">Try marking up your own résumé. Start with the raw text and add document structure elements, content grouping elements, and inline elements as we’ve done in <span class="Xref-Figure">Exercise 5-3</span>. If you don’t see an element that matches your information just right, try creating one using a <span class="Literal-Sidebar">div</span> or a <span class="Literal-Sidebar">span</span>.</p>
						</div>
					</div>
				</div>
			</div>
			<h1 id="_idParaDest-51" class="HeadA"><a id="_idTextAnchor072"></a>Test Yourself</h1>
			<p class="body">Were you paying attention? Here is a rapid-fire set of questions to find out. Find the answers in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix </span><span class="Xref">A</span></a>.</p>
			<ol>
				<li class="ListNumber" value="1">Add the markup to insert a thematic break between these paragraphs:<pre class="listCode">&lt;p&gt;People who know me know that I love to cook.&lt;/p&gt;</pre><pre class="listCode">&lt;p&gt;I've created this site to share some of my favorite recipes.&lt;/p&gt; </pre></li>
				<li class="ListNumber">What’s the difference between a <span class="Literal-fc">blockquote</span> and a <span class="Literal-fc">q</span> element? </li>
				<li class="ListNumber">Which element displays whitespace exactly as it is typed into the source document?</li>
				<li class="ListNumber">What is the difference between a <span class="Literal-fc">ul</span> and an <span class="Literal-fc">ol</span> element?</li>
				<li class="ListNumber">How do you remove the bullets from an unordered list? (Be general, not specific.)</li>
				<li class="ListNumber">What element would you use to mark up “W3C” and provide its full name (World Wide Web Consortium)? Can you write out the complete markup?</li>
				<li class="ListNumber">What is the difference between <span class="Literal-fc">dl</span> and <span class="Literal-fc">dt</span>?</li>
				<li class="ListNumber">What is the difference between <span class="Literal-fc">id</span> and <span class="Literal-fc">class</span>?</li>
				<li class="ListNumber">What is the difference between an <span class="Literal-fc">article</span> and a <span class="Literal-fc">section</span>?</li>
			</ol>
			<h1 id="_idParaDest-52" class="HeadA"><a id="_idTextAnchor073"></a>Element Review: Text Elements</h1>
			<p class="body">The global attributes apply to <a id="_idIndexMarker787"></a>all text elements. Additional attributes are listed under their respective elements. </p>
			<div>
				<div id="_idContainer280" class="contents">
					<table id="table005" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head" colspan="2">
									<p class="TableHeader">Page sections</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">address</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Author <a id="_idIndexMarker788"></a>contact information</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">article</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Self-contained<a id="_idIndexMarker789"></a> content</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">aside</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Tangential <a id="_idIndexMarker790"></a>content (sidebar)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">footer</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Related<a id="_idIndexMarker791"></a> content </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">header</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Introductory <a id="_idIndexMarker792"></a>content </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">nav</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Primary <a id="_idIndexMarker793"></a>navigation </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">section</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Conceptually related <a id="_idIndexMarker794"></a>group of content</p>
								</td>
							</tr>
						</tbody>
					</table>
					<table id="table006" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head" colspan="2">
									<p class="TableHeader">Heading content</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">h1...h6</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Headings,<a id="_idIndexMarker795"></a><a id="_idIndexMarker796"></a><a id="_idIndexMarker797"></a><a id="_idIndexMarker798"></a><a id="_idIndexMarker799"></a><a id="_idIndexMarker800"></a> levels 1 through 6</p>
								</td>
							</tr>
						</tbody>
					</table>
					<table id="table007" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head" colspan="2">
									<p class="TableHeader">Grouping content elements and attributes</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">blockquote</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker801"></a>Blockquote</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">cite</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">The <a id="_idIndexMarker802"></a>URL of the cited content</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">div</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Generic <a id="_idIndexMarker803"></a>division</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">figure</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Related <a id="_idIndexMarker804"></a>image or resource</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">figcaption</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Text<a id="_idIndexMarker805"></a> description of a figure</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">hr</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Paragraph-level <a id="_idIndexMarker806"></a>thematic break (horizontal rule)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">main</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Primary <a id="_idIndexMarker807"></a>content area of page or app</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">p</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker808"></a>Paragraph</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">pre</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Preformatted text</p>
								</td>
							</tr>
						</tbody>
					</table>
					<table id="table008" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head" colspan="2">
									<p class="TableHeader">List elements and attributes </p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">dd</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker809"></a>Definition </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">dl</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Definition<a id="_idIndexMarker810"></a> list</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">dt</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker811"></a>Term</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">li</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody">List <a id="_idIndexMarker812"></a>item (for <span class="Literal-Sidebar">ul</span> and <span class="Literal-Sidebar">ol</span>)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">value</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">Provides a <a id="_idIndexMarker813"></a>number for an <span class="Literal-Sidebar">li</span> in an <span class="Literal-Sidebar">ol</span></p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">ol</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody">Ordered<a id="_idIndexMarker814"></a> list</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="CellCode-indent">reversed</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody-Indent">Numbers<a id="_idIndexMarker815"></a> the list in reverse order</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">start</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">Provides <a id="_idIndexMarker816"></a>the starting number for the list</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">ul</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Unordered<a id="_idIndexMarker817"></a> list</p>
								</td>
							</tr>
						</tbody>
					</table>
					<table id="table009" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head" colspan="2">
									<p class="TableHeader">Breaks</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">br</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker818"></a>Line<a id="_idIndexMarker819"></a> break</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">wbr</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Word<a id="_idIndexMarker820"></a> break</p>
								</td>
							</tr>
						</tbody>
					</table>
					<table id="table010" class="Table">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head" colspan="2">
									<p class="TableHeader">Phrasing elements and attributes</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">abbr</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker821"></a>Abbreviation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">b</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Added<a id="_idIndexMarker822"></a> visual attention (bold)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">bdi </pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Bidirectional<a id="_idIndexMarker823"></a> isolation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">bdo</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Bidirectional<a id="_idIndexMarker824"></a> override</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">cite</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody"><a id="_idIndexMarker825"></a>Citation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">code</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Code <a id="_idIndexMarker826"></a>sample</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">data</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Machine-readable <a id="_idIndexMarker827"></a>equivalent</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">del</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody">Deleted <a id="_idIndexMarker828"></a>text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="CellCode-indent">cite</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody-Indent">The URL <a id="_idIndexMarker829"></a>of cited content.</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">datetime</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">Specifies <a id="_idIndexMarker830"></a>the date and time of a change</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">dfn</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Defining <a id="_idIndexMarker831"></a>term</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">em</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Stress <a id="_idIndexMarker832"></a>emphasis</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">i</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Alternate<a id="_idIndexMarker833"></a> voice (italic)</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">ins</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody">Inserted <a id="_idIndexMarker834"></a>text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="CellCode-indent">cite</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody-Indent">The URL <a id="_idIndexMarker835"></a>of cited content</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">datetime</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">Specifies<a id="_idIndexMarker836"></a> the date and time of a change</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">kbd</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Keyboard <a id="_idIndexMarker837"></a>input </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">mark</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Highlighted<a id="_idIndexMarker838"></a> text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">q</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody">Short<a id="_idIndexMarker839"></a> inline quotation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">cite</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">The URL <a id="_idIndexMarker840"></a>of the cited content</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">ruby</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Section containing<a id="_idIndexMarker841"></a> ruby text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">rp</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Parentheses<a id="_idIndexMarker842"></a> in ruby text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">rt</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Ruby<a id="_idIndexMarker843"></a> annotation</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">s</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Strike-through; <a id="_idIndexMarker844"></a>incorrect text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">samp</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Sample<a id="_idIndexMarker845"></a><a id="_idIndexMarker846"></a> output </p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">small</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Annotation; “<a id="_idIndexMarker847"></a>small print”</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">span</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Generic <a id="_idIndexMarker848"></a>phrase of text</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">strong</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Strong<a id="_idIndexMarker849"></a> importance</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">sub</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Subscript</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">sup</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Superscript</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="cellCode">time</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody">Machine-readable<a id="_idIndexMarker850"></a> time data</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Remove-bottom-rule Table-Body-Left">
									<pre class="CellCode-indent">datetime</pre>
								</td>
								<td class="Table Remove-bottom-rule Table-Body-Right">
									<p class="TableBody-Indent">Provides<a id="_idIndexMarker851"></a> machine readable date/time</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="CellCode-indent">pubdate</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody-Indent">Indicates <a id="_idIndexMarker852"></a>the time refers to publication</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<pre class="cellCode">u</pre>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Added<a id="_idIndexMarker853"></a> attention (underline)</p>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			<p class="body"><a id="_idTextAnchor074"></a></p>
		</div>
	</div>
</div>
</body>
</html>