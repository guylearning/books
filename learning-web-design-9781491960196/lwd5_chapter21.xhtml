<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer1384" class="ch21">
			<p id="_idParaDest-191" class="Epub-TOC-Part-Title"><strong class="Emphasis_Bold"><a id="_idTextAnchor265"></a>Part IV.</strong> JavaScript for Behavior</p>
		</div>
		<div id="_idContainer1385" class="ch21">
			<h1 class="partLabel"><a id="_idTextAnchor266"></a>IV</h1>
		</div>
		<div id="_idContainer1386" class="ch21">
			<h1 class="partTitle"><a id="_idTextAnchor267"></a>JavaScript for Behavior</h1>
		</div>
		<div id="_idContainer1387" class="ch21">
			<p id="_idParaDest-192" class="Epub-TOC-Chapter-Title"><a id="_idTextAnchor268"></a>21. Introduction to JavaScript</p>
		</div>
		<div id="_idContainer1388" class="ch21">
			<h1 class="chapterLabel">21</h1>
		</div>
		<div id="_idContainer1389" class="ch21">
			<h1 class="chapterTitle"><a id="_idTextAnchor269"></a><a id="_idTextAnchor270"></a>Introduction to JavaScript</h1>
		</div>
		<div id="_idContainer1390" class="chapTOCFrame" epub:type="toc">
			<p class="ChapterContentsTitle">In This Chapter</p>
			<p class="chapterContents">What JavaScript is and isn’t</p>
			<p class="chapterContents">Variables and arrays</p>
			<p class="chapterContents">if/else statements and loops</p>
			<p class="chapterContents">Native and custom functions</p>
			<p class="chapterContents">Browser objects</p>
			<p class="chapterContents">Event handlers</p>
		</div>
		<div id="_idContainer1416" class="ch21">
			<p class="body"><em class="Emphasis">by Mat Marquis</em></p>
			<p class="body">In this <a id="_idIndexMarker3792"></a>chapter, I’m going to introduce you to JavaScript. Now, it’s possible you’ve just recoiled a little bit, and I understand. We’re into full-blown “programming language” territory now, and that can be a little intimidating. I promise, it’s not so bad!</p>
			<p class="body">We’ll start by going over what JavaScript is—and what it isn’t—and discuss some of the ways it is used. The majority of the chapter is made up of an introduction to JavaScript syntax—variables, functions, operators, loops, stuff like that. Will you be coding by the end of the chapter? Probably not. But you will have a good head start toward understanding what’s going on in a script when you see one. I’ll finish up with a look at some of the ways you can manipulate the browser window and tie scripts to user actions such as clicking or submitting a form. </p>
			<h1 id="_idParaDest-193" class="HeadA"><a id="_idTextAnchor271"></a>What Is JavaScript?</h1>
			<p class="body">If you’ve <a id="_idIndexMarker3793"></a>made it this far in the book, you no doubt already know that JavaScript is a programming language that adds interactivity and custom behaviors to our sites. It is <a id="_idIndexMarker3794"></a>a <span class="FirstTerm">client-side scripting language</span>, which means it runs on the user’s machine and not on the server, as other web programming languages such as PHP and Ruby do. That means JavaScript (and the way we use it) is reliant on the browser’s capabilities and settings. It may not even be available at all, either because the user has chosen to turn it off or because the device doesn’t support it, which good developers keep in mind and plan for. JavaScript is also what is known <a id="_idIndexMarker3795"></a>as a <span class="FirstTerm">dynamic </span>and <span class="FirstTerm">loosely typed</span> programming language. Don’t sweat this description too much; I’ll explain what all that means later. </p>
			<p class="body">First, I want to establish that JavaScript is kind of misunderstood.</p>
			<h2 class="HeadB">What It Isn’t</h2>
			<p class="body">Right off the bat, the name is pretty confusing. Despite its name, JavaScript has nothing to do with Java. It was created by <a id="_idIndexMarker3796"></a><a id="_idIndexMarker3797"></a>Brendan Eich at Netscape in 1995 and originally named “LiveScript.” But Java was all the rage around that time, so for the sake of marketing, “LiveScript” became “JavaScript.” Or just “JS,” if you want to sound as cool as one possibly can while talking about JavaScript.</p>
			<p class="body">JS also has something of a bad reputation. For a while it was synonymous with all sorts of unscrupulous internet shenanigans—unwanted redirects, obnoxious pop-up windows, and a host of nebulous “security vulnerabilities,” just to name a few. There was a time when JavaScript allowed less reputable developers to do all these things (and worse), but modern browsers have largely caught on to the darker side of JavaScript development and locked it down. We shouldn’t fault JavaScript itself for that era, though. As the not-so-old cliché goes, “with great power comes great responsibility.” JavaScript has always allowed developers a tremendous amount of control over how pages are rendered and how our browsers behave, and it’s up to us to use that control in responsible ways.</p>
			<h2 class="HeadB">What It Is</h2>
			<p class="body">Now we know what JavaScript isn’t: it isn’t related to Java, and it isn’t a mustachioed villain lurking within your browser, wringing its hands and waiting to alert you to “hot singles in your area.” Let’s talk more about what JavaScript <em class="Emphasis">is</em>.</p>
			<div>
				<div id="_idContainer1391" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">JavaScript was standardized in 1996 by the <a id="_idIndexMarker3798"></a>European Computer Manufacturers Association (ECMA), which is why you sometimes hear it called <span class="FirstTerm--Sidebar-">ECMAScript</span>.</p>
				</div>
			</div>
			<p class="body">JavaScript is a lightweight but incredibly powerful scripting language. We most frequently encounter it through our browsers, but JavaScript has snuck into everything from native applications to PDFs to ebooks. Even web servers themselves can be powered by JavaScript.</p>
			<p class="body">As a <span class="FirstTerm">dynamic programming language</span>, JavaScript doesn’t need to be run through any form of compiler that interprets our human-readable code into something the browser can understand. The browser effectively reads the code the same way we do and interprets it on the fly.</p>
			<p class="body">JavaScript is also <span class="FirstTerm">loosely typed</span>. All this means is that we don’t necessarily have to tell JavaScript what a variable is. If we’re setting a variable to a value of 5, we don’t have to programmatically specify that variable as a number; that is, 5 is a number, and JavaScript recognizes it as such.</p>
			<p class="body">Now, you don’t necessarily need to memorize these terms to get started writing JS, mind you—to be honest, I didn’t. This is just to introduce you to a few of the terms you’ll hear often while you’re learning JavaScript, and they’ll start making more and more sense as you go along. This is also to provide you with conversation material for your next cocktail party! “Oh, me? Well, I’ve been really into loosely typed dynamic scripting languages lately.” People will just nod silently at you, which I think means you’re doing well conversationally. I don’t go to a lot of cocktail parties.</p>
			<h2 class="HeadB">What JavaScript Can Do</h2>
			<p class="body">Most commonly we’ll <a id="_idIndexMarker3799"></a>encounter JavaScript as a way to add interactivity to a page. Whereas the<a id="_idIndexMarker3800"></a> “structural” layer of a page is our HTML markup, and the “presentational” <a id="_idIndexMarker3801"></a>layer of a page is made up of CSS, the third “behavioral” layer is made up of our JavaScript. All of the elements, attributes, and text on a web page can be accessed by scripts using the <a id="_idIndexMarker3802"></a>DOM (Document Object Model), which we’ll be looking at in <a href="lwd5_chapter22.xhtml#_idTextAnchor280"><span class="Xref">Chapter </span><span class="Xref">22</span><span class="Xref">, Using JavaScript</span></a> We can also write scripts that react to user input, altering either the contents of the page, the CSS styles, or the browser’s behavior on the fly. </p>
			<p class="body">You’ve likely seen this in action if you’ve ever attempted to register for a website, entered a username, and immediately received feedback that the username you’ve entered is already taken by someone else (<span class="Xref-Figure">Figure 21-1</span>). The red border around the text input and the appearance of the “sorry, this username is already in use” message are examples of JavaScript altering the contents of the page. Blocking the form submission is an example of JavaScript altering the browser’s default behavior. Ultimately, verifying this information is a job for the server—but JavaScript allows the website to make that request and offer immediate feedback without the need for a page reload.</p>
			<div>
				<figure id="_idContainer1393" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2101.png" alt="" width="1338" height="758"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-1.</span> JavaScript inserts a message, alters styles to make errors apparent, and blocks the form <a id="_idIndexMarker3803"></a>from submitting. It can also detect whether the email entries match, but the username would more likely be detected by a program on the server.</figcaption>
				</figure>
			</div>
			<p class="body">In short, JavaScript allows you to create highly responsive interfaces that improve the user experience and provide dynamic functionality, without waiting for the server to load up a new page. For example, we can use JavaScript to do any of the following:</p>
			<ul>
				<li class="ListBullet">Suggest the complete term a user might be entering in a search box as he types. You can see this in action on Google.com (<span class="Xref-Figure">Figure 21-2</span>).</li>
			</ul>
			<div>
				<figure id="_idContainer1395" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2102.png" alt="" width="1337" height="264"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-2.</span> Google.com uses JavaScript to automatically complete a search term as it is typed in. </figcaption>
				</figure>
			</div>
			<ul>
				<li class="ListBullet">Request content and information from the server and inject it into the current document as needed, without reloading the entire page—this is commonly referred to as “Ajax.”</li>
				<li class="ListBullet">Show and hide content based on a user clicking a link or heading, to create a “collapsible” content area (<span class="Xref-Figure">Figure 21-3</span>).</li>
			</ul>
			<div>
				<figure id="_idContainer1397" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2103.png" alt="" width="1337" height="358"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-3.</span> JavaScript can be used to reveal and hide portions of content.</figcaption>
				</figure>
			</div>
			<ul>
				<li class="ListBullet">Test for browsers’ individual features and capabilities. For example, one can test for the presence of<a id="_idIndexMarker3804"></a> “touch events,” indicating that the user is interacting with the page through a mobile device’s browser, and add more touch-friendly styles and interaction methods.</li>
				<li class="ListBullet">Fill in gaps where a browser’s built-in functionality falls short, or add some of the features found in newer browsers to older browsers. These kinds of scripts are usually <a id="_idIndexMarker3805"></a>called <span class="FirstTerm">shims</span> or <span class="FirstTerm">polyfills</span>.</li>
				<li class="ListBullet">Load an image or content in a custom-<a id="_idIndexMarker3806"></a>styled “lightbox”—isolated on the page with CSS—after a user clicks a thumbnail version of the image (<span class="Xref-Figure">Figure 21-4</span>).</li>
			</ul>
			<p class="body">This list is nowhere near exhaustive!</p>
			<div>
				<figure id="_idContainer1399" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2104.png" alt="" width="1338" height="983"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-4.</span> JavaScript can be used to load images into a lightbox-style gallery.  </figcaption>
				</figure>
			</div>
			<h1 id="_idParaDest-194" class="HeadA"><a id="_idTextAnchor272"></a>Adding JavaScript to a Page</h1>
			<p class="body">As with CSS,<a id="_idIndexMarker3807"></a><a id="_idIndexMarker3808"></a> you can embed a script right in a document or keep it in an external file and link it to the page. Both methods use the <span class="Literal-fc">script</span> element.</p>
			<h2 class="HeadB">Embedded Script</h2>
			<p class="body">To embed a <a id="_idIndexMarker3809"></a><a id="_idIndexMarker3810"></a>script on a page, just add the code as the content of a <a id="_idIndexMarker3811"></a><span class="Literal-fc">script</span> element:</p>
			<pre class="CodeFirst"><code class="CodeColor">&lt;script&gt;</code><br/>  … JavaScript code goes here <br/><code class="CodeColor">&lt;/script&gt;</code></pre>
			<div>
				<div id="_idContainer1400" class="note">
					<h5 class="noteHeader">Note</h5>
					<p class="note">For documents written in the stricter XHTML <a id="_idIndexMarker3812"></a><a id="_idIndexMarker3813"></a>syntax, you must identify the content of the script element as <a id="_idIndexMarker3814"></a><a id="_idIndexMarker3815"></a><a id="_idIndexMarker3816"></a>CDATA by wrapping the code in the following wrapper:</p>
					<pre class="SidebarCodeFirst">&lt;script type="text/javascript"&gt;<br/>  <code class="CodeColor">// &lt;![CDATA[</code><br/>  …JavaScript code goes here<br/>   <code class="CodeColor">// ]]&gt;</code><br/>&lt;/script&gt;</pre>
				</div>
			</div>
			<h2 class="HeadB">External Scripts</h2>
			<p class="body">The other <a id="_idIndexMarker3817"></a><a id="_idIndexMarker3818"></a>method uses the <a id="_idIndexMarker3819"></a><span class="Literal-fc">src</span> attribute to point to a script file (with a <span class="Filename">.js</span> suffix) by its URL. In this case, the <span class="Literal-fc">script</span> element has no content: </p>
			<pre class="CodeFirst">&lt;script <code class="CodeColor">src=</code>"my_script.js"&gt;&lt;/script&gt;</pre>
			<p class="body">The advantage to external scripts is that you can apply the same script to multiple pages (the same benefit external style sheets offer). The downside, of course, is that each external script requires an additional HTTP request of the server, which slows down performance.</p>
			<h2 class="HeadB">Script Placement</h2>
			<p class="body">The <span class="Literal-fc">script</span> element can go anywhere in the document, but the most common places for scripts are in the <span class="Literal-fc">head</span> of the document and at the very end of the <a id="_idIndexMarker3820"></a><a id="_idIndexMarker3821"></a><span class="Literal-fc">body</span>. It is recommended that you don’t sprinkle them throughout the document, because they would be difficult to find and maintain. </p>
			<p class="body">For most scripts, the end of the document, just before the <span class="Literal-fc">&lt;/body&gt;</span> tag, is the preferred placement because the browser will be done parsing the document and its DOM structure: </p>
			<pre class="CodeFirst">&lt;!DOCTYPE html&gt;<br/>  &lt;html lang="en"&gt;<br/>  &lt;head&gt;<br/>    &lt;meta charset="utf-8"&gt;<br/>  &lt;/head&gt;<br/>  &lt;body&gt;<br/>    …contents of page…<br/>    <code class="CodeColor">&lt;script src="script.js"&gt;&lt;/script&gt;</code> <br/>  &lt;/body&gt;<br/>&lt;/html&gt;</pre>
			<p class="body">Consequently, that information will be ready and available by the time it gets to the scripts, and they can execute faster. In addition, the script download and execution blocks the rendering of the page, so moving the script to the bottom improves the perceived performance. </p>
			<p class="body">However, in some cases, you might want your script to do something before the body completely loads, so putting it in the <span class="Literal-fc">head</span> will result in better performance. For example, Modernizr (the feature detection tool discussed in <a href="lwd5_chapter19.xhtml#_idTextAnchor243"><span class="Xref">Chapter </span><span class="Xref">19</span><span class="Xref">, More CSS Techniques</span></a>) recommends its script be placed in the head so the feature detection tests can be run up front.   </p>
			<h1 id="_idParaDest-195" class="HeadA"><a id="_idTextAnchor273"></a>The Anatomy of a Script</h1>
			<p class="body">There’s <a id="_idIndexMarker3822"></a>a reason why the book <span class="Citation">JavaScript: The Definitive Guide</span> by <a id="_idIndexMarker3823"></a>David Flanagan (O’Reilly) is 1,100 pages long. There’s a <em class="Emphasis">lot</em> to say about JavaScript! In this section, we have only a few pages to make you familiar with the basic building blocks of JavaScript so you can begin to understand scripts when you encounter them. Many developers have taught themselves to program by finding existing scripts and adapting them for their own needs. After some practice, they are ready to start writing their own from scratch. Recognizing the parts of a script is the first step, so that’s where we’ll start.</p>
			<p class="body">Originally, JavaScript’s functionality was mostly limited to crude methods of interaction with the user. We could use a few of JavaScript’s built-in functions (<span class="Xref-Figure">Figure 21-5</span>) to provide user feedback, such as <a id="_idIndexMarker3824"></a><span class="Literal-fc">alert()</span> to push a notification to a user, and <a id="_idIndexMarker3825"></a><span class="Literal-fc">confirm()</span> to ask a user to approve or decline an action. To request the user’s input, we were more or less limited to the built-in <a id="_idIndexMarker3826"></a><span class="Literal-fc">prompt()</span> function. Although these methods still have their time and place today, they’re jarring, obtrusive, and—in common opinion, at least—fairly obnoxious ways of interacting with users. As JavaScript has evolved over time, we’ve been afforded much more graceful ways of adding behavior to our pages, creating a more seamless experience for our users.</p>
			<div>
				<figure id="_idContainer1402" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2105.png" alt="" width="1337" height="1017"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-5.</span> Built-in JavaScript functions: <span class="Literal-fc">a</span><span class="Literal-Sidebar">lert()</span> (top), <span class="Literal-Sidebar">confirm()</span> (middle), and <span class="Literal-Sidebar">prompt()</span> (bottom).</figcaption>
				</figure>
			</div>
			<p class="body">In order to take advantage of these interaction methods, we have to first understand the underlying logic that goes into scripting. These are logic patterns common to all manner of programming languages, although the syntax may vary. To draw a parallel between programming languages and spoken languages: although the vocabulary may vary from one language to another, many grammar patterns are shared by the majority of them.</p>
			<p class="body">By the end of this section, you’re going to know about variables, arrays, comparison operators, <span class="Literal-fc">if</span>/<span class="Literal-fc">else</span> statements, loops, functions, and more. Ready?</p>
			<h2 class="HeadB">The Basics</h2>
			<p class="body">There are a few common syntactical rules that wind their way though all of JavaScript. </p>
			<p class="body">It is important to know that <a id="_idIndexMarker3827"></a><a id="_idIndexMarker3828"></a><a id="_idIndexMarker3829"></a>JavaScript is <span class="FirstTerm">case-sensitive</span>. A variable named <span class="Literal-fc">myVariable</span>, a variable named <span class="Literal-fc">myvariable</span>, and a variable named <span class="Literal-fc">MYVariable</span> will be treated as three different objects. </p>
			<p class="body">Also, <a id="_idIndexMarker3830"></a>whitespace such as tabs and spaces is ignored, unless it’s part of a string of text and enclosed in quotes. All of the character spaces added to scripts such as the ones in this chapter are for the benefit of humans—they make reading through the code easier. JavaScript doesn’t see them. </p>
			<h3 class="HeadC">Statements</h3>
			<p class="body">A script <a id="_idIndexMarker3831"></a><a id="_idIndexMarker3832"></a>is made up of a series of <span class="FirstTerm">statements</span>. A statement is a command that tells the browser what to do. Here is a simple statement that makes the browser display an alert with the phrase “Thank you”:</p>
			<pre class="CodeFirst">alert("Thank you.");</pre>
			<p class="body">The semicolon at the end of the statement tells JavaScript that it’s the end of the command, just as a period ends a sentence. According to the JavaScript standard, a<a id="_idIndexMarker3833"></a> line break will also trigger the end of a command, but it is a best practice to end each statement with a <a id="_idIndexMarker3834"></a><a id="_idIndexMarker3835"></a>semicolon.</p>
			<h3 class="HeadC">Comments</h3>
			<p class="body">JavaScript <a id="_idIndexMarker3836"></a><a id="_idIndexMarker3837"></a>allows you to leave comments that will be ignored at the time the script is executed, so you can provide reminders and explanations throughout your code. This is especially helpful if this code is likely to be edited by another developer in the future. </p>
			<p class="body">There are two methods of using comments. For single-line comments, use two<a id="_idIndexMarker3838"></a> slash characters (<span class="Literal-fc">//</span>) at the beginning of the line. You can put single-line comments on the same line as a statement, as long as the comment comes after the statement. It does not need to be closed, as a line break effectively closes it.</p>
			<pre class="CodeFirst"><code class="CodeColor">// </code>This is a single-line comment. </pre>
			<p class="body">Multiple-line comments use the same syntax that you’ve seen in CSS. Everything within the <span class="Literal-fc">/* */ </span>characters is ignored by the browser. You can use this syntax to “comment out” notes and even chunks of the script when troubleshooting. </p>
			<pre class="CodeFirst"><code class="CodeColor">/* </code>This is a multiline comment.Anything between these sets of characters will be completely ignored when the script is executed. This form of comment needs to be closed.<code class="CodeColor"> */</code></pre>
			<p class="body">I’ll be using the single-line comment notation to add short explanations to example code, and we’ll make use of the <span class="Literal-fc">alert()</span> function we saw earlier (<span class="Xref-Figure">Figure 21-5</span>) so we can quickly view the results of our work.</p>
			<h2 class="HeadB">Variables</h2>
			<p class="body">If you’re <a id="_idIndexMarker3839"></a><a id="_idIndexMarker3840"></a>anything like me, the very term “variables” triggers nightmarish flashbacks to eighth-grade math class. The premise is pretty much the same, though your teacher doesn’t have a bad comb-over this time around.</p>
			<p class="body">A <span class="FirstTerm">variable</span> is like an information container. You give it a name and then assign it a value, which can be a number, text string, an element in the DOM, or a function—anything, really. This gives us a convenient way to reference that value later by name. The value itself can be modified and reassigned in whatever way our scripts’ logic dictates.</p>
			<p class="body">The following declaration creates a variable with the name <span class="Literal-fc">foo</span> and assigns it the value 5:</p>
			<pre class="CodeFirst">var foo = 5;</pre>
			<p class="body">We start by declaring the variable by using the <span class="Literal-fc">var</span> keyword. The single equals sign (<span class="Literal-fc">=</span>) indicates that we are <span class="FirstTerm">assigning</span> it a value. Because that’s the end of our statement, we end the line with a semicolon. Variables can also be declared without the <span class="Literal-fc">var</span> keyword, which impacts what part of your script will have access to the information they contain. We’ll discuss that further in the section <span class="Xref">“Variable Scope and the var Keyword”</span> later in this chapter.</p>
			<p class="body">You can use anything you like as a variable name, but make sure it’s a name that will make sense to you later. You wouldn’t want to name a variable something like <span class="Literal-fc">data</span>; it should describe the information it contains. In our earlier very specific example, <span class="Literal-fc">productName</span> might be a more useful name than <span class="Literal-fc">foo</span>. There are a few rules for <a id="_idIndexMarker3841"></a>naming a variable:</p>
			<ul>
				<li class="ListBullet">It must start with a letter or an<a id="_idIndexMarker3842"></a><a id="_idIndexMarker3843"></a> underscore.</li>
				<li class="ListBullet">It may contain letters, digits, and underscores in any combination.</li>
				<li class="ListBullet">It may not contain character spaces. As an alternative, use underscores in place of spaces, or close up the space and use camel case instead (for example, <span class="Literal-fc">my_variable</span> or <span class="Literal-fc">myVariable</span>). </li>
				<li class="ListBullet">It may not contain<a id="_idIndexMarker3844"></a> special characters (e.g., <span class="Literal-fc">! . , / \ + * =</span>).</li>
			</ul>
			<p class="body">You can change the value of a variable at any time by redeclaring it anywhere in your script. Remember: JavaScript is case-sensitive, and so are those variable names.</p>
			<h3 class="HeadC">Data types</h3>
			<p class="body">The values<a id="_idIndexMarker3845"></a><a id="_idIndexMarker3846"></a> <a id="_idIndexMarker3847"></a>we assign to variables fall under a few distinct <span class="FirstTerm">data types</span>:</p>
			<p class="ListVariableTerm">Undefined</p>
			<p class="ListVariable">The<a id="_idIndexMarker3848"></a> simplest of these data types is likely <span class="Literal-fc">undefined</span>. If we declare a variable by giving it a name but no value, that variable contains a value of <span class="Literal-fc">undefined</span>.</p>
			<pre class="CodeFirst">var foo;<br/>alert(foo); <span class="Code-Comment">// This will open a dialog containing "undefined".</span></pre>
			<p class="ListVariable_cont">Odds are you won’t find a lot of use for this right away, but it’s worth knowing for the sake of troubleshooting some of the errors you’re likely to encounter early on in your JavaScript career. If a variable has a value of <span class="Literal-fc">undefined</span> when it shouldn’t, you may want to double-check that it has been declared correctly or that there isn’t a typo in the variable name. (We’ve all been there.)</p>
			<p class="ListVariableTerm">Null</p>
			<p class="ListVariable">Similar to <a id="_idIndexMarker3849"></a><span class="Literal-fc">undefined</span>, assigning a variable of <span class="Literal-fc">null</span> (again, <a id="_idIndexMarker3850"></a><a id="_idIndexMarker3851"></a>case-sensitive) simply says, “Define this variable, but give it no inherent value.” </p>
			<pre class="CodeFirst">var foo = null;<br/>alert(foo); <span class="Code-Comment">// This will open a dialog containing "null".</span></pre>
			<p class="ListVariableTerm">Numbers</p>
			<p class="ListVariable">You <a id="_idIndexMarker3852"></a>can assign variables numeric values.</p>
			<pre class="CodeFirst">var foo = 5;<br/>alert(foo); <span class="Code-Comment">// This will open a dialog containing "5".</span></pre>
			<p class="ListVariable">The word <span class="Literal-fc">foo</span> now means the exact same thing as the number 5 as far as JavaScript is concerned. Because JavaScript is loosely typed, we don’t have to tell our script to treat the variable <span class="Literal-fc">foo</span> as the <em class="Emphasis">number</em> 5. The variable behaves the same as the number itself, so you can do things to it that you would do to any other number by using classic <a id="_idIndexMarker3853"></a><a id="_idIndexMarker3854"></a><a id="_idIndexMarker3855"></a><a id="_idIndexMarker3856"></a><a id="_idIndexMarker3857"></a>mathematical notation: <span class="Literal-fc">+</span>, <span class="Literal-fc">-</span>, <span class="Literal-fc">*</span>, and <span class="Literal-fc">/</span> for plus, minus, multiply, and divide, respectively. In this example, we use the <a id="_idIndexMarker3858"></a><a id="_idIndexMarker3859"></a>plus sign (<span class="Literal-fc">+</span>) to add <span class="Literal-fc">foo</span> to itself (<span class="Literal-fc">foo + foo</span>). </p>
			<pre class="CodeFirst">var foo = 5;<br/>alert(foo + foo); <span class="Code-Comment">// This will alert "10".</span></pre>
			<p class="ListVariableTerm">Strings</p>
			<p class="ListVariable">Another <a id="_idIndexMarker3860"></a>type of data that can be saved to a variable is a <span class="FirstTerm">string</span>, which is basically a line of text. Enclosing characters in a set of single or double quotes indicates that it’s a string, as shown here:</p>
			<pre class="CodeFirst">var foo = "five";<br/>alert( foo ); <span class="Code-Comment">// This will alert "five"</span></pre>
			<p class="ListVariable_cont">The variable <span class="Literal-fc">foo</span> is now treated exactly the same as the word <em class="Emphasis">five</em>. This applies to any combination of characters: letters, numbers, spaces, and so on. If the value is wrapped in <a id="_idIndexMarker3861"></a>quotation marks, it will be treated as a string of text. If we were to wrap the number 5 in quotes and assign it to a variable, that variable wouldn’t behave as a number; instead, it would behave as a string of text containing the character “5.”</p>
			<p class="ListVariable_cont">Earlier we saw the plus sign (<span class="Literal-fc">+</span>) used to add numbers. When the plus sign is used with strings, it sticks the strings together <a id="_idIndexMarker3862"></a>(called <span class="FirstTerm">concatenation</span>) into one long string, as shown in this example. </p>
			<pre class="CodeFirst">var foo = "bye"<br/>alert(foo + foo);  <span class="Code-Comment">// This will alert "byebye"</span></pre>
			<p class="ListVariable_cont">Notice what the alert returns in the following example when we define the value 5 in quotation marks, treating it as a string instead of a number: </p>
			<pre class="CodeFirst">var foo = "5";<br/>alert( foo + foo ); <span class="Code-Comment">// This will alert "55"</span> </pre>
			<p class="ListVariable_cont">If we concatenate a string and a number, JavaScript will assume that the number should be treated as a string as well, since the math would be impossible.</p>
			<pre class="CodeFirst">var foo = "five";<br/>var bar = 5;<br/>alert( foo + bar ); <span class="Code-Comment">// This will alert "five5"</span></pre>
			<p class="ListVariableTerm">Booleans</p>
			<p class="ListVariable">We can <a id="_idIndexMarker3863"></a><a id="_idIndexMarker3864"></a>also assign a variable a true or false value. This is called a <span class="FirstTerm">Boolean value</span>, and it is the lynchpin for all manner of advanced logic. Boolean values use the <span class="Literal-fc">true</span> and <span class="Literal-fc">false</span> keywords built into JavaScript, so quotation marks are not necessary. </p>
			<pre class="CodeFirst">var foo = true; <span class="Code-Comment">// The variable "foo" is now true</span></pre>
			<p class="ListVariable">Just as with numbers, if we were to wrap the preceding value in quotation marks, we’d be saving the word <em class="Emphasis">true</em> to our variable instead of the inherent value of <span class="Literal-fc">true</span> (i.e., “not false”).</p>
			<p class="ListVariable">In a sense, everything in JavaScript has either an inherently true or false value. For example, <span class="Literal-fc">null</span>, <span class="Literal-fc">undefined</span>, <span class="Literal-fc">0</span>, and <a id="_idIndexMarker3865"></a>empty strings (<span class="Literal-fc">" "</span>) are all inherently false, while every other value is inherently true. These values, although not identical to the<a id="_idIndexMarker3866"></a><a id="_idIndexMarker3867"></a> Booleans <span class="Literal-fc">true</span> and <span class="Literal-fc">false</span>, are commonly referred to as being “truthy” and “falsy.” I promise I didn’t make that up.</p>
			<h3 class="HeadC">Arrays</h3>
			<p class="body">An <span class="FirstTerm">array</span> is a group<a id="_idIndexMarker3868"></a><a id="_idIndexMarker3869"></a> of multiple values (called <span class="FirstTerm">members</span>) that can be assigned to a single variable. The values in an array are said to be <span class="FirstTerm">indexed</span>, meaning you can refer to them by number according to the order in which they appear in the list. The first member is given the index number 0, the second is 1, and so on, which is why one almost invariably hears us nerds start counting things at zero—because that’s how JavaScript counts things, and many other programming languages do the same. We can avoid a lot of future coding headaches by keeping this in mind.</p>
			<p class="body">So, let’s say our script needs all of the variables we defined earlier. We could define them three times and name them something like <span class="Literal-fc">foo1</span>, <span class="Literal-fc">foo2</span>, and so on, or we can store them in an array, indicated by square brackets (<span class="Literal-fc">[ ]</span>).</p>
			<pre class="CodeFirst">var foo = <code class="CodeColor">[5, "five", "5"]</code>;</pre>
			<p class="body">Now anytime you need to access any of those values, you can grab them from the single <span class="Literal-fc">foo</span> array by referencing their<a id="_idIndexMarker3870"></a> index number:</p>
			<pre class="CodeFirst">alert( <code class="CodeColor">foo[0]</code> ); <span class="Code-Comment">// Alerts "5"</span>  <br/>alert( <code class="CodeColor">foo[1]</code> ); <span class="Code-Comment">// Alerts "five"</span>  <br/>alert( <code class="CodeColor">foo[2]</code> ); <span class="Code-Comment">// Also alerts "5"</span></pre>
			<h2 class="HeadB">Comparison Operators</h2>
			<p class="body">Now that <a id="_idIndexMarker3871"></a>we know how to save values to variables and arrays, the next logical step is knowing how to compare those values. There is a set of special characters <a id="_idIndexMarker3872"></a>called <span class="FirstTerm">comparison operators</span> that evaluate and compare values in different <a id="_idIndexMarker3873"></a><a id="_idIndexMarker3874"></a><a id="_idIndexMarker3875"></a><a id="_idIndexMarker3876"></a><a id="_idIndexMarker3877"></a><a id="_idIndexMarker3878"></a><a id="_idIndexMarker3879"></a><a id="_idIndexMarker3880"></a><a id="_idIndexMarker3881"></a><a id="_idIndexMarker3882"></a><a id="_idIndexMarker3883"></a><a id="_idIndexMarker3884"></a><a id="_idIndexMarker3885"></a><a id="_idIndexMarker3886"></a><a id="_idIndexMarker3887"></a><a id="_idIndexMarker3888"></a>ways:</p>
			<table id="table001-20" class="table_invisible">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">==</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is equal to</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">!=</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is not equal to</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">===</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is identical to (equal to and of the same data type)</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">!==</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is not identical to</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">&gt;</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is greater than</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">&gt;=</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is greater than or equal to</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">&lt;</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is less than</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">&lt;=</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Is less than or equal to</p>
						</td>
					</tr>
				</tbody>
			</table>
			<p class="body">There’s a reason all of these definitions read as parts of a statement. In comparing values, we’re making an assertion, and the goal is to obtain a result that is either inherently true or inherently false. When we compare two values, JavaScript evaluates the statement and gives us back a Boolean value depending on whether the statement is true or false.</p>
			<pre class="CodeFirst">alert( 5 == 5 ); <span class="Code-Comment">// This will alert "true"</span>  <br/>alert( 5 != 6 ); <span class="Code-Comment">// This will alert "true"</span>  <br/>alert( 5 &lt; 1 ); <span class="Code-Comment">// This will alert "false"</span></pre>
			<h3 class="HeadC">Equal versus identical</h3>
			<p class="body">The tricky part is understanding the difference between “equal to” (<span class="Literal-fc">==</span>) and “identical to” (<span class="Literal-fc">===</span>). We already learned that all of these values fall under a certain data type. For example, a string of “5” and a number 5 are similar, but they’re not quite the same thing.</p>
			<p class="body">Well, that’s exactly what <span class="Literal-fc">===</span> is meant to check.</p>
			<pre class="CodeFirst">alert( "5" == 5 ); <span class="Code-Comment">// This will alert "true". They're both "5".</span>  <br/>alert( "5" === 5 ); <br/><span class="Code-Comment">/* This will alert "false". They're both "5", but they're not the same data type. */</span>  <br/>alert( "5" !== 5 ); <br/><span class="Code-Comment">/* This will alert "true", since they're not the same data type. */</span></pre>
			<div>
				<div id="_idContainer1403" class="note">
					<h5 class="WarningHeader">Warning</h5>
					<p class="note">Be careful not to accidentally use a single equals sign, or you’ll be reassigning the value of the first variable to the value of the second variable!</p>
				</div>
			</div>
			<p class="body">Even if you have to read through this part a couple of times, understanding the difference between “equal” and “identical to” means you’ve already begun to adopt the special kind of crazy one needs to be a programmer. Welcome! You’re in good company.</p>
			<h3 class="HeadC">Mathematical operators</h3>
			<p class="body">The other<a id="_idIndexMarker3889"></a> <a id="_idIndexMarker3890"></a>type of operator is a <span class="FirstTerm">mathematical operator</span>, which performs mathematical functions on numeric values (and, of course, variables that contain numeric values). We touched briefly on the straightforward <a id="_idIndexMarker3891"></a><a id="_idIndexMarker3892"></a>mathematical operators for add (<span class="Literal-fc">+</span>), subtract (<span class="Literal-fc">-</span>), multiply (<span class="Literal-fc">*</span>), and divide (<span class="Literal-fc">/</span>). There are also some useful shortcuts you should be aware of:</p>
			<table id="table002-12" class="table_invisible">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<tbody>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">+=</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Adds the value to itself</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">++</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Increases the value of a number (or a variable containing a number value) by 1</p>
						</td>
					</tr>
					<tr class="table_invisible">
						<td class="table_invisible">
							<p class="body"><span class="Literal-fc">--</span></p>
						</td>
						<td class="table_invisible">
							<p class="body">Decreases the value of a number (or a variable containing a number value) by 1</p>
						</td>
					</tr>
				</tbody>
			</table>
			<h2 class="HeadB">if/else statements</h2>
			<p class="body"><span class="Literal-fc">if</span>/<span class="Literal-fc">else</span><span class="FirstTerm"> statements</span> are <a id="_idIndexMarker3893"></a><a id="_idIndexMarker3894"></a><a id="_idIndexMarker3895"></a><a id="_idIndexMarker3896"></a>how we get JavaScript to ask itself a true/false question. They are more or less the foundation for all the advanced logic that can be written in JavaScript, and they’re about as simple as programming gets. In fact, they’re almost written in plain English. The structure of a conditional statement is as follows:</p>
			<pre class="CodeFirst"><code class="CodeColor">if( true ) {</code><br/>   <span class="Code-Comment">// Do something.</span> <code class="CodeColor"><br/>}</code></pre>
			<p class="body">It tells the browser “if this condition is met, then execute the commands listed between the <a id="_idIndexMarker3897"></a><a id="_idIndexMarker3898"></a>curly brackets (<span class="Literal-fc">{ }</span>).” JavaScript doesn’t care about whitespace in our code, remember, so the spaces on either side of the <span class="Literal-fc">( true )</span> are purely for the sake of more readable code. </p>
			<p class="body">Here is a simple example using the array we declared earlier:</p>
			<pre class="CodeFirst">var foo = [5, "five", "5"]; <br/><br/><code class="CodeColor">if( foo[1] === "five" ) {</code><br/>  alert("This is the word five, written in plain English.");<br/><code class="CodeColor">}</code></pre>
			<p class="body">Since we’re making a comparison, JavaScript is going to give us a value of either <a id="_idIndexMarker3899"></a><a id="_idIndexMarker3900"></a><a id="_idIndexMarker3901"></a><a id="_idIndexMarker3902"></a><span class="Literal-fc">true</span> or <span class="Literal-fc">false</span>. The highlighted line of code says “true or false: the value of the <span class="Literal-fc">foo</span> variable with an index of <span class="Literal-fc">1</span> is identical to the word ‘five’?”</p>
			<div>
				<div id="_idContainer1404" class="sidebar">
					<h5 class="SidebarTitle">Idiomatic JavaScript</h5>
					<p class="SidebarBody">There is an <a id="_idIndexMarker3903"></a><a id="_idIndexMarker3904"></a>effort in the JavaScript community to create a style guide for writing JavaScript code. The document “Principles of Writing Consistent, Idiomatic JavaScript” states the following: “All code in any code-base should look like a single person typed it, no matter how many people contributed.” To achieve that goal, a group of developers has written an Idiomatic Style Manifesto that describes how whitespace, line breaks, quotation marks, functions, variables, and more should be written to achieve “beautiful code.” Learn more about it at <a href="http://github.com/rwldrn/idiomatic.js/"><span class="URL-Email--Sidebar-">github.com/rwldrn/idiomatic.js/</span></a>. </p>
				</div>
			</div>
			<p class="body">In this case, the alert would fire because the <span class="Literal-fc">foo</span> variable with an index of <span class="Literal-fc">1</span> (the second in the list, if you’ll remember) is identical to “five”. It is indeed true, and the alert fires.</p>
			<p class="body">We can also explicitly check if something is false by using the <span class="Literal-fc">!=</span> comparison operator, which reads as “not equal to.”</p>
			<pre class="CodeFirst"><code class="CodeColor">if( 1 != 2 ) {</code><br/>  alert("If you're not seeing this alert, we have bigger problems than JavaScript.");<br/>  <span class="Code-Comment">// 1 is never equal to 2, so we should always see this alert.</span><br/> <code class="CodeColor">}</code></pre>
			<p class="body">I’m not much good at math, but near as I can tell, 1 will never be equal to 2. JavaScript says, “That ‘1 is not equal to 2’ line is a true statement, so I’ll run this code.”</p>
			<p class="body">If the statement doesn’t evaluate to <span class="Literal-fc">true</span>, the code inside the curly brackets will be skipped over completely:</p>
			<pre class="CodeFirst"><code class="CodeColor">if( 1 == 2 ) {</code><br/>  alert("If you're seeing this alert, we have bigger problems than JavaScript.");<br/><span class="Code-Comment">// 1 is not equal to 2, so this code will never run.</span> <code class="CodeColor"><br/>}</code></pre>
			<h3 class="HeadC">That covers “if,” but what about “else”?</h3>
			<p class="body">Lastly—and I promise we’re almost done here—what if we want to do one thing if something is true and something <em class="Emphasis">else</em> if that thing is false? We could write two <span class="Literal-fc">if</span> statements, but that’s a little clunky. Instead, we can just say, “else, do something…else.”</p>
			<pre class="CodeFirst">var test = "testing";<br/><code class="CodeColor">if( test == "testing" )</code> {<br/>     alert( "You haven't changed anything." );<br/>} <code class="CodeColor">else</code> {<br/>  alert( "You've changed something!" );<br/>}</pre>
			<p class="body">Changing the value of the <span class="Literal-fc">test</span> variable to something else—anything other than the word <em class="Emphasis">testing</em>—will trigger the alert “You’ve changed something!”</p>
			<p class="body"><span class="Xref-Figure">Exercise 21-1</span> gives you a chance to write a bit of JavaScript yourself.</p>
			<div>
				<div id="_idContainer1405" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 21-1.</span> English-to-JavaScript translation</h6>
					<p class="SidebarBody">In this quick exercise, you can get a feel for <a id="_idIndexMarker3905"></a>variables, <a id="_idIndexMarker3906"></a>arrays, and <span class="Literal-Sidebar">if</span>/<span class="Literal-Sidebar">else</span> statements by translating the statements written in English into lines of JavaScript code. You can find the answers in <span class="Xref--Sidebar-">Appendix A</span>. </p>
					<ol>
						<li class="SidebarListNumber">Create a variable called <span class="Literal-Sidebar">friends</span> and assign it an array with four of your friends’ names.</li>
						<li class="SidebarListNumber">Show the user a dialog that displays the third name in your list of <span class="Literal-Sidebar">friends</span>.</li>
						<li class="SidebarListNumber">Create a variable called <span class="Literal-Sidebar">name</span> and assign it a string value that is your first name.</li>
						<li class="SidebarListNumber">If the value of <span class="Literal-Sidebar">name</span> is identical to <span class="Literal-Sidebar">Jennifer</span>, show the user a dialog box that says, “That’s my name too!”</li>
						<li class="SidebarListNumber">Create a variable called <span class="Literal-Sidebar">myVariable</span> and assign it a number value between 1 and 10. If <span class="Literal-Sidebar">myVariable</span> is greater than five, show the user a dialog that says “upper.” If not, show the user a dialog that says “lower.”</li>
					</ol>
				</div>
			</div>
			<h2 class="HeadB">Loops</h2>
			<p class="body">There<a id="_idIndexMarker3907"></a><a id="_idIndexMarker3908"></a> are cases in which we’ll want to go through every item in an array and do something with it, but we won’t want to write out the entire list of items and repeat ourselves a dozen or more times. You are about to learn a technique of <em class="Emphasis">devastating power</em>, readers: <span class="FirstTerm">loops</span>.</p>
			<p class="body">I know. Maybe I overstated how exciting loops can be, but they <em class="Emphasis">are</em> incredibly useful. With what we’ve covered already, we’re getting good at dealing with single variables, but that can get us only so far. Loops allow us to easily deal with huge sets of data.</p>
			<p class="body">Say we have a form that requires none of the fields to be left blank. If we use the DOM to fetch every text input on the page, the DOM provides an array of every text input element. (I’ll tell you more about how the DOM does this in the next chapter.) We could check every value stored in that array one item at a time, sure, but that’s a lot of code and a maintenance nightmare. If we use a loop to check each value, we won’t have to modify our script, regardless of how many fields are added to or removed from the page. Loops allow us to act on every item in an array, regardless of that array’s size.</p>
			<p class="body">There are several ways to write a loop, but the <span class="Literal-fc">for</span> method is one of the most popular. The basic structure of a <span class="Literal-fc">for</span> loop is as follows:</p>
			<pre class="CodeFirst">for( <span class="Replaceable--8pt-">initialize the variable</span><span class="Replaceable--8pt-">;  </span><span class="Replaceable--8pt-">test the condition</span><span class="Replaceable--8pt-">;  </span><span class="Replaceable--8pt-">alter the value</span><span class="Replaceable--8pt-">;</span> ) {<br/>  <span class="Code-Comment"> // do something</span> <br/>}</pre>
			<p class="body">Here’s an example of a <span class="Literal-fc">for</span> loop in action: </p>
			<pre class="CodeFirst"><code class="CodeColor">for( var i = 0; i &lt;= 2; i++ )</code> {<br/>  alert( i ); <span class="Code-Comment">// This loop will trigger three alerts, reading "0", "1", and "2" respectively.</span> <br/>}</pre>
			<p class="body">That’s a little dense, so let’s break it down:</p>
			<p class="ListVariableTerm"><span class="Literal-fc">for() </span></p>
			<p class="ListVariable">First, we’re calling the <a id="_idIndexMarker3909"></a><span class="Literal-fc">for()</span> statement, which is built into JavaScript. It says, “For every time this is true, do this.” Next we need to supply that statement with some information.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">var i = 0;  </span></p>
			<p class="ListVariable">This creates a new variable, <span class="Literal-fc">i</span>, with its value set to zero. You can tell it’s a variable by the single equals sign. More often than not, you’ll see coders using the letter “i” (short for “index”) as the variable name, but keep in mind that you could use any variable name in its place. It’s a common convention, not a rule.</p>
			<p class="ListVariable_cont">We set that initial value to 0 because we want to stay in the habit of counting from zero up. That’s where JavaScript starts counting, after all.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">i &lt;= 2;</span></p>
			<p class="ListVariable">With <span class="Literal-fc">i &lt;= 2;</span>, we’re saying, “for as long as <span class="Literal-fc">i</span> is less than or equal to 2, keep on looping.” Since we’re counting from zero, that means the loop will run three times.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">i++</span></p>
			<p class="ListVariable">Finally, <span class="Literal-fc">i++</span> is shorthand for “every time this loop runs, add one to the value of <span class="Literal-fc">i</span>” (<span class="Literal-fc">++</span> is one of the mathematical shortcut operators we saw earlier). Without this step, <span class="Literal-fc">i</span> would always equal zero, and the loop would run forever! Fortunately, modern browsers are smart enough not to let this happen. If one of these three pieces is missing, the loop simply won’t run at all.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">{</span> <span class="Replaceable">script</span> <span class="Literal-fc">}</span></p>
			<p class="ListVariable">Anything inside those curly brackets is executed once for each time the loop runs, which is three times in this case. That <span class="Literal-fc">i</span> variable is available for use in the code the loop executes as well, as we’ll see next.</p>
			<p class="body">Let’s go back to the “check each item in an array” example. How would we write a loop to do that for us?</p>
			<pre class="CodeFirst">var items = ["foo", "bar", "baz"]; <span class="Code-Comment">// First we create an array.</span> <br/>for( var i = 0; <code class="CodeColor">i &lt; items.length</code>; i++ ) {<br/>  alert( <code class="CodeColor">items[i]</code> ); <span class="Code-Comment">// This will alert each item in the array.</span> <br/>}</pre>
			<p class="body">This example differs from our first loop in two key ways:</p>
			<p class="ListVariableTerm"><span class="Literal-fc">items.length</span></p>
			<p class="ListVariable">Instead of <a id="_idIndexMarker3910"></a>using a number to limit the number of times the loop runs, we’re using a property built right into JavaScript to determine the “length” of our array, which is the number of items it contains. <span class="Literal-fc">.length</span> is just one of the standard properties and methods of the <span class="Literal-fc">Array</span> object in JavaScript. In our example, there are three items in the array, so it will loop three times.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">items[i]</span></p>
			<p class="ListVariable">Remember how I mentioned that we can use that <span class="Literal-fc">i</span> variable inside the loop? Well, we can use it to reference each index of the array. Good thing we started counting from zero; if we had set the initial value of <span class="Literal-fc">i</span> to 1, the first item in the array would have been skipped. The result of our <span class="Literal-fc">for</span> loop example is that each item in the array (the text strings <span class="Literal-fc">foo</span>, <span class="Literal-fc">bar</span>, and <span class="Literal-fc">baz</span>) gets returned after each loop and fed to an alert.</p>
			<p class="body">Now no matter how large or small that array should become, the loop will execute only as many times as there are items in the array, and will always hold a convenient reference to each item in the array.</p>
			<p class="body">There are literally dozens of ways to write a loop in JavaScript, but this is one of the more common patterns you’re going to encounter out there in the wild. Developers use loops to perform a number of tasks, such as the following:</p>
			<ul>
				<li class="ListBullet">Looping through a list of elements on the page and checking the value of each, applying a style to each, or adding/removing/changing an attribute on each. For example, we could loop through each element in a form and ensure that users have entered a valid value for each before they proceed.</li>
				<li class="ListBullet">Creating a new array of items in an original array that have a certain value. We check the value of each item in the original array within the loop, and if the value matches the one we’re looking for, we populate a new array with only those items. This turns the loop into a filter of sorts.</li>
			</ul>
			<h2 class="HeadB">Functions</h2>
			<p class="body">I’ve <a id="_idIndexMarker3911"></a><a id="_idIndexMarker3912"></a>introduced you to a few functions already in a sneaky way. Here’s an example of a function that you might recognize: </p>
			<pre class="CodeFirst">alert("I've been a function all along!");</pre>
			<p class="body">A <span class="FirstTerm">function</span> is a bit of code for performing a task that doesn’t run until it is referenced or called. <span class="Literal-fc">alert()</span> is a function built into our browser. It’s a block of code that runs only when we explicitly tell it to. In a way, we can think of a function as a variable that contains <em class="Emphasis">logic</em>, in that referencing that variable will run all the code stored inside it. Functions allow code to be reused any time it is referenced so you don’t need to write it over and over. </p>
			<div>
				<div id="_idContainer1406" class="callout">
					<p class="callout">The structure of a function:</p>
					<p class="callout"><code class="Code">  </code><code class="Code">function() {</code></p>
					<p class="callout"><code class="Code">  }</code></p>
				</div>
			</div>
			<p class="body">All functions share a common pattern (<span class="Xref-Figure">Figure 21-6</span>). The function name is always immediately followed by a set of <a id="_idIndexMarker3913"></a><a id="_idIndexMarker3914"></a>parentheses (no space), then a pair of <a id="_idIndexMarker3915"></a><a id="_idIndexMarker3916"></a>curly brackets that contains their associated code. The parentheses sometimes contain additional information used by the function called <span class="FirstTerm">arguments</span>. <a id="_idIndexMarker3917"></a><a id="_idIndexMarker3918"></a>Arguments are data that can influence how the function behaves. For example, the <a id="_idIndexMarker3919"></a><span class="Literal-fc">alert()</span> function we know so well accepts a string of text as an argument, and uses that information to populate the resulting dialog.</p>
			<div>
				<figure id="_idContainer1408" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_2106_function.png" alt="" width="1321" height="463"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-6.</span> The structure of a function.</figcaption>
				</figure>
			</div>
			<p class="body">There are two types of functions: those that come “out of the box” (native JavaScript functions) and those that you make up yourself (custom functions). Let’s look at each.</p>
			<h3 class="HeadC">Native functions</h3>
			<p class="body">Hundreds of predefined functions are built into JavaScript, including these:</p>
			<p class="ListVariableTerm"><span class="Literal-fc">alert()</span>, <span class="Literal-fc">confirm()</span>, and <span class="Literal-fc">prompt()</span></p>
			<p class="ListVariable">These <a id="_idIndexMarker3920"></a><a id="_idIndexMarker3921"></a>functions trigger browser-level dialog boxes.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">Date()</span></p>
			<p class="ListVariable">Returns<a id="_idIndexMarker3922"></a> the current date and time.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">parseInt("123")</span></p>
			<p class="ListVariable">This function will, <a id="_idIndexMarker3923"></a>among other things, take a string data type containing numbers and turn it into a number data type. The string is passed to the function as an argument.</p>
			<p class="ListVariableTerm"><span class="Literal-fc">setTimeout(</span><span class="Replaceable">functionName</span><span class="Literal-fc">, 5000)</span></p>
			<p class="ListVariable">Executes a <a id="_idIndexMarker3924"></a>function after a delay. The function is specified in the first argument, and the delay is specified in milliseconds in the second argument (in the example, 5,000 milliseconds, which equals 5 seconds).</p>
			<p class="body">There are scores more beyond this as well. Note that names of functions are case-sensitive,<a id="_idIndexMarker3925"></a><a id="_idIndexMarker3926"></a> so be sure to write <span class="Literal-fc">setTimeout</span> instead of <span class="Literal-fc">SetTimeout</span>.</p>
			<h3 class="HeadC">Custom functions</h3>
			<p class="body">To create a <a id="_idIndexMarker3927"></a><a id="_idIndexMarker3928"></a>custom function, we type the <span class="Literal-fc">function</span> keyword followed by a name for the function, followed by opening and closing parentheses, followed by opening and closing curly brackets: </p>
			<pre class="CodeFirst"><code class="CodeColor">function name() {</code><br/>   <span class="Code-Comment">// Our function code goes here.</span> <br/><code class="CodeColor">}</code></pre>
			<p class="body">Just as with variables and arrays, the function’s name can be anything you want, but all the same naming syntax rules apply.</p>
			<p class="body">If we were to create a function that just alerts some text (which is a little redundant, I know), it would look like this:</p>
			<pre class="CodeFirst">function <code class="CodeColor">foo()</code> {<br/>   alert("Our function just ran!");<br/>   <span class="Code-Comment">// This code won't run until we call the function 'foo()'</span> <br/>}</pre>
			<p class="body">We can then call that function and execute the code inside it anywhere in our script by writing the following:</p>
			<pre class="CodeFirst"><code class="CodeColor">foo();</code> <span class="Code-Comment">// Alerts "Our function just ran!"</span></pre>
			<p class="body">We can call this function any number of times throughout our code. It saves a lot of time and redundant coding. </p>
			<h3 class="HeadC">Arguments</h3>
			<p class="body">Having a <a id="_idIndexMarker3929"></a><a id="_idIndexMarker3930"></a>function that executes the exact same code throughout your script isn’t likely to be all that useful. We can “pass arguments” (provide data) to native and custom functions in order to apply a function’s logic to different sets of data at different times. To hold a place for the arguments, create a variable name (or a series of comma-separated names) in the parentheses after the name of the function at the time the function is defined.</p>
			<p class="body">For example, let’s say we wanted to create a very simple function that alerts the number of items contained in an array. We’ve already learned that we can use <span class="Literal-fc">.length</span> <a id="_idIndexMarker3931"></a>to get the number of items in an array, so we just need a way to pass the array to be measured into our function. We do that by supplying the array to be measured as an argument. In the code, I’ve defined a new function named <span class="Literal-fc">alertArraySize()</span> and created the variable <span class="Literal-fc">arr</span> that holds a place for the argument. That variable will then be available inside the function and will contain whatever argument we pass when we call the function.</p>
			<pre class="CodeFirst">function alertArraySize(<code class="CodeColor">arr</code>) {<br/>         alert(<code class="CodeColor">arr.length</code>);<br/>}</pre>
			<p class="body">When we call that function, anything we include between the parentheses after the function name (in this case, <span class="Literal-fc">test</span>) will be passed to the argument with the <span class="Literal-fc">arr</span> placeholder as the function executes. Here we’ve defined the variable <span class="Literal-fc">test</span> as an array of five items. We’ve passed that variable to the function, and now that array gets plugged in and the length is returned.</p>
			<pre class="CodeFirst">var <code class="CodeColor">test</code> = [1,2,3,4,5];<br/>alertArraySize(<code class="CodeColor">test</code>); <span class="Code-Comment">// Alerts "5"</span></pre>
			<h3 class="HeadC">Returning a value</h3>
			<p class="body">This part is <a id="_idIndexMarker3932"></a><a id="_idIndexMarker3933"></a>particularly wild and incredibly useful.</p>
			<p class="body">It’s pretty common to use a function to calculate something and then give you back a value that you can use elsewhere in your script. We could accomplish this using what we know now, through clever application of variables, but there’s a much easier way.</p>
			<p class="body">The <a id="_idIndexMarker3934"></a><span class="Literal-fc">return</span> keyword inside a function effectively turns that function into a variable with a dynamic value! This one is a little easier to show than it is to tell, so bear with me while we consider this example:</p>
			<pre class="CodeFirst">function addNumbers(a,b) {<br/>   <code class="CodeColor">return</code> a + b;<br/>}</pre>
			<p class="body">We now have a function that accepts two arguments and adds them together. That wouldn’t be much use if the result always lived inside that function, because we wouldn’t be able to use the result anywhere else in our script. Here we use the <span class="Literal-fc">return</span> keyword to pass the result out of the function. Now any reference you make to that function gives you the result of the function—just like a variable would:</p>
			<pre class="CodeFirst">alert( addNumbers(2,5) ); <span class="Code-Comment">// Alerts "7"</span></pre>
			<p class="body">In a way, the <span class="Literal-fc">addNumbers()</span> function is now a variable that contains a dynamic value: the value of our calculation. If we didn’t return a value inside our function, the preceding script would alert <span class="Literal-fc">undefined</span>, just like a variable that we haven’t given a value. </p>
			<p class="body">The <span class="Literal-fc">return</span> keyword has one catch. As soon as JavaScript sees that it’s time to return a value, the function ends. Consider the following:</p>
			<pre class="CodeFirst">function bar() {<br/>   return 3;<br/>   alert("We'll never see this alert.");<br/>}</pre>
			<p class="body">When you call this function by using <span class="Literal-fc">bar()</span>, the alert on the second line never runs. The function ends as soon as it sees it’s time to return a value.</p>
			<h2 class="HeadB">Variable Scope and the var Keyword</h2>
			<p class="body">There are <a id="_idIndexMarker3935"></a><a id="_idIndexMarker3936"></a><a id="_idIndexMarker3937"></a><a id="_idIndexMarker3938"></a><a id="_idIndexMarker3939"></a><a id="_idIndexMarker3940"></a>times when you’ll want a variable that you’ve defined within a function to be available anywhere throughout your script. Other times, you may want to restrict it and make it available <em class="Emphasis">only</em> to the function it lives in. This notion of the availability of the variable is known as its <span class="FirstTerm">scope</span>. A variable that can be used by any of the scripts on your page <a id="_idIndexMarker3941"></a>is <span class="FirstTerm">globally scoped</span>, and a variable that’s available only within its parent function<a id="_idIndexMarker3942"></a><a id="_idIndexMarker3943"></a> is <span class="FirstTerm">locally scoped</span>.</p>
			<p class="body">JavaScript variables use functions to manage their scope. If a variable is defined outside a function, it will be globally scoped and available to all scripts. When you define a variable within a function and you want it to be used only by that function, you can flag it as locally scoped by preceding the variable name with the <span class="Literal-fc">var</span> keyword: </p>
			<pre class="CodeFirst">var foo = "value";</pre>
			<p class="body">To expose a variable within a function to the global scope, we omit the <span class="Literal-fc">var</span> keyword and simply define the variable:</p>
			<pre class="CodeFirst">foo = "value";</pre>
			<p class="body">You need to be careful about how you define variables within functions, or you could end up with unexpected results. Take the following JavaScript snippet, for example:</p>
			<pre class="CodeFirst">function double( num ){<br/>  <code class="CodeColor">total = num + num;</code><br/>  return total;<br/>}<br/><code class="CodeColor">var total = 10;</code><br/>var number = double( 20 );<br/>alert( <code class="CodeColor">total</code> ); <span class="Code-Comment">// Alerts 40.</span></pre>
			<p class="body">You may expect that because you specifically assigned a value of 10 to the variable <span class="Literal-fc">total,</span> the <span class="Literal-fc">alert(total)</span> function at the end of the script would return 10. But because we didn’t scope the <span class="Literal-fc">total</span> variable in the function with the <span class="Literal-fc">var</span> keyword, it bleeds into the global scope. Therefore, although the variable <span class="Literal-fc">total</span> is set to 10, the following statement runs the function and grabs the value for <span class="Literal-fc">total</span> defined there. Without the <span class="Literal-fc">var</span>, the variable “leaked out.”</p>
			<div>
				<div id="_idContainer1409" class="sidebar">
					<h5 class="SidebarSeries">Scope Cheat Sheet</h5>
					<table id="table003-5" class="Table">
						<colgroup>
							<col/>
							<col/>
							<col/>
						</colgroup>
						<thead>
							<tr class="Table">
								<td class="Table Table-Head Table-Head">
									<p class="TableHeader">Variable</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">Location</p>
								</td>
								<td class="Table Table-Head">
									<p class="TableHeader">Scope</p>
								</td>
							</tr>
						</thead>
						<tbody>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<p class="TableBody"><code class="Code">var </code>identifier value</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">Outside a function</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Global</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<p class="TableBody"><code class="Code">var </code>identifier value</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">Inside a function</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Local</p>
								</td>
							</tr>
							<tr class="Table">
								<td class="Table Table-Body-Left">
									<p class="TableBody">identifier value</p>
								</td>
								<td class="Table Table-Body">
									<p class="TableBody">Inside a function</p>
								</td>
								<td class="Table Table-Body-Right">
									<p class="TableBody">Global</p>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			<p class="body">As you can see, the trouble with global variables is that they’ll be shared throughout all the scripting on a page. The more variables that bleed into the global scope, the better the chances you’ll run into a “collision” in which a variable named elsewhere (in another script altogether, even) matches one of yours. This can lead to variables being inadvertently redefined with unexpected values, which can lead to errors in your script.</p>
			<p class="body">Remember that we can’t always control all the code in play on our page. It’s very common for pages to include code written by third parties, for example:</p>
			<ul>
				<li class="ListBullet">Scripts to render advertisements</li>
				<li class="ListBullet">User-tracking and analytics scripts</li>
				<li class="ListBullet">Social media “share” buttons</li>
			</ul>
			<p class="body">It’s best not to take any chances on variable collisions, so when you start writing scripts on your own, locally scope your variables whenever you can (see the sidebar <span class="Xref">“Keeping Variables Out of the Global Scope”</span>).</p>
			<div>
				<div id="_idContainer1410" class="sidebar">
					<h5 class="SidebarTitle">Keeping Variables Out of the Global Scope</h5>
					<p class="SidebarBody">If you want to be sure that all of your variables stay out of the global scope, you can put all of your JavaScript in the following wrapper:</p>
					<pre class="SidebarCodeFirst">&lt;script&gt;<br/><code class="CodeColor">(function() {</code><br/>  <span class="Code-Comment">//All your code here!</span> <br/><code class="CodeColor">}());</code><br/>&lt;script&gt;</pre>
					<p class="SidebarBody">This little quarantining solution is called an<a id="_idIndexMarker3944"></a><a id="_idIndexMarker3945"></a> <span class="FirstTerm">IIFE</span> (Immediately Invoked Functional Expression), and we owe this method and the associated catchy term to <a id="_idIndexMarker3946"></a>Ben Alman (<a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/"><span class="URL-Email--Sidebar-">benalman.com/news/2010/11/immediately-invoked-function-expression/</span></a>).</p>
				</div>
			</div>
			<p class="body">This concludes our little (OK, not so little) introductory tour of JavaScript syntax. There’s a lot more to it, but this should give you a decent foundation for learning more on your own and being able to interpret scripts when you see them. We have just a few more JavaScript-related features to tackle before we look at a few examples.</p>
			<h1 id="_idParaDest-196" class="HeadA"><a id="_idTextAnchor274"></a>The Browser Object</h1>
			<p class="body">In addition to being able to <a id="_idIndexMarker3947"></a><a id="_idIndexMarker3948"></a><a id="_idIndexMarker3949"></a><a id="_idIndexMarker3950"></a>control elements on a web page, JavaScript also gives you access to and the ability to manipulate the parts of the browser window itself. For example, you might want to get or replace the URL that is in the browser’s address bar, or open or close a browser window. </p>
			<p class="body">In JavaScript, the browser is known as the <span class="Literal-fc">window</span> object. The <span class="Literal-fc">window</span> object has a number of properties and methods that we can use to interact with it. In fact, our old friend <span class="Literal-fc">alert()</span> is actually one of the standard browser object methods. <span class="Xref-Figure">Table 21-1</span> lists just a few of the properties and methods that can be used with <span class="Literal-fc">window</span> to give you an idea of what’s possible. For a complete list, see the Window API reference at MDN Web Docs (<a href="http://developer.mozilla.org/en-US/docs/Web/API/Window"><span class="URL-Email">developer.mozilla.org/en-US/docs/Web/API/Window</span></a>).</p>
			<table id="table004-5" class="Table">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Head" colspan="2">
							<p class="TableTitle"><span class="Table-Label">Table 21-1.</span> Browser properties and methods.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Property/method</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Description</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">event</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Represents <a id="_idIndexMarker3951"></a>the state of an event</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">history</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Contains<a id="_idIndexMarker3952"></a> the URLs the user has visited within a browser window</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">location</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Gives <a id="_idIndexMarker3953"></a>read/write access to the URI in the address bar</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">status</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Sets or<a id="_idIndexMarker3954"></a> returns the text in the status bar of the window</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">alert()</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Displays<a id="_idIndexMarker3955"></a> an alert box with a specified message and an OK button</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">close()</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody"><a id="_idIndexMarker3956"></a>Closes the current window</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">confirm()</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Displays <a id="_idIndexMarker3957"></a>a dialog box with a specified message and an OK and a Cancel button</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">focus()</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">Sets<a id="_idIndexMarker3958"></a> focus on the current window</p>
						</td>
					</tr>
				</tbody>
			</table>
			<h1 id="_idParaDest-197" class="HeadA"><a id="_idTextAnchor275"></a>Events</h1>
			<p class="body">JavaScript can <a id="_idIndexMarker3959"></a><a id="_idIndexMarker3960"></a>access objects in the page and the browser window, but did you know it’s also “listening” for certain events to happen? <a id="_idIndexMarker3961"></a>An <span class="FirstTerm">event</span> is an action that can be detected with JavaScript, such as when the document loads or when the user clicks an element or just moves her mouse over it. HTML 4.0 made it possible for a script to be tied to events on the page, whether initiated by the user, the browser itself, or other scripts. This is known<a id="_idIndexMarker3962"></a> as <span class="FirstTerm">event binding</span>.</p>
			<p class="body">In scripts, an event is identified by an event handler. For example, the<a id="_idIndexMarker3963"></a> <span class="Literal-fc">onload</span> event handler triggers a script when the document loads, and <a id="_idIndexMarker3964"></a><a id="_idIndexMarker3965"></a>the <span class="Literal-fc">onclick</span> and <span class="Literal-fc">onmouseover</span> handlers trigger a script when the user clicks or mouses over an element, respectively. <span class="Xref-Figure">Table 21-2</span> lists some of the most common event handlers. Keep in mind that these are also <a id="_idIndexMarker3966"></a><a id="_idIndexMarker3967"></a>case-sensitive. </p>
			<table id="table005-3" class="Table">
				<colgroup>
					<col/>
					<col/>
				</colgroup>
				<thead>
					<tr class="Table">
						<td class="Table Remove-bottom-rule Table-Head" colspan="2">
							<p class="TableTitle"><span class="Table-Label"><span class="FigureLabel">Table 21-2.</span></span> Common events.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Head">
							<p class="TableHeader">Event handler</p>
						</td>
						<td class="Table Table-Head">
							<p class="TableHeader">Event description</p>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onblur</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">An <a id="_idIndexMarker3968"></a>element loses focus.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onchange</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">The <a id="_idIndexMarker3969"></a>content of a form field changes.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onclick</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">The mouse clicks an object.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onerror</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">An <a id="_idIndexMarker3970"></a>error occurs when the document or an image loads.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onfocus</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">An <a id="_idIndexMarker3971"></a>element gets focus.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onkeydown</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">A key<a id="_idIndexMarker3972"></a> on the keyboard is pressed.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onkeypress</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">A <a id="_idIndexMarker3973"></a>key on the keyboard is pressed or held down.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onkeyup</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">A <a id="_idIndexMarker3974"></a>key on the keyboard is released.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onload</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">A page or an image is finished loading.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onmousedown</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">A<a id="_idIndexMarker3975"></a> mouse button is pressed.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onmousemove</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">The <a id="_idIndexMarker3976"></a>mouse is moved.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onmouseout</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">The <a id="_idIndexMarker3977"></a>mouse is moved off an element.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onmouseover</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">The mouse is moved over an element.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onmouseup</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">A<a id="_idIndexMarker3978"></a> mouse button is released.</p>
						</td>
					</tr>
					<tr class="Table">
						<td class="Table Table-Body-Left">
							<pre class="cellCode">onsubmit</pre>
						</td>
						<td class="Table Table-Body-Right">
							<p class="TableBody">The<a id="_idIndexMarker3979"></a> submit button is clicked in a form.</p>
						</td>
					</tr>
				</tbody>
			</table>
			<p class="body">There are three common methods for applying event handlers to items within our pages:</p>
			<ul>
				<li class="ListBullet">As an HTML attribute</li>
				<li class="ListBullet">As a method attached to the element</li>
				<li class="ListBullet">Using <span class="Literal-fc">addEventListener()</span></li>
			</ul>
			<p class="body">In the upcoming examples of the latter two approaches, we’ll use the <span class="Literal-fc">window</span> object. Any events we attach to <span class="Literal-fc">window</span> apply to the entire document. We’ll be using the <span class="Literal-fc">onclick</span> event in all of these as well.</p>
			<h2 class="HeadB">As an HTML Attribute</h2>
			<p class="body">You can specify <a id="_idIndexMarker3980"></a><a id="_idIndexMarker3981"></a>the function to be run in an attribute in the markup, as shown in the following example: </p>
			<pre class="CodeFirst">&lt;body <code class="CodeColor">onclick="myFunction();"</code>&gt; <span class="Code-Comment">/* myFunction will now run when the user clicks anything within 'body' */</span></pre>
			<p class="body">Although still functional, this is an antiquated way of attaching events to elements within the page. It should be avoided for the same reason we avoid using <span class="Literal-fc">style</span> attributes in our markup to apply styles to individual elements. In this case, it blurs the line between the semantic layer and behavioral layers of our pages, and can quickly lead to a maintenance nightmare.</p>
			<h2 class="HeadB">As a Method</h2>
			<p class="body">This is another <a id="_idIndexMarker3982"></a><a id="_idIndexMarker3983"></a>somewhat dated approach to attaching events, though it does keep things strictly within our scripts. We can attach functions by using helpers already built into JavaScript:</p>
			<pre class="CodeFirst">window.onclick = myFunction; <span class="Code-Comment">/* myFunction will run when the user clicks anything within the browser window */</span></pre>
			<p class="body">We can also use an <a id="_idIndexMarker3984"></a><a id="_idIndexMarker3985"></a>anonymous function rather than a predefined one:</p>
			<pre class="CodeFirst">window.onclick = function() {<br/>   <span class="Code-Comment">/* Any code placed here will run when the user clicks anything within the browser window */</span><br/>};</pre>
			<p class="body">This approach has the benefit of both simplicity and ease of maintenance, but does have a fairly major drawback: we can<a id="_idIndexMarker3986"></a> bind only one event at a time with this method.</p>
			<pre class="CodeFirst">window.onclick = myFunction;  <br/><br/>window.onclick = myOtherFunction; </pre>
			<p class="body">In the example just shown, the second binding overwrites the first, so when the user clicks inside the browser window, only <span class="Literal-fc">myOtherFunction</span> will run. The reference to <span class="Literal-fc">myFunction</span> is thrown away.</p>
			<h2 class="HeadB">addEventListener</h2>
			<p class="body">Although a little <a id="_idIndexMarker3987"></a><a id="_idIndexMarker3988"></a>more complex at first glance, this approach allows us to keep our logic within our scripts and allows us to perform multiple bindings on a single object. The syntax is a bit more verbose. We start by calling the <span class="Literal-fc">addEventListener()</span> method of the target object, and then specify the event in question and the function to be executed as two arguments:</p>
			<pre class="CodeFirst">window.addEventListener("click", myFunction); </pre>
			<p class="body">Notice that we omit the preceding “on” from the event handler with this syntax. </p>
			<p class="body">Like the previous method, <span class="Literal-fc">addEventListener()</span> can be used with an anonymous function as well:</p>
			<pre class="CodeFirst">window.addEventListener("click", function(e) { <br/>}); </pre>
			<p class="body">This was just a brief introduction, so I recommend getting more information on <span class="Literal-fc">addEventListener()</span> at the “eventTarget.addEventListener” page on the <a id="_idIndexMarker3989"></a>MDN Web Docs (<a href="http://developer.mozilla.org/en/DOM/element.addEventListener"><span class="URL-Email">developer.mozilla.org/en/DOM/element.addEventListener</span></a>).</p>
			<h1 id="_idParaDest-198" class="HeadA"><a id="_idTextAnchor276"></a>Putting It All Together</h1>
			<p class="body">Now you have been introduced to many of the important building blocks of JavaScript. You’ve seen variables, data types, and arrays. You’ve met <span class="Literal-fc">if</span>/<span class="Literal-fc">else</span> statements, loops, and functions. You know your browser objects from your event handlers. That’s a lot of bits and pieces. Let’s walk through a couple of simple script examples to see how they get put together.</p>
			<h2 class="HeadB">Example 1: A Tale of Two Arguments </h2>
			<p class="body">Here’s a simple function that accepts two arguments and returns the greater of the two values:</p>
			<pre class="CodeFirst">greatestOfTwo( first, second ) {<br/>  if( first &gt; second ) {<br/>    return first;<br/>  } else {<br/>    return second;<br/>  }<br/>}</pre>
			<p class="body">We start by naming our function <span class="Literal-fc">greatestOfTwo</span>. We set it up to accept two arguments, which we’ll just call “first” and “second” for want of more descriptive words. The function contains an <span class="Literal-fc">if</span>/<span class="Literal-fc">else</span> statement that returns <span class="Literal-fc">first</span> if the first argument is greater than the second, and returns <span class="Literal-fc">second</span> if it isn’t.</p>
			<h2 class="HeadB">Example 2: The Longest Word </h2>
			<p class="body">Here’s a function that accepts an array of strings as a single argument and returns the longest string in the array. It returns the first occurrence of one of the longest strings (in case they are of the same length).</p>
			<pre class="CodeFirst">longestWord( strings ) {<br/>  var longest = strings[0];<br/>   for( i = 1; i &lt; strings.length; i++ ) {<br/>    if ( strings[i].length &gt; longest.length ) {<br/>      longest = strings[i];<br/>    }<br/>   }<br/>  return longest;<br/>}</pre>
			<p class="body">First, we name the function and allow it to accept a single argument. Then, we set the <span class="Literal-fc">longest</span> variable to an initial value of the first item in the array: <span class="Literal-fc">strings[0]</span>. We start our loop at 1 instead of 0 since we already have the first value in the array captured. Each time we iterate through the loop, we compare the length of the current item in the array to the length of the value saved in the <span class="Literal-fc">longest</span> variable. If the current item in the array contains more characters than the current value of the <span class="Literal-fc">longest</span> variable, we change the value of <span class="Literal-fc">longest</span> to that item. If not, we do nothing. After the loop is complete we return the value of <span class="Literal-fc">longest</span>, which now contains the longest string in the array.</p>
			<h1 id="_idParaDest-199" class="HeadA"><a id="_idTextAnchor277"></a>Learning More About JavaScript</h1>
			<p class="body">Now that you’ve seen the <a id="_idIndexMarker3990"></a>basic building blocks and a few simple examples, does it whet your appetite for more? Here are a few resources to take you to the next step:</p>
			<p class="ListVariableTerm">JavaScript Resources at MDN Web Docs (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"><span class="URL-Email">developer.mozilla.org/en-US/docs/Web/JavaScript</span></a>)</p>
			<p class="ListVariable">The folks at MDN Web Docs have assembled excellent tutorials as well as thorough documentation on all the components of JavaScript. It’s a great site to visit when you’re just starting out, and it is likely to be a go-to reference even after you have years of experience.</p>
			<p class="ListVariableTerm"><span class="Citation">JavaScript for Web Designers</span> by Mat Marquis (A Book Apart)</p>
			<p class="ListVariable">I can say a lot more in a book than in a chapter, so if you’re looking for a little more depth in a beginner-level manual, I wrote this book for you.</p>
			<p class="ListVariableTerm"><span class="Citation">Learning JavaScript</span> by<a id="_idIndexMarker3991"></a> Ethan Brown (O’Reilly)</p>
			<p class="ListVariable">For a deeper dive into JavaScript, this book will take you to the next level. </p>
			<p class="body">Why not see how you’re doing with JavaScript so far with <span class="Xref-Figure">Exercise 21-2</span> and a quick quiz? In the next chapter, you’ll see how we use these tools in the context of web design.</p>
			<div>
				<div id="_idContainer1415" class="exercise">
					<h6 class="ExerciseTitle"><span class="Exercise-Label">Exercise 21-2.</span> You try it</h6>
					<p class="SidebarBody">In this exercise, you will write a script that updates the page’s title in the browser window with a “new messages” count. You may have encountered this sort of script in the wild from time to time. We’re going to assume for the sake of the exercise that this is going to become part of a larger web app someday, and we’re tasked only with updating the page title with the current “unread messages” count.</p>
					<p class="SidebarBody">I’ve created a document for you already (<span class="Filename--Sidebar-">title.html</span>), which is available in the <span class="Filename--Sidebar-">materials</span> folder for this chapter on <a href="http://learningwebdesign.com"><span class="URL-Email--Sidebar-">learningwebdesign.com</span></a>. The resulting script is in <span class="Xref--Sidebar-">Appendix A</span>.</p>
					<ol>
						<li class="SidebarListNumber" value="1">Start by opening <span class="Filename--Sidebar-">title.html</span> in a browser. You’ll see a blank page, with the title element already filled out. If you look up at the top of your browser window, you’ll notice it reads “Million Dollar WebApp”.</li>
						<li class="SidebarListNumber">Now open the document in a text editor. You’ll find a <span class="Literal-Sidebar">script</span> element containing a comment just before the closing <span class="Literal-Sidebar">&lt;/body&gt;</span> tag. Feel free to delete the comment.</li>
						<li class="SidebarListNumber">If we’re going to be changing the page’s title, we should save the original first. Create a variable named <span class="Literal-Sidebar">originalTitle</span>. For its value, we’ll have the browser get the title of the document using the DOM method <span class="Literal-Sidebar">document.title</span>. Now we have a saved reference to the page title at the time the page is loaded. This variable should be global, so we’ll declare it outside any functions.<pre class="SidebarCodeFirst"><code class="CodeColor">var originalTitle = document.title; </code></pre></li>
						<li class="SidebarListNumber">Next, we’ll define a function so we can reuse the script whenever it’s needed. Let’s call the function something easy to remember, so we know at a glance what it does when we encounter it in our code later. <span class="Literal-Sidebar">showUnreadCount()</span> works for me, but you can name it whatever you’d like.<pre class="SidebarCodeFirst">var originalTitle = document.title; <code class="CodeColor">function showUnreadCount() {}</code></pre></li>
						<li class="SidebarListNumber">We need to think about what the function needs to make it useful. This function does something with the unread message count, so its argument is a single number referred to as <span class="Literal-Sidebar">unread</span> in this example.<pre class="SidebarCodeFirst">var originalTitle = document.title; <br/>function showUnreadCount( <code class="CodeColor">unread</code> ) {<br/>} </pre></li>
						<li class="SidebarListNumber">Now let’s add the code that runs for this function. We want the document title for the page to display the title of the document plus the count of unread messages. Sounds like a job for concatenation (<span class="Literal-Sidebar">+</span>)! Here we set the <span class="Literal-Sidebar">document.title</span> to be (<span class="Literal-Sidebar">=</span>) whatever string was saved for <span class="Literal-Sidebar">originalTitle</span> plus the number in <span class="Literal-Sidebar">showUnreadCount</span>. As we learned earlier, JavaScript combines a string and a number as though they are both strings.<pre class="SidebarCodeFirst">var originalTitle = document.title; <br/>function showUnreadCount( unread ) {<br/><code class="CodeColor">  document.title = originalTitle + unread; </code><br/>}</pre></li>
						<li class="SidebarListNumber">Let’s try out our script before we go too much further. Below where you defined the function and the <span class="Literal-Sidebar">originalTitle</span> variable, enter <span class="Literal-Sidebar">showUnreadCount( 3 );</span>. Now save the page and reload it in your browser (<span class="Xref-Figure">Figure 21-7</span>).<pre class="SidebarCodeFirst">var originalTitle = document.title; <br/>function showUnreadCount( unread ) {<br/>  document.title = originalTitle + unread; <br/>}<br/><code class="CodeColor">showUnreadCount(3);</code></pre><figure id="_idContainer1412" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_2107.png" alt="" width="1338" height="232"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-7.</span> Our title tag has changed! It’s not quite right yet, though.</figcaption></figure></li>
						<li class="SidebarListNumber">Our script is working, but it’s not very easy to read. Fortunately, there’s no limit on the number of strings we can combine at once. Here we’re adding new strings that wrap the count value and the words “new messages” in parentheses (<span class="Xref-Figure">Figure 21-8</span>).<pre class="SidebarCodeFirst">var originalTitle = document.title; <br/><br/>function showUnreadCount( unread ) {<br/>  document.title = <code class="CodeColor">originalTitle + "(" + unread + " new messages!)"; </code><br/>}<br/>showUnreadCount(3);</pre><figure id="_idContainer1414" class="figWCaption"><p class="Figure_Holder"><img src="image/lwd5_2108.png" alt="" width="1338" height="241"/></p><figcaption class="FigureCaption"><span class="FigureLabel">Figure 21-8.</span> Much better!</figcaption></figure></li>
					</ol>
				</div>
			</div>
			<h1 id="_idParaDest-200" class="HeadA"><a id="_idTextAnchor278"></a>Test Yourself</h1>
			<p class="body">We covered a lot of new material in this chapter. Here’s a chance to test what sunk in. You will find the answers in <a href="lwd5_appendixA.xhtml#_idTextAnchor325"><span class="Xref">Appendix </span><span class="Xref">A</span></a>.</p>
			<ol>
				<li class="ListNumber" value="1">Name one good thing and one bad thing about linking to external <span class="Filename">.js</span> files.</li>
				<li class="ListNumber">Given the following array<pre class="CodeFirst"><code class="Code">var myArray = [1, "two", 3, "4"]</code></pre><p class="ListNumber_cont">write what the alert message will say for each of these examples:</p><ol><li class="ListNumber_Indent"><code class="Code">alert( myArray[0] );</code></li><li class="ListNumber_Indent"><code class="Code">alert( myArray[0] + myArray[1] );</code></li><li class="ListNumber_Indent"><code class="Code">alert( myArray[2] + myArray[3] );</code></li><li class="ListNumber_Indent"><code class="Code">alert( myArray[2] – myArray[0] );</code></li></ol></li>
				<li class="ListNumber">What will each of these alert messages say?<ol><li class="ListNumber_Indent" value="1"><code class="Code">var foo = 5;</code><span class="Literal-fc"> </span><br/>foo += 5; alert( foo );</li><li class="ListNumber_Indent"><code class="Code">i = 5;</code><span class="Literal-fc"> </span><code class="Code"><br/>i++;<br/>alert( i );</code></li><li class="ListNumber_Indent"><code class="Code">var foo = 2;</code><span class="Literal-fc"> </span><br/>alert( foo + " " + "remaining");</li><li class="ListNumber_Indent"><code class="Code">var foo = "Mat";</code><span class="Literal-fc"> </span><code class="Code"><br/>var bar = "Jennifer"; <br/>if( foo.length &gt; bar.length ) {<br/>  alert( foo  + " is longer." );<br/>} else {<br/>  alert( bar + " is longer." );<br/>}</code></li><li class="ListNumber_Indent"><code class="Code">alert( 10 === "10" );</code></li></ol></li>
				<li class="ListNumber">Describe what this does: <pre class="CodeFirst"><code class="Code">for( var i = 0; i &lt; items.length;  i++ ) {  }  </code></pre></li>
				<li class="ListNumber">What is the potential problem with globally scoped variables?</li>
				<li class="ListNumber">Match each event handler with its trigger.
					<table id="table006-2" class="table_invisible">
						<colgroup>
							<col/>
							<col/>
						</colgroup>
						<tbody>
							<tr class="table_invisible">
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">a. <code class="Code">onload</code></p>
								</td>
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">1.  The user finishes a form and hits the submit button.</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">b. <code class="Code">onchange</code></p>
								</td>
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">2.  The page finishes loading.</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">c. <code class="Code">onfocus</code></p>
								</td>
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">3.  The pointer hovers over a link.</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">d. <code class="Code">onmouseover</code></p>
								</td>
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">4.  A text-entry field is selected and ready for typing.</p>
								</td>
							</tr>
							<tr class="table_invisible">
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">e. <code class="Code">onsubmit</code></p>
								</td>
								<td class="table_invisible invisible">
									<p class="ListNumber_cont">5.  A user changes her name in a form field.</p>
								</td>
							</tr>
						</tbody>
					</table></li>
			</ol>
			
		</div>
	</div>
</div>
</body>
</html>