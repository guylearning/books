<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer1653" class="appa">
			<p id="_idParaDest-231" class="Epub-TOC-Part-Title"><strong class="Emphasis_Bold"><a id="_idTextAnchor321"></a>Part VI.</strong> Appendices</p>
		</div>
		<div id="_idContainer1654" class="appa">
			<h1 class="partLabel"><a id="_idTextAnchor322"></a>VI</h1>
		</div>
		<div id="_idContainer1655" class="appa">
			<h1 class="partTitle"><a id="_idTextAnchor323"></a>Appendices</h1>
		</div>
		<div id="_idContainer1656" class="appa">
			<p id="_idParaDest-232" class="Epub-TOC-App-Title"><a id="_idTextAnchor324"></a>A. Answers</p>
		</div>
		<div id="_idContainer1657" class="appa">
			<h1 class="chapterLabel">A</h1>
		</div>
		<div id="_idContainer1658" class="appa">
			<h1 class="appTitle"><a id="_idTextAnchor325"></a><a id="_idTextAnchor326"></a>Answers</h1>
		</div>
		<div id="_idContainer1661" class="appa">
			<h2 class="HeadB">Chapter 1: Getting Started in Web Design</h2>
			<ol>
				<li class="ListNumber">b, d, a, c </li>
				<li class="ListNumber">The W3C guides the development of web-related technologies.</li>
				<li class="ListNumber">c, d, a, b</li>
				<li class="ListNumber">Frontend development is concerned with aspects of the site that appear in or are related to the browser. Backend development involves the applications and databases required on the server for site functionality.</li>
				<li class="ListNumber">An FTP tool is used to transfer files between computers over the internet, such as between your local machine and the server. You may use an FTP tool provided by your hosting company, built into a code editor, or as a standalone application.</li>
			</ol>
			<h2 class="HeadB">Chapter 2: How the Web Works</h2>
			<p class="body">1. c;  2. j;  3. h;  4. g;  5. f;  6. i;  7. b;  8. a;  9. d; 10. e</p>
			<h2 class="HeadB">Chapter 3: Some Big Concepts You Need to Know</h2>
			<ol>
				<li class="ListNumber" value="1">There are a number of unknown factors when you’re developing a site. Some that were addressed in this chapter include:<ul><li class="ListBullet_Indent">The size of the screen or browser window</li><li class="ListBullet_Indent">The user’s internet connection speed</li><li class="ListBullet_Indent">Whether JavaScript is enabled</li><li class="ListBullet_Indent">Whether the browser supports specific features</li><li class="ListBullet_Indent">Whether the user is at a desk or on the go (context and attention span)</li></ul></li>
				<li class="ListNumber"> 1. c;  2. d;  3. e;  4. a;  5. b</li>
				<li class="ListNumber">The four general disability categories include:<ul><li class="ListBullet_Indent">Sight impairment: make sure the content is semantic and in logical order for when it is read by a screen reader.</li><li class="ListBullet_Indent">Hearing impairment: provide transcripts for audio and video content.</li><li class="ListBullet_Indent">Mobility impairment: use measures that help users without a mouse or keyboard.</li><li class="ListBullet_Indent">Cognitive impairment: content should be simple and clearly organized.</li></ul></li>
				<li class="ListNumber">You would use a waterfall chart to evaluate your site’s performance in the optimization process.</li>
			</ol>
			<h2 class="HeadB">Chapter 4: Creating a Simple Page<a id="_idTextAnchor327"></a></h2>
			<ol>
				<li class="ListNumber" value="1">A tag is part of the markup (brackets and element name) used to delimit an element. An element consists of the content and its tags.</li>
				<li class="ListNumber">The recommended markup for a minimal HTML5 document is as follows:<pre class="CodeFirst">&lt;!DOCTYPE html&gt;<br/>&lt;html&gt;<br/>  &lt;head&gt;<br/>    &lt;meta charset="utf8"&gt;<br/>    &lt;title&gt;Title&lt;/title&gt;<br/>  &lt;/head&gt;<br/>  &lt;body&gt;<br/>  &lt;/body&gt;<br/>&lt;/html&gt;</pre></li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent"><em class="Emphasis">Sunflower.html</em><span class="Filename--10pt-">—</span>Yes.</li><li class="ListNumber_Indent"><em class="Emphasis">index.doc</em>—No, it must end in <em class="Emphasis">.html</em> or <em class="Emphasis">.htm.</em></li><li class="ListNumber_Indent"><em class="Emphasis">cooking home page.html</em>—No, there may be no character spaces.</li><li class="ListNumber_Indent"><em class="Emphasis">Song_Lyrics.html</em>—Yes.</li><li class="ListNumber_Indent"><em class="Emphasis">games/rubix.html</em>—No, there may be no slashes in the name.</li><li class="ListNumber_Indent"><em class="Emphasis">%whatever.html</em>—No, there may be no percent symbols.</li></ol></li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1">The <span class="Literal-fc">src</span> and <span class="Literal-fc">alt</span> attributes are missing: <code class="Code">&lt;img src="birthday.jpg" alt=""&gt;</code>  </li><li class="ListNumber_Indent">The slash in the end tag is missing: <code class="Code">&lt;em&gt;Congratulations!&lt;/em&gt;</code></li><li class="ListNumber_Indent">There should be no attribute in the end tag: <pre class="CodeFirst">	<code class="Code">&lt;a href="file.html"&gt;linked text&lt;/a&gt;</code></pre></li><li class="ListNumber_Indent">The slash should be a forward slash:</li></ol><pre class="CodeFirst">	<code class="Code">&lt;p&gt;This is a new paragraph&lt;/p&gt;</code></pre></li>
				<li class="ListNumber">Make it a comment: <pre class="CodeFirst"><code class="Code">&lt;!-- product list begins here --&gt;</code></pre></li>
			</ol>
			<h2 class="HeadB">Chapter 5: Marking Up Text</h2>
			<ol>
				<li class="ListNumber" value="1">Here is the markup for a thematic break between these paragraphs:<pre class="CodeFirst"><code class="Code">&lt;p&gt;People who know me know that I love to cook.&lt;/p&gt;</code><br/><code class="CodeColor">&lt;hr&gt;</code><br/><code class="Code"> &lt;p&gt;I've created this site to share some of my favorite recipes.&lt;/p&gt;</code> </pre></li>
				<li class="ListNumber">A <span class="Literal-fc">blockquote</span> <span class="lnn-Char-Char">is a block-level element used for long quotations or quoted material that may consist of other block elements. The </span><span class="Literal-fc">q</span><span class="lnn-Char-Char"> (quote) element is for short quotations that go in the flow of text and do not cause line breaks.</span></li>
				<li class="ListNumber">The <span class="Literal-fc">pre</span> element.</li>
				<li class="ListNumber">The <span class="Literal-fc">ul</span> element is an unordered list element. It is used for lists that don’t need to appear in a particular sequence. They display with bullets by default. The <span class="Literal-fc">ol</span> element is an ordered list in which sequence matters. The browser automatically inserts numbers for ordered lists.</li>
				<li class="ListNumber">Use a style sheet to remove bullets from an unordered list.</li>
				<li class="ListNumber"><code class="Code"> </code><code class="Code">&lt;abbr title="World Wide Web Consortium"&gt;</code><code class="Code">W3C</code><code class="Code">&lt;/abbr&gt;</code></li>
				<li class="ListNumber"><span class="Literal-fc">dl</span> is the element used to identify an entire description list. The <span class="Literal-fc">dt</span> element is used to identify just one term within that list.</li>
				<li class="ListNumber">The <span class="Literal-fc">id</span> attribute is used to identify a unique element in a document, and the name in its value may appear only once in a document. <span class="Literal-fc">class</span> is used to classify multiple elements into conceptual groups.</li>
				<li class="ListNumber">An <span class="Literal-fc">article</span> element is intended for a self-contained body of content that would be appropriate for syndication or might appear in a different context. A <span class="Literal-fc">section</span> element divides content into thematically related chunks.</li>
			</ol>
			<h2 class="HeadB">Chapter 6: Adding Links</h2>
			<h3 class="HeadC">Exercise 6-7</h3>
			<ol>
				<li class="ListNumber" value="1"><code class="Code">&lt;p&gt;&lt;a href="tapenade.html"&gt;Go to the tapenade recipe&lt;/a&gt;&lt;/p&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;p&gt;&lt;a href="../salmon.html"&gt;Try this with Garlic Salmon.&lt;/a&gt;&lt;/p&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;p&gt;&lt;a href="pasta/linguine.html"&gt;Try the Linguine with Clam Sauce&lt;/a&gt;&lt;/p&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;p&gt;&lt;a href="../../about.html"&gt;About Jen's Kitchen&lt;/a&gt;&lt;/p&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;p&gt;&lt;a href="http://www.allrecipes.com"&gt;Go to Allrecipes.com&lt;/a&gt;&lt;/p&gt;</code></li>
			</ol>
			<h3 class="HeadC">Test Yourself</h3>
			<ol>
				<li class="ListNumber" value="1"><code class="Code">&lt;a href="tutorial.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="examples/instructions.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="examples/people/family.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="/examples/things/boot.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="../index.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="http://www.learningwebdesign.com"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="../instructions.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;a href="../../index.html"&gt;...&lt;/a&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;img src="images/arrow.gif" alt="" /&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;img src="../images/arrow.gif" alt="" /&gt;</code></li>
				<li class="ListNumber"><code class="Code">&lt;img src="../../images/bullet.gif</code><code class="Code">" alt="" /&gt;</code></li>
			</ol>
			<h2 class="HeadB">Chapter 7: Adding Images</h2>
			<ol>
				<li class="ListNumber" value="1">The <span class="Literal-fc">src</span> and <span class="Literal-fc">alt</span> attributes are required for the document to be valid. If the <span class="Literal-fc">src</span> attribute is omitted, the browser won’t know which image to use. You may leave the value of the <span class="Literal-fc">alt</span> attribute empty if alternative text would be meaningless or clumsy when read in context.</li>
				<li class="ListNumber"><code class="Code">&lt;img src="furry.jpg" alt=""&gt;</code></li>
				<li class="ListNumber">a) Because HTML documents are not valid if the <span class="Literal-fc">alt</span> attribute is omitted, and b) <span class="Literal-fc">alt</span> improves accessibility by providing a description of the image if it is not available or not viewable.</li>
				<li class="ListNumber">The three likely causes for a missing image are a) the URL is incorrect, so the browser is looking in the wrong place or for the wrong filename (names are case-sensitive); b) the image file is not in an acceptable format; and c) the image file is not named with the proper suffix (<span class="Filename--10pt-">.</span><span class="Filename">gif</span>, <span class="Filename">.jpg</span>, or <span class="Filename">.png</span>, as appropriate).</li>
				<li class="ListNumber">x-descriptors specify the screen resolution used for targeting high-resolution monitors. The w-descriptor provides the actual size of the image file that the browser uses to make the best selection based on viewport width.</li>
				<li class="ListNumber">A device pixel is the square of colored light that makes up the screen display. CSS pixels (also called “reference pixels”) make up the grid that devices use to lay out what appears on the screen. The CSS pixel may be made up of multiple device pixels.</li>
				<li class="ListNumber">b, c, d, a, d, b</li>
				<li class="ListNumber">The <span class="Literal-fc">picture</span> element provides a set of images for the browser to choose from. When the viewport is 480 pixels or wider, the image will appear at 80% of the viewport width. For smaller viewport sizes, it fills 100% of the viewport. There is a set of images in WebP format for browsers that support them; otherwise, the browser will choose from the set of JPEGs.</li>
				<li class="ListNumber">Disk cache is where browsers temporarily store files downloaded over the network so they can be reused. Taking advantage of cached resources eliminates the need for repeated server requests for the same file and can increase performance.</li>
				<li class="ListNumber">Advantages include simple and familiar markup, excellent browser support, image caching, and available fallbacks. Disadvantages include the inability to manipulate the parts of the SVG with style sheets or JavaScript.</li>
				<li class="ListNumber">Advantages of inline SVGs include the ability to take advantage of all of SVG’s features (animation, scripting, and applying CSS style rules), good browser support, and fewer server requests. Disadvantages include potentially unwieldy amounts of code in the HTML document, more complicated image maintenance, and lack of caching.</li>
				<li class="ListNumber">When it is purely presentational and not part of the editorial content of the page.</li>
				<li class="ListNumber"><span class="Literal-fc">image/svg+xml</span> is the MIME type of an SVG file. You may need to include it as the value of the <span class="Literal-fc">type</span> attribute in the <span class="Literal-fc">picture</span> element or use it to configure your server to recognize SVG files as images.</li>
				<li class="ListNumber"><span class="Literal-fc">http://www.w3.org/2000/svg</span> is the pointer to the SVG namespace as standardized by the W3C. It appears as the value of the <span class="Literal-fc">xmlns</span> (XML namespace) attribute in <span class="Literal-fc">svg</span> elements.</li>
			</ol>
			<h2 class="HeadB">Chapter 8: Table Markup</h2>
			<ol>
				<li class="ListNumber" value="1">The table itself (<span class="Literal-fc">table</span>), rows (<span class="Literal-fc">tr</span>), header cells (<span class="Literal-fc">th</span>), data cells (<span class="Literal-fc">td</span>), and an optional caption (<span class="Literal-fc">caption</span>).</li>
				<li class="ListNumber">The <span class="Literal-fc">table</span> element can directly contain <span class="Literal-fc">tr</span>, <span class="Literal-fc">caption</span>, <span class="Literal-fc">colgroup</span>, <span class="Literal-fc">thead</span>, <span class="Literal-fc">tbody</span>, and <span class="Literal-fc">tfoot</span> elements.</li>
				<li class="ListNumber">The <span class="Literal-fc">tr</span> element can contain only some number of <span class="Literal-fc">th</span> and <span class="Literal-fc">td</span> elements.</li>
				<li class="ListNumber">Use the <span class="Literal-fc">col</span> element if you want to include additional information about the structure of a table, to specify widths to speed up display, or to add certain style properties to a column of cells.</li>
				<li class="ListNumber">a) The <span class="Literal-fc">caption</span> should be the first element inside the <span class="Literal-fc">table</span> element; <p class="ListNumber_cont">b) There may not be text directly in the <span class="Literal-fc">table</span> element; it must go in a <span class="Literal-fc">th</span> or <span class="Literal-fc">td</span>; </p><p class="ListNumber_cont">c) The <span class="Literal-fc">th</span> elements must go inside the <span class="Literal-fc">tr</span> element; </p><p class="ListNumber_cont">d) The second <span class="Literal-fc">tr</span> element is missing a closing tag; </p><p class="ListNumber_cont">e) There is no <span class="Literal-fc">colspan</span> element; it should be a <span class="Literal-fc">td</span> with a <span class="Literal-fc">colspan</span> attribute.</p></li>
			</ol>
			<h2 class="HeadB">Chapter 9: Forms</h2>
			<ol>
				<li class="ListNum-run-in" value="1"><ol><li class="ListNumber_Indent" value="1">POST (because of security issues)</li><li class="ListNumber_Indent">POST (because it uses the file selection input type)</li><li class="ListNumber_Indent">GET (because you may want to bookmark search results)</li><li class="ListNumber_Indent">POST (because it is likely to have a lengthy text entry)</li></ol></li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1">Drop-down menu: <span class="Literal-fc">&lt;select&gt;</span></li><li class="ListNumber_Indent">Radio buttons: <span class="Literal-fc">&lt;input type="radio"&gt;</span></li><li class="ListNumber_Indent"><span class="Literal-fc">&lt;textarea&gt;</span></li><li class="ListNumber_Indent">Eight checkboxes: <span class="Literal-fc">&lt;input type="checkbox"&gt;</span></li><li class="ListNumber_Indent">Scrolling menu: <span class="Literal-fc">&lt;select multiple="multiple"&gt;</span></li></ol></li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1"><span class="Literal-fc">checkbox</span> is not an element name; it is a value of the <span class="Literal-fc">type</span> attribute in the <span class="Literal-fc">input</span> element.</li><li class="ListNumber_Indent">The <span class="Literal-fc">option</span> element is not empty. It should contain the value for each option (for example, <span class="Literal-fc">&lt;option&gt;Orange&lt;/option&gt;</span>).</li><li class="ListNumber_Indent">The required <span class="Literal-fc">name</span> attribute is missing.</li><li class="ListNumber_Indent">The width and height of a text area are specified with the <span class="Literal-fc">cols</span> and <span class="Literal-fc">rows</span> attributes, respectively.</li></ol></li>
			</ol>
			<h2 class="HeadB">Chapter 10: Embedded Media</h2>
			<ol>
				<li class="ListNumber" value="1">A nested browsing context works like a browser window inside another browser window. You can create one with an <span class="Literal-fc">iframe</span> element or an <span class="Literal-fc">object</span> element (bonus points if you got both).</li>
				<li class="ListNumber">The <span class="Literal-fc">sandbox</span> attribute allows developers to set limitations on what nested content can do, and is important for security reasons.</li>
				<li class="ListNumber">To specify it with the required type attribute in a <span class="Literal-fc">source</span> element and to configure the server to recognize the media type.</li>
				<li class="ListNumber">a. container, b. video codec, c. video codec, d. audio codec, e. container, f. video codec, g. audio codec, h. container</li>
				<li class="ListNumber">The <span class="Literal-fc">poster</span> attribute specifies an image that appears in the video player until the video is played.</li>
				<li class="ListNumber">A <span class="Filename">.vtt</span> file is a text file in the WebVTT format that contains subtitles, captions, descriptions, chapter titles, or metadata that are synchronized to a video or audio file.</li>
				<li class="ListNumber">SVG is a vector format, and canvas is pixel-based (raster). SVGs can scale without loss of quality, but canvas is resolution-dependent and does not scale well. You can style the elements in an SVG with CSS and affect them with JavaScript, but canvas can be manipulated with JavaScript only.</li>
				<li class="ListNumber"><span class="Literal-fc">strokeRect()</span> and <span class="Literal-fc">fill()</span></li>
			</ol>
			<h2 class="HeadB">Chapter 11: Introducing Cascading Style Sheets </h2>
			<ol>
				<li class="ListNumber" value="1">selector: <span class="Literal-fc">blockquote</span>; property: <span class="Literal-fc">line-height</span>; value: <span class="Literal-fc">1.5</span>; declaration: <span class="Literal-fc">line-height: 1.5;</span></li>
				<li class="ListNumber">The paragraph text will be gray because when there are conflicting rules of identical weight, the last one listed in the style sheet will be used.</li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1">Use one rule with multiple declarations applied to the <span class="Literal-fc">p</span> element.<pre class="CodeFirst"><code class="Code">   p {<br/>     font-family: sans-serif;<br/>  </code><code class="Code">   font-size: 1em;<br/>     line-height: 1.2em; <br/>   }</code></pre></li>
					<li class="ListNumber_Indent">The semicolons are missing.
						<pre class="CodeFirst"><code class="Code">   blockquote { <br/>     font-size: 1em;<br/>   </code><code class="Code">  line-height: 150%;<br/>     color: gray; <br/>   }</code></pre></li>
					<li class="ListNumber_Indent">There should not be curly brackets around every declaration, only around the entire declaration block.
						<pre class="CodeFirst"><code class="Code">   body {background-color: black;<br/>     color: #666;<br/>     margin-left: 12em;<br/>     margin-right: 12em;<br/>   }</code></pre></li>
					<li class="ListNumber_Indent">This could be handled with a single rule with a grouped element type selector.
						<pre class="CodeFirst"><code class="Code">   </code><code class="Code">p, blockquote, li {<br/></code><code class="Code">     </code><code class="Code">color: white;<br/></code><code class="Code">   </code><code class="Code">}</code></pre></li><li class="ListNumber_Indent">This inline style is missing the property name.</li></ol><pre class="CodeFirst"><code class="Code">   </code><code class="Code">&lt;strong style="color: red"&gt;Act now!&lt;/strong&gt;</code></pre></li>
			</ol>
			<div>
				<figure id="_idContainer1660" class="figWCaption">
					<p class="Figure_Holder"><img src="image/lwd5_A01.png" alt="" width="1337" height="770"/></p>
					<figcaption class="FigureCaption"><span class="FigureLabel">Figure A-1.</span> Answer to Chapter 11, question 4.</figcaption>
				</figure>
			</div>
			<h2 class="HeadB">Chapter 12: Formatting Text </h2>
			<ol>
				<li class="ListNumber" value="1">a. 4;   b. 1;   c. 7;   d. 3;   e. 2;   f. 9;   g. 8;   h. 5;   i. 6</li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1"><code class="Code">body {color: red;}</code></li><li class="ListNumber_Indent"><code class="Code">h2 {color: red;}</code></li><li class="ListNumber_Indent"><code class="Code">h1, p {color: red;}</code></li><li class="ListNumber_Indent"><code class="Code">.special {color: red; }</code></li><li class="ListNumber_Indent"><code class="Code">#intro {color: red;}</code></li><li class="ListNumber_Indent"><code class="Code">#main strong {color: red;}</code></li><li class="ListNumber_Indent"><code class="Code">h2 + p {color: red;}</code></li></ol></li>
			</ol>
			<h2 class="HeadB">Chapter 13: Colors and Backgrounds</h2>
			<ol>
				<li class="ListNumber" value="1">g. a, b, and c</li>
				<li class="ListNumber">d. <code class="Code">rgb(FF, FF, FF)</code></li>
				<li class="ListNumber">a. 5;   b. 1;   c. 4;   d. 6;   e. 2;   f. 3</li>
				<li class="ListNumber">a. 1;   b. 3;   c. 2;   d. 6;   e. 5;   f. 4</li>
			</ol>
			<h2 class="HeadB">Chapter 14: Thinking Inside the Box</h2>
			<ol>
				<li class="Lettered-list" value="1"><code class="Code">border: double black medium;</code></li>
				<li class="Lettered-list"><code class="Code">padding: 2em;</code></li>
				<li class="Lettered-list"><code class="Code">padding: 2em; border: 4px solid red;</code></li>
				<li class="Lettered-list"><code class="Code">border: 4px solid red; margin: 2em;</code></li>
				<li class="Lettered-list"><code class="Code">padding: 1em 1em 1em 6em; border: 4px dashed black; margin: 1em 6em;</code><p class="ListNumber_cont">or</p><p class="ListNumber_cont"><code class="Code">padding: 1em; padding-left: 6em; border: 4px dashed; margin: 1em 6em;</code></p></li>
				<li class="Lettered-list"><code class="Code">padding: 1em 50px; border: 2px solid black; margin: 0 auto;</code></li>
			</ol>
			<h2 class="HeadB">Chapter 15: Floating and Positioning</h2>
			<ol>
				<li class="ListNumber" value="1">b is not true. Floats are positioned against the content edge, not the padding edge.</li>
				<li class="ListNumber">c is incorrect. Floats do not use offset properties, so there is no reason to include <span class="Literal-fc">right</span>.</li>
				<li class="ListNumber">Clear the <span class="Literal-fc">footer</span> to make it start below a floated sidebar on either side: <span class="Literal-fc">footer {clear: both;}</span></li>
				<li class="ListNumber">a) absolute; b) absolute, fixed; c) fixed; d) relative, absolute, fixed; e) static; f) relative; g) absolute, fixed h) relative, absolute, fixed; i) relative</li>
			</ol>
			<h2 class="HeadB">Chapter 16: CSS Layout with Flexbox and Grid</h2>
			<ol>
				<li class="ListNumber" value="1">Turn its parent element into a flex container by setting <span class="Literal-fc">display</span> to <span class="Literal-fc">flex</span>. The child element becomes a flex item automatically with no extra code.</li>
				<li class="ListNumber">a. 2;  b. 4;  c. 1;  d. 3 </li>
				<li class="ListNumber">The <span class="Literal-fc">align-items</span> property positions items relative to their flex line, while <span class="Literal-fc">align-content</span> distributes space around and within multiple lines. Both properties are applied to the container, and both are concerned with positioning along the cross axis.</li>
				<li class="ListNumber">a. 4;  b. 1;  c. 3;  d. 2</li>
				<li class="ListNumber">a. 4;  b. 3;  c. 2;  d. 5;  e. 1	</li>
				<li class="ListNumber">Style rules for displaying the items in the order shown in <span class="Xref-Figure">Figure 16-49</span>.<pre class="CodeFirst"><code class="Code">.box6 {order: -1;} </code></pre><pre class="Code"><code class="Code">.box1, .box2, .box3 {order: 1;}</code></pre></li>
				<li class="ListNumber">The key difference between Grid Layout and Flexbox is that Grid creates layouts in two dimensions—rows and columns—but Flexbox arranges elements on one axis. (<em class="Emphasis">Continued...</em>)<p class="ListNumber_cont">Similarities between Grid and Flexbox include:</p><ul><li class="ListBullet_Indent">For both Grid and Flexbox, making an element a container automatically turns its direct children into items. </li><li class="ListBullet_Indent">They are both based on the language direction of the document.</li><li class="ListBullet_Indent">Both can create whole-page layouts (although Grid is better suited to the task).</li><li class="ListBullet_Indent">You can change the order of the items with the <span class="Literal-fc">order</span> property.</li><li class="ListBullet_Indent">They both use the Box Alignment Module for item and content alignment.</li></ul></li>
				<li class="ListNumber">Grid template for the layout shown in <span class="Xref-Figure">Figure 16-50</span><span class="Xref">:</span> <pre class="CodeFirst"><code class="Code">grid-template-rows: 12em min-content 100px; </code></pre><pre class="Code"><code class="Code">grid-template-columns: 300px 2fr 1fr;</code></pre><p class="ListNumber_cont">Using the <span class="Literal-fc">grid</span> shorthand property:</p><pre class="CodeFirst"><code class="Code">grid: 12em min-content 100px / 300px 2fr 1fr;</code></pre><p class="ListNumber_cont">(Note: <span class="Literal-fc">auto</span> could be used instead of <span class="Literal-fc">min-content</span> in both examples.)</p></li>
				<li class="ListNumber">a. E;  b. D;  c. C;  d. A;  e. B</li>
				<li class="ListNumber"><code class="Code">#gallery:</code> <pre class="Code"><code class="Code">  </code><code class="Code">column-gap: 1em;</code></pre><pre class="Code"><code class="Code">}</code></pre></li>
				<li class="ListNumber">d,  a,  c,  b,  e</li>
			</ol>
			<h2 class="HeadB">Chapter 17: Responsive Web Design</h2>
			<ol>
				<li class="ListNumber" value="1">A responsive site delivers the same HTML source at the same URL regardless of the device used. An m-dot site sends a document at a separate URL when it receives a request from a mobile device. Mobile-specific sites also tend to reduce the number of options and content on the first screen.</li>
				<li class="ListNumber">It sets the size of the viewport the mobile browser uses to render the page to the same size as the screen.</li>
				<li class="ListNumber"><code class="Code">img { max-width: 100%; }</code></li>
				<li class="ListNumber">It sets the margin on the left and right side of the page to 10% if the viewport is 60em or wider.</li>
				<li class="ListNumber">If the layout is created with CSS Grid Layout, use <span class="Literal-fc">fr</span> and <span class="Literal-fc">minmax()</span> units to make columns and rows flexible while setting limits. If you have page elements in Flexbox, use the flex properties to let them grow and shrink as needed. Otherwise, use percentage values for page elements so they resize proportionally. Avoid fixed pixel measurements.</li>
				<li class="ListNumber">When you use ems for media queries, the page elements stay proportional to the size of the type. This can help keep line lengths consistent.</li>
				<li class="ListNumber">In an <span class="Literal-fc">@media</span> rule in a style sheet, in <span class="Literal-fc">@import</span> rules that call in external style sheets, and in the <span class="Literal-fc">link</span> element to an external style sheet.</li>
				<li class="ListNumber">Use a legible font, make the size slightly smaller, use a tighter line height, and use smaller margins.</li>
				<li class="ListNumber">You could use an accordion to hide and reveal the submenu options, or put the submenu on a separate landing page and link to it from the main navigation.</li>
				<li class="ListNumber">Test it on real devices, use an emulator, or use a third-party testing service.</li>
			</ol>
			<h2 class="HeadB">Chapter 18: Transitions, Transforms, and Animation</h2>
			<ol>
				<li class="ListNumber" value="1">Tweening is the process in animation in which frames are generated between two end point states.</li>
				<li class="ListNumber">A transition would have two keyframes, one for the beginning state and one for the end.</li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1"><code class="Code">transition-delay: 0.5s</code>;</li><li class="ListNumber_Indent"><code class="Code">transition-timing-function: linear;</code></li><li class="ListNumber_Indent"><code class="Code">transition-duration: 0.5s;</code></li><li class="ListNumber_Indent"><code class="Code">transition-property: line-height;</code></li></ol></li>
				<li class="ListNumber">c. <span class="Literal-fc">text-transform</span> is not an animatable property.</li>
				<li class="ListNumber"><span class="Literal-fc">ease</span> is the default timing function. It starts out slowly, speeds up quickly, and then slows down again at the very end.</li>
				<li class="ListNumber">.2s is the <span class="Literal-fc">transition-duration</span> value (how long the animation lasts).</li>
				<li class="ListNumber">Trick question! They will arrive at the same time, 300ms after the transition begins. The timing function has no effect on the total amount of time it takes.</li>
				<li class="ListNum-run-in"><ol><li class="ListNumber_Indent" value="1"><code class="Code">transform: rotate(7deg);</code></li><li class="ListNumber_Indent"><code class="Code">transform: translate(-50px, -25px);</code></li><li class="ListNumber_Indent"><code class="Code">transform-origin: right bottom;</code></li><li class="ListNumber_Indent"><code class="Code">transform: scale(1.25);</code></li></ol></li>
				<li class="ListNumber">The 3 value indicates that the element should be resized three times larger than its original <em class="Emphasis">height</em>.</li>
				<li class="ListNumber"><span class="Literal-fc">perspective: 250;</span> because lower number values indicate closer distance and are more dramatic. </li>
				<li class="ListNumber">The border is 3 pixels wide at 50% through the animation.</li>
				<li class="ListNum-run-in"> <ol><li class="ListNumber_Indent" value="1"><code class="Code">animation-direction: reverse;</code></li><li class="ListNumber_Indent"><code class="Code">animation-duration: 5s;</code></li><li class="ListNumber_Indent"><code class="Code">animation-delay: 2s;</code></li><li class="ListNumber_Indent"><code class="Code">animation-iteration-count: 3;</code></li><li class="ListNumber_Indent"><code class="Code">animation-fill-mode: forwards;</code></li></ol></li>
			</ol>
			<h2 class="HeadB">Chapter 19: More CSS Techniques</h2>
			<ol>
				<li class="ListNumber" value="1">d. All of the above.</li>
				<li class="ListNumber">d. a and c </li>
				<li class="ListNumber">e. b and d</li>
				<li class="ListNumber">Use Flexbox or floats.</li>
				<li class="ListNumber">a. 2;  b. 5;  c. 1;  d .4;  e. 3</li>
				<li class="ListNumber">a. no;  b. yes;  c. no (if the <span class="Literal-fc">.border</span> class is required for styles to appear)</li>
				<li class="ListNumber">As of this writing, Modernizr has better browser support than CSS feature detection. Once all browsers support CSS feature detection, CSS will be faster and more reliable than a solution that requires JavaScript.</li>
			</ol>
			<h2 class="HeadB">Chapter 20: Modern Web Development Tools</h2>
			<ol>
				<li class="ListNumber" value="1">It is the program that interprets commands you type into a command-line tool.</li>
				<li class="ListNumber">d.  All of the above.</li>
				<li class="ListNumber">A string of characters that indicates the computer is ready to receive a command.</li>
				<li class="ListNumber">You’d create a new directory (folder) in the current directory with the name “newsite”.</li>
				<li class="ListNumber">Providing a more efficient syntax for <em class="Emphasis">authoring</em> (traditionally known as “preprocessing”) and <em class="Emphasis">optimizing</em> (known as “postprocessing”) standard CSS files.</li>
				<li class="ListNumber">Once you learn the syntax, Sass (or LESS and Stylus) can make writing styles less redundant and easier to edit. You may also be required to know Sass for some web development jobs.</li>
				<li class="ListNumber">Common CSS postprocessor tasks include error checking, adding vendor prefixes, inserting hacks that fix bugs in old versions of IE, including fallbacks for newer CSS features, converting rems to pixels, converting color formats to RGB, and analyzing the structure of your CSS code. This is by no means an exhaustive list, so you may come up with other features.</li>
				<li class="ListNumber">It is anything you might do manually from the command line.</li>
				<li class="ListNumber">It means that the task runner, Grunt, has been configured to “watch” the file so that when it detects any changes to that file, it automatically performs a series of tasks.</li>
				<li class="ListNumber">Each user has a local copy of the shared repository that they can work on even offline.</li>
				<li class="ListNumber">When a file is staged, it means that it has been added to the Git index, and Git is tracking it, but it has not yet been committed.</li>
				<li class="ListNumber">A <em class="Emphasis">branch</em> is a sequential series of commits and reflects a thread of development. A <em class="Emphasis">fork</em> is a copy of somebody else’s repository that you can work on and that is not linked to the original.</li>
				<li class="ListNumber">Pulling refers to merging the recent copy of the remote master repo into your local version. You should pull in a fresh copy to be sure you have the most up-to-date version before you push your changes to the master. This helps prevent conflicts if other users have been making changes to the same files. </li>
				<li class="ListNumber"> A pull request is when you ask the owner of a repo you forked to merge in your changes.</li>
			</ol>
			<h2 class="HeadB">Chapter 21: Introduction to JavaScript</h2>
			<h3 class="HeadC">Exercise 21-1</h3>
			<ol>
				<li class="ListNumber" value="1"><code class="Code">var friends = ["name", "othername", "thirdname", "lastname"];</code></li>
				<li class="ListNumber"><code class="Code">alert( friends[2] );</code></li>
				<li class="ListNumber"><code class="Code">var name = </code><code class="Code">"yourName";</code></li>
				<li class="ListNumber"><code class="Code">if( name === Jennifer ) { alert("That's my name too! ");}</code></li>
				<li class="ListNumber"><code class="Code">var myVariable = #;|<br/></code><code class="Code">if(myVariable &gt; 5) {<br/>  alert ("upper");<br/>} else {<br/>  alert ("lower");<br/>}</code></li>
			</ol>
			<h3 class="HeadC">Exercise 21-2</h3>
			<pre class="CodeFirst"><code class="Code">&lt;script&gt;<br/>var originalTitle = document.title;<br/>function showUnreadCount( unread ) {<br/>  document.title = originalTitle + " (" + unread + "new message!");<br/>}<br/>showUnreadCount(3);<br/>&lt;/script&gt;</code></pre>
			<h3 class="HeadC">Test Yourself</h3>
			<ol>
				<li class="ListNumber" value="1">When you link to an external <span class="Filename">.js</span> file, you can reuse the same scripts for multiple documents. The downside is that it requires an additional HTTP request.</li>
				<li class="ListNumber">a. 1;  b. 1two;  c. 34;  d. 2</li>
				<li class="ListNumber">a. 10;  b. 6;  c. “2 remaining”;  d. “Jennifer is longer.”;  e. false</li>
				<li class="ListNumber">It loops through a number of items by starting at the first one in the array and ending when there are no more left.</li>
				<li class="ListNumber">Globally scoped variables may “collide” with variables with the same names in other scripts. It is best to use the <span class="Literal-fc">var</span> keyword in functions to keep your variables scoped locally.</li>
				<li class="ListNumber">a. 2;  b. 5;  c. 4;  d. 3;  e. 1 </li>
			</ol>
			<h2 class="HeadB">Chapter 22: Using JavaScript</h2>
			<ol>
				<li class="ListNumber" value="1">Ajax is a combination of HTML, CSS, and JavaScript (with the <span class="Literal-fc">XMLHttpRequest</span> JavaScript method used to get data in the background).</li>
				<li class="ListNumber">It accesses the element that has the <span class="Literal-fc">id</span> value “main”.</li>
				<li class="ListNumber">It creates a nodeList of all the <span class="Literal-fc">section</span> elements in the element with the <span class="Literal-fc">id</span> of “main”.</li>
				<li class="ListNumber">It sets the background color of the page (<span class="Literal-fc">body</span> element) to  “papayawhip”.</li>
				<li class="ListNumber">It creates a new text node that says, “Hey, I’m walking here!”, inserts it in a newly created <span class="Literal-fc">p</span> element, and puts the new <span class="Literal-fc">p</span> element in the element with the <span class="Literal-fc">id</span> “main”.</li>
				<li class="ListNumber">d. All of the above.</li>
			</ol>
			<h2 class="HeadB">Chapter 23: Web Image Basics</h2>
			<ol>
				<li class="ListNumber" value="1">You can get a license to have exclusive rights to an image so that your competitor doesn’t use the same photo on their site. You also know the source of the image is verified (i.e., it’s not stolen).</li>
				<li class="ListNumber">ppi stands for “pixels per inch” and is a measure of resolution.</li>
				<li class="ListNumber">Indexed color is a mode for storing pixel color information. GIF and PNG-8 formats are indexed color images.</li>
				<li class="ListNumber">There are 256 colors in an 8-bit graphic, and 32 colors in a 5-bit graphic.</li>
				<li class="ListNumber">GIF can contain animation and transparency. JPEG cannot.</li>
				<li class="ListNumber">GIF can contain animation. Regular PNGs cannot (although APNG format can).</li>
				<li class="ListNumber">PNGs can have multiple levels of transparency. GIF has only binary (on/off) transparency.</li>
				<li class="ListNumber">Cumulative lossy compression means you lose image data every time you save an image as a JPEG. If you open a JPEG and save it as a JPEG again, even more image information is thrown out than the first time you saved it. Be sure to keep your full-quality original and save JPEG copies as needed.</li>
				<li class="ListNumber">In binary transparency, a pixel is either entirely transparent or entirely opaque. Alpha transparency allows up to 256 levels of transparency.</li>
				<li class="ListNumber"><span class="Circle-Frame-Neg">A</span> GIF or PNG-8 because it is text, flat colors, and hard edges. <span class="Circle-Frame-Neg">B</span> JPEG because it is a photograph. <span class="Circle-Frame-Neg">C</span> GIF or PNG-8 because although it has some photographic areas, most of the image is flat colors with hard edges. <span class="AlphaBullet--11pt-">D</span> GIF or PNG-8 because it is a flat graphical image. <span class="Circle-Frame-Neg">E</span> JPEG because it is a photograph.</li>
			</ol>
			<h2 class="HeadB">Chapter 24: Image Asset Production</h2>
			<ol>
				<li class="ListNumber" value="1">PNG-24 or PNG-8+alpha are the best supported. The WebP and JPEG 2000 formats also include alpha transparency, but lack tool and browser support.</li>
				<li class="ListNumber">Adjusting the Quality setting is the most effective tool for optimizing a JPEG.</li>
				<li class="ListNumber">Reducing the number of colors in the color palette has the greatest effect on the size of indexed color images.</li>
				<li class="ListNumber">The pattern in the dithering breaks up solid areas of color and results in larger files. Dithering should be turned off or limited.</li>
				<li class="ListNumber">Because JPEG compression works well on smooth transitions of color and less well on hard edges, blurring the image slightly improves compression and results in a smaller file.</li>
				<li class="ListNumber">sRGB: Yes, because it is the RGB encoding used by the web.</li>
				<li class="ListNumber">If the image needs to look crisp on high-density screens.</li>
				<li class="ListNumber">If your site has a lot of images, companies like Cloudinary and Akamai generate and host multiple, optimized versions of every image automatically. They keep you from doing all the image creation manually.</li>
			</ol>
			<h2 class="HeadB">Chapter 25: SVG</h2>
			<ol>
				<li class="ListNumber" value="1"><span class="Literal-fc">rect</span> is the SVG element that creates a rectangle.</li>
				<li class="ListNumber">The <span class="Literal-fc">x</span> and <span class="Literal-fc">y</span> coordinates position the rectangle element in the top-left corner of the SVG viewport.</li>
				<li class="ListNumber">The <span class="Literal-fc">width</span> and <span class="Literal-fc">height</span> attributes establish the dimensions of the SVG viewport, the area on which the drawing will be rendered.</li>
				<li class="ListNumber">In XML, all elements must be closed. When the element is a standalone element (without an opening and closing tag), it is closed with a forward slash (/) character before the closing bracket.</li>
				<li class="ListNumber">Clipping uses a vector shape to reveal or hide portions of an image. Masking is pixel-based, using the lightness and darkness of a raster image to hide and reveal the masked image.</li>
				<li class="ListNumber">Ways to reduce the size of an SVG include: <ul><li class="ListBullet_Indent">Simplifing paths.</li><li class="ListBullet_Indent">Reducing the number of decimal places.</li><li class="ListBullet_Indent">Using shapes instead of complex paths when possible.</li><li class="ListBullet_Indent">Avoiding raster images and effects in the SVG.</li><li class="ListBullet_Indent">Running it through an optimizer like SVGO.</li><li class="ListBullet_Indent">Enabling Gzip compression on the server.</li></ul></li>
				<li class="ListNumber">b. SVG 1.1 (and for the record, SVG Electric Boogaloo isn’t a thing).</li>
				<li class="ListNumber">You can style SVGs in the following ways:<ul><li class="ListBullet_Indent">SVG presentation attributes</li><li class="ListBullet_Indent">The inline <span class="Literal-fc">style</span> attribute</li><li class="ListBullet_Indent">A style sheet in the SVG itself (<span class="Literal-fc">style</span> element)</li><li class="ListBullet_Indent">An external style sheet called into the SVG (for SVGs placed with the <span class="Literal-fc">img</span> element)</li><li class="ListBullet_Indent">If the SVG is inline, the style sheet in the HTML document in which it appears</li></ul></li>
				<li class="ListNumber">d.  All of the above.</li>
			</ol>
		</div>
	</div>
</div>
</body>
</html>