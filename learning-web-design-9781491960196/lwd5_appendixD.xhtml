<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learning Web Design, 5th Edition</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/lwd5e.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer1670" class="appd">
			<p id="_idParaDest-235" class="Epub-TOC-App-Title"><a id="_idTextAnchor335"></a>D. From HTML+ to HTML5</p>
		</div>
		<div id="_idContainer1671" class="appd">
			<h1 class="chapterLabel">D</h1>
		</div>
		<div id="_idContainer1672" class="appd">
			<h1 class="appTitle"><a id="_idTextAnchor336"></a><a id="_idTextAnchor337"></a>From HTML+ to HTML5</h1>
		</div>
		<div id="_idContainer1680" class="appd">
			<p class="body">I’m not sure any <a id="_idIndexMarker4680"></a>HTML specification has had such fanfare as HTML5. It offers so many promising possibilities, in fact, that it has become something of a buzzword with connotations far beyond the spec itself. When marketers and journalists use the term “HTML5,” they are sometimes referring to any new web technology that replaces Flash. Throughout this book, you have gotten familiar with the elements of HTML5, and in this appendix, I’ll tell you a bit more about the spec itself, so you can join those of us who are irked when we hear “HTML5” used incorrectly. The important thing, however, is that mainstream awareness of web standards is certainly a win and makes our job easier when we’re communicating with clients.</p>
			<p class="body">But first, I think it’s important to know how we got here and what makes HTML5 a breakthrough. I’ll start with a brief history of HTML, and then point out some unique qualities of HTML5, including its APIs.</p>
			<h1 id="_idParaDest-236" class="HeadA"><a id="_idTextAnchor338"></a>An Abbreviated History of HTML</h1>
			<p class="body">Understanding where we’ve been provides useful context for where we are going. Our journey to HTML5 passes through the frontier of the early web, the dangerous battlegrounds of the Browser Wars, and a flirtatious fling with XML.</p>
			<div>
				<div id="_idContainer1673" class="sidebar">
					<h5 class="SidebarSeries">further reading</h5>
					<p class="SidebarBody">For a detailed history of HTML from 1989 to 1998, read <a id="_idIndexMarker4681"></a>David Raggett’s account from his book <span class="Citation--Sidebar-">Raggett on HTML4</span> (Addison-Wesley), available on the W3C site (<a href="http://www.w3.org/People/Raggett/book4/ch02.html"><span class="URL-Email--Sidebar-">www.w3.org/People/Raggett/book4/ch02.html</span></a>).</p>
				</div>
			</div>
			<h2 class="HeadB">The Wild Frontier</h2>
			<p class="body">The story of HTML, from Tim Berners-Lee’s initial draft in 1991 to the HTML5 standard in development today, is both fascinating and tumultuous. Early versions of HTML (HTML+ in 1994 and HTML 2.0 in 1995) built on Tim’s early work with the intent of making it a viable publishing option. </p>
			<p class="body">But when the <a id="_idIndexMarker4682"></a>World Wide Web (as it was adorably called back in the day) took the world by storm, browser creators, most notably Mosaic Netscape and later Microsoft Internet Explorer, each said, “We ain’t waitin’ for no stinkin’ standards!” They gave the people what they wanted by creating a slew of browser-specific elements for improving the look of pages on their respective browsers. This divisive one-upping is what has come to be known as the <span class="FirstTerm">Browser Wars</span>. As a result, it became common in the late 1990s to create two entirely separate versions of a site that targeted each of the Big Two browsers. Signs on sites reading “Best viewed in Netscape” were the norm. I shudder just thinking about it.</p>
			<h2 class="HeadB">A Call for Reason</h2>
			<p class="body">In 1996, the newly formed W3C put a stake in the ground and released its first Recommendation: HTML 3.2. It is a snapshot of all the HTML elements in common use at the time, and includes many presentational extensions to HTML (such as the <span class="Literal-fc">font</span> and <span class="Literal-fc">center</span> elements) that were the result of the Netscape/IE feud and the lack of a style sheet alternative. <a id="_idIndexMarker4683"></a>HTML 4.0 (1998) and HTML 4.01 (the slight revision that superseded it in 1999) aimed to get HTML back on track by emphasizing the separation of structure and presentation and improving accessibility. All matters of presentation were handed over to the newly minted Cascading Style Sheets standard that was gaining support.</p>
			<p class="body">HTML 4.01—along with XHTML 1.0, its stricter XML-based sibling (discussed next)—became the cornerstone of the web standards movement (see the sidebar <span class="Xref">“The Web Standards Project”</span>). </p>
			<div>
				<div id="_idContainer1674" class="sidebar">
					<h5 class="SidebarTitle">The Web Standards Project</h5>
					<p class="SidebarBody">In 1998, at the height of the Browser Wars, a grassroots coalition called the <a id="_idIndexMarker4684"></a><a id="_idIndexMarker4685"></a><span class="FirstTerm--Sidebar-">Web Standards Project</span> (<span class="FirstTerm--Sidebar-">WaSP</span> for short) began to put pressure on browser creators (primarily <a id="_idIndexMarker4686"></a>Netscape and <a id="_idIndexMarker4687"></a>Microsoft at the time) to start sticking to the open standards as documented by the W3C. Not stopping there, it educated the web developer community on the many benefits of developing with standards. Its efforts revolutionized the way sites are created and supported. Now browsers (even Microsoft) brag of standards support while continuing to innovate. </p>
					<p class="SidebarBody">In 2013, WaSP declared, “Our work here is done,” and disbanded. You can still read its mission statement, history, and reference materials on the WaSP site (<span class="URL-Email--Sidebar-">webstandards.org</span>).</p>
				</div>
			</div>
			<h2 class="HeadB">Enter XML and XHTML</h2>
			<p class="body">Around the <a id="_idIndexMarker4688"></a><a id="_idIndexMarker4689"></a>same time that HTML 4.01 was in development, folks at the W3C became aware that one limited markup language wasn’t going to cut it for describing all the sorts of information (chemical notation, mathematical equations, multimedia presentations, financial information, and so on) that might be shared over the web. Their <a id="_idIndexMarker4690"></a><a id="_idIndexMarker4691"></a>solution:<span class="FirstTerm"> XML (eXtensible Markup Language)</span>, a metalanguage for creating markup languages. XML was a simplification <a id="_idIndexMarker4692"></a><a id="_idIndexMarker4693"></a>of <span class="FirstTerm">SGML (Standardized Generalized Markup Language)</span>, the big kahuna of metalanguages that <a id="_idIndexMarker4694"></a>Tim Berners-Lee used to create his original HTML application. But SGML itself proved to be more complex than the web required.</p>
			<p class="body">The W3C had a vision of an XML-based web with many specialized markup languages working together—even within a single document. Of course, to pull that off, everyone would have to mark up documents very carefully, strictly abiding by XML syntax, to rule out potential confusion. </p>
			<p class="body">Their first step was to rewrite HTML according to the rules of XML so that it could play well with others. The result is <span class="FirstTerm">XHTML</span> (<span class="FirstTerm">eXtensible HTML</span>). The first version, XHTML 1.0, is nearly identical to HTML 4.01, sharing the same elements and attributes, but with stricter syntax requirements (see the <span class="Xref">“XHTML Markup Requirements”</span> sidebar). </p>
			<div>
				<div id="_idContainer1675" class="sidebar">
					<h5 class="SidebarTitle">XHTML Markup Requirements</h5>
					<p class="SidebarBody">XHTML <a id="_idIndexMarker4695"></a><a id="_idIndexMarker4696"></a><a id="_idIndexMarker4697"></a>syntax<a id="_idIndexMarker4698"></a> follows the strict markup requirements of XML, as follows:</p>
					<ul>
						<li class="SidebarListBullet">Element and<a id="_idIndexMarker4699"></a> attribute names must be lowercase. In HTML, element and attribute names are not case-sensitive. </li>
						<li class="SidebarListBullet">All elements must be closed (terminated). You close empty elements by adding a slash before the closing bracket (for example, <span class="Literal-Sidebar">&lt;br/&gt;</span>).</li>
						<li class="SidebarListBullet">Attribute values must be in quotation marks. Single or double quotation marks are acceptable as long as they are used consistently. Furthermore, there must be no extra whitespace (character spaces or line returns) before or after the attribute value inside the quotation marks.</li>
						<li class="SidebarListBullet">All attributes must have explicit attribute values. XML (and therefore XHTML) does not <a id="_idIndexMarker4700"></a>support <span class="FirstTerm--Sidebar-">attribute minimization</span>, the SGML practice in which certain attributes can be reduced to just the attribute value. So, while in HTML you can write <span class="Literal-Sidebar">checked</span> to indicate that a form button should be checked when the form loads, in XHTML you need to explicitly write out <span class="Literal-Sidebar">checked="checked"</span>. </li>
						<li class="SidebarListBullet">Proper nesting of elements is strictly enforced. Some exisiting elements got new nesting restrictions.</li>
						<li class="SidebarListBullet">Start tags and end tags are required.</li>
						<li class="SidebarListBullet">Special characters must always be represented by character entities (e.g., <span class="Literal-Sidebar">&amp;amp;</span> for the &amp; symbol).</li>
						<li class="SidebarListBullet">Scripts must be contained in a <a id="_idIndexMarker4701"></a><a id="_idIndexMarker4702"></a><a id="_idIndexMarker4703"></a>CDATA section so they will be treated as simple text characters and not parsed as XML markup. Here is an example of the syntax:<pre class="SidebarCodeFirst">&lt;script type="type/javascript"&gt;<br/><code class="CodeColor">  // &lt;![CDATA[<br/></code>   ... JavaScript goes here...<br/>  <code class="CodeColor"> // ]]&gt;</code><br/> &lt;/script&gt;</pre></li>
					</ul>
					<p class="SidebarBody">While HTML parsers are forgiving of incorrect markup, errors in XHTML syntax stop the parser in its tracks. Running your XHTML code through a validator is a good idea to catch syntax errors before pages get launched.</p>
				</div>
			</div>
			<p class="body">But the W3C didn’t stop there. With a vision of an XML-based web in mind, they began work on XHTML 2.0, an even bolder attempt to make things work “right” than HTML 4.01 had been. The problem was that it was not backward-compatible with old standards and browser behavior. The writing and approval process dragged on for years with no browser implementation. Without browser implementation, XHTML 2.0 was stuck.</p>
			<h2 class="HeadB">Hello HTML5!</h2>
			<p class="body">Meanwhile…</p>
			<p class="body">In 2004, members of <a id="_idIndexMarker4704"></a>Apple, Mozilla, and Opera formed the <a id="_idIndexMarker4705"></a><a id="_idIndexMarker4706"></a>Web Hypertext Application Technology Working Group (WHATWG, <span class="URL-Email">whatwg.org</span>), separate from the W3C. The goal of the WHATWG was to further the development of HTML to meet new demands in a way that was consistent with real-world authoring practices and browser behavior (in contrast to the start-from-scratch ideal that XHTML 2.0 described). Their initial documents, Web Applications 1.0 and Web Forms 1.0, were rolled together into HTML5. Today, the WHATWG maintains an unnumbered, “living” HTML standard.</p>
			<p class="body">The <a id="_idIndexMarker4707"></a>W3C eventually established its own HTML5 Working Group based on the work done by the WHATWG. HTML5 reached formal Recommendation status in October 2014. As of early 2018, the latest version is HTML 5.2, which is a “Proposed Recommendation.” </p>
			<p class="body">Work on the HTML5 specification is happening in both organizations in tandem, sometimes with slight inconsistencies. For the most part, browser vendors use the WHATWG copy as their implementation reference. </p>
			<p class="body">And XHTML 2.0? At the end of 2009, the W3C officially put it out of its misery, pulling the plug on the Working Group and putting its resources and efforts into HTML5.</p>
			<p class="body">So that’s how we got here. Now let’s get to know HTML5 a little better.</p>
			<h1 id="_idParaDest-237" class="HeadA"><a id="_idTextAnchor339"></a>HTML5: More Than Markup</h1>
			<p class="body">Prior HTML versions concerned themselves mainly with elements for marking up content to be viewed on web pages. HTML5 is a bundle of new methods for accomplishing tasks that previously required special programming or proprietary plug-in technology such as Flash or Silverlight. Solutions include both markup and scripting components, including APIs for things like putting audio and video on the page, storing data locally, working offline, taking advantage of location information, and more. With HTML5 for common tasks, developers can rely on built-in browser capabilities and not reinvent the wheel for every application. </p>
			<p class="body">Much of what’s new in HTML5 requires advanced web development skills, so it’s unlikely you’ll use those features right away (if ever), but as always, I think it is beneficial to everyone to have a basic familiarity with what can be done. And “basic familiarity” is what I’m aiming at here. For more in-depth discussions of HTML5 features, see the <span class="Xref">“Further Reading”</span> sidebar.</p>
			<div>
				<div id="_idContainer1676" class="sidebar">
					<h5 class="SidebarSeries">Further Reading</h5>
					<p class="SidebarBody">The following books will help fill out your knowledge of HTML5:</p>
					<ul>
						<li class="SidebarListBullet"><span class="Citation--Sidebar-">HTML5 for Web Designers, 2e</span> by <a id="_idIndexMarker4708"></a>Rachel Andrew and <a id="_idIndexMarker4709"></a>Jeremy Keith (A Book Apart)</li>
						<li class="SidebarListBullet"><span class="Citation--Sidebar-">HTML5: Up and Running</span> by <a id="_idIndexMarker4710"></a>Mark Pilgrim (O’Reilly and Google Press)</li>
						<li class="SidebarListBullet"><span class="Citation--Sidebar-">Introducing HTML5, 2e</span> by <a id="_idIndexMarker4711"></a>Bruce Lawson and <a id="_idIndexMarker4712"></a>Remy Sharp (New Riders)</li>
					</ul>
				</div>
			</div>
			<h2 class="HeadB">HTML5 Markup Component</h2>
			<p class="body">You’ve been learning <a id="_idIndexMarker4713"></a><a id="_idIndexMarker4714"></a>the elements and attributes of HTML5 throughout this book. </p>
			<p class="body">HTML5 is based on HTML 4.01 Strict, the version of HTML that did not include any presentation-based or other deprecated elements and attributes. That means the vast majority of HTML5 is made up of the same elements that were used for years, and browsers know what to do with them. </p>
			<div>
				<div id="_idContainer1677" class="sidebar">
					<h5 class="SidebarTitle">HTML5 in XML</h5>
					<p class="SidebarBody">HTML5 can also be written according to the stricter syntax of<a id="_idIndexMarker4715"></a><a id="_idIndexMarker4716"></a><a id="_idIndexMarker4717"></a> XML (called the <span class="FirstTerm--Sidebar-">XML serialization of HTML5</span>). Some developers have come to prefer the tidiness of well-formed XHTML (lowercase element names, quoted attribute values, closing all elements, and so on), so that way of writing is still an option, although not required. In edge cases, an HTML5 document may be required to be served as XML in order to work with other XML applications, in which case it can use the XML syntax and be ready to go. </p>
				</div>
			</div>
			<p class="body">HTML5 introduced a number of new elements, form input types, and global attributes. It also made many deprecated elements and attributes in HTML 4.01 officially obsolete. </p>
			<p class="body">One departure from previous HTML versions is that HTML5 is the first specification that includes detailed instructions for how browsers should handle malformed and legacy markup. It bases the instructions on legacy browser behavior, but for once, there is a standard protocol for browser makers to follow when browsers encounter incorrect or non-standard markup.</p>
			<h2 class="HeadB">A DTD-Free DOCTYPE</h2>
			<p class="body">As we saw in <a href="lwd5_chapter04.xhtml#_idTextAnchor044"><span class="Xref">Chapter </span><span class="Xref">4</span><span class="Xref">, Creating a Simple Page</span></a>, HTML documents should begin with a <a id="_idIndexMarker4718"></a>Document Type (DOCTYPE) declaration that identifies which version of HTML the document follows. The HTML5 declaration is short and sweet:</p>
			<pre class="CodeFirst">&lt;!DOCTYPE html&gt;</pre>
			<p class="body">Compare that to a declaration for a Strict HTML 4.01 document:</p>
			<pre class="CodeFirst">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/HTML4.01/strict.dtd"&gt;</pre>
			<p class="body">Why so complicated? For documents written in HTML 4.01 and XHTML 1.0 and 1.1, the declaration must point to the public <a id="_idIndexMarker4719"></a><a id="_idIndexMarker4720"></a><span class="FirstTerm">DTD</span> (<span class="FirstTerm">Document Type Definition</span>), a document that defines all of the elements in a markup language as well as the rules for using them. DTDs are a remnant of SGML and proved to be less helpful on the web than originally thought, so the authors of HTML5 simply didn’t use one. As a result, the DOCTYPE declaration is much simpler.</p>
			<p class="body"><span class="FirstTerm">Validators</span>—software that checks that all the markup in a document is correct (see <span class="Xref">Note</span>)—use the DOCTYPE declaration to make sure the document abides by the rules of the specification it claims to follow. </p>
			<div>
				<div id="_idContainer1678" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">To check whether your HTML document is valid, use the <a id="_idIndexMarker4721"></a><a id="_idIndexMarker4722"></a><a id="_idIndexMarker4723"></a>online validator at the W3C (<span class="URL-Email--Sidebar-">validator.w3.org</span>). An HTML5-specific validator is also available at <span class="URL-Email--Sidebar-">html5.validator.nu</span>. </p>
				</div>
			</div>
			<p class="body">Both HTML 4.01 and XHTML 1.0 had three separate DTDs (for Traditional, Strict, and Frameset versions of each spec), so there were a lot of little details to keep track of. For a full list of DOCTYPE declarations (including DTD references) for HTML 4.01, XHTML, SVG, and other document types, go to <span class="URL-Email">www.w3.org/QA/2002/04/valid-dtd-list.html</span>.</p>
			<h2 class="HeadB">Meet the APIs</h2>
			<p class="body">HTML specifications prior to HTML5 included only documentation of the elements, attributes, and values permitted in the language. That’s fine for simple text documents, but the creators of HTML5 had their minds set on making it easier to create web-based applications that require scripting and programming. For that reason, HTML5 also defines a number of new APIs for making it easier to communicate with an application. </p>
			<p class="body">An <a id="_idIndexMarker4724"></a><a id="_idIndexMarker4725"></a><span class="FirstTerm">API</span> (<span class="FirstTerm">application programming interface</span>) is a documented set of commands, data names, and so on, that lets one software application communicate with another. For example, the developers of Twitter documented the names of each data type (users, tweets, timestamps, etc.) and the methods for accessing them in an API document (<a href="https://dev.twitter.com/docs"><span class="URL-Email">dev.twitter.com/docs</span></a>) that lets other developers include Twitter feeds and elements in their programs. That is why there are so many Twitter programs and widgets available. Amazon.com also opens up its product data via an API. In fact, publishers of every ilk are recognizing the power of having their content available via an API. </p>
			<p class="body">But let’s bring it back to <a id="_idIndexMarker4726"></a>HTML5, which includes APIs for tasks that traditionally required proprietary plug-ins (like Flash) or custom programming. The idea is that if browsers offer those features natively—with standardized sets of hooks for accessing them—developers can do all sorts of nifty things and count on them working in all browsers, just as we count on the ability to embed an image on a page today. Of course, we have a way to go before there is ubiquitous support of these cutting-edge features, but we’re getting there steadily. Some APIs have a markup component, such as embedding multimedia with the new HTML5 <span class="Literal-fc">video</span> and <span class="Literal-fc">audio</span> elements. Others happen entirely behind the scenes with JavaScript or server-side components, such as creating web applications that work even when there is no internet connection (Offline Web Application API). </p>
			<p class="body">The W3C and WHATWG are working on <em class="Emphasis">lots and lots</em> of APIs for use with web applications, all in varying stages of completion and implementation. Most have their own specifications, separate from the HTML5 spec itself, but they are generally included under the wide HTML5 umbrella that covers web-based applications. HTML5 includes specifications for these APIs:</p>
			<div>
				<div id="_idContainer1679" class="note">
					<h5 class="noteHeader">NOTE</h5>
					<p class="note">For a list of all the APIs, see the“HTML5 Overview” by<a id="_idIndexMarker4727"></a> Erik Wilde (<span class="URL-Email--Sidebar-">html5-overview.net</span>). The W3C lists all the documents they maintain, many of which are APIs, at <span class="URL-Email--Sidebar-">www.w3.org/TR/tr-title-all</span>.</p>
				</div>
			</div>
			<p class="ListVariableTerm">Media Player API</p>
			<p class="ListVariable">For controlling <a id="_idIndexMarker4728"></a><a id="_idIndexMarker4729"></a><a id="_idIndexMarker4730"></a>audio and video players embedded on a web page, used with the new <span class="Literal-fc">video</span> and <span class="Literal-fc">audio</span> elements. </p>
			<p class="ListVariableTerm">Editing API</p>
			<p class="ListVariable">Provides a <a id="_idIndexMarker4731"></a>set of commands that could be used to create in-browser text editors, allowing users to insert and delete text; format text as bold, italic, or hypertext; and more. In addition, there is a new <a id="_idIndexMarker4732"></a><span class="Literal-fc">contenteditable</span> attribute that allows any content element to be editable right on the page. </p>
			<p class="ListVariableTerm">Session History API</p>
			<p class="ListVariable">Exposes the <a id="_idIndexMarker4733"></a>browser history for better control over the Back button.</p>
			<p class="ListVariableTerm">Drag and Drop API</p>
			<p class="ListVariable">Adds the ability to <a id="_idIndexMarker4734"></a>drag a text selection or file to a target area on the page or another web page. The <a id="_idIndexMarker4735"></a><span class="Literal-fc">draggable</span> attribute indicates the element can be selected and dragged. </p>
			<p class="body">The following are just a handful of the APIs in development at the W3C with specifications of their own: </p>
			<p class="ListVariableTerm">Canvas API</p>
			<p class="ListVariable">The <a id="_idIndexMarker4736"></a><a id="_idIndexMarker4737"></a><span class="Literal-fc">canvas</span> element adds a dynamic, two-dimensional drawing space to a page. The <span class="Literal-fc">canvas</span> element is discussed in <a href="lwd5_chapter10.xhtml#_idTextAnchor122"><span class="Xref">Chapter </span><span class="Xref">10</span><span class="Xref">, Embedded Media</span></a>. </p>
			<p class="ListVariableTerm">Service Workers API</p>
			<p class="ListVariable">This <a id="_idIndexMarker4738"></a>specification describes a method that enables web applications to work while offline.</p>
			<p class="ListVariableTerm">Web Storage API</p>
			<p class="ListVariable">Allows <a id="_idIndexMarker4739"></a>data to be stored in the browser’s cache so that an application can use it later. Traditionally, that has been done with “cookies,” but the Web Storage API allows more data to be stored. It also controls whether the data is limited to one session (<a id="_idIndexMarker4740"></a><span class="Literal-fc">sessionStorage</span>: when the window is closed, the data is cleared) or based on domain (<a id="_idIndexMarker4741"></a><span class="Literal-fc">localStorage</span>: all open windows pointed to that domain have access to the data).</p>
			<p class="ListVariableTerm">Geolocation API</p>
			<p class="ListVariable">Lets users <a id="_idIndexMarker4742"></a>share their geographical location (longitude and latitude) so that it is accessible to scripts in a web application. This allows the app to provide location-aware features such as suggesting a nearby restaurant or finding other users in your area. </p>
			<p class="ListVariableTerm">Web Sockets API</p>
			<p class="ListVariable">Creates <a id="_idIndexMarker4743"></a><a id="_idIndexMarker4744"></a>a <span class="FirstTerm">socket</span>, which is an open connection between the browser client and the server. This allows information to flow between the client and the server in real time, with no lags for the traditional HTTP requests. You can think of a web socket as an ongoing telephone call between the browser and server compared to the walkie-talkie, one-at-a-time style of traditional browser/server communication. (A hat tip to <a id="_idIndexMarker4745"></a>Jen Simmons for this analogy.) It is useful for multiplayer games, chat, or data streams that update constantly, such as sports or stock tickers or social media streams<a id="_idTextAnchor340"></a>.</p>
			<h1 id="_idParaDest-238" class="HeadA"><a id="_idTextAnchor341"></a>Where We Go From Here</h1>
			<p class="body">With a system in place that seems to be working, all indications are that the HTML specification will continue to undergo minor revisions in order to keep up with the changing demands of how we use the web and the devices we use it on. Minor revisions generally include adding attributes, elements, and APIs and putting to rest features that were never implemented. In other words, I have not heard talk of another seismic shift such as the switch from XHTML to HTML5.</p>
			<p class="body">At the W3C, HTML 5.2 (the 5th major version and second minor revision of HTML) became a Recommendation on December 14, 2017. As this book goes to press, there is already a Working Draft of HTML 5.3. Meanwhile, the WHATWG maintains its “living” (unnumbered) version of HTML that is continually updated and forms the basis for most browser vendors’ implementation.</p>
			<p class="body">So know that HTML is always changing, and as a web designer or developer, you will need to keep your ear to the ground. There is always something new to learn.</p>
		</div>
	</div>
</div>
</body>
</html>