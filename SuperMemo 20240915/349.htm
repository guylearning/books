<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Debugging HTML">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Debugging HTML">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Debugging HTML (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Debugging HTML </font></b><br>(2 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="935.htm"> - Next</a> - <a href="348.htm">Previous</a> - <a href="1646.htm">Parent</a> - <a href="348.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="335.htm">2. Semantic HTML</a></li>
<ul>
<li><a href="1646.htm">Introduction to HTML</a></li>
<ul>
<li>This page: Debugging HTML</li>
<ol>
<li>Debugging isn't scary. When writing code of some kind, everything is usually fine, until that dreaded moment when an error occurs — you've done something wrong, so your code . (see <a href="#1644">below)</a>
<li>HTML and debugging. HTML is not as complicated to understand as Rust. HTML is not compiled into a different form before the browser parses it and shows the result (it is . (see <a href="#1645">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="1644">Topic #1,644: Debugging isn't scary. When writing code of some kind, everything is usually fine, until that dreaded moment when an error occurs &#8212; you've done something wrong, so your code .</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Debugging HTML : </font></strong><H2 id=debugging_isnt_scary><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#debugging_isnt_scary"><FONT color=#0066cc>Debugging isn't scary</FONT></A></H2>
<DIV class=section-content>
<P>When writing code of some kind, everything is usually fine, until that dreaded moment when an error occurs &#8212; you've done something wrong, so your code doesn't work &#8212; either not at all, or not quite how you wanted it to. For example, the following shows an error reported when trying to <A href="https://developer.mozilla.org/en-US/docs/Glossary/Compile"><FONT color=#0066cc>compile</FONT></A> a simple program written in the <A class=external href="https://www.rust-lang.org/" target=_blank><FONT color=#0066cc>Rust</FONT></A> language.</P>
<P><img alt="A console window showing the result of trying to compile a rust program with a missing quote around a string in a print statement. The error message reported is error: unterminated double quote string." src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML/error-message.png" width=711 height=520 loading="lazy"> </P>
<P>Here, the error message is relatively easy to understand &#8212; "unterminated double quote string". If you look at the listing, you can probably see how <CODE>println!(Hello, world!");</CODE> might logically be missing a double quote. However, error messages can quickly get more complicated and less easy to interpret as programs get bigger, and even simple cases can look a little intimidating to someone who doesn't know anything about Rust.</P>
<P>Debugging doesn't have to be scary though &#8212; the key to being comfortable with writing and debugging any programming language or code is familiarity with both the language and the tools.</P></DIV></SECTION><SECTION aria-labelledby=html_and_debugging>
<H2 id=html_and_debugging><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#html_and_debugging"><FONT color=#0066cc>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1645">Topic #1,645: HTML and debugging. HTML is not as complicated to understand as Rust. HTML is not compiled into a different form before the browser parses it and shows the result (it is .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Debugging HTML : </font></strong>
HTML and debugging</FONT></A></H2>
<DIV class=section-content>
<P>HTML is not as complicated to understand as Rust. HTML is not compiled into a different form before the browser parses it and shows the result (it is <EM>interpreted</EM>, not <EM>compiled</EM>). And HTML's <A href="https://developer.mozilla.org/en-US/docs/Glossary/Element"><FONT color=#0066cc>element</FONT></A> syntax is arguably a lot easier to understand than a "real programming language" like Rust, <A href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript"><FONT color=#0066cc>JavaScript</FONT></A>, or <A href="https://developer.mozilla.org/en-US/docs/Glossary/Python"><FONT color=#0066cc>Python</FONT></A>. The way that browsers parse HTML is a lot more <STRONG>permissive</STRONG> than how programming languages are run, which is both a good and a bad thing.</P></DIV></SECTION><SECTION aria-labelledby=permissive_code>
<H3 id=permissive_code><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#permissive_code"><FONT color=#0066cc>Permissive code</FONT></A></H3>
<DIV class=section-content>
<P>So what do we mean by permissive? Well, generally when you do something wrong in code, there are two main types of error that you'll come across:</P>
<UL>
<LI><STRONG>Syntax errors</STRONG>: These are spelling or punctuation errors in your code that actually cause the program not to run, like the Rust error shown above. These are usually easy to fix as long as you are familiar with the language's syntax and know what the error messages mean. 
<LI><STRONG>Logic errors</STRONG>: These are errors where the syntax is actually correct, but the code is not what you intended it to be, meaning that the program runs incorrectly. These are often harder to fix than syntax errors, as there isn't an error message to direct you to the source of the error.</LI></UL>
<P>HTML itself doesn't suffer from syntax errors because browsers parse it permissively, meaning that the page still displays even if there are syntax errors. Browsers have built-in rules to state how to interpret incorrectly written markup, so you'll get something running, even if it is not what you expected. This, of course, can still be a problem!</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> HTML is parsed permissively because when the web was first created, it was decided that allowing people to get their content published was more important than making sure the syntax was absolutely correct. The web would probably not be as popular as it is today, if it had been more strict from the very beginning.</P></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_studying_permissive_code>
<H3 id=active_learning_studying_permissive_code><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#active_learning_studying_permissive_code"><FONT color=#0066cc>Active learning: Studying permissive code</FONT></A></H3>
<DIV class=section-content>
<P>It's time to study the permissive nature of HTML code.</P>
<OL>
<LI>First, download our <A class=external href="https://github.com/mdn/learning-area/blob/main/html/introduction-to-html/debugging-html/debug-example.html" target=_blank><FONT color=#0066cc>debug-example demo</FONT></A> and save it locally. This demo is deliberately written with some built-in errors for us to explore (the HTML markup is said to be <STRONG>badly-formed</STRONG>, as opposed to <STRONG>well-formed</STRONG>). 
<LI>Next, open it in a browser. You will see something like this: <img alt="A simple HTML document with a title of HTML debugging examples, and some information about common HTML errors, such as unclosed elements, badly nested elements, and unclosed attributes. " src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML/badly-formed-html.png" width=626 height=498 loading="lazy"> 
<LI>This immediately doesn't look great; let's look at the source code to see if we can work out why (only the body contents are shown): 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>html</SPAN></DIV><PRE class="brush: html notranslate" data-signature="8/2yA3VkVpwj2ydPN1vu0hxrJX8g72UltOn3N5l0ha8="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>h1</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>HTML debugging examples<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>h1</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>What causes errors in HTML?

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>ul</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>li</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Unclosed elements: If an element is <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>not closed properly,
      then its effect can spread to areas you didn't intend

  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>li</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Badly nested elements: Nesting elements properly is also very important
      for code behaving correctly. <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>strong <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>em</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>strong emphasized?<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
      what is this?<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>em</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>li</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Unclosed attributes: Another common source of HTML problems. Let's
      look at an example: &lt;a href="https://www.mozilla.org/&gt;link to Mozilla
      homepage<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>a</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>ul</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<LI>Let's review the problems: 
<UL>
<LI>The <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p"><FONT color=#0066cc>paragraph</FONT></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li"><FONT color=#0066cc>list item</FONT></A> elements have no closing tags. Looking at the image above, this doesn't seem to have affected the markup rendering too badly, as it is easy to infer where one element should end and another should begin. 
<LI>The first <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong"><CODE><FONT color=#0066cc>&lt;strong&gt;</FONT></CODE></A> element has no closing tag. This is a bit more problematic, as it isn't easy to tell where the element is supposed to end. In fact, the whole of the rest of the text has been strongly emphasized. 
<LI>This section is badly nested: <CODE>&lt;strong&gt;strong &lt;em&gt;strong emphasized?&lt;/strong&gt; what is this?&lt;/em&gt;</CODE>. It is not easy to tell how this has been interpreted because of the previous problem. 
<LI>The <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href"><CODE><FONT color=#0066cc>href</FONT></CODE></A> attribute value is missing a closing double quote. This seems to have caused the biggest problem &#8212; the link has not rendered at all.</LI></UL>
<LI>Now let's look at the markup the browser has rendered, as opposed to the markup in the source code. To do this, we can use the browser developer tools. If you are not familiar with how to use your browser's developer tools, take a few minutes to review <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools"><FONT color=#0066cc>Discover browser developer tools</FONT></A>. 
<LI>In the DOM inspector, you can see what the rendered markup looks like: <img alt="The HTML inspector in Firefox, with our example's paragraph highlighted, showing the text &quot;What causes errors in HTML?&quot; Here you can see that the paragraph element has been closed by the browser." src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML/html-inspector.png" width=851 height=715 loading="lazy"> 
<LI>Using the DOM inspector, let's explore our code in detail to see how the browser has tried to fix our HTML errors (we did the review in Firefox; other modern browsers <EM>should</EM> give the same result): 
<UL>
<LI>The paragraphs and list items have been given closing tags. 
<LI>It isn't clear where the first <CODE>&lt;strong&gt;</CODE> element should be closed, so the browser has wrapped each separate block of text with its own strong tag, right down to the bottom of the document! 
<LI>The incorrect nesting has been fixed by the browser as shown here: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>html</SPAN></DIV><PRE class="brush: html notranslate" data-signature="nNzE3T1LLNrLQph9KrGfqbm5VDlQ39z2rVE8/+eh784="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  strong
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>em</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>strong emphasized?<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>em</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>em</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN> what is this?<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>em</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<LI>The link with the missing double quote has been deleted altogether. The last list item looks like this: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>html</SPAN></DIV><PRE class="brush: html notranslate" data-signature="9bo5ixJkyJmOTf4OP0QDYkSun19wuP/G/FoS4nw/kuU="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>li</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
    Unclosed attributes: Another common source of HTML problems. Let's look
    at an example:
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>li</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV></LI></UL></LI></OL></DIV></SECTION><SECTION aria-labelledby=html_validation>
<H3 id=html_validation><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#html_validation"><FONT color=#0066cc>HTML validation</FONT></A></H3>
<DIV class=section-content>
<P>So you can see from the above example that you really want to make sure your HTML is well-formed! But how? In a small example like the one seen above, it is easy to search through the lines and find the errors, but what about a huge, complex HTML document?</P>
<P>The best strategy is to start by running your HTML page through the <A class=external href="https://validator.w3.org/" target=_blank><FONT color=#0066cc>Markup Validation Service</FONT></A> &#8212; created and maintained by the W3C, the organization that looks after the specifications that define HTML, CSS, and other web technologies. This webpage takes an HTML document as an input, goes through it, and gives you a report to tell you what is wrong with your HTML.</P>
<P><img alt="The HTML validator homepage" src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML/validator.png" width=1105 height=776 loading="lazy"> </P>
<P>To specify the HTML to validate, you can provide a web address, upload an HTML file, or directly input some HTML code.</P></DIV></SECTION><SECTION aria-labelledby=active_learning_validating_an_html_document>
<H3 id=active_learning_validating_an_html_document><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#active_learning_validating_an_html_document"><FONT color=#0066cc>Active learning: Validating an HTML document</FONT></A></H3>
<DIV class=section-content>
<P>Let's try this with our <A class=external href="https://github.com/mdn/learning-area/blob/main/html/introduction-to-html/debugging-html/debug-example.html" target=_blank><FONT color=#0066cc>sample document</FONT></A>.</P>
<OL>
<LI>First, load the <A class=external href="https://validator.w3.org/" target=_blank><FONT color=#0066cc>Markup Validation Service</FONT></A> in one browser tab, if it isn't already open. 
<LI>Switch to the <A class=external href="https://validator.w3.org/#validate_by_input" target=_blank><FONT color=#0066cc>Validate by Direct Input</FONT></A> tab. 
<LI>Copy all of the sample document's code (not just the body) and paste it into the large text area shown in the Markup Validation Service. 
<LI>Press the <EM>Check</EM> button.</LI></OL>
<P>This should give you a list of errors and other information.</P>
<P><img alt="A list of HTML validation results from the W3C markup validation service" src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML/validation-results.png" width=603 height=535 loading="lazy"> </P>
<H4 id=interpreting_the_error_messages>Interpreting the error messages</H4>
<P>The error messages are usually helpful, but sometimes they are not so helpful; with a bit of practice you can work out how to interpret these to fix your code. Let's go through the error messages and see what they mean. You'll see that each message comes with a line and column number to help you to locate the error easily.</P>
<UL>
<LI>"End tag <CODE>li</CODE> implied, but there were open elements" (2 instances): These messages indicate that an element is open that should be closed. The ending tag is implied, but not actually there. The line/column information points to the first line after the line where the closing tag should really be, but this is a good enough clue to see what is wrong. 
<LI>"Unclosed element <CODE>strong</CODE>": This is really easy to understand &#8212; a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong"><CODE><FONT color=#0066cc>&lt;strong&gt;</FONT></CODE></A> element is unclosed, and the line/column information points right to where it is. 
<LI>"End tag <CODE>strong</CODE> violates nesting rules": This points out the incorrectly nested elements, and the line/column information points out where they are. 
<LI>"End of file reached when inside an attribute value. Ignoring tag": This one is rather cryptic; it refers to the fact that there is an attribute value not properly formed somewhere, possibly near the end of the file because the end of the file appears inside the attribute value. The fact that the browser doesn't render the link should give us a good clue as to what element is at fault. 
<LI>"End of file seen and there were open elements": This is a bit ambiguous, but basically refers to the fact there are open elements that need to be properly closed. The line numbers point to the last few lines of the file, and this error message comes with a line of code that points out an example of an open element: <PRE class="brush: plain notranslate">example: &lt;a href="https://www.mozilla.org/&gt;link to Mozilla homepage&lt;/a&gt; &#8617; &lt;/ul&gt;&#8617; &lt;/body&gt;&#8617;&lt;/html&gt;
</PRE>
<DIV id=sect2 class="notecard note">
<P><STRONG>Note:</STRONG> An attribute missing a closing quote can result in an open element because the rest of the document is interpreted as the attribute's content.</P></DIV>
<LI>"Unclosed element <CODE>ul</CODE>": This is not very helpful, as the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul"><CODE><FONT color=#0066cc>&lt;ul&gt;</FONT></CODE></A> element <EM>is</EM> closed correctly. This error comes up because the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a"><CODE><FONT color=#0066cc>&lt;a&gt;</FONT></CODE></A> element is not closed, due to the missing closing quote mark.</LI></UL>
<P>If you can't work out what every error message means, don't worry about it &#8212; a good idea is to try fixing a few errors at a time. Then try revalidating your HTML to show what errors are left. Sometimes fixing an earlier error will also get rid of other error messages &#8212; several errors can often be caused by a single problem, in a domino effect.</P>
<P>You will know when all your errors are fixed when you see the following banner in your output:</P>
<P><img alt='Banner that reads "The document validates according to the specified schema(s) and to additional constraints checked by the validator."' src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML/valid-html-banner.png" width=934 height=46 loading="lazy"> </P></DIV></SECTION><SECTION aria-labelledby=summary>
<H2 id=summary><A href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML#summary"><FONT color=#0066cc>
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:40 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
