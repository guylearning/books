<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: 6. JavaScript fundamentals">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), 6. JavaScript fundamentals">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): 6. JavaScript fundamentals (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): 6. JavaScript fundamentals </font></b><br>(109 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="1030.htm"> - Next</a> - <a href="1735.htm">Previous</a> - <a href="332.htm">Parent</a> - <a href="338.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li>This page: 6. JavaScript fundamentals</li>
<ol>
<li><a href="1030.htm">What is JavaScript?</a> (15 elements)
<li><a href="1035.htm">A first splash into JavaScript</a> (1 elements)
<li><a href="1031.htm">What went wrong? Troubleshooting JavaScript</a> (5 elements)
<li><a href="1036.htm">Storing the information you need — Variables</a> (50 elements)
<li><a href="1032.htm">Basic math in JavaScript — numbers and operators</a> (5 elements)
<li><a href="1033.htm">Handling text — strings in JavaScript</a> (7 elements)
<li>Useful string methods (see <a href="#915">below)</a>
<li><a href="1034.htm">Arrays</a> (11 elements)
<li>Making decisions in your code — conditionals (see <a href="#1037">below)</a>
<li>Functions — reusable blocks of code (see <a href="#1038">below)</a>
<li>Function return values (see <a href="#1039">below)</a>
<li>Introduction to events (see <a href="#1040">below)</a>
<li>Looping code (see <a href="#1041">below)</a>
<li>Build your own function (see <a href="#1042">below)</a>
<li>Event bubbling (see <a href="#1043">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<div align="center">
<center>
<table border="4" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFFF00" bordercolor="#FF0000">
<tr>
<td>
<b>Subject: Topic #339: 6. JavaScript fundamentals</b><p>
</td>
</tr>
<tr>
<td bordercolor="#FFCC00">
<HEAD></HEAD>
<BODY><STRONG><FONT color=blue>Core : </FONT></STRONG><SPAN class=headers>Title:</SPAN></B><SPAN class=RefText> 6. JavaScript fundamentals</SPAN></FONT></SPAN></HEADER><SECTION> 
<P>Focus on the core JavaScript language and fundamental surrounding topics.</P>
<P>Scripting</P></SECTION></A>
<LI class="module-list-item topic-practices"><A href="https://developer.mozilla.org/en-US/curriculum/core/accessibility/"><HEADER><?XML:NAMESPACE PREFIX = "[default] http://www.w3.org/2000/svg" NS = "http://www.w3.org/2000/svg" /><svg role=none class="topic-icon topic-practices" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 60 60" fill="none"><circle fill="#fff" cx="30" cy="30" r="30"></circle><path fill="#356a1c" d="M 35.96 28.42 a 0.5 0.5 0 0 1 -0.69 0 l -3.861 -3.683 a 0.5 0.5 0 0 1 0 -0.724 l 1.11 -1.059 a 0.5 0.5 0 0 1 0.69 0 l 2.06 1.967 a 0.5 0.5 0 0 0 0.69 0 l 4.813 -4.592 a 0.5 0.5 0 0 1 0.69 0 l 1.11 1.06 a 0.5 0.5 0 0 1 0 0.723 Z m -7.55 -4.17 a 0.5 0.5 0 0 0 -0.5 -0.5 H 17.12 a 0.5 0.5 0 0 0 -0.5 0.5 v 1.5 a 0.5 0.5 0 0 0 0.5 0.5 h 10.79 a 0.5 0.5 0 0 0 0.5 -0.5 Z m 12.72 7.862 a 0.5 0.5 0 0 0 0 -0.724 l -1.109 -1.059 a 0.5 0.5 0 0 0 -0.69 0 l -2.716 2.592 a 0.5 0.5 0 0 1 -0.69 0 l -2.716 -2.592 a 0.5 0.5 0 0 0 -0.69 0 l -1.11 1.06 a 0.5 0.5 0 0 0 0 0.723 l 2.648 2.526 a 0.5 0.5 0 0 1 0 0.724 l -2.648 2.526 a 0.5 0.5 0 0 0 0 0.724 l 1.11 1.059 a 0.5 0.5 0 0 0 0.69 0 l 2.716 -2.592 a 0.5 0.5 0 0 1 0.69 0 l 2.716 2.592 a 0.5 0.5 0 0 0 0.69 0 l 1.11 -1.06 a 0.5 0.5 0 0 0 0 -0.723 l -2.648 -2.526 a 0.5 0.5 0 0 1 0 -0.724 Z M 28.41 34.25 a 0.5 0.5 0 0 0 -0.5 -0.5 H 17.12 a 0.5 0.5 0 0 0 -0.5 0.5 v 1.5 a 0.5 0.5 0 0 0 0.5 0.5 h 10.79 a 0.5 0.5 0 0 0 0.5 -0.5 Z"></path></svg><SPAN>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="915">Topic #915: Useful string methods</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>Now that we've looked at the very basics of strings, let's move up a gear and start thinking about what useful operations we can do on strings with built-in methods, such as finding the length of a text string, joining and splitting strings, substituting one character in a string for another, and more.
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML and CSS, an understanding of what JavaScript is. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand that strings are objects, and learn how to use some of the basic methods available on those objects to manipulate strings. </TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=strings_as_objects>
<H2 id=strings_as_objects><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#strings_as_objects">Strings as objects</A></H2>
<DIV class=section-content>
<P>Most values can be used as if they are objects in JavaScript. When you create a string, for example by using</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ouzHBsz7ZLKimVxlyTS/7spLJfDhgClTCcZxvM3Q0ls="><CODE><Span class="token keyword">const</Span> string <Span class="token operator">=</Span> <Span class="token string">"This is my string"</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>although the variable itself isn't an object, it still has a large number of properties and methods available to it, by virtue of being usable as an object when accessing properties. You can see this if you go to the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"><CODE>String</CODE></A> object page and look down the list on the side of the page!</P>
<P><STRONG>Now, before your brain starts melting, don't worry!</STRONG> You really don't need to know about most of these early on in your learning journey. But there are a few that you'll potentially use quite often that we'll look at here.</P>
<P>Let's enter some examples into the <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">browser developer console</A>.</P></DIV></SECTION><SECTION aria-labelledby=finding_the_length_of_a_string>
<H2 id=finding_the_length_of_a_string><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#finding_the_length_of_a_string">Finding the length of a string</A></H2>
<DIV class=section-content>
<P>This is easy &#8212; you use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length"><CODE>length</CODE></A> property. Try entering the following lines:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="yhHjFUxJIfwsRT2KKgsapXLHAXaLhYICHevYMCY1hcw="><CODE><Span class="token keyword">const</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>
browserType<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>This should return the number 7, because "mozilla" is 7 characters long. This is useful for many reasons; for example, you might want to find the lengths of a series of names so you can display them in order of length, or let a user know that a username they have entered into a form field is too long if it is over a certain length.</P></DIV></SECTION><SECTION aria-labelledby=retrieving_a_specific_string_character>
<H2 id=retrieving_a_specific_string_character><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#retrieving_a_specific_string_character">Retrieving a specific string character</A></H2>
<DIV class=section-content>
<P>On a related note, you can return any character inside a string by using <STRONG>square bracket notation</STRONG> &#8212; this means you include square brackets (<CODE>[]</CODE>) on the end of your variable name. Inside the square brackets, you include the number of the character you want to return, so for example to retrieve the first letter you'd do this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="X1GpPeun0j96lJeor6uKbWGkYuiZAvOwB8PSo6EOmlA="><CODE>browserType<Span class="token punctuation">[</Span><Span class="token number">0</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Remember: computers count from 0, not 1!</P>
<P>To retrieve the last character of <EM>any</EM> string, we could use the following line, combining this technique with the <CODE>length</CODE> property we looked at above:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="u6+60vO13Cy/oV4IgulsiFkNAEJ5SiYdknwc78m7YIE="><CODE>browserType<Span class="token punctuation">[</Span>browserType<Span class="token punctuation">.</Span>length <Span class="token operator">-</Span> <Span class="token number">1</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The length of the string "mozilla" is 7, but because the count starts at 0, the last character's position is 6; using <CODE>length-1</CODE> gets us the last character.</P></DIV></SECTION><SECTION aria-labelledby=testing_if_a_string_contains_a_substring>
<H2 id=testing_if_a_string_contains_a_substring><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#testing_if_a_string_contains_a_substring">Testing if a string contains a substring</A></H2>
<DIV class=section-content>
<P>Sometimes you'll want to find if a smaller string is present inside a larger one (we generally say <EM>if a substring is present inside a string</EM>). This can be done using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"><CODE>includes()</CODE></A> method, which takes a single <A href="https://developer.mozilla.org/en-US/docs/Glossary/Parameter">parameter</A> &#8212; the substring you want to search for.</P>
<P>It returns <CODE>true</CODE> if the string contains the substring, and <CODE>false</CODE> otherwise.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="uIRRGLQISkl9lH5LYD9ktSZbs9oTEEZa6VYpivwDwzk="><CODE><Span class="token keyword">const</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>browserType<Span class="token punctuation">.</Span><Span class="token function">includes</Span><Span class="token punctuation">(</Span><Span class="token string">"zilla"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"Found zilla!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"No zilla here!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Often you'll want to know if a string starts or ends with a particular substring. This is a common enough need that there are two special methods for this: <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith"><CODE>startsWith()</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith"><CODE>endsWith()</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="MYXaxwLYXFZ3iYZta2bAR6d7SpaGvjAWCHqzYWcXYQY="><CODE><Span class="token keyword">const</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>browserType<Span class="token punctuation">.</Span><Span class="token function">startsWith</Span><Span class="token punctuation">(</Span><Span class="token string">"zilla"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"Found zilla!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"No zilla here!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="wVlM9bJwUaZGL8HQNKkIuJjGaz65y2UXF2uOyJMu7/c="><CODE><Span class="token keyword">const</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>browserType<Span class="token punctuation">.</Span><Span class="token function">endsWith</Span><Span class="token punctuation">(</Span><Span class="token string">"zilla"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"Found zilla!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"No zilla here!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=finding_the_position_of_a_substring_in_a_string>
<H2 id=finding_the_position_of_a_substring_in_a_string><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#finding_the_position_of_a_substring_in_a_string">Finding the position of a substring in a string</A></H2>
<DIV class=section-content>
<P>You can find the position of a substring inside a larger string using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf"><CODE>indexOf()</CODE></A> method. This method takes two <A href="https://developer.mozilla.org/en-US/docs/Glossary/Parameter">parameters</A> &#8211; the substring that you want to search for, and an optional parameter that specifies the starting point of the search.</P>
<P>If the string contains the substring, <CODE>indexOf()</CODE> returns the index of the first occurrence of the substring. If the string does not contain the substring, <CODE>indexOf()</CODE> returns <CODE>-1</CODE>.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="NsPkrVD2F+5tj/jgl6nlbiferSaYA4/oxbANyhK1f78="><CODE><Span class="token keyword">const</Span> tagline <Span class="token operator">=</Span> <Span class="token string">"MDN - Resources for developers, by developers"</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>tagline<Span class="token punctuation">.</Span><Span class="token function">indexOf</Span><Span class="token punctuation">(</Span><Span class="token string">"developers"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// 20</Span>
</CODE></PRE></DIV>
<P>Starting at <CODE>0</CODE>, if you count the number of characters (including the whitespace) from the beginning of the string, the first occurrence of the substring <CODE>"developers"</CODE> is at index <CODE>20</CODE>.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="2bvs1BHlpwV2dX8YGzp/XZwth5oAFxaCWv57hsue6TM="><CODE>console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>tagline<Span class="token punctuation">.</Span><Span class="token function">indexOf</Span><Span class="token punctuation">(</Span><Span class="token string">"x"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// -1</Span>
</CODE></PRE></DIV>
<P>This, on the other hand, returns <CODE>-1</CODE> because the character <CODE>x</CODE> is not present in the string.</P>
<P>So now that you know how to find the first occurrence of a substring, how do you go about finding subsequent occurrences? You can do that by passing in a value that's greater than the index of the previous occurrence as the second parameter to the method.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="76phmEK/oP1XWm+ujdftQ8ZMEZSDUbbqOE7rSu2XUKQ="><CODE><Span class="token keyword">const</Span> firstOccurrence <Span class="token operator">=</Span> tagline<Span class="token punctuation">.</Span><Span class="token function">indexOf</Span><Span class="token punctuation">(</Span><Span class="token string">"developers"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> secondOccurrence <Span class="token operator">=</Span> tagline<Span class="token punctuation">.</Span><Span class="token function">indexOf</Span><Span class="token punctuation">(</Span><Span class="token string">"developers"</Span><Span class="token punctuation">,</Span> firstOccurrence <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>firstOccurrence<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// 20</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>secondOccurrence<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// 35</Span>
</CODE></PRE></DIV>
<P>Here we're telling the method to search for the substring <CODE>"developers"</CODE> starting at index <CODE>21</CODE> (<CODE>firstOccurrence + 1</CODE>), and it returns the index <CODE>35</CODE>.</P></DIV></SECTION><SECTION aria-labelledby=extracting_a_substring_from_a_string>
<H2 id=extracting_a_substring_from_a_string><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#extracting_a_substring_from_a_string">Extracting a substring from a string</A></H2>
<DIV class=section-content>
<P>You can extract a substring from a string using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"><CODE>slice()</CODE></A> method. You pass it:</P>
<UL>
<LI>the index at which to start extracting 
<LI>the index at which to stop extracting. This is exclusive, meaning that the character at this index is not included in the extracted substring.</LI></UL>
<P>For example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="mtOgaIcUlvsJNl5itsdVtDp3NLrEyKIq4JGvnIHMins="><CODE><Span class="token keyword">const</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>browserType<Span class="token punctuation">.</Span><Span class="token function">slice</Span><Span class="token punctuation">(</Span><Span class="token number">1</Span><Span class="token punctuation">,</Span> <Span class="token number">4</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "ozi"</Span>
</CODE></PRE></DIV>
<P>The character at index <CODE>1</CODE> is <CODE>"o"</CODE>, and the character at index 4 is <CODE>"l"</CODE>. So we extract all characters starting at <CODE>"o"</CODE> and ending just before <CODE>"l"</CODE>, giving us <CODE>"ozi"</CODE>.</P>
<P>If you know that you want to extract all of the remaining characters in a string after a certain character, you don't have to include the second parameter. Instead, you only need to include the character position from where you want to extract the remaining characters in a string. Try the following:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="0i8DOOsayLtRfg/S7D+QQrFmvOJaxca9ePrMlH0PyTo="><CODE>browserType<Span class="token punctuation">.</Span><Span class="token function">slice</Span><Span class="token punctuation">(</Span><Span class="token number">2</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "zilla"</Span>
</CODE></PRE></DIV>
<P>This returns <CODE>"zilla"</CODE> &#8212; this is because the character position of 2 is the letter <CODE>"z"</CODE>, and because you didn't include a second parameter, the substring that was returned was all of the remaining characters in the string.</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> <CODE>slice()</CODE> has other options too; study the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"><CODE>slice()</CODE></A> page to see what else you can find out.</P></DIV></DIV></SECTION><SECTION aria-labelledby=changing_case>
<H2 id=changing_case><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#changing_case">Changing case</A></H2>
<DIV class=section-content>
<P>The string methods <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"><CODE>toLowerCase()</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"><CODE>toUpperCase()</CODE></A> take a string and convert all the characters to lower- or uppercase, respectively. This can be useful for example if you want to normalize all user-entered data before storing it in a database.</P>
<P>Let's try entering the following lines to see what happens:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="uKRFYWGFTDJXhiRR1rCGMxxwxBo7ijOhy++MgkdcRVg="><CODE><Span class="token keyword">const</Span> radData <Span class="token operator">=</Span> <Span class="token string">"My NaMe Is MuD"</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>radData<Span class="token punctuation">.</Span><Span class="token function">toLowerCase</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>radData<Span class="token punctuation">.</Span><Span class="token function">toUpperCase</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=updating_parts_of_a_string>
<H2 id=updating_parts_of_a_string><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#updating_parts_of_a_string">Updating parts of a string</A></H2>
<DIV class=section-content>
<P>You can replace one substring inside a string with another substring using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"><CODE>replace()</CODE></A> method.</P>
<P>In this example, we're providing two parameters &#8212; the string we want to replace, and the string we want to replace it with:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="lActEP2FJQDW5OoaShDlU1tUhvMMir3ruWgVCXh1p6g="><CODE><Span class="token keyword">const</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> updated <Span class="token operator">=</Span> browserType<Span class="token punctuation">.</Span><Span class="token function">replace</Span><Span class="token punctuation">(</Span><Span class="token string">"moz"</Span><Span class="token punctuation">,</Span> <Span class="token string">"van"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>updated<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "vanilla"</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>browserType<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "mozilla"</Span>
</CODE></PRE></DIV>
<P>Note that <CODE>replace()</CODE>, like many string methods, doesn't change the string it was called on, but returns a new string. If you want to update the original <CODE>browserType</CODE> variable, you would have to do something like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="IPVOWMETWXzCSrK+FFulrLeYw0pnjZYFfaYue2Ttkus="><CODE><Span class="token keyword">let</Span> browserType <Span class="token operator">=</Span> <Span class="token string">"mozilla"</Span><Span class="token punctuation">;</Span>
browserType <Span class="token operator">=</Span> browserType<Span class="token punctuation">.</Span><Span class="token function">replace</Span><Span class="token punctuation">(</Span><Span class="token string">"moz"</Span><Span class="token punctuation">,</Span> <Span class="token string">"van"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>browserType<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "vanilla"</Span>
</CODE></PRE></DIV>
<P>Also note that we now have to declare <CODE>browserType</CODE> using <CODE>let</CODE>, not <CODE>const</CODE>, because we are reassigning it.</P>
<P>Be aware that <CODE>replace()</CODE> in this form only changes the first occurrence of the substring. If you want to change all occurrences, you can use <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll"><CODE>replaceAll()</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="mA0yFqhAUao+nsfprRKEDtVB7Se9ORMhFvTYMUA1kBI="><CODE><Span class="token keyword">let</Span> quote <Span class="token operator">=</Span> <Span class="token string">"To be or not to be"</Span><Span class="token punctuation">;</Span>
quote <Span class="token operator">=</Span> quote<Span class="token punctuation">.</Span><Span class="token function">replaceAll</Span><Span class="token punctuation">(</Span><Span class="token string">"be"</Span><Span class="token punctuation">,</Span> <Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>quote<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "To code or not to code"</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_examples>
<H2 id=active_learning_examples><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#active_learning_examples">Active learning examples</A></H2>
<DIV class=section-content>
<P>In this section, we'll get you to try your hand at writing some string manipulation code. In each exercise below, we have an array of strings, and a loop that processes each value in the array and displays it in a bulleted list. You don't need to understand arrays or loops right now &#8212; these will be explained in future articles. All you need to do in each case is write the code that will output the strings in the format that we want them in.</P>
<P>Each example comes with a "Reset" button, which you can use to reset the code if you make a mistake and can't get it working again, and a "Show solution" button you can press to see a potential answer if you get really stuck.</P></DIV></SECTION><SECTION aria-labelledby=filtering_greeting_messages>
<H3 id=filtering_greeting_messages><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#filtering_greeting_messages">Filtering greeting messages</A></H3>
<DIV class=section-content>
<P>In the first exercise, we'll start you off simple &#8212; we have an array of greeting card messages, but we want to sort them to list just the Christmas messages. We want you to fill in a conditional test inside the <CODE>if ()</CODE> structure to test each string and only print it in the list if it is a Christmas message.</P>
<P>Think about how you could test whether the message in each case is a Christmas message. What string is present in all of those messages, and what method could you use to test whether it is present?</P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="B4olXYyAgrPnAElgUygsyT3tKQfjrCspamEtR1v3/Js="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">min-height</Span><Span class="token punctuation">:</Span> 125px<Span class="token punctuation">;</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>ul</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>ul</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 290px<Span class="token punctuation">;</Span> <Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
const list = document.querySelector('.output ul');
list.textContent = "";
const greetings = ['Happy Birthday!',
                 'Merry Christmas my love',
                 'A happy Christmas to all the family',
                 'You\'re all I want for Christmas',
                 'Get well soon'];

for (const greeting of greetings) {
  // Your conditional test needs to go inside the parentheses
  // in the line below, replacing what's currently there
  if (greeting) {
    const listItem = document.createElement('li');
    listItem.textContent = greeting;
    list.appendChild(listItem);
  }
}
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="3UKU7FjFO0DZo/pNJ9Nadxq3DX0NaBftbqy5anhuT2A="><CODE><Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> code <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">eval</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> code<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> jsSolution <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">const list = document.querySelector('.output ul');
list.textContent = "";
const greetings = [
  'Happy Birthday!',
  'Merry Christmas my love',
  'A happy Christmas to all the family',
  'You\\'re all I want for Christmas',
  'Get well soon',
];

for (const greeting of greetings) {
  // Your conditional test needs to go inside the parentheses
  // in the line below, replacing what's currently there
  if (greeting.includes('Christmas')) {
    const listItem = document.createElement('li');
    listItem.textContent = greeting;
    list.appendChild(listItem);
  }
}</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
window<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"load"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token comment">// Update the saved userCode every time the user updates the text area code</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeyup</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// We only want to save the state when the user code is being shown,</Span>
  <Span class="token comment">// not the solution, so that solution is not saved over the user code</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    solutionEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect2 class=code-example>
<DIV id=sect3 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=fixing_capitalization>
<H3 id=fixing_capitalization><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#fixing_capitalization">Fixing capitalization</A></H3>
<DIV class=section-content>
<P>In this exercise, we have the names of cities in the United Kingdom, but the capitalization is all messed up. We want you to change them so that they are all lowercase, except for a capital first letter. A good way to do this is to:</P>
<OL>
<LI>Convert the whole of the string contained in the <CODE>city</CODE> variable to lowercase and store it in a new variable. 
<LI>Grab the first letter of the string in this new variable and store it in another variable. 
<LI>Using this latest variable as a substring, replace the first letter of the lowercase string with the first letter of the lowercase string changed to upper case. Store the result of this replacement procedure in another new variable. 
<LI>Change the value of the <CODE>result</CODE> variable to equal to the final result, not the <CODE>city</CODE>.</LI></OL>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> A hint &#8212; the parameters of the string methods don't have to be string literals; they can also be variables, or even variables with a method being invoked on them.</P></DIV>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="nRHQY4YioqrhaUzmeCMDfAMnd0cT/1eO7YcJrJZ+T2k="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">min-height</Span><Span class="token punctuation">:</Span> 125px<Span class="token punctuation">;</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>ul</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>ul</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 250px<Span class="token punctuation">;</Span> <Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
const list = document.querySelector('.output ul');
list.textContent = "";
const cities = ['lonDon', 'ManCHESTer', 'BiRmiNGHAM', 'liVERpoOL'];

for (const city of cities) {
  // write your code just below here

  const result = city;
  const listItem = document.createElement('li');
  listItem.textContent = result;
  list.appendChild(listItem);
}
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="PGKhdW3ArkZidkMqXHZTOTOSgyZXz1av7HbZDMOE1bQ="><CODE><Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> code <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">eval</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> code<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> jsSolution <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">const list = document.querySelector('.output ul');
list.textContent = "";
const cities = ['lonDon', 'ManCHESTer', 'BiRmiNGHAM', 'liVERpoOL'];

for (const city of cities) {
  // write your code just below here
  const lower = city.toLowerCase();
  const firstLetter = lower.slice(0,1);
  const capitalized = lower.replace(firstLetter,firstLetter.toUpperCase());
  const result = capitalized;
  const listItem = document.createElement('li');
  listItem.textContent = result;
  list.appendChild(listItem);
}</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
window<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"load"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token comment">// Update the saved userCode every time the user updates the text area code</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeyup</Span> <Span class="token operator">=</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// We only want to save the state when the user code is being shown,</Span>
  <Span class="token comment">// not the solution, so that solution is not saved over the user code</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    solutionEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect5 class=code-example>
<DIV id=sect6 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=making_new_strings_from_old_parts>
<H3 id=making_new_strings_from_old_parts><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#making_new_strings_from_old_parts">Making new strings from old parts</A></H3>
<DIV class=section-content>
<P>In this last exercise, the array contains a bunch of strings containing information about train stations in the North of England. The strings are data items that contain the three-letter station code, followed by some machine-readable data, followed by a semicolon, followed by the human-readable station name. For example:</P><PRE class="brush: plain notranslate">MAN675847583748sjt567654;Manchester Piccadilly
</PRE>
<P>We want to extract the station code and name, and put them together in a string with the following structure:</P><PRE class="brush: plain notranslate">MAN: Manchester Piccadilly
</PRE>
<P>We'd recommend doing it like this:</P>
<OL>
<LI>Extract the three-letter station code and store it in a new variable. 
<LI>Find the character index number of the semicolon. 
<LI>Extract the human-readable station name using the semicolon character index number as a reference point, and store it in a new variable. 
<LI>Concatenate the two new variables and a string literal to make the final string. 
<LI>Change the value of the <CODE>result</CODE> variable to the final string, not the <CODE>station</CODE>.</LI></OL>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="f1RsS8Rq78s6wN9MHOKQRV5My+IyNjHE86QPYu4+IpY="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">min-height</Span><Span class="token punctuation">:</Span> 125px<Span class="token punctuation">;</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>ul</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>ul</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 285px<Span class="token punctuation">;</Span> <Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
const list = document.querySelector('.output ul');
list.textContent = "";
const stations = ['MAN675847583748sjt567654;Manchester Piccadilly',
                  'GNF576746573fhdg4737dh4;Greenfield',
                  'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',
                  'SYB4f65hf75f736463;Stalybridge',
                  'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];

for (const station of stations) {
  // write your code just below here

  const result = station;
  const listItem = document.createElement('li');
  listItem.textContent = result;
  list.appendChild(listItem);
}
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="5B3BS9xI6R4Hoth4ZB3KyINYBddG3axCejt4I3hTBqM="><CODE><Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> code <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">eval</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> code<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> jsSolution <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">const list = document.querySelector('.output ul');
list.textContent = '';
const stations = ['MAN675847583748sjt567654;Manchester Piccadilly',
                  'GNF576746573fhdg4737dh4;Greenfield',
                  'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',
                  'SYB4f65hf75f736463;Stalybridge',
                  'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'];

for (const station of stations) {
  // write your code just below here
  const code = station.slice(0,3);
  const semiColon = station.indexOf(';');
  const name = station.slice(semiColon + 1);
  const result = \`\${code}: \${name}\`;
  const listItem = document.createElement('li');
  listItem.textContent = result;
  list.appendChild(listItem);
}</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
window<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"load"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token comment">// Update the saved userCode every time the user updates the text area code</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeyup</Span> <Span class="token operator">=</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// We only want to save the state when the user code is being shown,</Span>
  <Span class="token comment">// not the solution, so that solution is not saved over the user code</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    solutionEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect7 class=code-example>
<DIV id=sect8 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Test_your_skills:_Strings">Test your skills: Strings</A>.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>You can't escape the fact that being able to handle words and sentences in programming is very important &#8212; particularly in JavaScript, as websites are all about communicating with people. This article has given you the basics that you need to know about manipulating strings for now. This should serve you well as you go into more complex topics in the future. Next, we're going to look at the last major type of data we need to focus on in the short term &#8212; arrays.</P>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps"><Span class=button-wrap>Overview: JavaScript first steps</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/first_steps/useful_string_methods (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/first_steps/useful_string_methods/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FFirst_steps%2FUseful_string_methods&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Ffirst_steps%2Fuseful_string_methods%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FFirst_steps%2FUseful_string_methods%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Ffirst_steps%2Fuseful_string_methods%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1037">Topic #1,037: Making decisions in your code &#8212; conditionals</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>In any programming language, the code needs to make decisions and carry out actions accordingly depending on different inputs. For example, in a game, if the player's number of lives is 0, then it's game over. In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is nighttime. In this article, we'll explore how so-called conditional statements work in JavaScript.
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML, CSS, and <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</A>. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand how to use conditional structures in JavaScript.</TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=you_can_have_it_on_one_condition!>
<H2 id=you_can_have_it_on_one_condition!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#you_can_have_it_on_one_condition!">You can have it on one condition!</A></H2>
<DIV class=section-content>
<P>Human beings (and other animals) make decisions all the time that affect their lives, from small ("should I eat one cookie or two?") to large ("should I stay in my home country and work on my father's farm, or should I move to America and study astrophysics?")</P>
<P>Conditional statements allow us to represent such decision making in JavaScript, from the choice that must be made (for example, "one cookie or two"), to the resulting outcome of those choices (perhaps the outcome of "ate one cookie" might be "still felt hungry", and the outcome of "ate two cookies" might be "felt full, but mom scolded me for eating all the cookies".)</P>
<P><img alt="A cartoon character resembling a person holding a cookie jar labeled 'Cookies'. There is a question mark above the head of the character. There are two speech bubbles. The left speech bubble has one cookie. The right speech bubble has two cookies. Together it implies the character is trying to decide if it wants to one cookie or two cookies." src="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/cookie-choice-small.png" width=1280 height=800 loading="lazy"> </P></DIV></SECTION><SECTION aria-labelledby=if...else_statements>
<H2 id=if...else_statements><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#if...else_statements">if...else statements</A></H2>
<DIV class=section-content>
<P>Let's look at by far the most common type of conditional statement you'll use in JavaScript &#8212; the humble <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"><CODE>if...else</CODE> statement</A>.</P></DIV></SECTION><SECTION aria-labelledby=basic_if...else_syntax>
<H3 id=basic_if...else_syntax><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#basic_if...else_syntax">Basic if...else syntax</A></H3>
<DIV class=section-content>
<P>Basic <CODE>if...else</CODE> syntax looks like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="FpMYSXf2GSVb5bA7y2vRmWSffxZNcXUIBy3bZ7ycNu8="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">/* code to run if condition is true */</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">/* run some other code instead */</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Here we've got:</P>
<OL>
<LI>The keyword <CODE>if</CODE> followed by some parentheses. 
<LI>A condition to test, placed inside the parentheses (typically "is this value bigger than this other value?", or "does this value exist?"). The condition makes use of the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#comparison_operators">comparison operators</A> we discussed in the last module and returns <CODE>true</CODE> or <CODE>false</CODE>. 
<LI>A set of curly braces, inside which we have some code &#8212; this can be any code we like, and it only runs if the condition returns <CODE>true</CODE>. 
<LI>The keyword <CODE>else</CODE>. 
<LI>Another set of curly braces, inside which we have some more code &#8212; this can be any code we like, and it only runs if the condition is not <CODE>true</CODE> &#8212; or in other words, the condition is <CODE>false</CODE>.</LI></OL>
<P>This code is pretty human-readable &#8212; it is saying "<STRONG>if</STRONG> the <STRONG>condition</STRONG> returns <CODE>true</CODE>, run code A, <STRONG>else</STRONG> run code B"</P>
<P>You should note that you don't have to include the <CODE>else</CODE> and the second curly brace block &#8212; the following is also perfectly legal code:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="EmYFzFSQzxDDhSAHw7cC6g20gFrKRuXzxY27G82kbfU="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">/* code to run if condition is true */</Span>
<Span class="token punctuation">}</Span>

<Span class="token comment">/* run some other code */</Span>
</CODE></PRE></DIV>
<P>However, you need to be careful here &#8212; in this case, the second block of code is not controlled by the conditional statement, so it <STRONG>always</STRONG> runs, regardless of whether the condition returns <CODE>true</CODE> or <CODE>false</CODE>. This is not necessarily a bad thing, but it might not be what you want &#8212; often you want to run one block of code <EM>or</EM> the other, not both.</P>
<P>As a final point, while not recommended, you may sometimes see <CODE>if...else</CODE> statements written without the curly braces:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js example-bad notranslate" data-signature="lP+eMzeQQRvCWlxLPXvWJjrJbN4vnd6UeqFs4H52BCE="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span> <Span class="token comment">/* code to run if condition is true */</Span>
<Span class="token keyword">else</Span> <Span class="token comment">/* run some other code instead */</Span>
</CODE></PRE></DIV>
<P>This syntax is perfectly valid, but it is much easier to understand the code if you use the curly braces to delimit the blocks of code, and use multiple lines and indentation.</P></DIV></SECTION><SECTION aria-labelledby=a_real_example>
<H3 id=a_real_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#a_real_example">A real example</A></H3>
<DIV class=section-content>
<P>To understand this syntax better, let's consider a real example. Imagine a child being asked for help with a chore by their mother or father. The parent might say "Hey sweetheart! If you help me by going and doing the shopping, I'll give you some extra allowance so you can afford that toy you wanted." In JavaScript, we could represent this like so:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="86W5lpShfZhqd7szuFS9xDuUZnEvF6Lm96RSYnbsDcw="><CODE><Span class="token keyword">let</Span> shoppingDone <Span class="token operator">=</Span> <Span class="token boolean">false</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> childsAllowance<Span class="token punctuation">;</Span>

<Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>shoppingDone <Span class="token operator">===</Span> <Span class="token boolean">true</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  childsAllowance <Span class="token operator">=</Span> <Span class="token number">10</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  childsAllowance <Span class="token operator">=</Span> <Span class="token number">5</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>This code as shown always results in the <CODE>shoppingDone</CODE> variable returning <CODE>false</CODE>, meaning disappointment for our poor child. It'd be up to us to provide a mechanism for the parent to set the <CODE>shoppingDone</CODE> variable to <CODE>true</CODE> if the child did the shopping.</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> You can see a more <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/allowance-updater.html" target=_blank>complete version of this example on GitHub</A> (also see it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/allowance-updater.html" target=_blank>running live</A>.)</P></DIV></DIV></SECTION><SECTION aria-labelledby=else_if>
<H3 id=else_if><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#else_if">else if</A></H3>
<DIV class=section-content>
<P>The last example provided us with two choices, or outcomes &#8212; but what if we want more than two?</P>
<P>There is a way to chain on extra choices/outcomes to your <CODE>if...else</CODE> &#8212; using <CODE>else if</CODE>. Each extra choice requires an additional block to put in between <CODE>if () { }</CODE> and <CODE>else { }</CODE> &#8212; check out the following more involved example, which could be part of a simple weather forecast application:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="A6jhvufhXYpEUpt/SvfZMnTtSBy3Pc2rnUxnL+oTr7E="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>weather<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Select the weather type today: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>select</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>weather<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>--Make a choice--<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>sunny<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Sunny<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>rainy<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Rainy<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>snowing<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Snowing<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>overcast<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Overcast<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>select</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="9WLKhqf4lsJYa030+vFmZwvWJebSHvxI5n4FL1BsaKg="><CODE><Span class="token keyword">const</Span> select <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"select"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> para <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

select<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"change"</Span><Span class="token punctuation">,</Span> setWeather<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">setWeather</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> choice <Span class="token operator">=</Span> select<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"sunny"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
      <Span class="token string">"It is nice and sunny outside today. Wear shorts! Go to the beach, or the park, and get an ice cream."</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"rainy"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
      <Span class="token string">"Rain is falling outside; take a rain coat and an umbrella, and don't stay out for too long."</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"snowing"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
      <Span class="token string">"The snow is coming down &#8212; it is freezing! Best to stay in with a cup of hot chocolate, or go build a snowman."</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"overcast"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
      <Span class="token string">"It isn't raining, but the sky is grey and gloomy; it could turn any minute, so take a rain coat just in case."</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">""</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV id=sect2 class=code-example>
<DIV id=sect3 class=example-header></DIV></DIV>
<OL>
<LI>Here we've got an HTML <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"><CODE>&lt;select&gt;</CODE></A> element allowing us to make different weather choices, and a simple paragraph. 
<LI>In the JavaScript, we are storing a reference to both the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"><CODE>&lt;select&gt;</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p"><CODE>&lt;p&gt;</CODE></A> elements, and adding an event listener to the <CODE>&lt;select&gt;</CODE> element so that when its value is changed, the <CODE>setWeather()</CODE> function is run. 
<LI>When this function is run, we first set a variable called <CODE>choice</CODE> to the current value selected in the <CODE>&lt;select&gt;</CODE> element. We then use a conditional statement to show different text inside the paragraph depending on what the value of <CODE>choice</CODE> is. Notice how all the conditions are tested in <CODE>else if () { }</CODE> blocks, except for the first one, which is tested in an <CODE>if () { }</CODE> block. 
<LI>The very last choice, inside the <CODE>else { }</CODE> block, is basically a "last resort" option &#8212; the code inside it will be run if none of the conditions are <CODE>true</CODE>. In this case, it serves to empty the text out of the paragraph if nothing is selected, for example, if a user decides to re-select the "--Make a choice--" placeholder option shown at the beginning.</LI></OL>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> You can also <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/simple-else-if.html" target=_blank>find this example on GitHub</A> (<A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/simple-else-if.html" target=_blank>see it running live</A> on there also.)</P></DIV></DIV></SECTION><SECTION aria-labelledby=a_note_on_comparison_operators>
<H3 id=a_note_on_comparison_operators><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#a_note_on_comparison_operators">A note on comparison operators</A></H3>
<DIV class=section-content>
<P>Comparison operators are used to test the conditions inside our conditional statements. We first looked at comparison operators back in our <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#comparison_operators">Basic math in JavaScript &#8212; numbers and operators</A> article. Our choices are:</P>
<UL>
<LI><CODE>===</CODE> and <CODE>!==</CODE> &#8212; test if one value is identical to, or not identical to, another. 
<LI><CODE>&lt;</CODE> and <CODE>&gt;</CODE> &#8212; test if one value is less than or greater than another. 
<LI><CODE>&lt;=</CODE> and <CODE>&gt;=</CODE> &#8212; test if one value is less than or equal to, or greater than or equal to, another.</LI></UL>
<P>We wanted to make a special mention of testing boolean (<CODE>true</CODE>/<CODE>false</CODE>) values, and a common pattern you'll come across again and again. Any value that is not <CODE>false</CODE>, <CODE>undefined</CODE>, <CODE>null</CODE>, <CODE>0</CODE>, <CODE>NaN</CODE>, or an empty string (<CODE>''</CODE>) actually returns <CODE>true</CODE> when tested as a conditional statement, therefore you can use a variable name on its own to test whether it is <CODE>true</CODE>, or even that it exists (that is, it is not undefined.) So for example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="UWIwx8zKof4AnGFLKxb/23zTzIazwHKnvxI4U5RBZwk="><CODE><Span class="token keyword">let</Span> cheese <Span class="token operator">=</Span> <Span class="token string">"Cheddar"</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>cheese<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"Yay! Cheese available for making cheese on toast."</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"No cheese on toast for you today."</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>And, returning to our previous example about the child doing a chore for their parent, you could write it like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="udhCVt/EgmEQxiI56ooC8vn9uwt+bBUY8Vz/hhkFKik="><CODE><Span class="token keyword">let</Span> shoppingDone <Span class="token operator">=</Span> <Span class="token boolean">false</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> childsAllowance<Span class="token punctuation">;</Span>

<Span class="token comment">// We don't need to explicitly specify 'shoppingDone === true'</Span>
<Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>shoppingDone<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  childsAllowance <Span class="token operator">=</Span> <Span class="token number">10</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  childsAllowance <Span class="token operator">=</Span> <Span class="token number">5</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=nesting_if...else>
<H3 id=nesting_if...else><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#nesting_if...else">Nesting if...else</A></H3>
<DIV class=section-content>
<P>It is perfectly OK to put one <CODE>if...else</CODE> statement inside another one &#8212; to nest them. For example, we could update our weather forecast application to show a further set of choices depending on what the temperature is:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="GFFhKfbWrNNzorDMbVKyhhFS7hMBsUrRtu3I+ZIBZRU="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"sunny"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>temperature <Span class="token operator">&lt;</Span> <Span class="token number">86</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">It is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>temperature<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> degrees outside &#8212; nice and sunny. Let's go out to the beach, or the park, and get an ice cream.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>temperature <Span class="token operator">&gt;=</Span> <Span class="token number">86</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">It is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>temperature<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> degrees outside &#8212; REALLY HOT! If you want to go outside, make sure to put some sunscreen on.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Even though the code all works together, each <CODE>if...else</CODE> statement works completely independently of the other one.</P></DIV></SECTION><SECTION aria-labelledby=logical_operators_and_or_and_not>
<H3 id=logical_operators_and_or_and_not><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#logical_operators_and_or_and_not">Logical operators: AND, OR and NOT</A></H3>
<DIV class=section-content>
<P>If you want to test multiple conditions without writing nested <CODE>if...else</CODE> statements, <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators">logical operators</A> can help you. When used in conditions, the first two do the following:</P>
<UL>
<LI><CODE>&amp;&amp;</CODE> &#8212; AND; allows you to chain together two or more expressions so that all of them have to individually evaluate to <CODE>true</CODE> for the whole expression to return <CODE>true</CODE>. 
<LI><CODE>||</CODE> &#8212; OR; allows you to chain together two or more expressions so that one or more of them have to individually evaluate to <CODE>true</CODE> for the whole expression to return <CODE>true</CODE>.</LI></UL>
<P>To give you an AND example, the previous example snippet can be rewritten to this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="+VzYZWS7jr15JcJnwMYVt4hQL6cvrWJ3szdNBCD8HjA="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"sunny"</Span> <Span class="token operator">&amp;&amp;</Span> temperature <Span class="token operator">&lt;</Span> <Span class="token number">86</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">It is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>temperature<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> degrees outside &#8212; nice and sunny. Let's go out to the beach, or the park, and get an ice cream.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>choice <Span class="token operator">===</Span> <Span class="token string">"sunny"</Span> <Span class="token operator">&amp;&amp;</Span> temperature <Span class="token operator">&gt;=</Span> <Span class="token number">86</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">It is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>temperature<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> degrees outside &#8212; REALLY HOT! If you want to go outside, make sure to put some sunscreen on.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>So for example, the first code block will only be run if <CODE>choice === 'sunny'</CODE> <EM>and</EM> <CODE>temperature &lt; 86</CODE> return <CODE>true</CODE>.</P>
<P>Let's look at a quick OR example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="st1yxTtNxtgkk+dWpgI7s5AGG+NkinvuB6S4d5scKTs="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>iceCreamVanOutside <Span class="token operator">||</Span> houseStatus <Span class="token operator">===</Span> <Span class="token string">"on fire"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"You should leave the house quickly."</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"Probably should just stay in then."</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>The last type of logical operator, NOT, expressed by the <CODE>!</CODE> operator, can be used to negate an expression. Let's combine it with OR in the above example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="BuXIOc+1+06XYbugLL/pMjPj9aDmN2rkiq4PYmxxnXs="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span><Span class="token operator">!</Span><Span class="token punctuation">(</Span>iceCreamVanOutside <Span class="token operator">||</Span> houseStatus <Span class="token operator">===</Span> <Span class="token string">"on fire"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"Probably should just stay in then."</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token string">"You should leave the house quickly."</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>In this snippet, if the OR statement returns <CODE>true</CODE>, the NOT operator will negate it so that the overall expression returns <CODE>false</CODE>.</P>
<P>You can combine as many logical statements together as you want, in whatever structure. The following example executes the code inside only if both OR statements return true, meaning that the overall AND statement will return true:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="JM1UkPpKq2bsLa9NjMAYfG5mJj+7xYXGUQ/bHF0/o+s="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">(</Span>x <Span class="token operator">===</Span> <Span class="token number">5</Span> <Span class="token operator">||</Span> y <Span class="token operator">&gt;</Span> <Span class="token number">3</Span> <Span class="token operator">||</Span> z <Span class="token operator">&lt;=</Span> <Span class="token number">10</Span><Span class="token punctuation">)</Span> <Span class="token operator">&amp;&amp;</Span> <Span class="token punctuation">(</Span>loggedIn <Span class="token operator">||</Span> userName <Span class="token operator">===</Span> <Span class="token string">"Steve"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// run the code</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>A common mistake when using the logical OR operator in conditional statements is to try to state the variable whose value you are checking once, and then give a list of values it could be to return true, separated by <CODE>||</CODE> (OR) operators. For example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js example-bad notranslate" data-signature="Vq7QRh1HQy9hWGA3EnjQBYkExgPNBR7LDBy2jpkJPIc="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>x <Span class="token operator">===</Span> <Span class="token number">5</Span> <Span class="token operator">||</Span> <Span class="token number">7</Span> <Span class="token operator">||</Span> <Span class="token number">10</Span> <Span class="token operator">||</Span> <Span class="token number">20</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// run my code</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>In this case, the condition inside <CODE>if ()</CODE> will always evaluate to true since 7 (or any other non-zero value) always evaluates to <CODE>true</CODE>. This condition is actually saying "if x equals 5, or 7 is true &#8212; which it always is". This is logically not what we want! To make this work you've got to specify a complete test on either side of each OR operator:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="lrIG2b64520C5r1hm7LvkDlw5eJvSmxezdd0xJaOlNs="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>x <Span class="token operator">===</Span> <Span class="token number">5</Span> <Span class="token operator">||</Span> x <Span class="token operator">===</Span> <Span class="token number">7</Span> <Span class="token operator">||</Span> x <Span class="token operator">===</Span> <Span class="token number">10</Span> <Span class="token operator">||</Span> x <Span class="token operator">===</Span> <Span class="token number">20</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// run my code</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=switch_statements>
<H2 id=switch_statements><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#switch_statements">switch statements</A></H2>
<DIV class=section-content>
<P><CODE>if...else</CODE> statements do the job of enabling conditional code well, but they are not without their downsides. They are mainly good for cases where you've got a couple of choices, and each one requires a reasonable amount of code to be run, and/or the conditions are complex (for example, multiple logical operators). For cases where you just want to set a variable to a certain choice of value or print out a particular statement depending on a condition, the syntax can be a bit cumbersome, especially if you've got a large number of choices.</P>
<P>In such a case, <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"><CODE>switch</CODE> statements</A> are your friend &#8212; they take a single expression/value as an input, and then look through several choices until they find one that matches that value, executing the corresponding code that goes along with it. Here's some more pseudocode, to give you an idea:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="VzUO/1dKIozn+fP+uU9rXAz1iMaHcTo/JG8/TqCnv1M="><CODE><Span class="token keyword">switch</Span> <Span class="token punctuation">(</Span>expression<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">case</Span> <Span class="token literal-property property">choice1</Span><Span class="token operator">:</Span>
    <Span class="token comment">// run this code</Span>
    <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>

  <Span class="token keyword">case</Span> <Span class="token literal-property property">choice2</Span><Span class="token operator">:</Span>
    <Span class="token comment">// run this code instead</Span>
    <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>

  <Span class="token comment">// include as many cases as you like</Span>

  <Span class="token keyword">default</Span><Span class="token operator">:</Span>
    <Span class="token comment">// actually, just run this code</Span>
    <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Here we've got:</P>
<OL>
<LI>The keyword <CODE>switch</CODE>, followed by a set of parentheses. 
<LI>An expression or value inside the parentheses. 
<LI>The keyword <CODE>case</CODE>, followed by a choice that the expression/value could be, followed by a colon. 
<LI>Some code to run if the choice matches the expression. 
<LI>A <CODE>break</CODE> statement, followed by a semicolon. If the previous choice matches the expression/value, the browser stops executing the code block here, and moves on to any code that appears below the switch statement. 
<LI>As many other cases (bullets 3&#8211;5) as you like. 
<LI>The keyword <CODE>default</CODE>, followed by exactly the same code pattern as one of the cases (bullets 3&#8211;5), except that <CODE>default</CODE> does not have a choice after it, and you don't need the <CODE>break</CODE> statement as there is nothing to run after this in the block anyway. This is the default option that runs if none of the choices match.</LI></OL>
<DIV id=sect5 class="notecard note">
<P><STRONG>Note:</STRONG> You don't have to include the <CODE>default</CODE> section &#8212; you can safely omit it if there is no chance that the expression could end up equaling an unknown value. If there is a chance of this, however, you need to include it to handle unknown cases.</P></DIV></DIV></SECTION><SECTION aria-labelledby=a_switch_example>
<H3 id=a_switch_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#a_switch_example">A switch example</A></H3>
<DIV class=section-content>
<P>Let's have a look at a real example &#8212; we'll rewrite our weather forecast application to use a switch statement instead:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="A6jhvufhXYpEUpt/SvfZMnTtSBy3Pc2rnUxnL+oTr7E="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>weather<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Select the weather type today: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>select</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>weather<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>--Make a choice--<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>sunny<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Sunny<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>rainy<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Rainy<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>snowing<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Snowing<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>overcast<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Overcast<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>select</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="3KCHPNtAbY9c+bvGMS/IDddzp4sgkgtpg2Mnm542A3c="><CODE><Span class="token keyword">const</Span> select <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"select"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> para <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

select<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"change"</Span><Span class="token punctuation">,</Span> setWeather<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">setWeather</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> choice <Span class="token operator">=</Span> select<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

  <Span class="token keyword">switch</Span> <Span class="token punctuation">(</Span>choice<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token keyword">case</Span> <Span class="token string">"sunny"</Span><Span class="token operator">:</Span>
      para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
        <Span class="token string">"It is nice and sunny outside today. Wear shorts! Go to the beach, or the park, and get an ice cream."</Span><Span class="token punctuation">;</Span>
      <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>
    <Span class="token keyword">case</Span> <Span class="token string">"rainy"</Span><Span class="token operator">:</Span>
      para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
        <Span class="token string">"Rain is falling outside; take a rain coat and an umbrella, and don't stay out for too long."</Span><Span class="token punctuation">;</Span>
      <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>
    <Span class="token keyword">case</Span> <Span class="token string">"snowing"</Span><Span class="token operator">:</Span>
      para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
        <Span class="token string">"The snow is coming down &#8212; it is freezing! Best to stay in with a cup of hot chocolate, or go build a snowman."</Span><Span class="token punctuation">;</Span>
      <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>
    <Span class="token keyword">case</Span> <Span class="token string">"overcast"</Span><Span class="token operator">:</Span>
      para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span>
        <Span class="token string">"It isn't raining, but the sky is grey and gloomy; it could turn any minute, so take a rain coat just in case."</Span><Span class="token punctuation">;</Span>
      <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>
    <Span class="token keyword">default</Span><Span class="token operator">:</Span>
      para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">""</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV id=sect6 class=code-example>
<DIV id=sect7 class=example-header></DIV></DIV>
<DIV id=sect8 class="notecard note">
<P><STRONG>Note:</STRONG> You can also <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/simple-switch.html" target=_blank>find this example on GitHub</A> (see it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/simple-switch.html" target=_blank>running live</A> on there also.)</P></DIV></DIV></SECTION><SECTION aria-labelledby=ternary_operator>
<H2 id=ternary_operator><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#ternary_operator">Ternary operator</A></H2>
<DIV class=section-content>
<P>There is one final bit of syntax we want to introduce you to before we get you to play with some examples. The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator">ternary or conditional operator</A> is a small bit of syntax that tests a condition and returns one value/expression if it is <CODE>true</CODE>, and another if it is <CODE>false</CODE> &#8212; this can be useful in some situations, and can take up a lot less code than an <CODE>if...else</CODE> block if you have two choices that are chosen between via a <CODE>true</CODE>/<CODE>false</CODE> condition. The pseudocode looks like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="MEXAy+qVYiqAui9fIJ+1b3LjM2aChsXbGv37L23aMD4="><CODE>condition <Span class="token operator">?</Span> run <Span class="token keyword">this</Span> <Span class="token literal-property property">code</Span> <Span class="token operator">:</Span> run <Span class="token keyword">this</Span> code instead
</CODE></PRE></DIV>
<P>So let's look at a simple example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="V/ZMzjfUj08PDYLR2phy6sqJh2Kygw0bvKkg2MLEULA="><CODE><Span class="token keyword">const</Span> greeting <Span class="token operator">=</Span> isBirthday
  <Span class="token operator">?</Span> <Span class="token string">"Happy birthday Mrs. Smith &#8212; we hope you have a great day!"</Span>
  <Span class="token operator">:</Span> <Span class="token string">"Good morning Mrs. Smith."</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Here we have a variable called <CODE>isBirthday</CODE> &#8212; if this is <CODE>true</CODE>, we give our guest a happy birthday message; if not, we give her the standard daily greeting.</P></DIV></SECTION><SECTION aria-labelledby=ternary_operator_example>
<H3 id=ternary_operator_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#ternary_operator_example">Ternary operator example</A></H3>
<DIV class=section-content>
<P>The ternary operator is not just for setting variable values; you can also run functions, or lines of code &#8212; anything you like. The following live example shows a simple theme chooser where the styling for the site is applied using a ternary operator.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="lGodVS6C80Fwew2SEauJAACFAOudlSVw6gpcGa6YHvo="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>theme<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Select theme: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>select</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>theme<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>white<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>White<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>option</Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>black<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Black<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>option</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>select</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h1</Span><Span class="token punctuation">&gt;</Span></Span>This is my website<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h1</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ZKQSF3dZMb9LSBJhrWYMiJBP4lyWlXy9AD6cmQRj4R8="><CODE><Span class="token keyword">const</Span> select <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"select"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> html <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"html"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>padding <Span class="token operator">=</Span> <Span class="token string">"10px"</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token parameter">bgColor<Span class="token punctuation">,</Span> textColor</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  html<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> bgColor<Span class="token punctuation">;</Span>
  html<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>color <Span class="token operator">=</Span> textColor<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

select<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"change"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span>
  select<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"black"</Span>
    <Span class="token operator">?</Span> <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token string">"black"</Span><Span class="token punctuation">,</Span> <Span class="token string">"white"</Span><Span class="token punctuation">)</Span>
    <Span class="token operator">:</Span> <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token string">"white"</Span><Span class="token punctuation">,</Span> <Span class="token string">"black"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect9 class=code-example>
<DIV id=sect10 class=example-header></DIV></DIV>
<P>Here we've got a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"><CODE>&lt;select&gt;</CODE></A> element to choose a theme (black or white), plus a simple <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements">h1</A> to display a website title. We also have a function called <CODE>update()</CODE>, which takes two colors as parameters (inputs). The website's background color is set to the first provided color, and its text color is set to the second provided color.</P>
<P>Finally, we've also got an <A href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event">onchange</A> event listener that serves to run a function containing a ternary operator. It starts with a test condition &#8212; <CODE>select.value === 'black'</CODE>. If this returns <CODE>true</CODE>, we run the <CODE>update()</CODE> function with parameters of black and white, meaning that we end up with a background color of black and a text color of white. If it returns <CODE>false</CODE>, we run the <CODE>update()</CODE> function with parameters of white and black, meaning that the site colors are inverted.</P>
<DIV id=sect11 class="notecard note">
<P><STRONG>Note:</STRONG> You can also <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/simple-ternary.html" target=_blank>find this example on GitHub</A> (see it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/simple-ternary.html" target=_blank>running live</A> on there also.)</P></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_a_simple_calendar>
<H2 id=active_learning_a_simple_calendar><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#active_learning_a_simple_calendar">Active learning: A simple calendar</A></H2>
<DIV class=section-content>
<P>In this example, you are going to help us finish a simple calendar application. In the code you've got:</P>
<UL>
<LI>A <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"><CODE>&lt;select&gt;</CODE></A> element to allow the user to choose between different months. 
<LI>An <CODE>onchange</CODE> event handler to detect when the value selected in the <CODE>&lt;select&gt;</CODE> menu is changed. 
<LI>A function called <CODE>createCalendar()</CODE> that draws the calendar and displays the correct month in the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements">h1</A> element.</LI></UL>
<P>We need you to write a conditional statement inside the <CODE>onchange</CODE> handler function, just below the <CODE>// ADD CONDITIONAL HERE</CODE> comment. It should:</P>
<OL>
<LI>Look at the selected month (stored in the <CODE>choice</CODE> variable. This will be the <CODE>&lt;select&gt;</CODE> element value after the value changes, so "January" for example.) 
<LI>Set a variable called <CODE>days</CODE> to be equal to the number of days in the selected month. To do this you'll have to look up the number of days in each month of the year. You can ignore leap years for the purposes of this example.</LI></OL>
<P>Hints:</P>
<UL>
<LI>You are advised to use logical OR to group multiple months together into a single condition; many of them share the same number of days. 
<LI>Think about which number of days is the most common, and use that as a default value.</LI></UL>
<P>If you make a mistake, you can always reset the example with the "Reset" button. If you get really stuck, press "Show solution" to see a solution.</P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="VPC0SH67MN6cP2a1K+M/1OaDTyTN8Y7g2MXpI6ENu5Q="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>iframe</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">width</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>100%<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">height</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>600px<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>iframe</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 400px<Span class="token punctuation">;</Span><Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
const select = document.querySelector('select');
const list = document.querySelector('ul');
const h1 = document.querySelector('h1');

select.addEventListener('change', () =&gt; {
  const choice = select.value;

  // ADD CONDITIONAL HERE

  createCalendar(days, choice);
});

function createCalendar(days, choice) {
  list.textContent = "";
  h1.textContent = choice;
  for (let i = 1; i &lt;= days; i++) {
    const listItem = document.createElement('li');
    listItem.textContent = i;
    list.appendChild(listItem);
  }
}

createCalendar(31, 'January');
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="e9l28ky0am1FTRGE8NXI5TEg+SJSgRKkSa48iAtFV1U="><CODE><Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> outputIFrame <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> initialCode <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userCode <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> solutionCode <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">const select = document.querySelector("select");
const list = document.querySelector("ul");
const h1 = document.querySelector("h1");

select.addEventListener("change", () =&gt; {
  const choice = select.value;

  let days = 31;
  if (choice === "February") {
    days = 28;
  } else if (
    choice === "April" ||
    choice === "June" ||
    choice === "September" ||
    choice === "November"
  ) {
    days = 30;
  }

  createCalendar(days, choice);
});

function createCalendar(days, choice) {
  list.textContent = "";
  h1.textContent = choice;
  for (let i = 1; i &lt;= days; i++) {
    const listItem = document.createElement("li");
    listItem.textContent = i;
    list.appendChild(listItem);
  }
}

createCalendar(31, "January");</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">outputDocument</Span><Span class="token punctuation">(</Span><Span class="token parameter">code</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> outputBody <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">
&lt;div class="output" height: 500px; overflow: auto"&gt;
  &lt;label for="month"&gt;Select month: &lt;/label&gt;
  &lt;select id="month"&gt;
    &lt;option value="January"&gt;January&lt;/option&gt;
    &lt;option value="February"&gt;February&lt;/option&gt;
    &lt;option value="March"&gt;March&lt;/option&gt;
    &lt;option value="April"&gt;April&lt;/option&gt;
    &lt;option value="May"&gt;May&lt;/option&gt;
    &lt;option value="June"&gt;June&lt;/option&gt;
    &lt;option value="July"&gt;July&lt;/option&gt;
    &lt;option value="August"&gt;August&lt;/option&gt;
    &lt;option value="September"&gt;September&lt;/option&gt;
    &lt;option value="October"&gt;October&lt;/option&gt;
    &lt;option value="November"&gt;November&lt;/option&gt;
    &lt;option value="December"&gt;December&lt;/option&gt;
  &lt;/select&gt;

  &lt;h1&gt;&lt;/h1&gt;

  &lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

  <Span class="token keyword">const</Span> outputStyle <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">
.output * {
  box-sizing: border-box;
}

.output ul {
  padding-left: 0;
}

.output li {
  display: block;
  float: left;
  width: 25%;
  border: 2px solid white;
  padding: 5px;
  height: 40px;
  background-color: #4a2db6;
  color: white;
}
html {
  font-family: sans-serif;
}

h2 {
  font-size: 16px;
}</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">return</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;style&gt;</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>outputStyle<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">&lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>outputBody<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">
    &lt;script&gt;</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>code<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span><Span class="token function">setAttribute</Span><Span class="token punctuation">(</Span><Span class="token string">"srcdoc"</Span><Span class="token punctuation">,</Span> <Span class="token function">outputDocument</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> update<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> initialCode<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token comment">// remember the state of the user's code</Span>
    <Span class="token comment">// so we can restore it</Span>
    userCode <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionCode<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userCode<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>
textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV id=sect12 class=code-example>
<DIV id=sect13 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_more_color_choices>
<H2 id=active_learning_more_color_choices><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#active_learning_more_color_choices">Active learning: More color choices</A></H2>
<DIV class=section-content>
<P>In this example, you are going to take the ternary operator example we saw earlier and convert the ternary operator into a switch statement to allow us to apply more choices to the simple website. Look at the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"><CODE>&lt;select&gt;</CODE></A> &#8212; this time you'll see that it has not two theme options, but five. You need to add a switch statement just underneath the <CODE>// ADD SWITCH STATEMENT</CODE> comment:</P>
<UL>
<LI>It should accept the <CODE>choice</CODE> variable as its input expression. 
<LI>For each case, the choice should equal one of the possible <CODE>&lt;option&gt;</CODE> values that can be selected, that is, <CODE>white</CODE>, <CODE>black</CODE>, <CODE>purple</CODE>, <CODE>yellow</CODE>, or <CODE>psychedelic</CODE>. Note that the option values are lowercase, while the option <EM>labels</EM>, as displayed in the live output, are capitalized. You should use the lowercase values in your code. 
<LI>For each case, the <CODE>update()</CODE> function should be run, and be passed two color values, the first one for the background color, and the second one for the text color. Remember that color values are strings, so they need to be wrapped in quotes.</LI></UL>
<P>If you make a mistake, you can always reset the example with the "Reset" button. If you get really stuck, press "Show solution" to see a solution.</P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="1nfLJPUHSN0Q3tSQsbQ8gV+YEhshvUknhry2YV3FbCA="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>iframe</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">width</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>100%<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">height</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>350px<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>iframe</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 400px<Span class="token punctuation">;</Span><Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
const select = document.querySelector('select');
const html = document.querySelector('.output');

select.addEventListener('change', () =&gt; {
  const choice = select.value;

  // ADD SWITCH STATEMENT
});

function update(bgColor, textColor) {
  html.style.backgroundColor = bgColor;
  html.style.color = textColor;
}
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="Xfy7qlA2sdCB/QOhoPinb9HS+1I3cWKMTJPlfBV/pAY="><CODE><Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> outputIFrame <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> initialCode <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userCode <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> solutionCode <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">const select = document.querySelector('select');
const html = document.querySelector('.output');

select.addEventListener('change', () =&gt; {
  const choice = select.value;

  switch(choice) {
    case 'black':
      update('black','white');
      break;
    case 'white':
      update('white','black');
      break;
    case 'purple':
      update('purple','white');
      break;
    case 'yellow':
      update('yellow','purple');
      break;
    case 'psychedelic':
      update('lime','purple');
      break;
  }
});

function update(bgColor, textColor) {
  html.style.backgroundColor = bgColor;
  html.style.color = textColor;
}</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">outputDocument</Span><Span class="token punctuation">(</Span><Span class="token parameter">code</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> outputBody <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">
&lt;div class="output" height: 300px;"&gt;
  &lt;label for="theme"&gt;Select theme: &lt;/label&gt;
  &lt;select id="theme"&gt;
    &lt;option value="white"&gt;White&lt;/option&gt;
    &lt;option value="black"&gt;Black&lt;/option&gt;
    &lt;option value="purple"&gt;Purple&lt;/option&gt;
    &lt;option value="yellow"&gt;Yellow&lt;/option&gt;
    &lt;option value="psychedelic"&gt;Psychedelic&lt;/option&gt;
  &lt;/select&gt;

  &lt;h1&gt;This is my website&lt;/h1&gt;
&lt;/div&gt;</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

  <Span class="token keyword">return</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>outputBody<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">
    &lt;script&gt;</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>code<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span><Span class="token function">setAttribute</Span><Span class="token punctuation">(</Span><Span class="token string">"srcdoc"</Span><Span class="token punctuation">,</Span> <Span class="token function">outputDocument</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> update<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> initialCode<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token comment">// remember the state of the user's code</Span>
    <Span class="token comment">// so we can restore it</Span>
    userCode <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionCode<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userCode<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">update</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>
textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV id=sect14 class=code-example>
<DIV id=sect15 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Test_your_skills:_Conditionals">Test your skills: Conditionals</A>.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>And that's all you really need to know about conditional structures in JavaScript right now! If there is anything you didn't understand, feel free to read through the article again, or <A href="https://developer.mozilla.org/en-US/docs/Learn#contact_us">contact us</A> to ask for help.</P></DIV></SECTION><SECTION aria-labelledby=see_also>
<H2 id=see_also><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#see_also">See also</A></H2>
<DIV class=section-content>
<UL>
<LI><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#comparison_operators">Comparison operators</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#conditional_statements">Conditional statements in detail</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else">if...else reference</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator">Conditional (ternary) operator reference</A></LI></UL>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/conditionals (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/conditionals/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2Fconditionals&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fconditionals%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2Fconditionals%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fconditionals%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1038">Topic #1,038: Functions &#8212; reusable blocks of code</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>Another essential concept in coding is <STRONG>functions</STRONG>, which allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command &#8212; rather than having to type out the same code multiple times. In this article we'll explore fundamental concepts behind functions such as basic syntax, how to invoke and define them, scope, and parameters.
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML, CSS, and <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</A>. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand the fundamental concepts behind JavaScript functions.</TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=where_do_i_find_functions>
<H2 id=where_do_i_find_functions><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#where_do_i_find_functions">Where do I find functions?</A></H2>
<DIV class=section-content>
<P>In JavaScript, you'll find functions everywhere. In fact, we've been using functions all the way through the course so far; we've just not been talking about them very much. Now is the time, however, for us to start talking about functions explicitly, and really exploring their syntax.</P>
<P>Pretty much anytime you make use of a JavaScript structure that features a pair of parentheses &#8212; <CODE>()</CODE> &#8212; and you're <STRONG>not</STRONG> using a common built-in language structure like a <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#the_standard_for_loop">for loop</A>, <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#while_and_do...while">while or do...while loop</A>, or <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#if...else_statements">if...else statement</A>, you are making use of a function.</P></DIV></SECTION><SECTION aria-labelledby=built-in_browser_functions>
<H2 id=built-in_browser_functions><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#built-in_browser_functions">Built-in browser functions</A></H2>
<DIV class=section-content>
<P>We've used functions built into the browser a lot in this course.</P>
<P>Every time we manipulated a text string, for example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="Rzq29Z6FZ6nOm6LD7tVZ2lwpVC0EIXwfcjnMrA+hWwc="><CODE><Span class="token keyword">const</Span> myText <Span class="token operator">=</Span> <Span class="token string">"I am a string"</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> newString <Span class="token operator">=</Span> myText<Span class="token punctuation">.</Span><Span class="token function">replace</Span><Span class="token punctuation">(</Span><Span class="token string">"string"</Span><Span class="token punctuation">,</Span> <Span class="token string">"sausage"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>newString<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// the replace() string function takes a source string,</Span>
<Span class="token comment">// and a target string and replaces the source string,</Span>
<Span class="token comment">// with the target string, and returns the newly formed string</Span>
</CODE></PRE></DIV>
<P>Or every time we manipulated an array:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="XOH7p58CISpkOeNqDo+4QVM+h3nGchxwIPML76A2SAE="><CODE><Span class="token keyword">const</Span> myArray <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"I"</Span><Span class="token punctuation">,</Span> <Span class="token string">"love"</Span><Span class="token punctuation">,</Span> <Span class="token string">"chocolate"</Span><Span class="token punctuation">,</Span> <Span class="token string">"frogs"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> madeAString <Span class="token operator">=</Span> myArray<Span class="token punctuation">.</Span><Span class="token function">join</Span><Span class="token punctuation">(</Span><Span class="token string">" "</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>madeAString<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// the join() function takes an array, joins</Span>
<Span class="token comment">// all the array items together into a single</Span>
<Span class="token comment">// string, and returns this new string</Span>
</CODE></PRE></DIV>
<P>Or every time we generate a random number:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ami9HZXp84B7mMjio8r3N3h9axsRMsq8XgdJ1OIxa9k="><CODE><Span class="token keyword">const</Span> myNumber <Span class="token operator">=</Span> Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// the random() function generates a random number between</Span>
<Span class="token comment">// 0 and up to but not including 1, and returns that number</Span>
</CODE></PRE></DIV>
<P>We were using a <EM>function</EM>!</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> Feel free to enter these lines into your browser's JavaScript console to re-familiarize yourself with their functionality, if needed.</P></DIV>
<P>The JavaScript language has many built-in functions to allow you to do useful things without having to write all that code yourself. In fact, some of the code you are calling when you <STRONG>invoke</STRONG> (a fancy word for run, or execute) a built-in browser function couldn't be written in JavaScript &#8212; many of these functions are calling parts of the background browser code, which is written largely in low-level system languages like C++, not web languages like JavaScript.</P>
<P>Bear in mind that some built-in browser functions are not part of the core JavaScript language &#8212; some are defined as part of browser APIs, which build on top of the default language to provide even more functionality (refer to <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#so_what_can_it_really_do">this early section of our course</A> for more descriptions). We'll look at using browser APIs in more detail in a later module.</P></DIV></SECTION><SECTION aria-labelledby=functions_versus_methods>
<H2 id=functions_versus_methods><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#functions_versus_methods">Functions versus methods</A></H2>
<DIV class=section-content>
<P><STRONG>Functions</STRONG> that are part of objects are called <STRONG>methods</STRONG>. You don't need to learn about the inner workings of structured JavaScript objects yet &#8212; you can wait until our later module that will teach you all about the inner workings of objects, and how to create your own. For now, we just wanted to clear up any possible confusion about method versus function &#8212; you are likely to meet both terms as you look at the available related resources across the Web.</P>
<P>The built-in code we've made use of so far comes in both forms: <STRONG>functions</STRONG> and <STRONG>methods.</STRONG> You can check the full list of the built-in functions, as well as the built-in objects and their corresponding methods <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">here</A>.</P>
<P>You've also seen a lot of <STRONG>custom functions</STRONG> in the course so far &#8212; functions defined in your code, not inside the browser. Anytime you saw a custom name with parentheses straight after it, you were using a custom function. In our <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/loops/random-canvas-circles.html" target=_blank>random-canvas-circles.html</A> example (see also the full <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/loops/random-canvas-circles.html" target=_blank>source code</A>) from our <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code">loops article</A>, we included a custom <CODE>draw()</CODE> function that looked like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="a5onmb+bOmUDpcdpEBLM9nGxxzPvusb9LbyS7Az3Juw="><CODE><Span class="token keyword">function</Span> <Span class="token function">draw</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  ctx<Span class="token punctuation">.</Span><Span class="token function">clearRect</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token constant">WIDTH</Span><Span class="token punctuation">,</Span> <Span class="token constant">HEIGHT</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> <Span class="token number">100</Span><Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">beginPath</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span>fillStyle <Span class="token operator">=</Span> <Span class="token string">"rgb(255 0 0 / 50%)"</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token constant">WIDTH</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token constant">HEIGHT</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">50</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">fill</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>This function draws 100 random circles inside a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas"><CODE>&lt;canvas&gt;</CODE></A> element. Every time we want to do that, we can just invoke the function with this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="RtlDQ6x1PCPNfqo/cqEt+MjLkSyy7CHivcqz/37hV5w="><CODE><Span class="token function">draw</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>rather than having to write all that code out again every time we want to repeat it. Functions can contain whatever code you like &#8212; you can even call other functions from inside functions. The above function for example calls the <CODE>random()</CODE> function three times, which is defined by the following code:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="F7D/lz/Nw1EBT/9OXeKYWRNPLEpt+eCHAI7y0uaDoh4="><CODE><Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> number<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>We needed this function because the browser's built-in <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random()</A> function only generates a random decimal number between 0 and 1. We wanted a random whole number between 0 and a specified number.</P></DIV></SECTION><SECTION aria-labelledby=invoking_functions>
<H2 id=invoking_functions><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#invoking_functions">Invoking functions</A></H2>
<DIV class=section-content>
<P>You are probably clear on this by now, but just in case, to actually use a function after it has been defined, you've got to run &#8212; or invoke &#8212; it. This is done by including the name of the function in the code somewhere, followed by parentheses.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="t0L1vSAoepPwOVX6Wmuaycy6LulJZ7CMOUXHxisW/hI="><CODE><Span class="token keyword">function</Span> <Span class="token function">myFunction</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token string">"hello"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token function">myFunction</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// calls the function once</Span>
</CODE></PRE></DIV>
<DIV id=sect2 class="notecard note">
<P><STRONG>Note:</STRONG> This form of creating a function is also known as <EM>function declaration</EM>. It is always hoisted so that you can call the function above the function definition and it will work fine.</P></DIV></DIV></SECTION><SECTION aria-labelledby=function_parameters>
<H2 id=function_parameters><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#function_parameters">Function parameters</A></H2>
<DIV class=section-content>
<P>Some functions require <STRONG>parameters</STRONG> to be specified when you are invoking them &#8212; these are values that need to be included inside the function parentheses, which it needs to do its job properly.</P>
<DIV id=sect3 class="notecard note">
<P><STRONG>Note:</STRONG> Parameters are sometimes called arguments, properties, or even attributes.</P></DIV>
<P>As an example, the browser's built-in <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random()</A> function doesn't require any parameters. When called, it always returns a random number between 0 and 1:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="r1uBKjuatVy+ECF1xMdbcZq4vl+d1zya1rc/8ZvWWj8="><CODE><Span class="token keyword">const</Span> myNumber <Span class="token operator">=</Span> Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The browser's built-in string <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace">replace()</A> function however needs two parameters &#8212; the substring to find in the main string, and the substring to replace that string with:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="IiiRQqhnNv7fa66vUafzqu6tdQFUP/jtgqmuFXv1imE="><CODE><Span class="token keyword">const</Span> myText <Span class="token operator">=</Span> <Span class="token string">"I am a string"</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> newString <Span class="token operator">=</Span> myText<Span class="token punctuation">.</Span><Span class="token function">replace</Span><Span class="token punctuation">(</Span><Span class="token string">"string"</Span><Span class="token punctuation">,</Span> <Span class="token string">"sausage"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> When you need to specify multiple parameters, they are separated by commas.</P></DIV></DIV></SECTION><SECTION aria-labelledby=optional_parameters>
<H3 id=optional_parameters><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#optional_parameters">Optional parameters</A></H3>
<DIV class=section-content>
<P>Sometimes parameters are optional &#8212; you don't have to specify them. If you don't, the function will generally adopt some kind of default behavior. As an example, the array <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join">join()</A> function's parameter is optional:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="eD41A6qgTJON0HeBYGwnKKCn8OBFCidvUTntlHZS1EI="><CODE><Span class="token keyword">const</Span> myArray <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"I"</Span><Span class="token punctuation">,</Span> <Span class="token string">"love"</Span><Span class="token punctuation">,</Span> <Span class="token string">"chocolate"</Span><Span class="token punctuation">,</Span> <Span class="token string">"frogs"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> madeAString <Span class="token operator">=</Span> myArray<Span class="token punctuation">.</Span><Span class="token function">join</Span><Span class="token punctuation">(</Span><Span class="token string">" "</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>madeAString<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// returns 'I love chocolate frogs'</Span>

<Span class="token keyword">const</Span> madeAnotherString <Span class="token operator">=</Span> myArray<Span class="token punctuation">.</Span><Span class="token function">join</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>madeAnotherString<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// returns 'I,love,chocolate,frogs'</Span>
</CODE></PRE></DIV>
<P>If no parameter is included to specify a joining/delimiting character, a comma is used by default.</P></DIV></SECTION><SECTION aria-labelledby=default_parameters>
<H3 id=default_parameters><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#default_parameters">Default parameters</A></H3>
<DIV class=section-content>
<P>If you're writing a function and want to support optional parameters, you can specify default values by adding <CODE>=</CODE> after the name of the parameter, followed by the default value:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="4Cv0HpuCBbNuo89xmMRc3hCvxvyD9KoDdD2+d5WplSU="><CODE><Span class="token keyword">function</Span> <Span class="token function">hello</Span><Span class="token punctuation">(</Span>name <Span class="token operator">=</Span> <Span class="token string">"Chris"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">Hello </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>name<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">!</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token function">hello</Span><Span class="token punctuation">(</Span><Span class="token string">"Ari"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// Hello Ari!</Span>
<Span class="token function">hello</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// Hello Chris!</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=anonymous_functions_and_arrow_functions>
<H2 id=anonymous_functions_and_arrow_functions><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#anonymous_functions_and_arrow_functions">Anonymous functions and arrow functions</A></H2>
<DIV class=section-content>
<P>So far we have just created a function like so:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="QwWzUw8XRmMfcQ6mELGA+txVHehkqJQab3Bd94ilNQM="><CODE><Span class="token keyword">function</Span> <Span class="token function">myFunction</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token string">"hello"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>But you can also create a function that doesn't have a name:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="9+op+UZBj7WrVRLr9MtLxCYZ4u7zVz0paxIi/Hb6XXs="><CODE><Span class="token punctuation">(</Span><Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token string">"hello"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>This is called an <STRONG>anonymous function</STRONG>, because it has no name. You'll often see anonymous functions when a function expects to receive another function as a parameter. In this case, the function parameter is often passed as an anonymous function.</P>
<DIV id=sect5 class="notecard note">
<P><STRONG>Note:</STRONG> This form of creating a function is also known as <EM>function expression</EM>. Unlike function declarations, function expressions are not hoisted.</P></DIV></DIV></SECTION><SECTION aria-labelledby=anonymous_function_example>
<H3 id=anonymous_function_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#anonymous_function_example">Anonymous function example</A></H3>
<DIV class=section-content>
<P>For example, let's say you want to run some code when the user types into a text box. To do this you can call the <A title=addEventListener() href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><CODE>addEventListener()</CODE></A> function of the text box. This function expects you to pass it (at least) two parameters:</P>
<UL>
<LI>the name of the event to listen for, which in this case is <A title=keydown href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><CODE>keydown</CODE></A> 
<LI>a function to run when the event happens.</LI></UL>
<P>When the user presses a key, the browser will call the function you provided, and will pass it a parameter containing information about this event, including the particular key that the user pressed:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="PZe6Asymv3oWARl8DbWPNbCfb1eREMpnp+i7ryPpHM8="><CODE><Span class="token keyword">function</Span> <Span class="token function">logKey</Span><Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> logKey<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Instead of defining a separate <CODE>logKey()</CODE> function, you can pass an anonymous function into <CODE>addEventListener()</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="3ls2SDTOowatoWFN8tRlFIz0LPzI8zDl70Tz8Yj11+8="><CODE>textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=arrow_functions>
<H3 id=arrow_functions><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#arrow_functions">Arrow functions</A></H3>
<DIV class=section-content>
<P>If you pass an anonymous function like this, there's an alternative form you can use, called an <STRONG>arrow function</STRONG>. Instead of <CODE>function(event)</CODE>, you write <CODE>(event) =&gt;</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="utqrByG6Mi8IIr6Fva1D7oLBdurWTaqg1f8XoXlrLf4="><CODE>textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>If the function only takes one parameter, you can omit the parentheses around the parameter:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="bX03y1vOML4a8dMTbsT2fXM6f5JedkZFS5d3GG7lZMA="><CODE>textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> <Span class="token parameter">event</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Finally, if your function contains only one line that's a <CODE>return</CODE> statement, you can also omit the braces and the <CODE>return</CODE> keyword and implicitly return the expression. In the following example, we're using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><CODE>map()</CODE></A> method of <CODE>Array</CODE> to double every value in the original array:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="MYbUVvPhLrQOKNw68x99j3gGSVdRXHYbFzQ+tkjQeSQ="><CODE><Span class="token keyword">const</Span> originals <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token number">1</Span><Span class="token punctuation">,</Span> <Span class="token number">2</Span><Span class="token punctuation">,</Span> <Span class="token number">3</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> doubled <Span class="token operator">=</Span> originals<Span class="token punctuation">.</Span><Span class="token function">map</Span><Span class="token punctuation">(</Span><Span class="token parameter">item</Span> <Span class="token operator">=&gt;</Span> item <Span class="token operator">*</Span> <Span class="token number">2</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>doubled<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// [2, 4, 6]</Span>
</CODE></PRE></DIV>
<P>The <CODE>map()</CODE> method takes each item in the array in turn, passing it into the given function. It then takes the value returned by that function and adds it to a new array.</P>
<P>So in the example above, <CODE>item =&gt; item * 2</CODE> is the arrow function equivalent of:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="TI5mOJFlwkflUKmRL1EWFvzqyiKAiCh2XbpOH1lavvQ="><CODE><Span class="token keyword">function</Span> <Span class="token function">doubleItem</Span><Span class="token punctuation">(</Span><Span class="token parameter">item</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> item <Span class="token operator">*</Span> <Span class="token number">2</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>You can use the same concise syntax to rewrite the <CODE>addEventListener</CODE> example.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="Wl24mYppuJMZFrfGJc9nLYg2Vzi3iLTcTeK/EQy0j2I="><CODE>textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>In this case, the value of <CODE>console.log()</CODE>, which is <CODE>undefined</CODE>, is implicitly returned from the callback function.</P>
<P>We recommend that you use arrow functions, as they can make your code shorter and more readable. To learn more, see the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#arrow_functions">section on arrow functions in the JavaScript guide</A>, and our <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">reference page on arrow functions</A>.</P>
<DIV id=sect6 class="notecard note">
<P><STRONG>Note:</STRONG> There are some subtle differences between arrow functions and normal functions. They're outside the scope of this introductory guide and are unlikely to make a difference in the cases we've discussed here. To learn more, see the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow function reference documentation</A>.</P></DIV></DIV></SECTION><SECTION aria-labelledby=arrow_function_live_sample>
<H3 id=arrow_function_live_sample><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#arrow_function_live_sample">Arrow function live sample</A></H3>
<DIV class=section-content>
<P>Here's a complete working example of the "keydown" example we discussed above:</P>
<P>The HTML:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="45tCTlv/JyAshnfoV5BbvjLSUPoAHNzVbBzPmFB/U9w="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>textBox<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>text<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>The JavaScript:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="J5Pki5zu2QKOlgEONx+UELBmHnmlld13OHl/AeiedKY="><CODE><Span class="token keyword">const</Span> textBox <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#textBox"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> output <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="SQrXTBOUqPCNvUXG6fqQSkoaGUucuZb4KmQFfyx2Vt0="><CODE><Span class="token selector">div</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0.5rem 0<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>The result - try typing into the text box and see the output:</P>
<DIV id=sect7 class=code-example>
<DIV id=sect8 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=function_scope_and_conflicts>
<H2 id=function_scope_and_conflicts><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#function_scope_and_conflicts">Function scope and conflicts</A></H2>
<DIV class=section-content>
<P>Let's talk a bit about <A href="https://developer.mozilla.org/en-US/docs/Glossary/Scope">scope</A> &#8212; a very important concept when dealing with functions. When you create a function, the variables and other things defined inside the function are inside their own separate <STRONG>scope</STRONG>, meaning that they are locked away in their own separate compartments, unreachable from code outside the functions.</P>
<P>The top-level outside all your functions is called the <STRONG>global scope</STRONG>. Values defined in the global scope are accessible from everywhere in the code.</P>
<P>JavaScript is set up like this for various reasons &#8212; but mainly because of security and organization. Sometimes you don't want variables to be accessible from everywhere in the code &#8212; external scripts that you call in from elsewhere could start to mess with your code and cause problems because they happen to be using the same variable names as other parts of the code, causing conflicts. This might be done maliciously, or just by accident.</P>
<P>For example, say you have an HTML file that is calling in two external JavaScript files, and both of them have a variable and a function defined that use the same name:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="bNRap6+9dRfV7WDhO/Iq0K+6N7Acp8saacNgp3en46g="><CODE><Span class="token comment">&lt;!-- Excerpt from my HTML --&gt;</Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>script</Span> <Span class="token attr-name">src</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>first.js<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token script"></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>script</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>script</Span> <Span class="token attr-name">src</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>second.js<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token script"></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>script</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>script</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token script"><Span class="token language-javascript">
  <Span class="token function">greeting</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>script</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="gcbjDGhpxsohZWzBOVb1idhNdZvxsLSv6k59o7kBN9c="><CODE><Span class="token comment">// first.js</Span>
<Span class="token keyword">const</Span> name <Span class="token operator">=</Span> <Span class="token string">"Chris"</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">function</Span> <Span class="token function">greeting</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">Hello </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>name<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">: welcome to our company.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="uFqmlcI6Uv17+3N+S51C8vu0OOJatfqDEe6smV+4fc0="><CODE><Span class="token comment">// second.js</Span>
<Span class="token keyword">const</Span> name <Span class="token operator">=</Span> <Span class="token string">"Zaptec"</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">function</Span> <Span class="token function">greeting</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">Our company is called </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>name<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Both functions you want to call are called <CODE>greeting()</CODE>, but you can only ever access the <CODE>first.js</CODE> file's <CODE>greeting()</CODE> function (the second one is ignored). In addition, an error results when attempting (in the <CODE>second.js</CODE> file) to assign a new value to the <CODE>name</CODE> variable &#8212; because it was already declared with <CODE>const</CODE>, and so can't be reassigned.</P>
<DIV id=sect9 class="notecard note">
<P><STRONG>Note:</STRONG> You can see this example <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/functions/conflict.html" target=_blank>running live on GitHub</A> (see also the <A class=external href="https://github.com/mdn/learning-area/tree/main/javascript/building-blocks/functions" target=_blank>source code</A>).</P></DIV>
<P>Keeping parts of your code locked away in functions avoids such problems, and is considered the best practice.</P>
<P>It is a bit like a zoo. The lions, zebras, tigers, and penguins are kept in their own enclosures and only have access to the things inside their enclosures &#8212; in the same manner as the function scopes. If they were able to get into other enclosures, problems would occur. At best, different animals would feel really uncomfortable inside unfamiliar habitats &#8212; a lion or tiger would feel terrible inside the penguins' watery, icy domain. At worst, the lions and tigers might try to eat the penguins!</P>
<P><img alt="Four different animals enclosed in their respective habitat in a Zoo" src="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions/mdn-mozilla-zoo.png" width=656 height=416 loading="lazy"> </P>
<P>The zoo keeper is like the global scope &#8212; they have the keys to access every enclosure, restock food, tend to sick animals, etc.</P></DIV></SECTION><SECTION aria-labelledby=active_learning_playing_with_scope>
<H3 id=active_learning_playing_with_scope><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#active_learning_playing_with_scope">Active learning: Playing with scope</A></H3>
<DIV class=section-content>
<P>Let's look at a real example to demonstrate scoping.</P>
<OL>
<LI>First, make a local copy of our <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/function-scope.html" target=_blank>function-scope.html</A> example. This contains two functions called <CODE>a()</CODE> and <CODE>b()</CODE>, and three variables &#8212; <CODE>x</CODE>, <CODE>y</CODE>, and <CODE>z</CODE> &#8212; two of which are defined inside the functions, and one in the global scope. It also contains a third function called <CODE>output()</CODE>, which takes a single parameter and outputs it in a paragraph on the page. 
<LI>Open the example up in a browser and in your text editor. 
<LI>Open the JavaScript console in your browser developer tools. In the JavaScript console, enter the following command: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="8tfuOZLF2/9S5zBqoqH79hHre9eNFDZN0IAe4K1EyOw="><CODE><Span class="token function">output</Span><Span class="token punctuation">(</Span>x<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>You should see the value of variable <CODE>x</CODE> printed to the browser viewport. 
<LI>Now try entering the following in your console 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="+8QnKeL1tXglzK1U9gTGDffmK2GAtOYR8YR/Ih5xTw4="><CODE><Span class="token function">output</Span><Span class="token punctuation">(</Span>y<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token function">output</Span><Span class="token punctuation">(</Span>z<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>Both of these should throw an error into the console along the lines of "<A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined">ReferenceError: y is not defined</A>". Why is that? Because of function scope, <CODE>y</CODE> and <CODE>z</CODE> are locked inside the <CODE>a()</CODE> and <CODE>b()</CODE> functions, so <CODE>output()</CODE> can't access them when called from the global scope. 
<LI>However, what about when it's called from inside another function? Try editing <CODE>a()</CODE> and <CODE>b()</CODE> so they look like this: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="xGelomq+U02zgnKGTsHO/B/6nqVp3ShjDwzBeKvK6Sg="><CODE><Span class="token keyword">function</Span> <Span class="token function">a</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> y <Span class="token operator">=</Span> <Span class="token number">2</Span><Span class="token punctuation">;</Span>
  <Span class="token function">output</Span><Span class="token punctuation">(</Span>y<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">b</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> z <Span class="token operator">=</Span> <Span class="token number">3</Span><Span class="token punctuation">;</Span>
  <Span class="token function">output</Span><Span class="token punctuation">(</Span>z<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>Save the code and reload it in your browser, then try calling the <CODE>a()</CODE> and <CODE>b()</CODE> functions from the JavaScript console: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="oO8r7kEpdhVYAog0RECQKwy+1f25O0paYzs9BHTjO+U="><CODE><Span class="token function">a</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token function">b</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>You should see the <CODE>y</CODE> and <CODE>z</CODE> values printed in the browser viewport. This works fine, as the <CODE>output()</CODE> function is being called inside the other functions &#8212; in the same scope as the variables it is printing are defined in, in each case. <CODE>output()</CODE> itself is available from anywhere, as it is defined in the global scope. 
<LI>Now try updating your code like this: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="aJWQjeD55vpjSZhJpkUaYO9MZJrO7iqSraHJkfJA33w="><CODE><Span class="token keyword">function</Span> <Span class="token function">a</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> y <Span class="token operator">=</Span> <Span class="token number">2</Span><Span class="token punctuation">;</Span>
  <Span class="token function">output</Span><Span class="token punctuation">(</Span>x<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">b</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> z <Span class="token operator">=</Span> <Span class="token number">3</Span><Span class="token punctuation">;</Span>
  <Span class="token function">output</Span><Span class="token punctuation">(</Span>x<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<LI>Save and reload again, and try this again in your JavaScript console: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="oO8r7kEpdhVYAog0RECQKwy+1f25O0paYzs9BHTjO+U="><CODE><Span class="token function">a</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token function">b</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>Both the <CODE>a()</CODE> and <CODE>b()</CODE> call should print the value of x to the browser viewport. These work fine because even though the <CODE>output()</CODE> calls are not in the same scope as <CODE>x</CODE> is defined in, <CODE>x</CODE> is a global variable so is available inside all code, everywhere. 
<LI>Finally, try updating your code like this: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="H7PbGm3zeyxwuAtxOkwIbWuBQoiSKdr7jnRS5yE/PMU="><CODE><Span class="token keyword">function</Span> <Span class="token function">a</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> y <Span class="token operator">=</Span> <Span class="token number">2</Span><Span class="token punctuation">;</Span>
  <Span class="token function">output</Span><Span class="token punctuation">(</Span>z<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">b</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> z <Span class="token operator">=</Span> <Span class="token number">3</Span><Span class="token punctuation">;</Span>
  <Span class="token function">output</Span><Span class="token punctuation">(</Span>y<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<LI>Save and reload again, and try this again in your JavaScript console: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="oO8r7kEpdhVYAog0RECQKwy+1f25O0paYzs9BHTjO+U="><CODE><Span class="token function">a</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token function">b</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>This time the <CODE>a()</CODE> and <CODE>b()</CODE> calls will throw that annoying <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined">ReferenceError: <EM>variable name</EM> is not defined</A> error into the console &#8212; this is because the <CODE>output()</CODE> calls and the variables they are trying to print are not in the same function scopes &#8212; the variables are effectively invisible to those function calls. </LI></OL>
<DIV id=sect10 class="notecard note">
<P><STRONG>Note:</STRONG> The same scoping rules do not apply to loop (e.g. <CODE>for() { }</CODE>) and conditional blocks (e.g. <CODE>if () { }</CODE>) &#8212; they look very similar, but they are not the same thing! Take care not to get these confused.</P></DIV>
<DIV id=sect11 class="notecard note">
<P><STRONG>Note:</STRONG> The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined">ReferenceError: "x" is not defined</A> error is one of the most common you'll encounter. If you get this error and you are sure that you have defined the variable in question, check what scope it is in.</P></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Test_your_skills:_Functions">Test your skills: Functions</A>. These tests require skills that are covered in the next two articles, so you might want to read those first before trying them.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>This article has explored the fundamental concepts behind functions, paving the way for the next one in which we get practical and take you through the steps to building up your own custom function.</P></DIV></SECTION><SECTION aria-labelledby=see_also>
<H2 id=see_also><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#see_also">See also</A></H2>
<DIV class=section-content>
<UL>
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions">Functions detailed guide</A> &#8212; covers some advanced features not included here. 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions">Functions reference</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">Default parameters</A>, <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow functions</A> &#8212; advanced concept references</LI></UL>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/functions (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/functions/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FFunctions&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Ffunctions%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FFunctions%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Ffunctions%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1039">Topic #1,039: Function return values</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>There's one last essential concept about functions for us to discuss &#8212; return values. Some functions don't return a significant value, but others do. It's important to understand what their values are, how to use them in your code, and how to make functions return useful values. We'll cover all of these below.
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>
<P>A basic understanding of HTML and CSS, <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</A>, <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions">Functions &#8212; reusable blocks of code</A>. </P></TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand function return values, and how to make use of them.</TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=what_are_return_values>
<H2 id=what_are_return_values><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#what_are_return_values">What are return values?</A></H2>
<DIV class=section-content>
<P><STRONG>Return values</STRONG> are just what they sound like &#8212; the values that a function returns when it completes. You've already met return values several times, although you may not have thought about them explicitly.</P>
<P>Let's return to a familiar example (from a <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions#built-in_browser_functions">previous article</A> in this series):</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="zNE3pS/K41FkEq4TgBsrkaV06SRTzVukSubZFZa9+vQ="><CODE><Span class="token keyword">const</Span> myText <Span class="token operator">=</Span> <Span class="token string">"The weather is cold"</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> newString <Span class="token operator">=</Span> myText<Span class="token punctuation">.</Span><Span class="token function">replace</Span><Span class="token punctuation">(</Span><Span class="token string">"cold"</Span><Span class="token punctuation">,</Span> <Span class="token string">"warm"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>newString<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// Should print "The weather is warm"</Span>
<Span class="token comment">// the replace() string function takes a string,</Span>
<Span class="token comment">// replaces one substring with another, and returns</Span>
<Span class="token comment">// a new string with the replacement made</Span>
</CODE></PRE></DIV>
<P>The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"><CODE>replace()</CODE></A> function is invoked on the <CODE>myText</CODE> string, and is passed two parameters:</P>
<UL>
<LI>The substring to find ('cold') 
<LI>The string to replace it with ('warm')</LI></UL>
<P>When the function completes (finishes running), it returns a value, which is a new string with the replacement made. In the code above, the result of this return value is saved in the variable <CODE>newString</CODE>.</P>
<P>If you look at the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"><CODE>replace()</CODE></A> function MDN reference page, you'll see a section called <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#return_value">return value</A>. It is very useful to know and understand what values are returned by functions, so we try to include this information wherever possible.</P>
<P>Some functions don't return any value. (In these cases, our reference pages list the return value as <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void"><CODE>void</CODE></A> or <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined"><CODE>undefined</CODE></A>.) For example, in the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/function-stage-4.html#L50" target=_blank><CODE>displayMessage()</CODE></A> function we built in the previous article, no specific value is returned when the function is invoked. It just makes a box appear somewhere on the screen &#8212; that's it!</P>
<P>Generally, a return value is used where the function is an intermediate step in a calculation of some kind. You want to get to a final result, which involves some values that need to be calculated by a function. After the function calculates the value, it can return the result so it can be stored in a variable; and you can use this variable in the next stage of the calculation.</P></DIV></SECTION><SECTION aria-labelledby=using_return_values_in_your_own_functions>
<H3 id=using_return_values_in_your_own_functions><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#using_return_values_in_your_own_functions">Using return values in your own functions</A></H3>
<DIV class=section-content>
<P>To return a value from a custom function, you need to use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return">return</A> keyword. We saw this in action recently in our <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/loops/random-canvas-circles.html" target=_blank>random-canvas-circles.html</A> example. Our <CODE>draw()</CODE> function draws 100 random circles somewhere on an HTML <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas"><CODE>&lt;canvas&gt;</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="a5onmb+bOmUDpcdpEBLM9nGxxzPvusb9LbyS7Az3Juw="><CODE><Span class="token keyword">function</Span> <Span class="token function">draw</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  ctx<Span class="token punctuation">.</Span><Span class="token function">clearRect</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token constant">WIDTH</Span><Span class="token punctuation">,</Span> <Span class="token constant">HEIGHT</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> <Span class="token number">100</Span><Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">beginPath</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span>fillStyle <Span class="token operator">=</Span> <Span class="token string">"rgb(255 0 0 / 50%)"</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token constant">WIDTH</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token constant">HEIGHT</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">50</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">fill</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Inside each loop iteration, three calls are made to the <CODE>random()</CODE> function, to generate a random value for the current circle's <EM>x-coordinate</EM>, <EM>y-coordinate</EM>, and <EM>radius</EM>, respectively. The <CODE>random()</CODE> function takes one parameter &#8212; a whole number &#8212; and returns a whole random number between <CODE>0</CODE> and that number. It looks like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="F7D/lz/Nw1EBT/9OXeKYWRNPLEpt+eCHAI7y0uaDoh4="><CODE><Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> number<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>This could be written as follows:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="6HcQCtqq5FouBKOw/E+6I553Lc0HfAi+OKEKc7tdHXY="><CODE><Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> result <Span class="token operator">=</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> number<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">return</Span> result<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>But the first version is quicker to write, and more compact.</P>
<P>We are returning the result of the calculation <CODE>Math.floor(Math.random() * number)</CODE> each time the function is called. This return value appears at the point the function was called, and the code continues.</P>
<P>So when you execute the following:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="s4I/P36zDD63nSumv+flZ9xP373laZ2KnTMllBH9hcY="><CODE>ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token constant">WIDTH</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token constant">HEIGHT</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">50</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>If the three <CODE>random()</CODE> calls return the values <CODE>500</CODE>, <CODE>200</CODE>, and <CODE>35</CODE>, respectively, the line would actually be run as if it were this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="FXIV8xNbzOxNhnaKoFmlS6nNm3T/Ol4SjnpjCNIR3RM="><CODE>ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span><Span class="token number">500</Span><Span class="token punctuation">,</Span> <Span class="token number">200</Span><Span class="token punctuation">,</Span> <Span class="token number">35</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The function calls on the line are run first, and their return values are substituted for the function calls, before the line itself is then executed.</P></DIV></SECTION><SECTION aria-labelledby=active_learning_our_own_return_value_function>
<H2 id=active_learning_our_own_return_value_function><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#active_learning_our_own_return_value_function">Active learning: our own return value function</A></H2>
<DIV class=section-content>
<P>Let's have a go at writing our own functions featuring return values.</P>
<OL>
<LI>Make a local copy of the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/function-library.html" target=_blank>function-library.html</A> file from GitHub. This is a simple HTML page containing a text <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"><CODE>&lt;input&gt;</CODE></A> field and a paragraph. There's also a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"><CODE>&lt;script&gt;</CODE></A> element, in which we have stored a reference to both HTML elements in two variables. This page will allow you to enter a number into the text box, and display different numbers related to it below. 
<LI>Add some useful functions to this <CODE>&lt;script&gt;</CODE> element below the two existing lines: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="5px/paFp+R7acC3cjxrLOcyfi+4OxJSwH36AMLUS0UQ="><CODE><Span class="token keyword">function</Span> <Span class="token function">squared</Span><Span class="token punctuation">(</Span><Span class="token parameter">num</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> num <Span class="token operator">*</Span> num<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">cubed</Span><Span class="token punctuation">(</Span><Span class="token parameter">num</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> num <Span class="token operator">*</Span> num <Span class="token operator">*</Span> num<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">factorial</Span><Span class="token punctuation">(</Span><Span class="token parameter">num</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>num <Span class="token operator">&lt;</Span> <Span class="token number">0</Span><Span class="token punctuation">)</Span> <Span class="token keyword">return</Span> <Span class="token keyword">undefined</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>num <Span class="token operator">===</Span> <Span class="token number">0</Span><Span class="token punctuation">)</Span> <Span class="token keyword">return</Span> <Span class="token number">1</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> x <Span class="token operator">=</Span> num <Span class="token operator">-</Span> <Span class="token number">1</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>x <Span class="token operator">&gt;</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    num <Span class="token operator">*=</Span> x<Span class="token punctuation">;</Span>
    x<Span class="token operator">--</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token keyword">return</Span> num<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>The <CODE>squared()</CODE> and <CODE>cubed()</CODE> functions are fairly obvious &#8212; they return the square or cube of the number that was given as a parameter. The <CODE>factorial()</CODE> function returns the <A class=external href="https://en.wikipedia.org/wiki/Factorial" target=_blank>factorial</A> of the given number. 
<LI>Include a way to print out information about the number entered into the text input by adding the following event handler below the existing functions: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="P5cXWpNgsN11+0R801YA6HyKhMwBt8RgiNGSx60yjzI="><CODE>input<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"change"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> num <Span class="token operator">=</Span> <Span class="token function">parseFloat</Span><Span class="token punctuation">(</Span>input<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span><Span class="token function">isNaN</Span><Span class="token punctuation">(</Span>num<Span class="token punctuation">)</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"You need to enter a number!"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>num<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> squared is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">squared</Span><Span class="token punctuation">(</Span>num<Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">. </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>num<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> cubed is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">cubed</Span><Span class="token punctuation">(</Span>num<Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">. </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>num<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> factorial is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">factorial</Span><Span class="token punctuation">(</Span>num<Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">. </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<LI>Save your code, load it in a browser, and try it out.</LI></OL>
<P>Here are some explanations for the <CODE>addEventListener</CODE> function in step 3 above:</P>
<UL>
<LI>By adding a listener to the <CODE>change</CODE> event, this function runs whenever the <CODE>change</CODE> event fires on the text input &#8212; that is when a new value is entered into the text <CODE>input</CODE>, and submitted (e.g., enter a value, then un-focus the input by pressing <KBD>Tab</KBD> or <KBD>Return</KBD>). When this anonymous function runs, the value in the <CODE>input</CODE> is stored in the <CODE>num</CODE> constant. 
<LI>The if statement prints an error message if the entered value is not a number. The condition checks if the expression <CODE>isNaN(num)</CODE> returns <CODE>true</CODE>. The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN"><CODE>isNaN()</CODE></A> function tests whether the <CODE>num</CODE> value is not a number &#8212; if so, it returns <CODE>true</CODE>, and if not, it returns <CODE>false</CODE>. 
<LI>If the condition returns <CODE>false</CODE>, the <CODE>num</CODE> value is a number and the function prints out a sentence inside the paragraph element that states the square, cube, and factorial values of the number. The sentence calls the <CODE>squared()</CODE>, <CODE>cubed()</CODE>, and <CODE>factorial()</CODE> functions to calculate the required values.</LI></UL>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> If you have trouble getting the example to work, check your code against the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/function-library-finished.html" target=_blank>finished version on GitHub</A> (<A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/functions/function-library-finished.html" target=_blank>see it running live</A> also), or ask us for help.</P></DIV></DIV></SECTION><SECTION aria-labelledby=now_its_your_turn!>
<H2 id=now_its_your_turn!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#now_its_your_turn!">Now it's your turn!</A></H2>
<DIV class=section-content>
<P>At this point, we'd like you to have a go at writing out a couple of functions of your own and adding them to the library. How about the square or cube root of the number? Or the circumference of a circle with a given radius?</P>
<P>Some extra function-related tips:</P>
<UL>
<LI>Look at another example of writing <EM>error handling</EM> into functions. It is generally a good idea to check that any necessary parameters are validated, and that any optional parameters have some kind of default value provided. This way, your program will be less likely to throw errors. 
<LI>Think about the idea of creating a <EM>function library</EM>. As you go further into your programming career, you'll start doing the same kinds of things over and over again. It is a good idea to create your own library of utility functions to do these sorts of things. You can copy them over to new code, or even just apply them to HTML pages wherever you need them.</LI></UL></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Test_your_skills:_Functions">Test your skills: Functions</A>.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>So there we have it &#8212; functions are fun, very useful, and although there's a lot to talk about in regards to their syntax and functionality, they are fairly understandable.</P>
<P>If there is anything you didn't understand, feel free to read through the article again, or <A href="https://developer.mozilla.org/en-US/docs/Learn#contact_us">contact us</A> to ask for help.</P></DIV></SECTION><SECTION aria-labelledby=see_also>
<H2 id=see_also><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values#see_also">See also</A></H2>
<DIV class=section-content>
<UL>
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions">Functions in-depth</A> &#8212; a detailed guide covering more advanced functions-related information. 
<LI><A class=external href="https://www.impressivewebs.com/callback-functions-javascript/" target=_blank>Callback functions in JavaScript</A> &#8212; a common JavaScript pattern is to pass a function into another function <EM>as an argument</EM>. It is then called inside the first function. This is a little beyond the scope of this course, but worth studying before too long.</LI></UL>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/return_values (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/return_values/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FReturn_values&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Freturn_values%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FReturn_values%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Freturn_values%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1040">Topic #1,040: Introduction to events</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>Events are things that happen in the system you are programming, which the system tells you about so your code can react to them.
<P></P>
<P>For example, if the user clicks a button on a webpage, you might want to react to that action by displaying an information box. In this article, we discuss some important concepts surrounding events, and look at how they work in browsers. This won't be an exhaustive study; just what you need to know at this stage. </P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML, CSS, and <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</A>. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand the fundamental theory of events, how they work in browsers, and how events may differ in different programming environments. </TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=what_is_an_event>
<H2 id=what_is_an_event><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#what_is_an_event">What is an event?</A></H2>
<DIV class=section-content>
<P>Events are things that happen in the system you are programming &#8212; the system produces (or "fires") a signal of some kind when an event occurs, and provides a mechanism by which an action can be automatically taken (that is, some code running) when the event occurs. Events are fired inside the browser window, and tend to be attached to a specific item that resides in it. This might be a single element, a set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur. </P>
<P>For example:</P>
<UL>
<LI>The user selects, clicks, or hovers the cursor over a certain element. 
<LI>The user chooses a key on the keyboard. 
<LI>The user resizes or closes the browser window. 
<LI>A web page finishes loading. 
<LI>A form is submitted. 
<LI>A video is played, paused, or ends. 
<LI>An error occurs.</LI></UL>
<P>You can gather from this (and from glancing at the MDN <A href="https://developer.mozilla.org/en-US/docs/Web/Events">event reference</A>) that there are <STRONG>a lot</STRONG> of events that can be fired.</P>
<P>To react to an event, you attach an <STRONG>event handler</STRONG> to it. This is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. When such a block of code is defined to run in response to an event, we say we are <STRONG>registering an event handler</STRONG>. Note: Event handlers are sometimes called <STRONG>event listeners</STRONG> &#8212; they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that is run in response to it happening. </P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> Web events are not part of the core JavaScript language &#8212; they are defined as part of the APIs built into the browser.</P></DIV></DIV></SECTION><SECTION aria-labelledby=an_example_handling_a_click_event>
<H3 id=an_example_handling_a_click_event><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#an_example_handling_a_click_event">An example: handling a click event</A></H3>
<DIV class=section-content>
<P>In the following example, we have a single <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A> in the page:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="0FtzmcKum1OJO1NzdsZY1PPYaxrCFamX7W/4CbVL+E4="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Change color<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="krI0ykS+gmTwE6q9qlgo6tqjsntNT0aEtsJMzWawe/w="><CODE><Span class="token selector">button</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Then we have some JavaScript. We'll look at this in more detail in the next section, but for now we can just say: it adds an event handler to the button's <CODE>"click"</CODE> event, and the handler reacts to the event by setting the page background to a random color:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="zRVYg2C6Mya7CnSfMfx/mk90p5vTsY8SoPM4XDjvaTI="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> <Span class="token punctuation">(</Span>number <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The example output is as follows. Try clicking the button:</P>
<DIV id=sect2 class=code-example>
<DIV id=sect3 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=using_addeventlistener>
<H2 id=using_addeventlistener><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#using_addeventlistener">Using addEventListener()</A></H2>
<DIV class=section-content>
<P>As we saw in the last example, objects that can fire events have an <A title=addEventListener() href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><CODE>addEventListener()</CODE></A> method, and this is the recommended mechanism for adding event handlers.</P>
<P>Let's take a closer look at the code from the last example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="zRVYg2C6Mya7CnSfMfx/mk90p5vTsY8SoPM4XDjvaTI="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> <Span class="token punctuation">(</Span>number <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The HTML <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A> element will fire an event when the user clicks the button. So it defines an <CODE>addEventListener()</CODE> function, which we are calling here. We're passing in two parameters:</P>
<UL>
<LI>the string <CODE>"click"</CODE>, to indicate that we want to listen to the click event. Buttons can fire lots of other events, such as <A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event"><CODE>"mouseover"</CODE></A> when the user moves their mouse over the button, or <A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><CODE>"keydown"</CODE></A> when the user presses a key and the button is focused. 
<LI>a function to call when the event happens. In our case, the function generates a random RGB color and sets the <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-color"><CODE>background-color</CODE></A> of the page <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body"><CODE>&lt;body&gt;</CODE></A> to that color.</LI></UL>
<P>It is fine to make the handler function a separate named function, like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="XbJn9qEU3MARa26axPbiS05olA4v+H9LofKXIzRqyEE="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> <Span class="token punctuation">(</Span>number <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">changeBackground</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> changeBackground<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=listening_for_other_events>
<H3 id=listening_for_other_events><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#listening_for_other_events">Listening for other events</A></H3>
<DIV class=section-content>
<P>There are many different events that can be fired by a button element. Let's experiment.</P>
<P>First, make a local copy of <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/events/random-color-addeventlistener.html" target=_blank>random-color-addeventlistener.html</A>, and open it in your browser. It's just a copy of the simple random color example we've played with already. Now try changing <CODE>click</CODE> to the following different values in turn, and observing the results in the example: </P>
<UL>
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event"><CODE>focus</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event"><CODE>blur</CODE></A> &#8212; The color changes when the button is focused and unfocused; try pressing the tab to focus on the button and press the tab again to focus away from the button. These are often used to display information about filling in form fields when they are focused, or to display an error message if a form field is filled with an incorrect value. 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event"><CODE>dblclick</CODE></A> &#8212; The color changes only when the button is double-clicked. 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event"><CODE>mouseover</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event"><CODE>mouseout</CODE></A> &#8212; The color changes when the mouse pointer hovers over the button, or when the pointer moves off the button, respectively.</LI></UL>
<P>Some events, such as <CODE>click</CODE>, are available on nearly any element. Others are more specific and only useful in certain situations: for example, the <A href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event"><CODE>play</CODE></A> event is only available on some elements, such as <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"><CODE>&lt;video&gt;</CODE></A>.</P></DIV></SECTION><SECTION aria-labelledby=removing_listeners>
<H3 id=removing_listeners><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#removing_listeners">Removing listeners</A></H3>
<DIV class=section-content>
<P>If you've added an event handler using <CODE>addEventListener()</CODE>, you can remove it again using the <A href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"><CODE>removeEventListener()</CODE></A> method. For example, this would remove the <CODE>changeBackground()</CODE> event handler:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="PuHSdwGaHyRxkse/Q/Ucsgs+0Rtj0GIO2EVKA+dLhO8="><CODE>btn<Span class="token punctuation">.</Span><Span class="token function">removeEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> changeBackground<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Event handlers can also be removed by passing an <A href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"><CODE>AbortSignal</CODE></A> to <A title=addEventListener() href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><CODE>addEventListener()</CODE></A> and then later calling <A title=abort() href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort"><CODE>abort()</CODE></A> on the controller owning the <CODE>AbortSignal</CODE>. For example, to add an event handler that we can remove with an <CODE>AbortSignal</CODE>: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="8HDne5j2tfgYUuPJehX6VP9RKA48kDqa9f1BwuAlMoE="><CODE><Span class="token keyword">const</Span> controller <Span class="token operator">=</Span> <Span class="token keyword">new</Span> <Span class="token class-name">AbortController</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span>
  <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
    <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
    document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span><Span class="token punctuation">,</Span>
  <Span class="token punctuation">{</Span> <Span class="token literal-property property">signal</Span><Span class="token operator">:</Span> controller<Span class="token punctuation">.</Span>signal <Span class="token punctuation">}</Span> <Span class="token comment">// pass an AbortSignal to this handler</Span>
<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Then the event handler created by the code above can be removed like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="EiLH246uvjLm7yIWQFrqfBi1W/HQ4Ee3Q6Mqe1Jxv+U="><CODE>controller<Span class="token punctuation">.</Span><Span class="token function">abort</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// removes any/all event handlers associated with this controller</Span>
</CODE></PRE></DIV>
<P>For simple, small programs, cleaning up old, unused event handlers isn't necessary, but for larger, more complex programs, it can improve efficiency. Also, the ability to remove event handlers allows you to have the same button performing different actions in different circumstances: all you have to do is add or remove handlers. </P></DIV></SECTION><SECTION aria-labelledby=adding_multiple_listeners_for_a_single_event>
<H3 id=adding_multiple_listeners_for_a_single_event><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#adding_multiple_listeners_for_a_single_event">Adding multiple listeners for a single event</A></H3>
<DIV class=section-content>
<P>By making more than one call to <A title=addEventListener() href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><CODE>addEventListener()</CODE></A>, providing different handlers, you can have multiple handlers for a single event:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="kXmx3U3MCALt9Riu21rs5GMRc3U33egPbhw3MP8EDq4="><CODE>myElement<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> functionA<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
myElement<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> functionB<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Both functions would now run when the element is clicked.</P></DIV></SECTION><SECTION aria-labelledby=learn_more>
<H3 id=learn_more><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#learn_more">Learn more</A></H3>
<DIV class=section-content>
<P>There are other powerful features and options available with <CODE>addEventListener()</CODE>.</P>
<P>These are a little out of scope for this article, but if you want to read them, visit the <A href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><CODE>addEventListener()</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"><CODE>removeEventListener()</CODE></A> reference pages.</P></DIV></SECTION><SECTION aria-labelledby=other_event_listener_mechanisms>
<H2 id=other_event_listener_mechanisms><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#other_event_listener_mechanisms">Other event listener mechanisms</A></H2>
<DIV class=section-content>
<P>We recommend that you use <CODE>addEventListener()</CODE> to register event handlers. It's the most powerful method and scales best with more complex programs. However, there are two other ways of registering event handlers that you might see: <EM>event handler properties</EM> and <EM>inline event handlers</EM>.</P></DIV></SECTION><SECTION aria-labelledby=event_handler_properties>
<H3 id=event_handler_properties><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_handler_properties">Event handler properties</A></H3>
<DIV class=section-content>
<P>Objects (such as buttons) that can fire events also usually have properties whose name is <CODE>on</CODE> followed by the name of the event. For example, elements have a property <CODE>onclick</CODE>. This is called an <EM>event handler property</EM>. To listen for the event, you can assign the handler function to the property. </P>
<P>For example, we could rewrite the random-color example like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="31MkCwBciyPZnAWGOVJv8l3LksnaqB8zAMrqfMYD1co="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> <Span class="token punctuation">(</Span>number <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span><Span class="token function-variable function">onclick</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>You can also set the handler property to a named function:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="DUyAcV76a7y7QzosJEFgjFAtqF+4XxIXrH44UrMu6KU="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> <Span class="token punctuation">(</Span>number <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">bgChange</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span>onclick <Span class="token operator">=</Span> bgChange<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>With event handler properties, you can't add more than one handler for a single event. For example, you can call <CODE>addEventListener('click', handler)</CODE> on an element multiple times, with different functions specified in the second argument:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="LI3A+zd0Bj4suPEVqL/QDhgVbJOIdw1VWnD8Pxzn04o="><CODE>element<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> function1<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
element<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> function2<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>This is impossible with event handler properties because any subsequent attempts to set the property will overwrite earlier ones:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="Zl9DVjiW8q9CNxMD5FyjMJ/g7SmRpeY/y05heCgbE30="><CODE>element<Span class="token punctuation">.</Span>onclick <Span class="token operator">=</Span> function1<Span class="token punctuation">;</Span>
element<Span class="token punctuation">.</Span>onclick <Span class="token operator">=</Span> function2<Span class="token punctuation">;</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=inline_event_handlers_&#8212;_dont_use_these>
<H3 id=inline_event_handlers_&#8212;_dont_use_these><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#inline_event_handlers_&#8212;_dont_use_these">Inline event handlers &#8212; don't use these</A></H3>
<DIV class=section-content>
<P>You might also see a pattern like this in your code:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="8c9koH53qVr4teT66N4DRVoDXx+z6ZJ+R4UawHGXr+4="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span> <Span class="token special-attr"><Span class="token attr-name">onclick</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value javascript language-javascript"><Span class="token function">bgChange</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>Press me<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="BcMlcf5YjfSOfmYuebqOREgEM0rcWq+zpBmC/MVN7l8="><CODE><Span class="token keyword">function</Span> <Span class="token function">bgChange</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>The earliest method of registering event handlers found on the Web involved <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes"><EM>event handler HTML attributes</EM></A> (or <EM>inline event handlers</EM>) like the one shown above &#8212; the attribute value is literally the JavaScript code you want to run when the event occurs. The above example invokes a function defined inside a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"><CODE>&lt;script&gt;</CODE></A> element on the same page, but you could also insert JavaScript directly inside the attribute, for example: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="H/iBZcy2SfK0F2leLmoQohaAQulX6ACJJ+Az51tuvaM="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span> <Span class="token special-attr"><Span class="token attr-name">onclick</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value javascript language-javascript"><Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token string">'Hello, this is my old-fashioned event handler!'</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press me
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>You can find HTML attribute equivalents for many of the event handler properties; however, you shouldn't use these &#8212; they are considered bad practice. It might seem easy to use an event handler attribute if you are doing something really quick, but they quickly become unmanageable and inefficient. </P>
<P>For a start, it is not a good idea to mix up your HTML and your JavaScript, as it becomes hard to read. Keeping your JavaScript separate is a good practice, and if it is in a separate file you can apply it to multiple HTML documents.</P>
<P>Even in a single file, inline event handlers are not a good idea. One button is OK, but what if you had 100 buttons? You'd have to add 100 attributes to the file; it would quickly turn into a maintenance nightmare. With JavaScript, you could easily add an event handler function to all the buttons on the page no matter how many there were, using something like this: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="qQEAWRpJEqEE+leZUCklfAppgBVinTjWE2WBMoJ0Se0="><CODE><Span class="token keyword">const</Span> buttons <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelectorAll</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">const</Span> button <Span class="token keyword">of</Span> buttons<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  button<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> bgChange<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Finally, many common server configurations will disallow inline JavaScript, as a security measure.</P>
<P><STRONG>You should never use the HTML event handler attributes</STRONG> &#8212; those are outdated, and using them is bad practice.</P></DIV></SECTION><SECTION aria-labelledby=event_objects>
<H2 id=event_objects><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_objects">Event objects</A></H2>
<DIV class=section-content>
<P>Sometimes, inside an event handler function, you'll see a parameter specified with a name such as <CODE>event</CODE>, <CODE>evt</CODE>, or <CODE>e</CODE>. This is called the <STRONG>event object</STRONG>, and it is automatically passed to event handlers to provide extra features and information. For example, let's rewrite our random color example again slightly: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="r62BFvNclR4sr49X8Bl7nJ6vR27zX/0fdGeS/KGpvDI="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> <Span class="token punctuation">(</Span>number <Span class="token operator">+</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">bgChange</Span><Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  e<Span class="token punctuation">.</Span>target<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> rndCol<Span class="token punctuation">;</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>e<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> bgChange<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> You can find the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/events/random-color-eventobject.html" target=_blank>full source code</A> for this example on GitHub (also <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/events/random-color-eventobject.html" target=_blank>see it running live</A>).</P></DIV>
<P>Here you can see we are including an event object, <STRONG>e</STRONG>, in the function, and in the function setting a background color style on <CODE>e.target</CODE> &#8212; which is the button itself. The <CODE>target</CODE> property of the event object is always a reference to the element the event occurred upon. So, in this example, we are setting a random background color on the button, not the page. </P>
<DIV id=sect5 class="notecard note">
<P><STRONG>Note:</STRONG> You can use any name you like for the event object &#8212; you just need to choose a name that you can then use to reference it inside the event handler function. <CODE>e</CODE>/<CODE>evt</CODE>/<CODE>event</CODE> is most commonly used by developers because they are short and easy to remember. It's always good to be consistent &#8212; with yourself, and with others if possible. </P></DIV></DIV></SECTION><SECTION aria-labelledby=extra_properties_of_event_objects>
<H3 id=extra_properties_of_event_objects><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#extra_properties_of_event_objects">Extra properties of event objects</A></H3>
<DIV class=section-content>
<P>Most event objects have a standard set of properties and methods available on the event object; see the <A href="https://developer.mozilla.org/en-US/docs/Web/API/Event"><CODE>Event</CODE></A> object reference for a full list.</P>
<P>Some event objects add extra properties that are relevant to that particular type of event. For example, the <A title=keydown href="https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event"><CODE>keydown</CODE></A> event fires when the user presses a key. Its event object is a <A href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent"><CODE>KeyboardEvent</CODE></A>, which is a specialized <CODE>Event</CODE> object with a <CODE>key</CODE> property that tells you which key was pressed:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="45tCTlv/JyAshnfoV5BbvjLSUPoAHNzVbBzPmFB/U9w="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>textBox<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>text<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="Rn4Jem/oOMWvn2QmX/fKLQEcnTS0EIe05S9CTh7bluc="><CODE><Span class="token keyword">const</Span> textBox <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#textBox"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> output <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
textBox<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"keydown"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You pressed "</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>event<Span class="token punctuation">.</Span>key<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">".</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="SQrXTBOUqPCNvUXG6fqQSkoaGUucuZb4KmQFfyx2Vt0="><CODE><Span class="token selector">div</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0.5rem 0<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Try typing into the text box and see the output:</P>
<DIV id=sect6 class=code-example>
<DIV id=sect7 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=preventing_default_behavior>
<H2 id=preventing_default_behavior><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#preventing_default_behavior">Preventing default behavior</A></H2>
<DIV class=section-content>
<P>Sometimes, you'll come across a situation where you want to prevent an event from doing what it does by default. The most common example is that of a web form, for example, a custom registration form. When you fill in the details and click the submit button, the natural behavior is for the data to be submitted to a specified page on the server for processing, and the browser to be redirected to a "success message" page of some kind (or the same page, if another is not specified). </P>
<P>The trouble comes when the user has not submitted the data correctly &#8212; as a developer, you want to prevent the submission to the server and give an error message saying what's wrong and what needs to be done to put things right. Some browsers support automatic form data validation features, but since many don't, you are advised to not rely on those and implement your own validation checks. Let's look at a simple example. </P>
<P>First, a simple HTML form that requires you to enter your first and last name:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="HY52iF6ZpyzsUwyRegaHbN8+WwLHRx+t/lRVniRe3HM="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>form</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>fname<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>First name: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>fname<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>text<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>lname<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Last name: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>lname<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>text<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>submit<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>submit<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>form</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="XTX+VAq8NOFtZzcAR/DLgqHGXFETxOLVrvjugXvumhM="><CODE><Span class="token selector">div</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin-bottom</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Now some JavaScript &#8212; here we implement a very simple check inside a handler for the <A href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event"><CODE>submit</CODE></A> event (the submit event is fired on a form when it is submitted) that tests whether the text fields are empty. If they are, we call the <A href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"><CODE>preventDefault()</CODE></A> function on the event object &#8212; which stops the form submission &#8212; and then display an error message in the paragraph below our form to tell the user what's wrong: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="Zvk0s/+l6xMmpYMS5M2iUB9kovdRfj8YkxxKRTno3DQ="><CODE><Span class="token keyword">const</Span> form <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"form"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> fname <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"fname"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> lname <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"lname"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> para <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

form<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"submit"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>fname<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">""</Span> <Span class="token operator">||</Span> lname<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">""</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"You need to fill in both names!"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Obviously, this is pretty weak form validation &#8212; it wouldn't stop the user from validating the form with spaces or numbers entered into the fields, for example &#8212; but it is OK for example purposes. The output is as follows: </P>
<DIV id=sect8 class=code-example>
<DIV id=sect9 class=example-header></DIV></DIV>
<DIV id=sect10 class="notecard note">
<P><STRONG>Note:</STRONG> For the full source code, see <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/events/preventdefault-validation.html" target=_blank>preventdefault-validation.html</A> (also see it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/events/preventdefault-validation.html" target=_blank>running live</A> here).</P></DIV></DIV></SECTION><SECTION aria-labelledby=its_not_just_web_pages>
<H2 id=its_not_just_web_pages><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#its_not_just_web_pages">It's not just web pages</A></H2>
<DIV class=section-content>
<P>Events are not unique to JavaScript &#8212; most programming languages have some kind of event model, and the way the model works often differs from JavaScript's way. In fact, the event model in JavaScript for web pages differs from the event model for JavaScript as it is used in other environments. </P>
<P>For example, <A href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs">Node.js</A> is a very popular JavaScript runtime that enables developers to use JavaScript to build network and server-side applications. The <A class=external href="https://nodejs.org/api/events.html" target=_blank>Node.js event model</A> relies on listeners to listen for events and emitters to emit events periodically &#8212; it doesn't sound that different, but the code is quite different, making use of functions like <CODE>on()</CODE> to register an event listener, and <CODE>once()</CODE> to register an event listener that unregisters after it has run once. The <A class=external href="https://nodejs.org/api/http.html#event-connect" target=_blank>HTTP connect event docs</A> provide a good example. </P>
<P>You can also use JavaScript to build cross-browser add-ons &#8212; browser functionality enhancements &#8212; using a technology called <A href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">WebExtensions</A>. The event model is similar to the web events model, but a bit different &#8212; event listeners' properties are written in <A href="https://developer.mozilla.org/en-US/docs/Glossary/Camel_case">camel case</A> (such as <CODE>onMessage</CODE> rather than <CODE>onmessage</CODE>), and need to be combined with the <CODE>addListener</CODE> function. See the <A href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage#examples"><CODE>runtime.onMessage</CODE></A> page for an example. </P>
<P>You don't need to understand anything about other such environments at this stage in your learning; we just wanted to make it clear that events can differ in different programming environments.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>In this chapter we've learned what events are, how to listen for events, and how to respond to them.</P>
<P>You've seen by now that elements in a web page can be nested inside other elements. For example, in the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#preventing_default_behavior">Preventing default behavior</A> example, we have some text boxes, placed inside <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A> elements, which in turn are placed inside a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"><CODE>&lt;form&gt;</CODE></A> element. What happens when a click event listener is attached to the <CODE>&lt;form&gt;</CODE> element, and the user clicks inside one of the text boxes? This is called <EM>event bubbling</EM> and is the subject of the next chapter.</P>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/events (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/events/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FEvents&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fevents%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FEvents%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fevents%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1041">Topic #1,041: Looping code</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>Programming languages are very useful for rapidly completing repetitive tasks, from multiple basic calculations to just about any other situation where you've got a lot of similar items of work to complete. Here we'll look at the loop structures available in JavaScript that handle such needs.
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML, CSS, and <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</A>. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand how to use loops in JavaScript.</TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=why_are_loops_useful>
<H2 id=why_are_loops_useful><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#why_are_loops_useful">Why are loops useful?</A></H2>
<DIV class=section-content>
<P>Loops are all about doing the same thing over and over again. Often, the code will be slightly different each time round the loop, or the same code will run but with different variables.</P></DIV></SECTION><SECTION aria-labelledby=looping_code_example>
<H3 id=looping_code_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#looping_code_example">Looping code example</A></H3>
<DIV class=section-content>
<P>Suppose we wanted to draw 100 random circles on a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas"><CODE>&lt;canvas&gt;</CODE></A> element (press the <EM>Update</EM> button to run the example again and again to see different random sets):</P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="W12bnWDakR2JhnLomFkMadS4oKVi3TaIb+xUH+ewNnk="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Update<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span> <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>canvas</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>canvas</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="XtbOyvbFo7JU9c+MEsfYGmh/Pl+Aw4ccCKRhYUorJjY="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 100%<Span class="token punctuation">;</Span>
  <Span class="token property">height</Span><Span class="token punctuation">:</Span> inherit<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #ddd<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">canvas</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">display</Span><Span class="token punctuation">:</Span> block<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">button</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">position</Span><Span class="token punctuation">:</Span> absolute<Span class="token punctuation">;</Span>
  <Span class="token property">top</Span><Span class="token punctuation">:</Span> 5px<Span class="token punctuation">;</Span>
  <Span class="token property">left</Span><Span class="token punctuation">:</Span> 5px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV id=sect1 class=code-example>
<DIV id=sect2 class=example-header></DIV></DIV>
<P>Here's the JavaScript code that implements this example:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="b+DZC5u4WMY0VEAPQ/EilawuTckPIZhoqMok0eCgt8Y="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> canvas <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"canvas"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> ctx <Span class="token operator">=</Span> canvas<Span class="token punctuation">.</Span><Span class="token function">getContext</Span><Span class="token punctuation">(</Span><Span class="token string">"2d"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

document<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"DOMContentLoaded"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  canvas<Span class="token punctuation">.</Span>width <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span>documentElement<Span class="token punctuation">.</Span>clientWidth<Span class="token punctuation">;</Span>
  canvas<Span class="token punctuation">.</Span>height <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span>documentElement<Span class="token punctuation">.</Span>clientHeight<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> number<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">draw</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  ctx<Span class="token punctuation">.</Span><Span class="token function">clearRect</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> <Span class="token number">0</Span><Span class="token punctuation">,</Span> canvas<Span class="token punctuation">.</Span>width<Span class="token punctuation">,</Span> canvas<Span class="token punctuation">.</Span>height<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> <Span class="token number">100</Span><Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">beginPath</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span>fillStyle <Span class="token operator">=</Span> <Span class="token string">"rgb(255 0 0 / 50%)"</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span>
      <Span class="token function">random</Span><Span class="token punctuation">(</Span>canvas<Span class="token punctuation">.</Span>width<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
      <Span class="token function">random</Span><Span class="token punctuation">(</Span>canvas<Span class="token punctuation">.</Span>height<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
      <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">50</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
      <Span class="token number">0</Span><Span class="token punctuation">,</Span>
      <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">,</Span>
    <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    ctx<Span class="token punctuation">.</Span><Span class="token function">fill</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> draw<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=with_and_without_a_loop>
<H3 id=with_and_without_a_loop><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#with_and_without_a_loop">With and without a loop</A></H3>
<DIV class=section-content>
<P>You don't have to understand all the code for now, but let's look at the part of the code that actually draws the 100 circles:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="n1VEdqL/AzKODIz/6vd5ACC+1iOyhdWBHxd3ag7ln+0="><CODE><Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> <Span class="token number">100</Span><Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  ctx<Span class="token punctuation">.</Span><Span class="token function">beginPath</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  ctx<Span class="token punctuation">.</Span>fillStyle <Span class="token operator">=</Span> <Span class="token string">"rgb(255 0 0 / 50%)"</Span><Span class="token punctuation">;</Span>
  ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span>
    <Span class="token function">random</Span><Span class="token punctuation">(</Span>canvas<Span class="token punctuation">.</Span>width<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
    <Span class="token function">random</Span><Span class="token punctuation">(</Span>canvas<Span class="token punctuation">.</Span>height<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
    <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">50</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
    <Span class="token number">0</Span><Span class="token punctuation">,</Span>
    <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  ctx<Span class="token punctuation">.</Span><Span class="token function">fill</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<UL>
<LI><CODE>random(x)</CODE>, defined earlier in the code, returns a whole number between <CODE>0</CODE> and <CODE>x-1</CODE>.</LI></UL>
<P>You should get the basic idea &#8212; we are using a loop to run 100 iterations of this code, each one of which draws a circle in a random position on the page. The amount of code needed would be the same whether we were drawing 100 circles, 1000, or 10,000. Only one number has to change. </P>
<P>If we weren't using a loop here, we'd have to repeat the following code for every circle we wanted to draw:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="hQmX8mRDkaoYBM2LOsB4R9XKD3MByw1ajKdD3iiQ97s="><CODE>ctx<Span class="token punctuation">.</Span><Span class="token function">beginPath</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
ctx<Span class="token punctuation">.</Span>fillStyle <Span class="token operator">=</Span> <Span class="token string">"rgb(255 0 0 / 50%)"</Span><Span class="token punctuation">;</Span>
ctx<Span class="token punctuation">.</Span><Span class="token function">arc</Span><Span class="token punctuation">(</Span>
  <Span class="token function">random</Span><Span class="token punctuation">(</Span>canvas<Span class="token punctuation">.</Span>width<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
  <Span class="token function">random</Span><Span class="token punctuation">(</Span>canvas<Span class="token punctuation">.</Span>height<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
  <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">50</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
  <Span class="token number">0</Span><Span class="token punctuation">,</Span>
  <Span class="token number">2</Span> <Span class="token operator">*</Span> Math<Span class="token punctuation">.</Span><Span class="token constant">PI</Span><Span class="token punctuation">,</Span>
<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
ctx<Span class="token punctuation">.</Span><Span class="token function">fill</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>This would get very boring and difficult to maintain.</P></DIV></SECTION><SECTION aria-labelledby=looping_through_a_collection>
<H2 id=looping_through_a_collection><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#looping_through_a_collection">Looping through a collection</A></H2>
<DIV class=section-content>
<P>Most of the time when you use a loop, you will have a collection of items and want to do something with every item.</P>
<P>One type of collection is the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"><CODE>Array</CODE></A>, which we met in the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays">Arrays</A> chapter of this course. But there are other collections in JavaScript as well, including <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"><CODE>Set</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"><CODE>Map</CODE></A>. </P></DIV></SECTION><SECTION aria-labelledby=the_for...of_loop>
<H3 id=the_for...of_loop><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#the_for...of_loop">The for...of loop</A></H3>
<DIV class=section-content>
<P>The basic tool for looping through a collection is the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"><CODE>for...of</CODE></A> loop:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ZtF3fg8rDaokhjnm1e4cHJY0Ju3qapthSe8526RP3ZI="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Serval"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jaguar"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Tiger"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Caracal"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">const</Span> cat <Span class="token keyword">of</Span> cats<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>cat<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>In this example, <CODE>for (const cat of cats)</CODE> says:</P>
<OL>
<LI>Given the collection <CODE>cats</CODE>, get the first item in the collection. 
<LI>Assign it to the variable <CODE>cat</CODE> and then run the code between the curly braces <CODE>{}</CODE>. 
<LI>Get the next item, and repeat (2) until you've reached the end of the collection.</LI></OL></DIV></SECTION><SECTION aria-labelledby=map_and_filter>
<H3 id=map_and_filter><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#map_and_filter">map() and filter()</A></H3>
<DIV class=section-content>
<P>JavaScript also has more specialized loops for collections, and we'll mention two of them here.</P>
<P>You can use <CODE>map()</CODE> to do something to each item in a collection and create a new collection containing the changed items:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="QHj2+rpc6AHVKelv3Xsod1rfVK+0LZsO0/G8yVupSxM="><CODE><Span class="token keyword">function</Span> <Span class="token function">toUpper</Span><Span class="token punctuation">(</Span><Span class="token parameter">string</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> string<Span class="token punctuation">.</Span><Span class="token function">toUpperCase</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Serval"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jaguar"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Tiger"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Caracal"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> upperCats <Span class="token operator">=</Span> cats<Span class="token punctuation">.</Span><Span class="token function">map</Span><Span class="token punctuation">(</Span>toUpper<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>upperCats<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// [ "LEOPARD", "SERVAL", "JAGUAR", "TIGER", "CARACAL", "LION" ]</Span>
</CODE></PRE></DIV>
<P>Here we pass a function into <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><CODE>cats.map()</CODE></A>, and <CODE>map()</CODE> calls the function once for each item in the array, passing in the item. It then adds the return value from each function call to a new array, and finally returns the new array. In this case the function we provide converts the item to uppercase, so the resulting array contains all our cats in uppercase:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="nId334B3oCkdFAQNXb10cOcQZRwwfx7b+GBD3xHwbcU="><CODE><Span class="token punctuation">[</Span> <Span class="token string">"LEOPARD"</Span><Span class="token punctuation">,</Span> <Span class="token string">"SERVAL"</Span><Span class="token punctuation">,</Span> <Span class="token string">"JAGUAR"</Span><Span class="token punctuation">,</Span> <Span class="token string">"TIGER"</Span><Span class="token punctuation">,</Span> <Span class="token string">"CARACAL"</Span><Span class="token punctuation">,</Span> <Span class="token string">"LION"</Span> <Span class="token punctuation">]</Span>
</CODE></PRE></DIV>
<P>You can use <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><CODE>filter()</CODE></A> to test each item in a collection, and create a new collection containing only items that match:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="U26A9MpGkGX9r1hPh/mFdm50E4PBGlGq2v5zHvo+pCs="><CODE><Span class="token keyword">function</Span> <Span class="token function">lCat</Span><Span class="token punctuation">(</Span><Span class="token parameter">cat</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> cat<Span class="token punctuation">.</Span><Span class="token function">startsWith</Span><Span class="token punctuation">(</Span><Span class="token string">"L"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Serval"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jaguar"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Tiger"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Caracal"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> filtered <Span class="token operator">=</Span> cats<Span class="token punctuation">.</Span><Span class="token function">filter</Span><Span class="token punctuation">(</Span>lCat<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>filtered<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// [ "Leopard", "Lion" ]</Span>
</CODE></PRE></DIV>
<P>This looks a lot like <CODE>map()</CODE>, except the function we pass in returns a <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables#booleans">boolean</A>: if it returns <CODE>true</CODE>, then the item is included in the new array. Our function tests that the item starts with the letter "L", so the result is an array containing only cats whose names start with "L": </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="HSGY8K/pXuOKWsjYNTjMIEsFnSix4vLBm1HGQLBnp5k="><CODE><Span class="token punctuation">[</Span> <Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span> <Span class="token punctuation">]</Span>
</CODE></PRE></DIV>
<P>Note that <CODE>map()</CODE> and <CODE>filter()</CODE> are both often used with <EM>function expressions</EM>, which we will learn about in the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions">Functions</A> module. Using function expressions we could rewrite the example above to be much more compact: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="mgv+e+BSWcOoB747hVrLSX9AIVGb50iO6wv4aLmAHFg="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Serval"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jaguar"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Tiger"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Caracal"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> filtered <Span class="token operator">=</Span> cats<Span class="token punctuation">.</Span><Span class="token function">filter</Span><Span class="token punctuation">(</Span><Span class="token punctuation">(</Span><Span class="token parameter">cat</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> cat<Span class="token punctuation">.</Span><Span class="token function">startsWith</Span><Span class="token punctuation">(</Span><Span class="token string">"L"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>filtered<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token comment">// [ "Leopard", "Lion" ]</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=the_standard_for_loop>
<H2 id=the_standard_for_loop><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#the_standard_for_loop">The standard for loop</A></H2>
<DIV class=section-content>
<P>In the "drawing circles" example above, you don't have a collection of items to loop through: you really just want to run the same code 100 times. In a case like that, you should use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"><CODE>for</CODE></A> loop. This has the following syntax: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="U34eyBQ3afJKuCB7kQlmNM8LTDDOGy2eT72d9wKhJzw="><CODE><Span class="token keyword">for</Span> <Span class="token punctuation">(</Span>initializer<Span class="token punctuation">;</Span> condition<Span class="token punctuation">;</Span> final<Span class="token operator">-</Span>expression<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Here we have:</P>
<OL>
<LI>The keyword <CODE>for</CODE>, followed by some parentheses. 
<LI>Inside the parentheses we have three items, separated by semicolons: 
<OL>
<LI>An <STRONG>initializer</STRONG> &#8212; this is usually a variable set to a number, which is incremented to count the number of times the loop has run. It is also sometimes referred to as a <STRONG>counter variable</STRONG>. 
<LI>A <STRONG>condition</STRONG> &#8212; this defines when the loop should stop looping. This is generally an expression featuring a comparison operator, a test to see if the exit condition has been met. 
<LI>A <STRONG>final-expression</STRONG> &#8212; this is always evaluated (or run) each time the loop has gone through a full iteration. It usually serves to increment (or in some cases decrement) the counter variable, to bring it closer to the point where the condition is no longer <CODE>true</CODE>. </LI></OL>
<LI>Some curly braces that contain a block of code &#8212; this code will be run each time the loop iterates.</LI></OL></DIV></SECTION><SECTION aria-labelledby=calculating_squares>
<H3 id=calculating_squares><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#calculating_squares">Calculating squares</A></H3>
<DIV class=section-content>
<P>Let's look at a real example so we can visualize what these do more clearly.</P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="nrTwlbG0n/AXGECBQ1zNbnrJUR+aSIWGhJVJA2OPUt4="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>calculate<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Calculate<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>clear<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Clear<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>pre</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>results<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>pre</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="YvtV1wXjlRIYYqmKkDYhAMQ/Us0KKnytzYP8zmL3aVc="><CODE><Span class="token keyword">const</Span> results <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#results"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">calculate</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">1</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> <Span class="token number">10</Span><Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token keyword">const</Span> newResult <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>i<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> x </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>i<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> = </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>i <Span class="token operator">*</Span> i<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
    results<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>newResult<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">\n</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  results<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token string">"\nFinished!\n\n"</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> calculateBtn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#calculate"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> clearBtn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#clear"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

calculateBtn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> calculate<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
clearBtn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">(</Span>results<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">""</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>This gives us the following output:</P>
<DIV id=sect3 class=code-example>
<DIV id=sect4 class=example-header></DIV></DIV>
<P>This code calculates squares for the numbers from 1 to 9, and writes out the result. The core of the code is the <CODE>for</CODE> loop that performs the calculation.</P>
<P>Let's break down the <CODE>for (let i = 1; i &lt; 10; i++)</CODE> line into its three pieces:</P>
<OL>
<LI><CODE>let i = 1</CODE>: the counter variable, <CODE>i</CODE>, starts at <CODE>1</CODE>. Note that we have to use <CODE>let</CODE> for the counter, because we're reassigning it each time we go round the loop. 
<LI><CODE>i &lt; 10</CODE>: keep going round the loop for as long as <CODE>i</CODE> is smaller than <CODE>10</CODE>. 
<LI><CODE>i++</CODE>: add one to <CODE>i</CODE> each time round the loop.</LI></OL>
<P>Inside the loop, we calculate the square of the current value of <CODE>i</CODE>, that is: <CODE>i * i</CODE>. We create a string expressing the calculation we made and the result, and add this string to the output text. We also add <CODE>\n</CODE>, so the next string we add will begin on a new line. So:</P>
<OL>
<LI>During the first run, <CODE>i = 1</CODE>, so we will add <CODE>1 x 1 = 1</CODE>. 
<LI>During the second run, <CODE>i = 2</CODE>, so we will add <CODE>2 x 2 = 4</CODE>. 
<LI>And so on&#8230; 
<LI>When <CODE>i</CODE> becomes equal to <CODE>10</CODE> we will stop running the loop and move straight to the next bit of code below the loop, printing out the <CODE>Finished!</CODE> message on a new line.</LI></OL></DIV></SECTION><SECTION aria-labelledby=looping_through_collections_with_a_for_loop>
<H3 id=looping_through_collections_with_a_for_loop><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#looping_through_collections_with_a_for_loop">Looping through collections with a for loop</A></H3>
<DIV class=section-content>
<P>You can use a <CODE>for</CODE> loop to iterate through a collection, instead of a <CODE>for...of</CODE> loop.</P>
<P>Let's look again at our <CODE>for...of</CODE> example above:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ZtF3fg8rDaokhjnm1e4cHJY0Ju3qapthSe8526RP3ZI="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Serval"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jaguar"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Tiger"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Caracal"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">const</Span> cat <Span class="token keyword">of</Span> cats<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>cat<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>We could rewrite that code like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="MfjrraJxifX+eEP84IXYQTFZAcOF4zE5Far+Bxe/k+w="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Leopard"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Serval"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jaguar"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Tiger"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Caracal"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Lion"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> cats<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>In this loop we're starting <CODE>i</CODE> at <CODE>0</CODE>, and stopping when <CODE>i</CODE> reaches the length of the array. Then inside the loop, we're using <CODE>i</CODE> to access each item in the array in turn. </P>
<P>This works just fine, and in early versions of JavaScript, <CODE>for...of</CODE> didn't exist, so this was the standard way to iterate through an array. However, it offers more chances to introduce bugs into your code. For example: </P>
<UL>
<LI>you might start <CODE>i</CODE> at <CODE>1</CODE>, forgetting that the first array index is zero, not 1. 
<LI>you might stop at <CODE>i &lt;= cats.length</CODE>, forgetting that the last array index is at <CODE>length - 1</CODE>.</LI></UL>
<P>For reasons like this, it's usually best to use <CODE>for...of</CODE> if you can.</P>
<P>Sometimes you still need to use a <CODE>for</CODE> loop to iterate through an array. For example, in the code below we want to log a message listing our cats: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="jl3LnxjZVuqzyngkXEEFAVxYdzAhhfGeIhmxf13/4EM="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Pete"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Biggles"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jasmine"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> myFavoriteCats <Span class="token operator">=</Span> <Span class="token string">"My cats are called "</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">const</Span> cat <Span class="token keyword">of</Span> cats<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cat<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">, </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>myFavoriteCats<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "My cats are called Pete, Biggles, Jasmine, "</Span>
</CODE></PRE></DIV>
<P>The final output sentence isn't very well-formed:</P><PRE class="brush: plain notranslate">My cats are called Pete, Biggles, Jasmine,
</PRE>
<P>We'd prefer it to handle the last cat differently, like this:</P><PRE class="brush: plain notranslate">My cats are called Pete, Biggles, and Jasmine.
</PRE>
<P>But to do this we need to know when we are on the final loop iteration, and to do that we can use a <CODE>for</CODE> loop and examine the value of <CODE>i</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="1YEe95X0yntS1PmFlECHBkolsvg1cdhlNTAYQp9nthY="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Pete"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Biggles"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jasmine"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> myFavoriteCats <Span class="token operator">=</Span> <Span class="token string">"My cats are called "</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;</Span> cats<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>i <Span class="token operator">===</Span> cats<Span class="token punctuation">.</Span>length <Span class="token operator">-</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token comment">// We are at the end of the array</Span>
    myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">and </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">, </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>myFavoriteCats<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "My cats are called Pete, Biggles, and Jasmine."</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=exiting_loops_with_break>
<H2 id=exiting_loops_with_break><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#exiting_loops_with_break">Exiting loops with break</A></H2>
<DIV class=section-content>
<P>If you want to exit a loop before all the iterations have been completed, you can use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break">break</A> statement. We already met this in the previous article when we looked at <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#switch_statements">switch statements</A> &#8212; when a case is met in a switch statement that matches the input expression, the <CODE>break</CODE> statement immediately exits the switch statement and moves on to the code after it. </P>
<P>It's the same with loops &#8212; a <CODE>break</CODE> statement will immediately exit the loop and make the browser move on to any code that follows it.</P>
<P>Say we wanted to search through an array of contacts and telephone numbers and return just the number we wanted to find? First, some simple HTML &#8212; a text <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"><CODE>&lt;input&gt;</CODE></A> allowing us to enter a name to search for, a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A> element to submit a search, and a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p"><CODE>&lt;p&gt;</CODE></A> element to display the results in: </P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="Th9fbrS2q75uY3k4MNgS5l9PYVszhScUwzPCk+jmVtI="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>search<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Search by contact name: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>search<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>text<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Search<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>Now on to the JavaScript:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ed/LbxFynJSD55XBQEfghbbsJksIBxC8UtX8va5bwy0="><CODE><Span class="token keyword">const</Span> contacts <Span class="token operator">=</Span> <Span class="token punctuation">[</Span>
  <Span class="token string">"Chris:2232322"</Span><Span class="token punctuation">,</Span>
  <Span class="token string">"Sarah:3453456"</Span><Span class="token punctuation">,</Span>
  <Span class="token string">"Bill:7654322"</Span><Span class="token punctuation">,</Span>
  <Span class="token string">"Mary:9998769"</Span><Span class="token punctuation">,</Span>
  <Span class="token string">"Dianne:9384975"</Span><Span class="token punctuation">,</Span>
<Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> para <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> input <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> searchName <Span class="token operator">=</Span> input<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">toLowerCase</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  input<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">""</Span><Span class="token punctuation">;</Span>
  input<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">""</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">const</Span> contact <Span class="token keyword">of</Span> contacts<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token keyword">const</Span> splitContact <Span class="token operator">=</Span> contact<Span class="token punctuation">.</Span><Span class="token function">split</Span><Span class="token punctuation">(</Span><Span class="token string">":"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>splitContact<Span class="token punctuation">[</Span><Span class="token number">0</Span><Span class="token punctuation">]</Span><Span class="token punctuation">.</Span><Span class="token function">toLowerCase</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">===</Span> searchName<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
      para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>splitContact<Span class="token punctuation">[</Span><Span class="token number">0</Span><Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">'s number is </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>splitContact<Span class="token punctuation">[</Span><Span class="token number">1</Span><Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
      <Span class="token keyword">break</Span><Span class="token punctuation">;</Span>
    <Span class="token punctuation">}</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>para<Span class="token punctuation">.</Span>textContent <Span class="token operator">===</Span> <Span class="token string">""</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"Contact not found."</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect5 class=code-example>
<DIV id=sect6 class=example-header></DIV></DIV>
<OL>
<LI>First of all, we have some variable definitions &#8212; we have an array of contact information, with each item being a string containing a name and phone number separated by a colon. 
<LI>Next, we attach an event listener to the button (<CODE>btn</CODE>) so that when it is pressed some code is run to perform the search and return the results. 
<LI>We store the value entered into the text input in a variable called <CODE>searchName</CODE>, before then emptying the text input and focusing it again, ready for the next search. Note that we also run the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"><CODE>toLowerCase()</CODE></A> method on the string, so that searches will be case-insensitive. 
<LI>Now on to the interesting part, the <CODE>for...of</CODE> loop: 
<OL>
<LI>Inside the loop, we first split the current contact at the colon character, and store the resulting two values in an array called <CODE>splitContact</CODE>. 
<LI>We then use a conditional statement to test whether <CODE>splitContact[0]</CODE> (the contact's name, again lower-cased with <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"><CODE>toLowerCase()</CODE></A>) is equal to the inputted <CODE>searchName</CODE>. If it is, we enter a string into the paragraph to report what the contact's number is, and use <CODE>break</CODE> to end the loop. </LI></OL>
<LI>After the loop, we check whether we set a contact, and if not we set the paragraph text to "Contact not found.".</LI></OL>
<DIV id=sect7 class="notecard note">
<P><STRONG>Note:</STRONG> You can view the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/loops/contact-search.html" target=_blank>full source code on GitHub</A> too (also <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/loops/contact-search.html" target=_blank>see it running live</A>).</P></DIV></DIV></SECTION><SECTION aria-labelledby=skipping_iterations_with_continue>
<H2 id=skipping_iterations_with_continue><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#skipping_iterations_with_continue">Skipping iterations with continue</A></H2>
<DIV class=section-content>
<P>The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue">continue</A> statement works similarly to <CODE>break</CODE>, but instead of breaking out of the loop entirely, it skips to the next iteration of the loop. Let's look at another example that takes a number as an input, and returns only the numbers that are squares of integers (whole numbers). </P>
<P>The HTML is basically the same as the last example &#8212; a simple numeric input, and a paragraph for output.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="JXHZfY9IwGYoVRAwsp9IIbre9MIDR1Qu36LqsiLOr4Q="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>label</Span> <Span class="token attr-name">for</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>number<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Enter number: <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>label</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>number<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>number<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Generate integer squares<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>Output:<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>The JavaScript is mostly the same too, although the loop itself is a bit different:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="OS3lBgwEs2WENz8rnzDeS2Srk7dzg+P53ZtoUH3NjGc="><CODE><Span class="token keyword">const</Span> para <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> input <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  para<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"Output: "</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> num <Span class="token operator">=</Span> input<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  input<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">""</Span><Span class="token punctuation">;</Span>
  input<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">1</Span><Span class="token punctuation">;</Span> i <Span class="token operator">&lt;=</Span> num<Span class="token punctuation">;</Span> i<Span class="token operator">++</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    <Span class="token keyword">let</Span> sqRoot <Span class="token operator">=</Span> Math<Span class="token punctuation">.</Span><Span class="token function">sqrt</Span><Span class="token punctuation">(</Span>i<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>sqRoot<Span class="token punctuation">)</Span> <Span class="token operator">!==</Span> sqRoot<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
      <Span class="token keyword">continue</Span><Span class="token punctuation">;</Span>
    <Span class="token punctuation">}</Span>
    para<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>i<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Here's the output:</P>
<DIV id=sect8 class=code-example>
<DIV id=sect9 class=example-header></DIV></DIV>
<OL>
<LI>In this case, the input should be a number (<CODE>num</CODE>). The <CODE>for</CODE> loop is given a counter starting at 1 (as we are not interested in 0 in this case), an exit condition that says the loop will stop when the counter becomes bigger than the input <CODE>num</CODE>, and an iterator that adds 1 to the counter each time. 
<LI>Inside the loop, we find the square root of each number using <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt">Math.sqrt(i)</A>, then check whether the square root is an integer by testing whether it is the same as itself when it has been rounded down to the nearest integer (this is what <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">Math.floor()</A> does to the number it is passed). 
<LI>If the square root and the rounded down square root do not equal one another (<CODE>!==</CODE>), it means that the square root is not an integer, so we are not interested in it. In such a case, we use the <CODE>continue</CODE> statement to skip on to the next loop iteration without recording the number anywhere. 
<LI>If the square root is an integer, we skip past the <CODE>if</CODE> block entirely, so the <CODE>continue</CODE> statement is not executed; instead, we concatenate the current <CODE>i</CODE> value plus a space at the end of the paragraph content.</LI></OL>
<DIV id=sect10 class="notecard note">
<P><STRONG>Note:</STRONG> You can view the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/loops/integer-squares.html" target=_blank>full source code on GitHub</A> too (also <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/loops/integer-squares.html" target=_blank>see it running live</A>).</P></DIV></DIV></SECTION><SECTION aria-labelledby=while_and_do...while>
<H2 id=while_and_do...while><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#while_and_do...while">while and do...while</A></H2>
<DIV class=section-content>
<P><CODE>for</CODE> is not the only type of loop available in JavaScript. There are actually many others and, while you don't need to understand all of these now, it is worth having a look at the structure of a couple of others so that you can recognize the same features at work in a slightly different way.</P>
<P>First, let's have a look at the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while">while</A> loop. This loop's syntax looks like so:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="fcrS6U7zhkeTRBtcUo52TYk9MODI70/FwEPy8+AVL3Q="><CODE>initializer
<Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>

  final<Span class="token operator">-</Span>expression
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>This works in a very similar way to the <CODE>for</CODE> loop, except that the initializer variable is set before the loop, and the final-expression is included inside the loop after the code to run, rather than these two items being included inside the parentheses. The condition is included inside the parentheses, which are preceded by the <CODE>while</CODE> keyword rather than <CODE>for</CODE>. </P>
<P>The same three items are still present, and they are still defined in the same order as they are in the for loop. This is because you must have an initializer defined before you can check whether or not the condition is true. The final-expression is then run after the code inside the loop has run (an iteration has been completed), which will only happen if the condition is still true. </P>
<P>Let's have a look again at our cats list example, but rewritten to use a while loop:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="D5Js36asdcmTqzM31ZQfC54DnCdvx03bs40jvcrbA4k="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Pete"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Biggles"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jasmine"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> myFavoriteCats <Span class="token operator">=</Span> <Span class="token string">"My cats are called "</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>i <Span class="token operator">&lt;</Span> cats<Span class="token punctuation">.</Span>length<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>i <Span class="token operator">===</Span> cats<Span class="token punctuation">.</Span>length <Span class="token operator">-</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">and </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">, </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  i<Span class="token operator">++</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>myFavoriteCats<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "My cats are called Pete, Biggles, and Jasmine."</Span>
</CODE></PRE></DIV>
<DIV id=sect11 class="notecard note">
<P><STRONG>Note:</STRONG> This still works just the same as expected &#8212; have a look at it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/loops/while.html" target=_blank>running live on GitHub</A> (also view the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/loops/while.html" target=_blank>full source code</A>).</P></DIV>
<P>The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while">do...while</A> loop is very similar, but provides a variation on the while structure:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="T+42A7Efwwx8TW5w1UZjBKp6jjaJbw8MLl7djQCQRHE="><CODE>initializer
<Span class="token keyword">do</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>

  final<Span class="token operator">-</Span>expression
<Span class="token punctuation">}</Span> <Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span>
</CODE></PRE></DIV>
<P>In this case, the initializer again comes first, before the loop starts. The keyword directly precedes the curly braces containing the code to run and the final expression.</P>
<P>The main difference between a <CODE>do...while</CODE> loop and a <CODE>while</CODE> loop is that <EM>the code inside a <CODE>do...while</CODE> loop is always executed at least once</EM>. That's because the condition comes after the code inside the loop. So we always run that code, then check to see if we need to run it again. In <CODE>while</CODE> and <CODE>for</CODE> loops, the check comes first, so the code might never be executed.</P>
<P>Let's rewrite our cat listing example again to use a <CODE>do...while</CODE> loop:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="8FdJXdt7vz7/zp7NryX1EJJPgtCSv98HlBkXgJVyfDg="><CODE><Span class="token keyword">const</Span> cats <Span class="token operator">=</Span> <Span class="token punctuation">[</Span><Span class="token string">"Pete"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Biggles"</Span><Span class="token punctuation">,</Span> <Span class="token string">"Jasmine"</Span><Span class="token punctuation">]</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> myFavoriteCats <Span class="token operator">=</Span> <Span class="token string">"My cats are called "</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> i <Span class="token operator">=</Span> <Span class="token number">0</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">do</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>i <Span class="token operator">===</Span> cats<Span class="token punctuation">.</Span>length <Span class="token operator">-</Span> <Span class="token number">1</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">and </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">.</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    myFavoriteCats <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>cats<Span class="token punctuation">[</Span>i<Span class="token punctuation">]</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">, </Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  i<Span class="token operator">++</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>i <Span class="token operator">&lt;</Span> cats<Span class="token punctuation">.</Span>length<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

console<Span class="token punctuation">.</Span><Span class="token function">log</Span><Span class="token punctuation">(</Span>myFavoriteCats<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span> <Span class="token comment">// "My cats are called Pete, Biggles, and Jasmine."</Span>
</CODE></PRE></DIV>
<DIV id=sect12 class="notecard note">
<P><STRONG>Note:</STRONG> Again, this works just the same as expected &#8212; have a look at it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/loops/do-while.html" target=_blank>running live on GitHub</A> (also view the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/loops/do-while.html" target=_blank>full source code</A>).</P></DIV>
<DIV id=sect13 class="notecard warning">
<P><STRONG>Warning:</STRONG> With while and do...while &#8212; as with all loops &#8212; you must make sure that the initializer is incremented or, depending on the case, decremented, so the condition eventually becomes false. If not, the loop will go on forever, and either the browser will force it to stop, or it will crash. This is called an <STRONG>infinite loop</STRONG>. </P></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_launch_countdown>
<H2 id=active_learning_launch_countdown><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#active_learning_launch_countdown">Active learning: Launch countdown</A></H2>
<DIV class=section-content>
<P>In this exercise, we want you to print out a simple launch countdown to the output box, from 10 down to Blastoff. Specifically, we want you to: </P>
<UL>
<LI>Loop from 10 down to 0. We've provided you with an initializer &#8212; <CODE>let i = 10;</CODE>. 
<LI>For each iteration, create a new paragraph and append it to the output <CODE>&lt;div&gt;</CODE>, which we've selected using <CODE>const output = document.querySelector('.output');</CODE>. In comments, we've provided you with three code lines that need to be used somewhere inside the loop: 
<UL>
<LI><CODE>const para = document.createElement('p');</CODE> &#8212; creates a new paragraph. 
<LI><CODE>output.appendChild(para);</CODE> &#8212; appends the paragraph to the output <CODE>&lt;div&gt;</CODE>. 
<LI><CODE>para.textContent =</CODE> &#8212; makes the text inside the paragraph equal to whatever you put on the right-hand side, after the equals sign.</LI></UL>
<LI>Different iteration numbers require different text to be put in the paragraph for that iteration (you'll need a conditional statement and multiple <CODE>para.textContent =</CODE> lines): 
<UL>
<LI>If the number is 10, print "Countdown 10" to the paragraph. 
<LI>If the number is 0, print "Blast off!" to the paragraph. 
<LI>For any other number, print just the number to the paragraph.</LI></UL>
<LI>Remember to include an iterator! However, in this example we are counting down after each iteration, not up, so you <STRONG>don't</STRONG> want <CODE>i++</CODE> &#8212; how do you iterate downwards?</LI></UL>
<DIV id=sect14 class="notecard note">
<P><STRONG>Note:</STRONG> If you start typing the loop (for example (while(i&gt;=0)), the browser might get stuck because you have not yet entered the end condition. So be careful with this. You can start writing your code in a comment to deal with this issue and remove the comment after you finish.</P></DIV>
<P>If you make a mistake, you can always reset the example with the "Reset" button. If you get really stuck, press "Show solution" to see a solution. </P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="nMycB/z/PeG+AMrKt/j5/4Y/J+itGlJBtLfqIP5nAzk="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 410px<Span class="token punctuation">;</Span><Span class="token property">overflow</Span><Span class="token punctuation">:</Span> auto<Span class="token punctuation">;</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 300px<Span class="token punctuation">;</Span><Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
let output = document.querySelector('.output');
output.textContent = "";

// let i = 10;

// const para = document.createElement('p');
// para.textContent = ;
// output.appendChild(para);
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>css</Span></DIV><PRE class="brush: css notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="mGifOuhecq+PfttKHIasm0Ucxr00CxQ6AgpeDG61rG0="><CODE><Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> code <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">eval</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> code<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> jsSolution <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">const output = document.querySelector('.output');
output.textContent = "";

let i = 10;

while (i &gt;= 0) {
  const para = document.createElement('p');
  if (i === 10) {
    para.textContent = \`Countdown \${i}\`;
  } else if (i === 0) {
    para.textContent = 'Blast off!';
  } else {
    para.textContent = i;
  }

  output.appendChild(para);

  i--;
}</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
window<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"load"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token comment">// Update the saved userCode every time the user updates the text area code</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeyup</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// We only want to save the state when the user code is being shown,</Span>
  <Span class="token comment">// not the solution, so that solution is not saved over the user code</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    solutionEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect15 class=code-example>
<DIV id=sect16 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_filling_in_a_guest_list>
<H2 id=active_learning_filling_in_a_guest_list><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#active_learning_filling_in_a_guest_list">Active learning: Filling in a guest list</A></H2>
<DIV class=section-content>
<P>In this exercise, we want you to take a list of names stored in an array and put them into a guest list. But it's not quite that easy &#8212; we don't want to let Phil and Lola in because they are greedy and rude, and always eat all the food! We have two lists, one for guests to admit, and one for guests to refuse.</P>
<P>Specifically, we want you to:</P>
<UL>
<LI>Write a loop that will iterate through the <CODE>people</CODE> array. 
<LI>During each loop iteration, check if the current array item is equal to "Phil" or "Lola" using a conditional statement: 
<UL>
<LI>If it is, concatenate the array item to the end of the <CODE>refused</CODE> paragraph's <CODE>textContent</CODE>, followed by a comma and a space. 
<LI>If it isn't, concatenate the array item to the end of the <CODE>admitted</CODE> paragraph's <CODE>textContent</CODE>, followed by a comma and a space.</LI></UL></LI></UL>
<P>We've already provided you with:</P>
<UL>
<LI><CODE>refused.textContent +=</CODE> &#8212; the beginnings of a line that will concatenate something at the end of <CODE>refused.textContent</CODE>. 
<LI><CODE>admitted.textContent +=</CODE> &#8212; the beginnings of a line that will concatenate something at the end of <CODE>admitted.textContent</CODE>.</LI></UL>
<P>Extra bonus question &#8212; after completing the above tasks successfully, you will be left with two lists of names, separated by commas, but they will be untidy &#8212; there will be a comma at the end of each one. Can you work out how to write lines that slice the last comma off in each case, and add a full stop to the end? Have a look at the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods">Useful string methods</A> article for help. </P>
<P>If you make a mistake, you can always reset the example with the "Reset" button. If you get really stuck, press "Show solution" to see a solution. </P>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="CFc8qOgIUFs8Vx5k7nOjdYC6DuftybrtPmDP9sItAAU="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Live output<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 100px<Span class="token punctuation">;</Span><Span class="token property">overflow</Span><Span class="token punctuation">:</Span> auto<Span class="token punctuation">;</Span></Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>admitted<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Admit:<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>refused<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>Refuse:<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>Editable code<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>h2</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>a11y-label<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>textarea</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>code<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-code<Span class="token punctuation">"</Span></Span> <Span class="token special-attr"><Span class="token attr-name">style</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span><Span class="token value css language-css"><Span class="token property">height</Span><Span class="token punctuation">:</Span> 400px<Span class="token punctuation">;</Span><Span class="token property">width</Span><Span class="token punctuation">:</Span> 95%</Span><Span class="token punctuation">"</Span></Span></Span><Span class="token punctuation">&gt;</Span></Span>
const people = ['Chris', 'Anne', 'Colin', 'Terri', 'Phil', 'Lola', 'Sam', 'Kay', 'Bruce'];

const admitted = document.querySelector('.admitted');
const refused = document.querySelector('.refused');
admitted.textContent = 'Admit: ';
refused.textContent = 'Refuse: ';

// loop starts here

// refused.textContent += ;
// admitted.textContent += ;

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>textarea</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>playable-buttons<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>reset<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Reset<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>input</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>solution<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>button<Span class="token punctuation">"</Span></Span> <Span class="token attr-name">value</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>Show solution<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><Span class="token selector">html</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-family</Span><Span class="token punctuation">:</Span> sans-serif<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">h2</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 16px<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.a11y-label</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 0<Span class="token punctuation">;</Span>
  <Span class="token property">text-align</Span><Span class="token punctuation">:</Span> right<Span class="token punctuation">;</Span>
  <Span class="token property">font-size</Span><Span class="token punctuation">:</Span> 0.7rem<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 98%<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">body</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 10px<Span class="token punctuation">;</Span>
  <Span class="token property">background</Span><Span class="token punctuation">:</Span> #f5f9fa<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="gCGMXLnVdsOouaxYsWIIJ028Xv6q1gw0acQREswlJUw="><CODE><Span class="token keyword">const</Span> textarea <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"code"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> reset <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"reset"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> solution <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">getElementById</Span><Span class="token punctuation">(</Span><Span class="token string">"solution"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> code <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
<Span class="token keyword">let</Span> userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token function">eval</Span><Span class="token punctuation">(</Span>textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

reset<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> code<Span class="token punctuation">;</Span>
  userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>
  solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

solution<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> solutionEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Hide solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> userEntry<Span class="token punctuation">;</Span>
    solution<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> jsSolution <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">
const people = ['Chris', 'Anne', 'Colin', 'Terri', 'Phil', 'Lola', 'Sam', 'Kay', 'Bruce'];

const admitted = document.querySelector('.admitted');
const refused = document.querySelector('.refused');

admitted.textContent = 'Admit: ';
refused.textContent = 'Refuse: ';

for (const person of people) {
  if (person === 'Phil' || person === 'Lola') {
    refused.textContent += \`\${person}, \`;
  } else {
    admitted.textContent += \`\${person}, \`;
  }
}

refused.textContent = refused.textContent.slice(0,refused.textContent.length-2) + '.';
admitted.textContent = admitted.textContent.slice(0,admitted.textContent.length-2) + '.';</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>

<Span class="token keyword">let</Span> solutionEntry <Span class="token operator">=</Span> jsSolution<Span class="token punctuation">;</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"input"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
window<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"load"</Span><Span class="token punctuation">,</Span> updateCode<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token comment">// stop tab key tabbing out of textarea and</Span>
<Span class="token comment">// make it write a tab at the caret position instead</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeydown</Span> <Span class="token operator">=</Span> <Span class="token keyword">function</Span> <Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Tab"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    e<Span class="token punctuation">.</Span><Span class="token function">preventDefault</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
    <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token string">"\t"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>e<Span class="token punctuation">.</Span>code <Span class="token operator">===</Span> <Span class="token string">"Escape"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    textarea<Span class="token punctuation">.</Span><Span class="token function">blur</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">function</Span> <Span class="token function">insertAtCaret</Span><Span class="token punctuation">(</Span><Span class="token parameter">text</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> scrollPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>scrollTop<Span class="token punctuation">;</Span>
  <Span class="token keyword">let</Span> caretPos <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>selectionStart<Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> front <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span><Span class="token number">0</Span><Span class="token punctuation">,</Span> caretPos<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> back <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span><Span class="token function">substring</Span><Span class="token punctuation">(</Span>
    textarea<Span class="token punctuation">.</Span>selectionEnd<Span class="token punctuation">,</Span>
    textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">.</Span>length<Span class="token punctuation">,</Span>
  <Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

  textarea<Span class="token punctuation">.</Span>value <Span class="token operator">=</Span> front <Span class="token operator">+</Span> text <Span class="token operator">+</Span> back<Span class="token punctuation">;</Span>
  caretPos <Span class="token operator">+=</Span> text<Span class="token punctuation">.</Span>length<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionStart <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>selectionEnd <Span class="token operator">=</Span> caretPos<Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span><Span class="token function">focus</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  textarea<Span class="token punctuation">.</Span>scrollTop <Span class="token operator">=</Span> scrollPos<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token comment">// Update the saved userCode every time the user updates the text area code</Span>

textarea<Span class="token punctuation">.</Span><Span class="token function-variable function">onkeyup</Span> <Span class="token operator">=</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// We only want to save the state when the user code is being shown,</Span>
  <Span class="token comment">// not the solution, so that solution is not saved over the user code</Span>
  <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>solution<Span class="token punctuation">.</Span>value <Span class="token operator">===</Span> <Span class="token string">"Show solution"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
    userEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
    solutionEntry <Span class="token operator">=</Span> textarea<Span class="token punctuation">.</Span>value<Span class="token punctuation">;</Span>
  <Span class="token punctuation">}</Span>

  <Span class="token function">updateCode</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect17 class=code-example>
<DIV id=sect18 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=which_loop_type_should_you_use>
<H2 id=which_loop_type_should_you_use><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#which_loop_type_should_you_use">Which loop type should you use?</A></H2>
<DIV class=section-content>
<P>If you're iterating through an array or some other object that supports it, and don't need access to the index position of each item, then <CODE>for...of</CODE> is the best choice. It's easier to read and there's less to go wrong.</P>
<P>For other uses, <CODE>for</CODE>, <CODE>while</CODE>, and <CODE>do...while</CODE> loops are largely interchangeable. They can all be used to solve the same problems, and which one you use will largely depend on your personal preference &#8212; which one you find easiest to remember or most intuitive. We would recommend <CODE>for</CODE>, at least to begin with, as it is probably the easiest for remembering everything &#8212; the initializer, condition, and final-expression all have to go neatly into the parentheses, so it is easy to see where they are and check that you aren't missing them. </P>
<P>Let's have a look at them all again.</P>
<P>First <CODE>for...of</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="/CdbkKChRHppvZHptNBXHsT1cCduma1NuiSAaIfAER8="><CODE><Span class="token keyword">for</Span> <Span class="token punctuation">(</Span><Span class="token keyword">const</Span> item <Span class="token keyword">of</Span> array<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P><CODE>for</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="U34eyBQ3afJKuCB7kQlmNM8LTDDOGy2eT72d9wKhJzw="><CODE><Span class="token keyword">for</Span> <Span class="token punctuation">(</Span>initializer<Span class="token punctuation">;</Span> condition<Span class="token punctuation">;</Span> final<Span class="token operator">-</Span>expression<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P><CODE>while</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="fcrS6U7zhkeTRBtcUo52TYk9MODI70/FwEPy8+AVL3Q="><CODE>initializer
<Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>

  final<Span class="token operator">-</Span>expression
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>and finally <CODE>do...while</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="T+42A7Efwwx8TW5w1UZjBKp6jjaJbw8MLl7djQCQRHE="><CODE>initializer
<Span class="token keyword">do</Span> <Span class="token punctuation">{</Span>
  <Span class="token comment">// code to run</Span>

  final<Span class="token operator">-</Span>expression
<Span class="token punctuation">}</Span> <Span class="token keyword">while</Span> <Span class="token punctuation">(</Span>condition<Span class="token punctuation">)</Span>
</CODE></PRE></DIV>
<DIV id=sect19 class="notecard note">
<P><STRONG>Note:</STRONG> There are other loop types/features too, which are useful in advanced/specialized situations and beyond the scope of this article. If you want to go further with your loop learning, read our advanced <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration">Loops and iteration guide</A>.</P></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Test_your_skills:_Loops">Test your skills: Loops</A>.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>This article has revealed to you the basic concepts behind, and different options available when looping code in JavaScript. You should now be clear on why loops are a good mechanism for dealing with repetitive code and raring to use them in your own examples! </P>
<P>If there is anything you didn't understand, feel free to read through the article again, or <A href="https://developer.mozilla.org/en-US/docs/Learn#contact_us">contact us</A> to ask for help.</P></DIV></SECTION><SECTION aria-labelledby=see_also>
<H2 id=see_also><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code#see_also">See also</A></H2>
<DIV class=section-content>
<UL>
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration">Loops and iteration in detail</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of">for...of reference</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for">for statement reference</A> 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while">while</A> and <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while">do...while</A> references 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break">break</A> and <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue">continue</A> references</LI></UL>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/looping_code (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/looping_code/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FLooping_code&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Flooping_code%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FLooping_code%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Flooping_code%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1042">Topic #1,042: Build your own function</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>With most of the essential theory dealt with in the previous article, this article provides practical experience. Here you will get some practice building your own, custom function. Along the way, we'll also explain some useful details of dealing with functions.
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML, CSS, and <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps">JavaScript first steps</A>. Also, <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions">Functions &#8212; reusable blocks of code</A>. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To provide some practice in building a custom function, and explain a few more useful associated details. </TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=active_learning_lets_build_a_function>
<H2 id=active_learning_lets_build_a_function><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#active_learning_lets_build_a_function">Active learning: Let's build a function</A></H2>
<DIV class=section-content>
<P>The custom function we are going to build will be called <CODE>displayMessage()</CODE>. It will display a custom message box on a web page and will act as a customized replacement for a browser's built-in <A href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert">alert()</A> function. We've seen this before, but let's just refresh our memories. Type the following in your browser's JavaScript console, on any page you like:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="9/T+9ICxtIpEWZZ+h6/7zIGS6QiU99bNK50lV4jpKwY="><CODE><Span class="token function">alert</Span><Span class="token punctuation">(</Span><Span class="token string">"This is a message"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The <CODE>alert</CODE> function takes a single argument &#8212; the string that is displayed in the alert box. Try varying the string to change the message.</P>
<P>The <CODE>alert</CODE> function is limited: you can alter the message, but you can't easily vary anything else, such as the color, icon, or anything else. We'll build one that will prove to be more fun.</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> This example should work in all modern browsers fine, but the styling might look a bit funny in slightly older browsers. We'd recommend you do this exercise in a modern browser like Firefox, Opera, or Chrome.</P></DIV></DIV></SECTION><SECTION aria-labelledby=the_basic_function>
<H2 id=the_basic_function><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#the_basic_function">The basic function</A></H2>
<DIV class=section-content>
<P>To begin with, let's put together a basic function.</P>
<DIV id=sect2 class="notecard note">
<P><STRONG>Note:</STRONG> For function naming conventions, you should follow the same rules as <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables#an_aside_on_variable_naming_rules">variable naming conventions</A>. This is fine, as you can tell them apart &#8212; function names appear with parentheses after them, and variables don't.</P></DIV>
<OL>
<LI>Start by accessing the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/function-start.html" target=_blank>function-start.html</A> file and making a local copy. You'll see that the HTML is simple &#8212; the body contains just a single button. We've also provided some basic CSS to style the custom message box, and an empty <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"><CODE>&lt;script&gt;</CODE></A> element to put our JavaScript in. 
<LI>Next, add the following inside the <CODE>&lt;script&gt;</CODE> element: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="6jPk2H6AtQkboQCQ22UvBtx6vu6dbQEnD5IKsP8Ep/Y="><CODE><Span class="token keyword">function</Span> <Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token operator">...</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>We start off with the keyword <CODE>function</CODE>, which means we are defining a function. This is followed by the name we want to give to our function, a set of parentheses, and a set of curly braces. Any parameters we want to give to our function go inside the parentheses, and the code that runs when we call the function goes inside the curly braces. 
<LI>Finally, add the following code inside the curly braces: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ETZ9M1Qc0W4MBFuw0Q7Wxv++5/m3rGEPxyyG6thxrJM="><CODE><Span class="token keyword">const</Span> body <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span>body<Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> panel <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">createElement</Span><Span class="token punctuation">(</Span><Span class="token string">"div"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
panel<Span class="token punctuation">.</Span><Span class="token function">setAttribute</Span><Span class="token punctuation">(</Span><Span class="token string">"class"</Span><Span class="token punctuation">,</Span> <Span class="token string">"msgBox"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
body<Span class="token punctuation">.</Span><Span class="token function">appendChild</Span><Span class="token punctuation">(</Span>panel<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> msg <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">createElement</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
msg<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"This is a message box"</Span><Span class="token punctuation">;</Span>
panel<Span class="token punctuation">.</Span><Span class="token function">appendChild</Span><Span class="token punctuation">(</Span>msg<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> closeBtn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">createElement</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
closeBtn<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"x"</Span><Span class="token punctuation">;</Span>
panel<Span class="token punctuation">.</Span><Span class="token function">appendChild</Span><Span class="token punctuation">(</Span>closeBtn<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

closeBtn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span>
  panel<Span class="token punctuation">.</Span>parentNode<Span class="token punctuation">.</Span><Span class="token function">removeChild</Span><Span class="token punctuation">(</Span>panel<Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV></LI></OL>
<P>This is quite a lot of code to go through, so we'll walk you through it bit by bit.</P>
<P>The first line selects the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body"><CODE>&lt;body&gt;</CODE></A> element by using the <A href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM API</A> to get the <A href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body"><CODE>body</CODE></A> property of the global <A href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body"><CODE>document</CODE></A> object, and assigning that to a constant called <CODE>body</CODE>, so we can do things to it later on:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="rLCVLPKt9H5dQFGYY/zdcfLmOF9YItIPAUxvxALER9E="><CODE><Span class="token keyword">const</Span> body <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span>body<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The next section uses a DOM API function called <A href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement"><CODE>document.createElement()</CODE></A> to create a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A> element and store a reference to it in a constant called <CODE>panel</CODE>. This element will be the outer container of our message box.</P>
<P>We then use yet another DOM API function called <A href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute"><CODE>Element.setAttribute()</CODE></A> to set a <CODE>class</CODE> attribute on our panel with a value of <CODE>msgBox</CODE>. This is to make it easier to style the element &#8212; if you look at the CSS on the page, you'll see that we are using a <CODE>.msgBox</CODE> class selector to style the message box and its contents.</P>
<P>Finally, we call a DOM function called <A href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"><CODE>Node.appendChild()</CODE></A> on the <CODE>body</CODE> constant we stored earlier, which nests one element inside the other as a child of it. We specify the panel <CODE>&lt;div&gt;</CODE> as the child we want to append inside the <CODE>&lt;body&gt;</CODE> element. We need to do this as the element we created won't just appear on the page on its own &#8212; we need to specify where to put it.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="zi90uV3k87zsgU6Rg7qala7yg0L3FPm//cSXX+P0z1A="><CODE><Span class="token keyword">const</Span> panel <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">createElement</Span><Span class="token punctuation">(</Span><Span class="token string">"div"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
panel<Span class="token punctuation">.</Span><Span class="token function">setAttribute</Span><Span class="token punctuation">(</Span><Span class="token string">"class"</Span><Span class="token punctuation">,</Span> <Span class="token string">"msgBox"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
body<Span class="token punctuation">.</Span><Span class="token function">appendChild</Span><Span class="token punctuation">(</Span>panel<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The next two sections make use of the same <CODE>createElement()</CODE> and <CODE>appendChild()</CODE> functions we've already seen to create two new elements &#8212; a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p"><CODE>&lt;p&gt;</CODE></A> and a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A> &#8212; and insert them in the page as children of the panel <CODE>&lt;div&gt;</CODE>. We use their <A href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"><CODE>Node.textContent</CODE></A> property &#8212; which represents the text content of an element &#8212; to insert a message inside the paragraph, and an "x" inside the button. This button will be what needs to be clicked/activated when the user wants to close the message box.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="8t+E3jJM4xfiWwj/4bs/O3V6fKwIKZthff3RWT+ZLo8="><CODE><Span class="token keyword">const</Span> msg <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">createElement</Span><Span class="token punctuation">(</Span><Span class="token string">"p"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
msg<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"This is a message box"</Span><Span class="token punctuation">;</Span>
panel<Span class="token punctuation">.</Span><Span class="token function">appendChild</Span><Span class="token punctuation">(</Span>msg<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

<Span class="token keyword">const</Span> closeBtn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">createElement</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
closeBtn<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"x"</Span><Span class="token punctuation">;</Span>
panel<Span class="token punctuation">.</Span><Span class="token function">appendChild</Span><Span class="token punctuation">(</Span>closeBtn<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Finally, we call <A title=addEventListener() href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><CODE>addEventListener()</CODE></A> to add a function that will be called when the user clicks the "close" button. The code will delete the whole panel from the page &#8212; to close the message box.</P>
<P>Briefly, the <CODE>addEventListener()</CODE> method is provided by the button (or in fact, any element on the page) that can be passed a function and the name of an event. In this case, the name of the event is 'click', meaning that when the user clicks the button, the function will run. You'll learn a lot more about events in our <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">events article</A>. The line inside the function uses the <A href="https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild"><CODE>Node.removeChild()</CODE></A> DOM API function to specify that we want to remove a specific child element of the HTML element &#8212; in this case, the panel <CODE>&lt;div&gt;</CODE>.</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="RyKErOAH2TMftaAnUhfDVQz4uXYbouJKBG9rvisYVBk="><CODE>closeBtn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> panel<Span class="token punctuation">.</Span>parentNode<Span class="token punctuation">.</Span><Span class="token function">removeChild</Span><Span class="token punctuation">(</Span>panel<Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Basically, this whole block of code is generating a block of HTML that looks like so, and inserting it into the page:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="tUiWsQg/vMNKGw4KSygFEoRAURCppLuxTun/Azn3Htg="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>msgBox<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>This is a message box<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>x<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>That was a lot of code to work through &#8212; don't worry too much if you don't remember exactly how every bit of it works right now! The main part we want to focus on here is the function's structure and usage, but we wanted to show something interesting for this example.</P></DIV></SECTION><SECTION aria-labelledby=calling_the_function>
<H2 id=calling_the_function><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#calling_the_function">Calling the function</A></H2>
<DIV class=section-content>
<P>You've now got your function definition written into your <CODE>&lt;script&gt;</CODE> element just fine, but it will do nothing as it stands.</P>
<OL>
<LI>Try including the following line below your function to call it: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="AFyWjqJucEzixSR+5f+ZalVCAt18bQH6x7zEafYA1nM="><CODE><Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>This line invokes the function, making it run immediately. When you save your code and reload it in the browser, you'll see the little message box appear immediately, only once. We are only calling it once, after all. 
<LI>Now open your browser developer tools on the example page, go to the JavaScript console and type the line again there, you'll see it appear again! So this is fun &#8212; we now have a reusable function that we can call any time we like. But we probably want it to appear in response to user and system actions. In a real application, such a message box would probably be called in response to new data being available, or an error having occurred, or the user trying to delete their profile ("are you sure about this?"), or the user adding a new contact and the operation completing successfully, etc. In this demo, we'll get the message box to appear when the user clicks the button. 
<LI>Delete the previous line you added. 
<LI>Next, we'll select the button and store a reference to it in a constant. Add the following line to your code, above the function definition: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="P1fBssNway95WfACGLJUyrz51Zp6qSLpRDKrhEmwyIY="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<LI>Finally, add the following line below the previous one: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="EvG22wwuQmoJ3u5nk/b21zshwFOOJhU73XA1T5/RIII="><CODE>btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> displayMessage<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>In a similar way to our closeBtn's click event handler, here we are calling some code in response to a button being clicked. But in this case, instead of calling an anonymous function containing some code, we are calling our <CODE>displayMessage()</CODE> function by name. 
<LI>Try saving and refreshing the page &#8212; now you should see the message box appear when you click the button.</LI></OL>
<P>You might be wondering why we haven't included the parentheses after the function name. This is because we don't want to call the function immediately &#8212; only after the button has been clicked. If you try changing the line to</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="//H162uL+2GO+NGYqWulgcsr76G9hknnhLBiBw4jvjk="><CODE>btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>and saving and reloading, you'll see that the message box appears without the button being clicked! The parentheses in this context are sometimes called the "function invocation operator". You only use them when you want to run the function immediately in the current scope. In the same respect, the code inside the anonymous function is not run immediately, as it is inside the function scope.</P>
<P>If you tried the last experiment, make sure to undo the last change before carrying on.</P></DIV></SECTION><SECTION aria-labelledby=improving_the_function_with_parameters>
<H2 id=improving_the_function_with_parameters><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#improving_the_function_with_parameters">Improving the function with parameters</A></H2>
<DIV class=section-content>
<P>As it stands, the function is still not very useful &#8212; we don't want to just show the same default message every time. Let's improve our function by adding some parameters, allowing us to call it with some different options.</P>
<OL>
<LI>First of all, update the first line of the function: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="UJVO6YTVRG8vbUeCjRMWig/crzRJo+RwiguRlsomCfg="><CODE><Span class="token keyword">function</Span> <Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
</CODE></PRE></DIV>to this: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="GUDaSilnhRwT7oEA9pb+PuoxEPhCylT2rnIj1trDw/k="><CODE><Span class="token keyword">function</Span> <Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token parameter">msgText<Span class="token punctuation">,</Span> msgType</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
</CODE></PRE></DIV>Now when we call the function, we can provide two variable values inside the parentheses to specify the message to display in the message box, and the type of message it is. 
<LI>To make use of the first parameter, update the following line inside your function: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="XaKvfWb3aStjL835L76JTna5ZZQtwXUd0hKVpRLE5Ts="><CODE>msg<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> <Span class="token string">"This is a message box"</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>to 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="MyVpoxViytTk06nYxGCxFh7HaPcdLGjUO52XpvlhbTk="><CODE>msg<Span class="token punctuation">.</Span>textContent <Span class="token operator">=</Span> msgText<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<LI>Last but not least, you now need to update your function call to include some updated message text. Change the following line: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="EvG22wwuQmoJ3u5nk/b21zshwFOOJhU73XA1T5/RIII="><CODE>btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> displayMessage<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>to this block: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="ijcYXBd8BM/zNhsId/tnoalbuho6P5D2I89wh+voz6k="><CODE>btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span>
  <Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token string">"Woo, this is a different message!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">,</Span>
<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>If we want to specify parameters inside parentheses for the function we are calling, then we can't call it directly &#8212; we need to put it inside an anonymous function so that it isn't in the immediate scope and therefore isn't called immediately. Now it will not be called until the button is clicked. 
<LI>Reload and try the code again and you'll see that it still works just fine, except that now you can also vary the message inside the parameter to get different messages displayed in the box!</LI></OL></DIV></SECTION><SECTION aria-labelledby=a_more_complex_parameter>
<H3 id=a_more_complex_parameter><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#a_more_complex_parameter">A more complex parameter</A></H3>
<DIV class=section-content>
<P>On to the next parameter. This one is going to involve slightly more work &#8212; we are going to set it so that depending on what the <CODE>msgType</CODE> parameter is set to, the function will display a different icon and a different background color.</P>
<OL>
<LI>First of all, download the icons needed for this exercise (<A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/icons/warning.png" target=_blank>warning</A> and <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/icons/chat.png" target=_blank>chat</A>) from GitHub. Save them in a new folder called <CODE>icons</CODE> in the same location as your HTML file. 
<DIV id=sect3 class="notecard note">
<P><STRONG>Note:</STRONG> The warning and chat icons were originally found on <A class=external href="https://www.iconfinder.com/" target=_blank>iconfinder.com</A>, and designed by <A class=external href="https://www.iconfinder.com/nazarr" target=_blank>Nazarrudin Ansyari</A> &#8212; Thanks! (The actual icon pages were since moved or removed.)</P></DIV>
<LI>Next, find the CSS inside your HTML file. We'll make a few changes to make way for the icons. First, update the <CODE>.msgBox</CODE> width from: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>css</Span></DIV><PRE class="brush: css notranslate" data-signature="GYC9PaWVn4jXAuBO1P0p49Q1fix2tA73Syh1po69nPg="><CODE><Span class="token property">width</Span><Span class="token punctuation">:</Span> 200px<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>to 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>css</Span></DIV><PRE class="brush: css notranslate" data-signature="lxSHs8LjgTGBhPg3mdUtxRl7wU4XGp8uZyemAJ3dzvk="><CODE><Span class="token property">width</Span><Span class="token punctuation">:</Span> 242px<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<LI>Next, add the following lines inside the <CODE>.msgBox p { }</CODE> rule: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>css</Span></DIV><PRE class="brush: css notranslate" data-signature="9DzWODlUVk2nJxNt++rRcFeBYWxMfH0RmdQor1flHbA="><CODE><Span class="token property">padding-left</Span><Span class="token punctuation">:</Span> 82px<Span class="token punctuation">;</Span>
<Span class="token property">background-position</Span><Span class="token punctuation">:</Span> 25px center<Span class="token punctuation">;</Span>
<Span class="token property">background-repeat</Span><Span class="token punctuation">:</Span> no-repeat<Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<LI>Now we need to add code to our <CODE>displayMessage()</CODE> function to handle displaying the icons. Add the following block just above the closing curly brace (<CODE>}</CODE>) of your function: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="wBmhpB9cY6dCYyPiqpltVqAOPxtp0O6/ot9yMC59xkc="><CODE><Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>msgType <Span class="token operator">===</Span> <Span class="token string">"warning"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  msg<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundImage <Span class="token operator">=</Span> <Span class="token string">"url(icons/warning.png)"</Span><Span class="token punctuation">;</Span>
  panel<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> <Span class="token string">"red"</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token keyword">if</Span> <Span class="token punctuation">(</Span>msgType <Span class="token operator">===</Span> <Span class="token string">"chat"</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  msg<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundImage <Span class="token operator">=</Span> <Span class="token string">"url(icons/chat.png)"</Span><Span class="token punctuation">;</Span>
  panel<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> <Span class="token string">"aqua"</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span> <Span class="token keyword">else</Span> <Span class="token punctuation">{</Span>
  msg<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>paddingLeft <Span class="token operator">=</Span> <Span class="token string">"20px"</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>Here, if the <CODE>msgType</CODE> parameter is set as <CODE>'warning'</CODE>, the warning icon is displayed and the panel's background color is set to red. If it is set to <CODE>'chat'</CODE>, the chat icon is displayed and the panel's background color is set to aqua blue. If the <CODE>msgType</CODE> parameter is not set at all (or to something different), then the <CODE>else { }</CODE> part of the code comes into play, and the paragraph is given default padding and no icon, with no background panel color set either. This provides a default state if no <CODE>msgType</CODE> parameter is provided, meaning that it is an optional parameter! 
<LI>Let's test out our updated function, try updating the <CODE>displayMessage()</CODE> call from this: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="imiha2Y7xzB/r+WCYDYJNJJXZbVXAnUAu4+jOl7aPbs="><CODE><Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token string">"Woo, this is a different message!"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>to one of these: 
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="yVwzCzm7knlo4Wyl8AGob3nB+fpZmrap6Rf66tLWmyM="><CODE><Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token string">"Your inbox is almost full &#8212; delete some mails"</Span><Span class="token punctuation">,</Span> <Span class="token string">"warning"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token function">displayMessage</Span><Span class="token punctuation">(</Span><Span class="token string">"Brian: Hi there, how are you today?"</Span><Span class="token punctuation">,</Span> <Span class="token string">"chat"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>You can see how useful our (now not so) little function is becoming. </LI></OL>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> If you have trouble getting the example to work, feel free to check your code against the <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/functions/function-stage-4.html" target=_blank>finished version on GitHub</A> (<A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/functions/function-stage-4.html" target=_blank>see it running live</A> also), or ask us for help.</P></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Test_your_skills:_Functions">Test your skills: Functions</A>. These tests require skills that are covered in the next article, so you might want to read that first before trying the test.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>Congratulations on reaching the end! This article took you through the entire process of building up a practical custom function, which with a bit more work could be transplanted into a real project. In the next article, we'll wrap up functions by explaining another essential related concept &#8212; return values.</P>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Functions"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/build_your_own_function (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/build_your_own_function/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FBuild_your_own_function&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fbuild_your_own_function%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FBuild_your_own_function%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fbuild_your_own_function%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1043">Topic #1,043: Event bubbling</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<HEAD></HEAD>
<BODY>We've seen that a web page is composed of <EM>elements</EM> &#8212; headings, paragraphs of text, images, buttons, and so on &#8212; and that you can listen for events that happen to these elements. For example, you could add a listener to a button, and it will run when the user clicks the button.
<P></P>
<P>We've also seen that these elements can be <EM>nested</EM> inside each other: for example, a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A> could be placed inside a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A> element. In this case we'd call the <CODE>&lt;div&gt;</CODE> element a <EM>parent</EM> element, and the <CODE>&lt;button&gt;</CODE> a <EM>child</EM> element.</P>
<P>In this chapter we'll see what happens when you add an event listener to a parent element, and the user clicks the child element.</P><SECTION aria-labelledby=introducing_event_bubbling>
<H2 id=introducing_event_bubbling><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#introducing_event_bubbling">Introducing event bubbling</A></H2>
<DIV class=section-content></DIV></SECTION><SECTION aria-labelledby=setting_a_listener_on_a_parent_element>
<H3 id=setting_a_listener_on_a_parent_element><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#setting_a_listener_on_a_parent_element">Setting a listener on a parent element</A></H3>
<DIV class=section-content>
<P>Consider a web page like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="peJt4MLj2ZSEvmlmM/1Z2Eyt+0Ou3kZboBq6KTTZICc="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>container<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Click me!<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>pre</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>pre</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>Here the button is inside another element, a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A> element. We say that the <CODE>&lt;div&gt;</CODE> element here is the <STRONG>parent</STRONG> of the element it contains. What happens if we add a click event handler to the parent, then click the button?</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="AGtxrKF44c+jzGyLeJf4H2JcR5jjrkA5bwL68iIo7C0="><CODE><Span class="token keyword">const</Span> output <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">function</Span> <Span class="token function">handleClick</Span><Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You clicked on a </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>e<Span class="token punctuation">.</Span>currentTarget<Span class="token punctuation">.</Span>tagName<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> element\n</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> container <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#container"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
container<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect1 class=code-example>
<DIV id=sect2 class=example-header></DIV></DIV>
<P>You'll see that the parent fires a click event when the user clicks the button:</P><PRE class="brush: plain notranslate">You clicked on a DIV element
</PRE>
<P>This makes sense: the button is inside the <CODE>&lt;div&gt;</CODE>, so when you click the button you're also implicitly clicking the element it is inside.</P></DIV></SECTION><SECTION aria-labelledby=bubbling_example>
<H3 id=bubbling_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#bubbling_example">Bubbling example</A></H3>
<DIV class=section-content>
<P>What happens if we add event listeners to the button <EM>and</EM> the parent?</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="XdESdjuTQZY6O+K6c7kEpRz9xubQYSQL3GmcmE+OPJM="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>body</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>container<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Click me!<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>pre</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>pre</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>body</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>Let's try adding click event handlers to the button, its parent (the <CODE>&lt;div&gt;</CODE>), and the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body"><CODE>&lt;body&gt;</CODE></A> element that contains both of them:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="5RRM/HtP6Z/oTuSWzW/AnCcetbyOcAhOPcs5FdTTwDs="><CODE><Span class="token keyword">const</Span> output <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">function</Span> <Span class="token function">handleClick</Span><Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You clicked on a </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>e<Span class="token punctuation">.</Span>currentTarget<Span class="token punctuation">.</Span>tagName<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> element\n</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> container <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#container"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> button <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
container<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
button<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect3 class=code-example>
<DIV id=sect4 class=example-header></DIV></DIV>
<P>You'll see that all three elements fire a click event when the user clicks the button:</P><PRE class="brush: plain notranslate">You clicked on a BUTTON element
You clicked on a DIV element
You clicked on a BODY element
</PRE>
<P>In this case:</P>
<UL>
<LI>the click on the button fires first 
<LI>followed by the click on its parent (the <CODE>&lt;div&gt;</CODE> element) 
<LI>followed by the <CODE>&lt;div&gt;</CODE> element's parent (the <CODE>&lt;body&gt;</CODE> element).</LI></UL>
<P>We describe this by saying that the event <STRONG>bubbles up</STRONG> from the innermost element that was clicked.</P>
<P>This behavior can be useful and can also cause unexpected problems. In the next sections, we'll see a problem that it causes, and find the solution.</P></DIV></SECTION><SECTION aria-labelledby=video_player_example>
<H3 id=video_player_example><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#video_player_example">Video player example</A></H3>
<DIV class=section-content>
<P>In this example our page contains a video, which is hidden initially, and a button labeled "Display video". We want the following interaction:</P>
<UL>
<LI>When the user clicks the "Display video" button, show the box containing the video, but don't start playing the video yet. 
<LI>When the user clicks on the video, start playing the video. 
<LI>When the user clicks anywhere in the box outside the video, hide the box.</LI></UL>
<P>The HTML looks like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="6Ik5j9IueMkFFkLS8O6mCgyOpPleoRnWtjhmL+Iyq/k="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Display video<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>hidden<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>video</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>source</Span>
      <Span class="token attr-name">src</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm<Span class="token punctuation">"</Span></Span>
      <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>video/webm<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
      Your browser doesn't support HTML video. Here is a
      <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>a</Span> <Span class="token attr-name">href</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>rabbit320.mp4<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>link to the video<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>a</Span><Span class="token punctuation">&gt;</Span></Span> instead.
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>video</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>It includes:</P>
<UL>
<LI>a <CODE>&lt;button&gt;</CODE> element 
<LI>a <CODE>&lt;div&gt;</CODE> element which initially has a <CODE>class="hidden"</CODE> attribute 
<LI>a <CODE>&lt;video&gt;</CODE> element nested inside the <CODE>&lt;div&gt;</CODE> element.</LI></UL>
<P>We're using CSS to hide elements with the <CODE>"hidden"</CODE> class set.</P>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="OQlCf0POdjO5NxRZUMFUmUqw1ZnLbGi0jBLL6nDo5zQ="><CODE><Span class="token selector">div</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 100%<Span class="token punctuation">;</Span>
  <Span class="token property">height</Span><Span class="token punctuation">:</Span> 100%<Span class="token punctuation">;</Span>
  <Span class="token property">background-color</Span><Span class="token punctuation">:</Span> #eee<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.hidden</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">display</Span><Span class="token punctuation">:</Span> none<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">div video</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">padding</Span><Span class="token punctuation">:</Span> 40px<Span class="token punctuation">;</Span>
  <Span class="token property">display</Span><Span class="token punctuation">:</Span> block<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 400px<Span class="token punctuation">;</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 40px auto<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>The JavaScript looks like this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="UfwIL81aGlSbp3U4nZL8E0Q/eckV5LleF1sSkIfuEJ4="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> box <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"div"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> video <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"video"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> box<Span class="token punctuation">.</Span>classList<Span class="token punctuation">.</Span><Span class="token function">remove</Span><Span class="token punctuation">(</Span><Span class="token string">"hidden"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
video<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> video<Span class="token punctuation">.</Span><Span class="token function">play</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
box<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> box<Span class="token punctuation">.</Span>classList<Span class="token punctuation">.</Span><Span class="token function">add</Span><Span class="token punctuation">(</Span><Span class="token string">"hidden"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>This adds three <CODE>'click'</CODE> event listeners:</P>
<UL>
<LI>one on the <CODE>&lt;button&gt;</CODE>, which shows the <CODE>&lt;div&gt;</CODE> that contains the <CODE>&lt;video&gt;</CODE> 
<LI>one on the <CODE>&lt;video&gt;</CODE>, which starts playing the video 
<LI>one on the <CODE>&lt;div&gt;</CODE>, which hides the video</LI></UL>
<P>Let's see how this works:</P>
<DIV id=sect5 class=code-example>
<DIV id=sect6 class=example-header></DIV></DIV>
<P>You should see that when you click the button, the box and the video it contains are shown. But then when you click the video, the video starts to play, but the box is hidden again!</P>
<P>The video is inside the <CODE>&lt;div&gt;</CODE> &#8212; it is part of it &#8212; so clicking the video runs <EM>both</EM> the event handlers, causing this behavior.</P></DIV></SECTION><SECTION aria-labelledby=fixing_the_problem_with_stoppropagation>
<H3 id=fixing_the_problem_with_stoppropagation><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#fixing_the_problem_with_stoppropagation">Fixing the problem with stopPropagation()</A></H3>
<DIV class=section-content>
<P>As we saw in the last section, event bubbling can sometimes create problems, but there is a way to prevent it. The <A href="https://developer.mozilla.org/en-US/docs/Web/API/Event"><CODE>Event</CODE></A> object has a function available on it called <A href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation"><CODE>stopPropagation()</CODE></A> which, when called inside an event handler, prevents the event from bubbling up to any other elements. </P>
<P>We can fix our current problem by changing the JavaScript to this:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="zqH7FKuaZlgT4iEAa9TnInM4vhClMe3GE/K/StygEfs="><CODE><Span class="token keyword">const</Span> btn <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> box <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"div"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> video <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"video"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

btn<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> box<Span class="token punctuation">.</Span>classList<Span class="token punctuation">.</Span><Span class="token function">remove</Span><Span class="token punctuation">(</Span><Span class="token string">"hidden"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

video<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  event<Span class="token punctuation">.</Span><Span class="token function">stopPropagation</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
  video<Span class="token punctuation">.</Span><Span class="token function">play</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

box<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> box<Span class="token punctuation">.</Span>classList<Span class="token punctuation">.</Span><Span class="token function">add</Span><Span class="token punctuation">(</Span><Span class="token string">"hidden"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>All we're doing here is calling <CODE>stopPropagation()</CODE> on the event object in the handler for the <CODE>&lt;video&gt;</CODE> element's <CODE>'click'</CODE> event. This will stop that event from bubbling up to the box. Now try clicking the button and then the video:</P>
<DIV id=sect7 class=code-example>
<DIV id=sect8 class=example-header></DIV></DIV>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="6Ik5j9IueMkFFkLS8O6mCgyOpPleoRnWtjhmL+Iyq/k="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Display video<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>

<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>hidden<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>video</Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>source</Span>
      <Span class="token attr-name">src</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm<Span class="token punctuation">"</Span></Span>
      <Span class="token attr-name">type</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>video/webm<Span class="token punctuation">"</Span></Span> <Span class="token punctuation">/&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
      Your browser doesn't support HTML video. Here is a
      <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>a</Span> <Span class="token attr-name">href</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>rabbit320.mp4<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>link to the video<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>a</Span><Span class="token punctuation">&gt;</Span></Span> instead.
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>p</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>video</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="OQlCf0POdjO5NxRZUMFUmUqw1ZnLbGi0jBLL6nDo5zQ="><CODE><Span class="token selector">div</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 100%<Span class="token punctuation">;</Span>
  <Span class="token property">height</Span><Span class="token punctuation">:</Span> 100%<Span class="token punctuation">;</Span>
  <Span class="token property">background-color</Span><Span class="token punctuation">:</Span> #eee<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">.hidden</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">display</Span><Span class="token punctuation">:</Span> none<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token selector">div video</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">padding</Span><Span class="token punctuation">:</Span> 40px<Span class="token punctuation">;</Span>
  <Span class="token property">display</Span><Span class="token punctuation">:</Span> block<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 400px<Span class="token punctuation">;</Span>
  <Span class="token property">margin</Span><Span class="token punctuation">:</Span> 40px auto<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=event_capture>
<H2 id=event_capture><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#event_capture">Event capture</A></H2>
<DIV class=section-content>
<P>An alternative form of event propagation is <EM>event capture</EM>. This is like event bubbling but the order is reversed: so instead of the event firing first on the innermost element targeted, and then on successively less nested elements, the event fires first on the <EM>least nested</EM> element, and then on successively more nested elements, until the target is reached.</P>
<P>Event capture is disabled by default. To enable it you have to pass the <CODE>capture</CODE> option in <CODE>addEventListener()</CODE>.</P>
<P>This example is just like the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#bubbling_example">bubbling example</A> we saw earlier, except that we have used the <CODE>capture</CODE> option:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="XdESdjuTQZY6O+K6c7kEpRz9xubQYSQL3GmcmE+OPJM="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>body</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>container<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Click me!<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>pre</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>pre</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>body</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="br+V7dz4bZ4WdyFLf2D9g82B7oqdrTUrN9giCWVWSnE="><CODE><Span class="token keyword">const</Span> output <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">function</Span> <Span class="token function">handleClick</Span><Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  output<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">You clicked on a </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>e<Span class="token punctuation">.</Span>currentTarget<Span class="token punctuation">.</Span>tagName<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> element\n</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> container <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#container"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> button <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">,</Span> <Span class="token punctuation">{</Span> <Span class="token literal-property property">capture</Span><Span class="token operator">:</Span> <Span class="token boolean">true</Span> <Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
container<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">,</Span> <Span class="token punctuation">{</Span> <Span class="token literal-property property">capture</Span><Span class="token operator">:</Span> <Span class="token boolean">true</Span> <Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
button<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<DIV id=sect9 class=code-example>
<DIV id=sect10 class=example-header></DIV></DIV>
<P>In this case, the order of messages is reversed: the <CODE>&lt;body&gt;</CODE> event handler fires first, followed by the <CODE>&lt;div&gt;</CODE> event handler, followed by the <CODE>&lt;button&gt;</CODE> event handler:</P><PRE class="brush: plain notranslate">You clicked on a BODY element
You clicked on a DIV element
You clicked on a BUTTON element
</PRE>
<P>Why bother with both capturing and bubbling? In the bad old days, when browsers were much less cross-compatible than now, Netscape only used event capturing, and Internet Explorer used only event bubbling. When the W3C decided to try to standardize the behavior and reach a consensus, they ended up with this system that included both, which is what modern browsers implement.</P>
<P>By default almost all event handlers are registered in the bubbling phase, and this makes more sense most of the time.</P></DIV></SECTION><SECTION aria-labelledby=event_delegation>
<H2 id=event_delegation><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#event_delegation">Event delegation</A></H2>
<DIV class=section-content>
<P>In the last section, we looked at a problem caused by event bubbling and how to fix it. Event bubbling isn't just annoying, though: it can be very useful. In particular, it enables <STRONG>event delegation</STRONG>. In this practice, when we want some code to run when the user interacts with any one of a large number of child elements, we set the event listener on their parent and have events that happen on them bubble up to their parent rather than having to set the event listener on every child individually.</P>
<P>Let's go back to our first example, where we set the background color of the whole page when the user clicked a button. Suppose that instead, the page is divided into 16 tiles, and we want to set each tile to a random color when the user clicks that tile.</P>
<P>Here's the HTML:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="NLhxR7HlP+tAVWlNHItSGLuZE9rqLuFEBS7qbKRNJMo="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>container<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">class</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>tile<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>We have a little CSS, to set the size and position of the tiles:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>css</Span></DIV><PRE class="brush: css notranslate" data-signature="j4gnaJKkmKxLhfvCXxooGjCE6Jve2coxWT+jlB8pRwY="><CODE><Span class="token selector">.tile</Span> <Span class="token punctuation">{</Span>
  <Span class="token property">height</Span><Span class="token punctuation">:</Span> 100px<Span class="token punctuation">;</Span>
  <Span class="token property">width</Span><Span class="token punctuation">:</Span> 25%<Span class="token punctuation">;</Span>
  <Span class="token property">float</Span><Span class="token punctuation">:</Span> left<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>
</CODE></PRE></DIV>
<P>Now in JavaScript, we could add a click event handler for every tile. But a much simpler and more efficient option is to set the click event handler on the parent, and rely on event bubbling to ensure that the handler is executed when the user clicks on a tile:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="+Dfzy7lY3XC8twBMQYrViglcyZuYV9yMrH6ZlLKyTYM="><CODE><Span class="token keyword">function</Span> <Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token parameter">number</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">return</Span> Math<Span class="token punctuation">.</Span><Span class="token function">floor</Span><Span class="token punctuation">(</Span>Math<Span class="token punctuation">.</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token operator">*</Span> number<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">function</Span> <Span class="token function">bgChange</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> rndCol <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">rgb(</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string"> </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span><Span class="token function">random</Span><Span class="token punctuation">(</Span><Span class="token number">255</Span><Span class="token punctuation">)</Span><Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">)</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">return</Span> rndCol<Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> container <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#container"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

container<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> <Span class="token punctuation">(</Span><Span class="token parameter">event</Span><Span class="token punctuation">)</Span> <Span class="token operator">=&gt;</Span> <Span class="token punctuation">{</Span>
  event<Span class="token punctuation">.</Span>target<Span class="token punctuation">.</Span>style<Span class="token punctuation">.</Span>backgroundColor <Span class="token operator">=</Span> <Span class="token function">bgChange</Span><Span class="token punctuation">(</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>The output is as follows (try clicking around on it):</P>
<DIV id=sect11 class=code-example>
<DIV id=sect12 class=example-header></DIV></DIV>
<DIV id=sect13 class="notecard note">
<P><STRONG>Note:</STRONG> In this example, we're using <CODE>event.target</CODE> to get the element that was the target of the event (that is, the innermost element). If we wanted to access the element that handled this event (in this case the container) we could use <CODE>event.currentTarget</CODE>.</P></DIV>
<DIV id=sect14 class="notecard note">
<P><STRONG>Note:</STRONG> See <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/building-blocks/events/useful-eventtarget.html" target=_blank>useful-eventtarget.html</A> for the full source code; also see it <A class=external href="https://mdn.github.io/learning-area/javascript/building-blocks/events/useful-eventtarget.html" target=_blank>running live</A> here.</P></DIV></DIV></SECTION><SECTION aria-labelledby=target_and_currenttarget>
<H2 id=target_and_currenttarget><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#target_and_currenttarget"><CODE>target</CODE> and <CODE>currentTarget</CODE></A></H2>
<DIV class=section-content>
<P>If you look closely at the examples we've introduced in this page, you'll see that we're using two different properties of the event object to access the element that was clicked. In <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#setting_a_listener_on_a_parent_element">Setting a listener on a parent element</A> we're using <A title=event.currentTarget href="https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget"><CODE>event.currentTarget</CODE></A>. However, in <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#event_delegation">Event delegation</A>, we're using <A title=event.target href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target"><CODE>event.target</CODE></A>.</P>
<P>The difference is that <CODE>target</CODE> refers to the element on which the event was initially fired, while <CODE>currentTarget</CODE> refers to the element to which this event handler has been attached.</P>
<P>While <CODE>target</CODE> remains the same while an event bubbles up, <CODE>currentTarget</CODE> will be different for event handlers that are attached to different elements in the hierarchy.</P>
<P>We can see this if we slightly adapt the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#bubbling_example">Bubbling example</A> above. We're using the same HTML as before:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>html</Span></DIV><PRE class="brush: html notranslate" data-signature="XdESdjuTQZY6O+K6c7kEpRz9xubQYSQL3GmcmE+OPJM="><CODE><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>body</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>div</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>container<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span>
    <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>Click me!<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>button</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>div</Span><Span class="token punctuation">&gt;</Span></Span>
  <Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;</Span>pre</Span> <Span class="token attr-name">id</Span><Span class="token attr-value"><Span class="token punctuation attr-equals">=</Span><Span class="token punctuation">"</Span>output<Span class="token punctuation">"</Span></Span><Span class="token punctuation">&gt;</Span></Span><Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>pre</Span><Span class="token punctuation">&gt;</Span></Span>
<Span class="token tag"><Span class="token tag"><Span class="token punctuation">&lt;/</Span>body</Span><Span class="token punctuation">&gt;</Span></Span>
</CODE></PRE></DIV>
<P>The JavaScript is almost the same, except we're logging both <CODE>target</CODE> and <CODE>currentTarget</CODE>:</P>
<DIV class=code-example>
<DIV class=example-header><Span class=language-name>js</Span></DIV><PRE class="brush: js notranslate" data-signature="K/5j/SGN/+D1Iq/kURD97Lv75CiJnYdCb4vLe3KpTow="><CODE><Span class="token keyword">const</Span> output <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#output"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">function</Span> <Span class="token function">handleClick</Span><Span class="token punctuation">(</Span><Span class="token parameter">e</Span><Span class="token punctuation">)</Span> <Span class="token punctuation">{</Span>
  <Span class="token keyword">const</Span> logTarget <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">Target: </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>e<Span class="token punctuation">.</Span>target<Span class="token punctuation">.</Span>tagName<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  <Span class="token keyword">const</Span> logCurrentTarget <Span class="token operator">=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token string">Current target: </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>e<Span class="token punctuation">.</Span>currentTarget<Span class="token punctuation">.</Span>tagName<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
  output<Span class="token punctuation">.</Span>textContent <Span class="token operator">+=</Span> <Span class="token template-string"><Span class="token template-punctuation string">`</Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>logTarget<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">, </Span><Span class="token interpolation"><Span class="token interpolation-punctuation punctuation">${</Span>logCurrentTarget<Span class="token interpolation-punctuation punctuation">}</Span></Span><Span class="token string">\n</Span><Span class="token template-punctuation string">`</Span></Span><Span class="token punctuation">;</Span>
<Span class="token punctuation">}</Span>

<Span class="token keyword">const</Span> container <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"#container"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
<Span class="token keyword">const</Span> button <Span class="token operator">=</Span> document<Span class="token punctuation">.</Span><Span class="token function">querySelector</Span><Span class="token punctuation">(</Span><Span class="token string">"button"</Span><Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>

document<Span class="token punctuation">.</Span>body<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
container<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
button<Span class="token punctuation">.</Span><Span class="token function">addEventListener</Span><Span class="token punctuation">(</Span><Span class="token string">"click"</Span><Span class="token punctuation">,</Span> handleClick<Span class="token punctuation">)</Span><Span class="token punctuation">;</Span>
</CODE></PRE></DIV>
<P>Note that when we click the button, <CODE>target</CODE> is the button element every time, whether the event handler is attached to the button itself, to the <CODE>&lt;div&gt;</CODE>, or to the <CODE>&lt;body&gt;</CODE>. However <CODE>currentTarget</CODE> identifies the element whose event handler we are currently running:</P>
<DIV id=sect15 class=code-example>
<DIV id=sect16 class=example-header></DIV></DIV>
<P>The <CODE>target</CODE> property is commonly used in event delegation, as in our <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#event_delegation">Event delegation</A> example above.</P></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? To verify you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Test_your_skills:_Events">Test your skills: Events</A>.</P></DIV></SECTION><SECTION aria-labelledby=conclusion>
<H2 id=conclusion><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#conclusion">Conclusion</A></H2>
<DIV class=section-content>
<P>You should now know all you need to know about web events at this early stage. As mentioned, events are not really part of the core JavaScript &#8212; they are defined in browser Web APIs. </P>
<P>Also, it is important to understand that the different contexts in which JavaScript is used have different event models &#8212; from Web APIs to other areas such as browser WebExtensions and Node.js (server-side JavaScript). We are not expecting you to understand all of these areas now, but it certainly helps to understand the basics of events as you forge ahead with learning web development. </P>
<DIV id=sect17 class="notecard note">
<P><STRONG>Note:</STRONG> If you get stuck, you can reach out to us in one of our <A href="https://developer.mozilla.org/en-US/docs/MDN/Community/Communication_channels">communication channels</A>.</P></DIV></DIV></SECTION><SECTION aria-labelledby=see_also>
<H2 id=see_also><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling#see_also">See also</A></H2>
<DIV class=section-content>
<UL>
<LI><A class=external href="https://domevents.dev/" target=_blank>domevents.dev</A> &#8212; a very useful interactive playground app that enables learning about the behavior of the DOM Event system through exploration. 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/Events">Event reference</A> 
<LI><A class=external href="https://www.quirksmode.org/js/events_order.html" target=_blank>Event order</A> (discussion of capturing and bubbling) &#8212; an excellently detailed piece by Peter-Paul Koch.</LI></UL>
<UL class=prev-next>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"><Span class=button-wrap>Previous </Span></A>
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"><Span class=button-wrap>Overview: JavaScript building blocks</Span></A> 
<LI><A class="button secondary" href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Image_gallery"><Span class=button-wrap>Next </Span></A></LI></UL></DIV></SECTION></ARTICLE><ASIDE class=article-footer>
<DIV class=article-footer-inner>
<DIV class=svg-container><svg role=none xmlns="http://www.w3.org/2000/svg" viewBox="0 0 162 162" fill="none" width="162" height="162"><mask id=b fill="#fff"><path d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z"></path></mask><path stroke: url(#a)" d="M 97.203 47.04 c 8.113 -7.886 18.004 -13.871 28.906 -17.492 a 78 78 0 0 1 33.969 -3.39 c 11.443 1.39 22.401 5.295 32.024 11.411 s 17.656 14.28 23.476 23.86 c 5.819 9.579 9.269 20.318 10.083 31.385 a 69.85 69.85 0 0 1 -5.387 32.44 c -4.358 10.272 -11.115 19.443 -19.747 26.801 c -8.632 7.359 -18.908 12.709 -30.034 15.637 l -6.17 -21.698 c 7.666 -2.017 14.746 -5.703 20.694 -10.773 c 5.948 -5.071 10.603 -11.389 13.606 -18.467 a 48.14 48.14 0 0 0 3.712 -22.352 c -0.561 -7.625 -2.938 -15.025 -6.948 -21.625 s -9.544 -12.226 -16.175 -16.44 s -14.181 -6.904 -22.065 -7.863 a 53.75 53.75 0 0 0 -23.405 2.336 c -7.513 2.495 -14.327 6.62 -19.918 12.053 Z" mask='url("#b")' stroke="url(#a)" stroke-dasharray="6,6" stroke-width="2" transform="translate(-63.992 -25.587)"></path><ellipse fill="var(--background-tertiary)" transform="matrix(0.71707 -0.697 0.7243 0.6895 0 0)" cx="8.066" cy="111.597" rx="53.677" ry="53.699"></ellipse><g transform="translate(-63.992 -25.587)" clip-path='url("#c")'><path d="m 144.256 137.379 l 32.906 12.434 a 4.41 4.41 0 0 1 2.559 5.667 l -9.326 24.679 a 4.41 4.41 0 0 1 -5.667 2.559 l -8.226 -3.108 l -2.332 6.17 c -0.466 1.233 -0.375 1.883 -1.609 1.417 l -2.253 -0.527 c -0.411 -0.155 -0.95 -0.594 -1.206 -1.161 l -4.734 -10.484 l -12.545 -4.741 a 4.41 4.41 0 0 1 -2.559 -5.667 l 9.325 -24.679 a 4.41 4.41 0 0 1 5.667 -2.559 m 9.961 29.617 l 8.227 3.108 l 3.264 -8.638 l -0.498 -6.768 l -4.113 -1.555 l 0.548 7.258 l -4.319 -1.632 Z m -12.339 -4.663 l 8.226 3.108 l 3.264 -8.637 l -0.498 -6.769 l -4.113 -1.554 l 0.548 7.257 l -4.319 -1.632 Z" fill="#9abff5"></path></g><g transform="translate(-63.992 -25.587)" clip-path='url("#d")'><path d="M 135.35 60.136 L 86.67 41.654 c -3.346 -1.27 -7.124 0.428 -8.394 3.775 L 64.414 81.938 c -1.27 3.347 0.428 7.125 3.774 8.395 l 12.17 4.62 l -3.465 9.128 c -0.693 1.826 -1.432 2.457 0.394 3.15 l 3.014 1.625 c 0.609 0.231 1.637 0.274 2.477 -0.104 l 15.53 -6.983 l 18.56 7.047 c 3.346 1.27 7.124 -0.428 8.395 -3.775 l 13.862 -36.51 c 1.27 -3.346 -0.428 -7.124 -3.775 -8.395 M 95.261 83.207 l -12.17 -4.62 l 4.852 -12.779 l 7.19 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.389 2.426 Z m 18.255 6.93 l -12.17 -4.62 l 4.852 -12.778 l 7.189 -7.017 l 6.085 2.31 l -7.725 7.51 l 6.39 2.426 Z" fill="#81b0f3"></path></g><defs><clipPath id=c><path d="m 198.638 146.586 l -65.056 -24.583 l -24.583 65.057 l 65.056 24.582 Z" fill="#fff"></path></clipPath><clipPath id=d><path d="m 66.438 14.055 l 96.242 36.54 l -36.54 96.243 l -96.243 -36.54 Z" fill="#fff"></path></clipPath><linearGradient id=a gradientUnits="userSpaceOnUse" x1="97.203" y1="47.04" x2="199.995" y2="152.793"><stop stop-color="#086dfc"></stop><stop stop-color="#2c81fa" offset="0.246"></stop><stop stop-color="#5497f8" offset="0.516"></stop><stop stop-color="#80b0f6" offset="0.821"></stop><stop stop-color="#9abff5" offset="1"></stop></linearGradient></defs></svg></DIV>
<H2>Help improve MDN</H2>
<FIELDSET class=feedback><LABEL>Was this page helpful to you?</LABEL> 
<DIV class=button-container></DIV></FIELDSET><A title="This will take you to our contribution guidelines on GitHub." class=contribute href="https://github.com/mdn/content/blob/main/CONTRIBUTING.md" rel="noopener noreferrer" target=_blank>Learn how to contribute</A>. 
<P class=last-modified-date>This page was last modified on <TIME datetime="2024-07-25T21:20:22.000Z">Jul 25, 2024</TIME> by <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Event_bubbling/contributors.txt" rel=nofollow>MDN contributors</A>.</P>
<DIV id=on-github class=on-github><A title="Folder: en-us/learn/javascript/building_blocks/event_bubbling (Opens in a new tab)" href="https://github.com/mdn/content/blob/main/files/en-us/learn/javascript/building_blocks/event_bubbling/index.md?plain=1" rel="noopener noreferrer" target=_blank>View this page on GitHub</A> &#8226; <A title="This will take you to GitHub to file a new issue." href="https://github.com/mdn/content/issues/new?template=page-report.yml&amp;mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FEvent_bubbling&amp;metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fevent_bubbling%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FJavaScript%2FBuilding_blocks%2FEvent_bubbling%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Fjavascript%2Fbuilding_blocks%2Fevent_bubbling%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2Fbc0d0d1ef796435e969f6d65c7e5d3c08f4023aa%0A*+Document+last+modified%3A+2024-07-25T21%3A20%3A22.000Z%0A%0A%3C%2Fdetails%3E" rel="noopener noreferrer" target=_blank>Report a problem with this content</A></DIV></DIV></ASIDE></MAIN>
<DIV></DIV>
<DIV></DIV><FOOTER id=nav-footer class=page-footer>
<DIV class=page-footer-grid>
<DIV class=page-footer-logo-col><A aria-label="MDN homepage" class=mdn-footer-logo href="https://developer.mozilla.org/"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 17" fill="none" width="48" height="17"><path d="M 20.04 16.512 H 15.504 V 10.416 C 15.504 9.488 15.344 8.824 15.024 8.424 C 14.72 8.024 14.264 7.824 13.656 7.824 C 12.92 7.824 12.384 8.064 12.048 8.544 C 11.728 9.024 11.568 9.64 11.568 10.392 V 14.184 H 13.008 V 16.512 H 8.472 V 10.416 C 8.472 9.488 8.312 8.824 7.992 8.424 C 7.688 8.024 7.232 7.824 6.624 7.824 C 5.872 7.824 5.336 8.064 5.016 8.544 C 4.696 9.024 4.536 9.64 4.536 10.392 V 14.184 H 6.6 V 16.512 H 0 V 14.184 H 1.44 V 8.04 H 0.024 V 5.688 H 4.536 V 7.32 C 5.224 6.088 6.32 5.472 7.824 5.472 C 8.608 5.472 9.328 5.664 9.984 6.048 C 10.64 6.432 11.096 7.016 11.352 7.8 C 11.992 6.248 13.168 5.472 14.88 5.472 C 15.856 5.472 16.72 5.776 17.472 6.384 C 18.224 6.992 18.6 7.936 18.6 9.216 V 14.184 H 20.04 V 16.512 Z" fill="currentColor"></path><path d="M 33.6714 16.512 H 29.1354 V 14.496 C 28.8314 15.12 28.3834 15.656 27.7914 16.104 C 27.1994 16.536 26.4154 16.752 25.4394 16.752 C 24.0154 16.752 22.8954 16.264 22.0794 15.288 C 21.2634 14.312 20.8554 12.984 20.8554 11.304 C 20.8554 9.688 21.2554 8.312 22.0554 7.176 C 22.8554 6.04 24.0634 5.472 25.6794 5.472 C 26.5594 5.472 27.2794 5.648 27.8394 6 C 28.3994 6.352 28.8314 6.8 29.1354 7.344 V 2.352 H 26.9754 V 0 H 32.2314 V 14.184 H 33.6714 V 16.512 Z M 29.1354 11.04 V 10.776 C 29.1354 9.88 28.8954 9.184 28.4154 8.688 C 27.9514 8.176 27.3674 7.92 26.6634 7.92 C 25.9754 7.92 25.3674 8.176 24.8394 8.688 C 24.3274 9.2 24.0714 10.008 24.0714 11.112 C 24.0714 12.152 24.3114 12.944 24.7914 13.488 C 25.2714 14.032 25.8394 14.304 26.4954 14.304 C 27.3114 14.304 27.9514 13.96 28.4154 13.272 C 28.8954 12.584 29.1354 11.84 29.1354 11.04 Z" fill="currentColor"></path><path d="M 47.9589 16.512 H 41.9829 V 14.184 H 43.4229 V 10.416 C 43.4229 9.488 43.2629 8.824 42.9429 8.424 C 42.6389 8.024 42.1829 7.824 41.5749 7.824 C 40.8389 7.824 40.2709 8.056 39.8709 8.52 C 39.4709 8.968 39.2629 9.56 39.2469 10.296 V 14.184 H 40.6869 V 16.512 H 34.7109 V 14.184 H 36.1509 V 8.04 H 34.5909 V 5.688 H 39.2469 V 7.344 C 39.9669 6.096 41.1269 5.472 42.7269 5.472 C 43.7509 5.472 44.6389 5.776 45.3909 6.384 C 46.1429 6.992 46.5189 7.936 46.5189 9.216 V 14.184 H 47.9589 V 16.512 Z" fill="currentColor"></path></svg></A>
<P>Your blueprint for a better internet.</P>
<UL class=social-icons>
<LI><A class="icon icon-mastodon" href="https://mozilla.social/@mdn" rel="me noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on Mastodon</Span></A> 
<LI><A class="icon icon-twitter-x" href="https://twitter.com/mozdevnet" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on X (formerly Twitter)</Span></A> 
<LI><A class="icon icon-github-mark-small" href="https://github.com/mdn/" rel="noopener noreferrer" target=_blank><Span class=visually-hidden>MDN on GitHub</Span></A> 
<LI><A class="icon icon-feed" href="https://developer.mozilla.org/en-US/blog/rss.xml" target=_blank><Span class=visually-hidden>MDN Blog RSS Feed</Span></A></LI></UL></DIV>
<DIV class=page-footer-nav-col-1>
<H2 class=footer-nav-heading>MDN</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/about">About</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/blog/">Blog</A> 
<LI class=footer-nav-item><A href="https://www.mozilla.org/en-US/careers/listings/?team=ProdOps" rel="noopener noreferrer" target=_blank>Careers</A> 
<LI class=footer-nav-item><A href="https://developer.mozilla.org/en-US/advertising">Advertise with us</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-2>
<H2 class=footer-nav-heading>Support</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://support.mozilla.org/products/mdn-plus">Product help</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/MDN/Community/Issues">Report an issue</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-3>
<H2 class=footer-nav-heading>Our communities</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/community">MDN Community</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://discourse.mozilla.org/c/mdn/236" rel="noopener noreferrer" target=_blank>MDN Forum</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/discord" rel="noopener noreferrer" target=_blank>MDN Chat</A></LI></UL></DIV>
<DIV class=page-footer-nav-col-4>
<H2 class=footer-nav-heading>Developers</H2>
<UL class=footer-nav-list>
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Web">Web Technologies</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/docs/Learn">Learn Web Development</A> 
<LI class=footer-nav-item><A class=footer-nav-link href="https://developer.mozilla.org/en-US/plus">MDN Plus</A> 
<LI class=footer-nav-item><A href="https://hacks.mozilla.org/" rel="noopener noreferrer" target=_blank>Hacks Blog</A></LI></UL></DIV>
<DIV class=page-footer-moz><A class=footer-moz-logo-link href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank><svg xmlns="http://www.w3.org/2000/svg" fill="none" width="112" height="32"><path d="M 41.753 14.218 c -2.048 0 -3.324 1.522 -3.324 4.157 c 0 2.423 1.119 4.286 3.29 4.286 c 2.082 0 3.447 -1.678 3.447 -4.347 c 0 -2.826 -1.522 -4.096 -3.413 -4.096 Z m 54.89 7.044 c 0 0.901 0.437 1.618 1.645 1.618 c 1.427 0 2.949 -1.024 3.044 -3.352 c -0.649 -0.095 -1.365 -0.185 -2.02 -0.185 c -1.426 -0.005 -2.668 0.397 -2.668 1.92 Z" fill="currentColor"></path><path d="M 0 0 v 32 h 111.908 V 0 H 0 Z m 32.56 25.426 h -5.87 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 1.864 v 3.044 h -5.864 v -7.884 c 0 -2.423 -0.806 -3.352 -2.39 -3.352 c -1.924 0 -2.702 1.365 -2.702 3.324 v 4.868 h 2.669 v 3.044 H 6.642 v -3.044 h 1.863 v -7.918 H 6.642 V 11.42 h 5.864 v 2.11 c 0.839 -1.489 2.3 -2.39 4.252 -2.39 c 2.02 0 3.878 0.963 4.566 3.01 c 0.778 -1.862 2.361 -3.01 4.566 -3.01 c 2.512 0 4.812 1.522 4.812 4.84 v 6.402 h 1.863 v 3.044 h -0.005 Z m 9.036 0.307 c -4.314 0 -7.296 -2.635 -7.296 -7.106 c 0 -4.096 2.484 -7.481 7.514 -7.481 s 7.481 3.38 7.481 7.29 c 0 4.472 -3.228 7.297 -7.699 7.297 Z m 22.578 -0.307 H 51.942 l -0.403 -2.11 l 7.7 -8.846 h -4.376 l -0.621 2.17 l -2.888 -0.313 l 0.498 -4.907 h 12.294 l 0.313 2.11 l -7.767 8.852 h 4.533 l 0.654 -2.172 l 3.167 0.308 l -0.872 4.908 Z m 7.99 0 h -4.191 v -5.03 h 4.19 v 5.03 Z m 0 -8.976 h -4.191 v -5.03 h 4.19 v 5.03 Z m 2.618 8.976 l 6.054 -21.358 h 3.945 l -6.054 21.358 h -3.945 Z m 8.136 0 l 6.048 -21.358 h 3.945 l -6.054 21.358 h -3.939 Z m 21.486 0.307 c -1.863 0 -2.887 -1.085 -3.072 -2.792 c -0.805 1.427 -2.232 2.792 -4.498 2.792 c -2.02 0 -4.314 -1.085 -4.314 -4.006 c 0 -3.447 3.323 -4.253 6.518 -4.253 c 0.778 0 1.584 0.034 2.3 0.124 v -0.465 c 0 -1.427 -0.034 -3.133 -2.3 -3.133 c -0.84 0 -1.488 0.061 -2.143 0.402 l -0.453 1.578 l -3.195 -0.34 l 0.549 -3.224 c 2.45 -0.996 3.692 -1.27 5.992 -1.27 c 3.01 0 5.556 1.55 5.556 4.75 v 6.083 c 0 0.805 0.314 1.085 0.963 1.085 c 0.184 0 0.375 -0.034 0.587 -0.095 l 0.034 2.11 a 5.432 5.432 0 0 1 -2.524 0.654 Z" fill="currentColor"></path></svg></A>
<UL class=footer-moz-list>
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/" rel="noopener noreferrer" target=_blank>Website Privacy Notice</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/privacy/websites/#cookies" rel="noopener noreferrer" target=_blank>Cookies</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/legal/terms/mozilla" rel="noopener noreferrer" target=_blank>Legal</A> 
<LI class=footer-moz-item><A class=footer-moz-link href="https://www.mozilla.org/about/governance/policies/participation/" rel="noopener noreferrer" target=_blank>Community Participation Guidelines</A></LI></UL></DIV>
<DIV class=page-footer-legal>
<P id=license class=page-footer-legal-text>Visit <A href="https://www.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Corporation&#8217;s</A> not-for-profit parent, the <A href="https://foundation.mozilla.org/" rel="noopener noreferrer" target=_blank>Mozilla Foundation</A>.<BR>Portions of this content are &#169;1998&#8211;2024 by individual mozilla.org contributors. Content available under <A href="https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib_copyright_license">a Creative Commons license</A>.</P></DIV></DIV></FOOTER>
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:42 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
