<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Arrays">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Arrays">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Arrays (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Arrays </font></b><br>(11 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="1787.htm"> - Next</a> - <a href="2089.htm">Previous</a> - <a href="339.htm">Parent</a> - <a href="1033.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="339.htm">6. JavaScript fundamentals</a></li>
<ul>
<li>This page: Arrays</li>
<ol>
<li>In the final article of this module, we'll look at arrays — a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then . (see <a href="#2077">below)</a>
<li>Creating arrays. Arrays consist of square brackets and items that are separated by commas. Suppose we want to store a shopping list in an array. Paste the following code into . (see <a href="#2078">below)</a>
<li>Finding the length of an array. You can find out the length of an array (how many items are in it) in exactly the same way as you find out the length (in characters) of a . (see <a href="#2079">below)</a>
<li>Accessing and modifying array items. Items in an array are numbered, starting from zero. This number is called the item's index. So the first item has index 0, the second has . (see <a href="#2080">below)</a>
<li>Finding the index of items in an array. If you don't know the index of an item, you can use the indexOf() method. The indexOf() method takes an item as an argument and will . (see <a href="#2081">below)</a>
<li>Adding items. To add one or more items to the end of an array we can use push(). Note that you need to include one or more items that you want to add to the end of your array . (see <a href="#2082">below)</a>
<li>Removing items. To remove the last item from the array, use pop(). jsconst cities = ["Manchester", "Liverpool"];. cities.pop();. console.log(cities); // [ "Manchester" ]. The . (see <a href="#2083">below)</a>
<li>Accessing every item. Very often you will want to access every item in the array. You can do this using the for.of statement:. jsconst birds = ["Parrot", "Falcon", "Owl"]; . (see <a href="#2084">below)</a>
<li>Converting between strings and arrays. Often you'll be presented with some raw data contained in a big long string, and you might want to separate the useful items out into a . (see <a href="#2085">below)</a>
<li>Active learning: Printing those products. Let's return to the example we described earlier — printing out product names and prices on an invoice, then totaling the prices and . (see <a href="#2086">below)</a>
<li>Active learning: Top 5 searches. A good use for array methods like push() and pop() is when you are maintaining a record of currently active items in a web app. In an animated . (see <a href="#2087">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="2077">Topic #2,077: In the final article of this module, we'll look at arrays &#8212; a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then .</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>In the final article of this module, we'll look at arrays &#8212; a neat way of storing a list of data items under a single variable name. Here we look at why this is useful, then explore how to create an array, retrieve, add, and remove items stored in an array, and more besides. 
<P></P><FIGURE class=table-container>
<TABLE>
<TBODY>
<TR>
<TH scope=row>Prerequisites:</TH>
<TD>A basic understanding of HTML and CSS, an understanding of what JavaScript is. </TD></TR>
<TR>
<TH scope=row>Objective:</TH>
<TD>To understand what arrays are and how to manipulate them in JavaScript.</TD></TR></TBODY></TABLE></FIGURE><SECTION aria-labelledby=what_is_an_array>
<H2 id=what_is_an_array><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#what_is_an_array">What is an array?</A></H2>
<DIV class=section-content>
<P>Arrays are generally described as "list-like objects"; they are basically single objects that contain multiple values stored in a list. Array objects can be stored in variables and dealt with in much the same way as any other type of value, the difference being that we can access each value inside the list individually, and do super useful and efficient things with the list, like loop through it and do the same thing to every value. Maybe we've got a series of product items and their prices stored in an array, and we want to loop through them all and print them out on an invoice, while totaling all the prices together and printing out the total price at the bottom.</P>
<P>If we didn't have arrays, we'd have to store every item in a separate variable, then call the code that does the printing and adding separately for each item. This would be much longer to write out, less efficient, and more error-prone. If we had 10 items to add to the invoice it would already be annoying, but what about 100 items, or 1000? We'll return to this example later on in the article.</P>
<P>As in previous articles, let's learn about the real basics of arrays by entering some examples into <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">browser developer console</A>.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2078">Topic #2,078: Creating arrays. Arrays consist of square brackets and items that are separated by commas. Suppose we want to store a shopping list in an array. Paste the following code into .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>

<P></P></DIV></SECTION><SECTION aria-labelledby=creating_arrays>
<H2 id=creating_arrays><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#creating_arrays">Creating arrays</A></H2>
<DIV class=section-content>
<P>Arrays consist of square brackets and items that are separated by commas.</P>
<OL>
<LI>Suppose we want to store a shopping list in an array. Paste the following code into the console: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="vGpUQvLO1NG9TTl0OGKABsuKncB/K1tz/ZcARKRFImM="><CODE><SPAN class="token keyword">const</SPAN> shopping <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"bread"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"milk"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"cheese"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"hummus"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"noodles"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>shopping<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>In the above example, each item is a string, but in an array we can store various data types &#8212; strings, numbers, objects, and even other arrays. We can also mix data types in a single array &#8212; we do not have to limit ourselves to storing only numbers in one array, and in another only strings. For example: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="Kh8Mr0I/TsuUw8IFrqil7zb5Omna7MhGpt86KShzBOE="><CODE><SPAN class="token keyword">const</SPAN> sequence <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token number">1</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">1</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">5</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">8</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">13</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> random <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"tree"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">795</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">1</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Before proceeding, create a few example arrays.</LI></OL></DIV></SECTION><SECTION aria-labelledby=finding_the_length_of_an_array>
<H2 id=finding_the_length_of_an_array><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#finding_the_length_of_an_array">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2079">Topic #2,079: Finding the length of an array. You can find out the length of an array (how many items are in it) in exactly the same way as you find out the length (in characters) of a .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Finding the length of an array</A></H2>
<DIV class=section-content>
<P>You can find out the length of an array (how many items are in it) in exactly the same way as you find out the length (in characters) of a string &#8212; by using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length"><CODE>length</CODE></A> property. Try the following:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="XRn5M1sNULo/0ySYNmV/Ar9grLMDvJdoRpPqorWCn4A="><CODE><SPAN class="token keyword">const</SPAN> shopping <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"bread"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"milk"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"cheese"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"hummus"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"noodles"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>shopping<SPAN class="token punctuation">.</SPAN>length<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// 5</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=accessing_and_modifying_array_items>
<H2 id=accessing_and_modifying_array_items><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#accessing_and_modifying_array_items">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2080">Topic #2,080: Accessing and modifying array items. Items in an array are numbered, starting from zero. This number is called the item's index. So the first item has index 0, the second has .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Accessing and modifying array items</A></H2>
<DIV class=section-content>
<P>Items in an array are numbered, starting from zero. This number is called the item's <EM>index</EM>. So the first item has index 0, the second has index 1, and so on. You can access individual items in the array using bracket notation and supplying the item's index, in the same way that you <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods#retrieving_a_specific_string_character">accessed the letters in a string</A>.</P>
<OL>
<LI>Enter the following into your console: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="eluX/3PMxhZ30eAomFXfSDfUi4nK9kdMsxke3xPjvi0="><CODE><SPAN class="token keyword">const</SPAN> shopping <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"bread"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"milk"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"cheese"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"hummus"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"noodles"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>shopping<SPAN class="token punctuation">[</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token comment">// returns "bread"</SPAN>
</CODE></PRE></DIV>
<LI>You can also modify an item in an array by giving a single array item a new value. Try this: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="C/RIp/toKYRELtrSt4LmidHV9hyEmO4XFiptWE2/lHo="><CODE><SPAN class="token keyword">const</SPAN> shopping <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"bread"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"milk"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"cheese"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"hummus"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"noodles"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
shopping<SPAN class="token punctuation">[</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">]</SPAN> <SPAN class="token operator">=</SPAN> <SPAN class="token string">"tahini"</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>shopping<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token comment">// shopping will now return [ "tahini", "milk", "cheese", "hummus", "noodles" ]</SPAN>
</CODE></PRE></DIV>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> We've said it before, but just as a reminder &#8212; JavaScript starts indexing arrays at zero!</P></DIV>
<LI>Note that an array inside an array is called a multidimensional array. You can access an item inside an array that is itself inside another array by chaining two sets of square brackets together. For example, to access one of the items inside the array that is the third item inside the <CODE>random</CODE> array (see previous section), we could do something like this: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="zDbYuCPzz2zArpWfyokpe5R0q2XTKrfkwh1hpM9xc+o="><CODE><SPAN class="token keyword">const</SPAN> random <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"tree"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">795</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">1</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
random<SPAN class="token punctuation">[</SPAN><SPAN class="token number">2</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">[</SPAN><SPAN class="token number">2</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Try making some more modifications to your array examples before moving on. Play around a bit, and see what works and what doesn't.</LI></OL></DIV></SECTION><SECTION aria-labelledby=finding_the_index_of_items_in_an_array>
<H2 id=finding_the_index_of_items_in_an_array><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#finding_the_index_of_items_in_an_array">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2081">Topic #2,081: Finding the index of items in an array. If you don't know the index of an item, you can use the indexOf() method. The indexOf() method takes an item as an argument and will .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Finding the index of items in an array</A></H2>
<DIV class=section-content>
<P>If you don't know the index of an item, you can use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"><CODE>indexOf()</CODE></A> method. The <CODE>indexOf()</CODE> method takes an item as an argument and will either return the item's index or <CODE>-1</CODE> if the item is not in the array: </P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="PZrLr5u4ldFyYzqws/CJ4E3gTCJODw+uStLIFKWYE1M="><CODE><SPAN class="token keyword">const</SPAN> birds <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Parrot"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Falcon"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Owl"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>birds<SPAN class="token punctuation">.</SPAN><SPAN class="token function">indexOf</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Owl"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">//  2</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>birds<SPAN class="token punctuation">.</SPAN><SPAN class="token function">indexOf</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Rabbit"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// -1</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=adding_items>
<H2 id=adding_items><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#adding_items">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2082">Topic #2,082: Adding items. To add one or more items to the end of an array we can use push(). Note that you need to include one or more items that you want to add to the end of your array .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Adding items</A></H2>
<DIV class=section-content>
<P>To add one or more items to the end of an array we can use <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"><CODE>push()</CODE></A>. Note that you need to include one or more items that you want to add to the end of your array.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="TGgm3WNzD9iLVKqn0aGQIW6fTnhgJe9RiTS5TcgH2vc="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">push</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Cardiff"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Manchester", "Liverpool", "Cardiff" ]</SPAN>
cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">push</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Bradford"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Brighton"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Manchester", "Liverpool", "Cardiff", "Bradford", "Brighton" ]</SPAN>
</CODE></PRE></DIV>
<P>The new length of the array is returned when the method call completes. If you wanted to store the new array length in a variable, you could do something like this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="mOq4on2bF/LdqnSw413RFqDG069Hp1XPfJgQv3ewHkE="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> newLength <SPAN class="token operator">=</SPAN> cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">push</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Bristol"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Manchester", "Liverpool", "Bristol" ]</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>newLength<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// 3</SPAN>
</CODE></PRE></DIV>
<P>To add an item to the start of the array, use <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift"><CODE>unshift()</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="xi1Hs21PUfmPayCnTsWtWX1MuTP8FFqXsv7kqmAwsTU="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">unshift</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Edinburgh"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Edinburgh", "Manchester", "Liverpool" ]</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=removing_items>
<H2 id=removing_items><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#removing_items">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2083">Topic #2,083: Removing items. To remove the last item from the array, use pop(). jsconst cities = ["Manchester", "Liverpool"];. cities.pop();. console.log(cities); // [ "Manchester" ]. The .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Removing items</A></H2>
<DIV class=section-content>
<P>To remove the last item from the array, use <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"><CODE>pop()</CODE></A>.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="l3ovoTqlr2eUheH1B833wTZhCgXtXnB/eZqVqCXV0Rk="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">pop</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Manchester" ]</SPAN>
</CODE></PRE></DIV>
<P>The <CODE>pop()</CODE> method returns the item that was removed. To save that item in a new variable, you could do this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="j7ncs2/Am5hKAIpjjP6RRMPj74flJM/R9KtVKPtspqI="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> removedCity <SPAN class="token operator">=</SPAN> cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">pop</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>removedCity<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Liverpool"</SPAN>
</CODE></PRE></DIV>
<P>To remove the first item from an array, use <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"><CODE>shift()</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="28t22I0DZoR9RKR56PlXt7P3Jr15cULj5Qd3OnRumBQ="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">shift</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Liverpool" ]</SPAN>
</CODE></PRE></DIV>
<P>If you know the index of an item, you can remove it from the array using <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"><CODE>splice()</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="zjH+14iPSU6O8mD4qsz2iT8XFSVv34LmuzaSM9L6G3E="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Edinburgh"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Carlisle"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> index <SPAN class="token operator">=</SPAN> cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">indexOf</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>index <SPAN class="token operator">!==</SPAN> <SPAN class="token operator">-</SPAN><SPAN class="token number">1</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">splice</SPAN><SPAN class="token punctuation">(</SPAN>index<SPAN class="token punctuation">,</SPAN> <SPAN class="token number">1</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Manchester", "Edinburgh", "Carlisle" ]</SPAN>
</CODE></PRE></DIV>
<P>In this call to <CODE>splice()</CODE>, the first argument says where to start removing items, and the second argument says how many items should be removed. So you can remove more than one item:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="aLONdHWS3TdylQ4yg0gdq/z7uMCNr+z8lCBMvQ4FTHY="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Manchester"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Edinburgh"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Carlisle"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> index <SPAN class="token operator">=</SPAN> cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">indexOf</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>index <SPAN class="token operator">!==</SPAN> <SPAN class="token operator">-</SPAN><SPAN class="token number">1</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">splice</SPAN><SPAN class="token punctuation">(</SPAN>index<SPAN class="token punctuation">,</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>cities<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Manchester", "Carlisle" ]</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=accessing_every_item>
<H2 id=accessing_every_item><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#accessing_every_item">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2084">Topic #2,084: Accessing every item. Very often you will want to access every item in the array. You can do this using the for.of statement:. jsconst birds = ["Parrot", "Falcon", "Owl"]; .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Accessing every item</A></H2>
<DIV class=section-content>
<P>Very often you will want to access every item in the array. You can do this using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"><CODE>for...of</CODE></A> statement:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="ezVTLYiCQsIZ2Ihe6mZqVSUNBngKtcB+g8WCQucvFl0="><CODE><SPAN class="token keyword">const</SPAN> birds <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Parrot"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Falcon"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Owl"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">for</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token keyword">const</SPAN> bird <SPAN class="token keyword">of</SPAN> birds<SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>bird<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Sometimes you will want to do the same thing to each item in an array, leaving you with an array containing the changed items. You can do this using <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><CODE>map()</CODE></A>. The code below takes an array of numbers and doubles each number:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="wlkiLfQwStbjv9+jbznEP/8IyZGmssMlfDok3cVCczc="><CODE><SPAN class="token keyword">function</SPAN> <SPAN class="token function">double</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token parameter">number</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">return</SPAN> number <SPAN class="token operator">*</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
<SPAN class="token keyword">const</SPAN> numbers <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token number">5</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">7</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token number">6</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> doubled <SPAN class="token operator">=</SPAN> numbers<SPAN class="token punctuation">.</SPAN><SPAN class="token function">map</SPAN><SPAN class="token punctuation">(</SPAN>double<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>doubled<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ 10, 4, 14, 12 ]</SPAN>
</CODE></PRE></DIV>
<P>We give a function to the <CODE>map()</CODE>, and <CODE>map()</CODE> calls the function once for each item in the array, passing in the item. It then adds the return value from each function call to a new array, and finally returns the new array.</P>
<P>Sometimes you'll want to create a new array containing only the items in the original array that match some test. You can do that using <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><CODE>filter()</CODE></A>. The code below takes an array of strings and returns an array containing just the strings that are greater than 8 characters long:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="7+enCo+lIIu9AiJrubaXnM0ADPjYG3jAEke7fa6TCVI="><CODE><SPAN class="token keyword">function</SPAN> <SPAN class="token function">isLong</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token parameter">city</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">return</SPAN> city<SPAN class="token punctuation">.</SPAN>length <SPAN class="token operator">&gt;</SPAN> <SPAN class="token number">8</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
<SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"London"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Liverpool"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Totnes"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Edinburgh"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> longer <SPAN class="token operator">=</SPAN> cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">filter</SPAN><SPAN class="token punctuation">(</SPAN>isLong<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>longer<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// [ "Liverpool", "Edinburgh" ]</SPAN>
</CODE></PRE></DIV>
<P>Like <CODE>map()</CODE>, we give a function to the <CODE>filter()</CODE> method, and <CODE>filter()</CODE> calls this function for every item in the array, passing in the item. If the function returns <CODE>true</CODE>, then the item is added to a new array. Finally it returns the new array.</P></DIV></SECTION><SECTION aria-labelledby=converting_between_strings_and_arrays>
<H2 id=converting_between_strings_and_arrays><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#converting_between_strings_and_arrays">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2085">Topic #2,085: Converting between strings and arrays. Often you'll be presented with some raw data contained in a big long string, and you might want to separate the useful items out into a .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Converting between strings and arrays</A></H2>
<DIV class=section-content>
<P>Often you'll be presented with some raw data contained in a big long string, and you might want to separate the useful items out into a more useful form and then do things to them, like display them in a data table. To do this, we can use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"><CODE>split()</CODE></A> method. In its simplest form, this takes a single parameter, the character you want to separate the string at, and returns the substrings between the separator as items in an array.</P>
<DIV id=sect2 class="notecard note">
<P><STRONG>Note:</STRONG> Okay, this is technically a string method, not an array method, but we've put it in with arrays as it goes well here.</P></DIV>
<OL>
<LI>Let's play with this, to see how it works. First, create a string in your console: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="Xdeds0elYIebGqiDL6Rkz+GOewAJ5fhfo7bo4QoP+4k="><CODE><SPAN class="token keyword">const</SPAN> data <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Manchester,London,Liverpool,Birmingham,Leeds,Carlisle"</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Now let's split it at each comma: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="kMXwe/DaUEYvInmHyuCq09dONqSM33k67Su27Bc4JAU="><CODE><SPAN class="token keyword">const</SPAN> cities <SPAN class="token operator">=</SPAN> data<SPAN class="token punctuation">.</SPAN><SPAN class="token function">split</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">","</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
cities<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Finally, try finding the length of your new array, and retrieving some items from it: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="sQNIwHfpyoOBI6eH2MMJcfsNWvBmwp1LDiw/8+hhBKk="><CODE>cities<SPAN class="token punctuation">.</SPAN>length<SPAN class="token punctuation">;</SPAN>
cities<SPAN class="token punctuation">[</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// the first item in the array</SPAN>
cities<SPAN class="token punctuation">[</SPAN><SPAN class="token number">1</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// the second item in the array</SPAN>
cities<SPAN class="token punctuation">[</SPAN>cities<SPAN class="token punctuation">.</SPAN>length <SPAN class="token operator">-</SPAN> <SPAN class="token number">1</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// the last item in the array</SPAN>
</CODE></PRE></DIV>
<LI>You can also go the opposite way using the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join"><CODE>join()</CODE></A> method. Try the following: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="uFwxEOAcbQ5k6fskRJSAnmfKq830ogaxZtech+3BmUY="><CODE><SPAN class="token keyword">const</SPAN> commaSeparated <SPAN class="token operator">=</SPAN> cities<SPAN class="token punctuation">.</SPAN><SPAN class="token function">join</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">","</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
commaSeparated<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Another way of converting an array to a string is to use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"><CODE>toString()</CODE></A> method. <CODE>toString()</CODE> is arguably simpler than <CODE>join()</CODE> as it doesn't take a parameter, but more limiting. With <CODE>join()</CODE> you can specify different separators, whereas <CODE>toString()</CODE> always uses a comma. (Try running Step 4 with a different character than a comma.) 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="rUyhiYkMMY1ovc1aLio/uKdbVOp/ctwmL3sEUQg2cyA="><CODE><SPAN class="token keyword">const</SPAN> dogNames <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">[</SPAN><SPAN class="token string">"Rocket"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Flash"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Bella"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token string">"Slugger"</SPAN><SPAN class="token punctuation">]</SPAN><SPAN class="token punctuation">;</SPAN>
dogNames<SPAN class="token punctuation">.</SPAN><SPAN class="token function">toString</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// Rocket,Flash,Bella,Slugger</SPAN>
</CODE></PRE></DIV></LI></OL></DIV></SECTION><SECTION aria-labelledby=active_learning_printing_those_products>
<H2 id=active_learning_printing_those_products><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#active_learning_printing_those_products">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2086">Topic #2,086: Active learning: Printing those products. Let's return to the example we described earlier &#8212; printing out product names and prices on an invoice, then totaling the prices and .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Active learning: Printing those products</A></H2>
<DIV class=section-content>
<P>Let's return to the example we described earlier &#8212; printing out product names and prices on an invoice, then totaling the prices and printing them at the bottom. In the editable example below there are comments containing numbers &#8212; each of these marks a place where you have to add something to the code. They are as follows:</P>
<OL>
<LI>Below the <CODE>// number 1</CODE> comment are a number of strings, each one containing a product name and price separated by a colon. We'd like you to turn this into an array and store it in an array called <CODE>products</CODE>. 
<LI>Below the <CODE>// number 2</CODE> comment, start a <CODE>for...of()</CODE> loop to go through every item in the <CODE>products</CODE> array. 
<LI>Below the <CODE>// number 3</CODE> comment we want you to write a line of code that splits the current array item (<CODE>name:price</CODE>) into two separate items, one containing just the name and one containing just the price. If you are not sure how to do this, consult the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods">Useful string methods</A> article for some help, or even better, look at the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#converting_between_strings_and_arrays">Converting between strings and arrays</A> section of this article. 
<LI>As part of the above line of code, you'll also want to convert the price from a string to a number. If you can't remember how to do this, check out the <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#numbers_vs._strings">first strings article</A>. 
<LI>There is a variable called <CODE>total</CODE> that is created and given a value of 0 at the top of the code. Inside the loop (below <CODE>// number 4</CODE>) we want you to add a line that adds the current item price to that total in each iteration of the loop, so that at the end of the code the correct total is printed onto the invoice. You might need an <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#assignment_operators">assignment operator</A> to do this. 
<LI>We want you to change the line just below <CODE>// number 5</CODE> so that the <CODE>itemText</CODE> variable is made equal to "current item name &#8212; $current item price", for example "Shoes &#8212; $23.99" in each case, so the correct information for each item is printed on the invoice. This is just simple string concatenation, which should be familiar to you. 
<LI>Finally, below the <CODE>// number 6</CODE> comment, you'll need to add a <CODE>}</CODE> to mark the end of the <CODE>for...of()</CODE> loop.</LI></OL>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="OrrpkcQte6/nMSm8ICE+ihgY6dFgwXC3+rC1t91uNyM="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Live output<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>div</SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>output<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token special-attr"><SPAN class="token attr-name">style</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN><SPAN class="token value css language-css"><SPAN class="token property">min-height</SPAN><SPAN class="token punctuation">:</SPAN> 150px<SPAN class="token punctuation">;</SPAN></SPAN><SPAN class="token punctuation">"</SPAN></SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>ul</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>ul</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>div</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Editable code<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>a11y-label<SPAN class="token punctuation">"</SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>textarea</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>code<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>playable-code<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token special-attr"><SPAN class="token attr-name">style</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN><SPAN class="token value css language-css"><SPAN class="token property">height</SPAN><SPAN class="token punctuation">:</SPAN> 410px<SPAN class="token punctuation">;</SPAN><SPAN class="token property">width</SPAN><SPAN class="token punctuation">:</SPAN> 95%</SPAN><SPAN class="token punctuation">"</SPAN></SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
const list = document.querySelector('.output ul');
const totalBox = document.querySelector('.output p');
let total = 0;
list.textContent = "";
totalBox.textContent = "";
// number 1
                'Underpants:6.99'
                'Socks:5.99'
                'T-shirt:14.99'
                'Trousers:31.99'
                'Shoes:23.99';

// number 2

  // number 3

  // number 4

  // number 5
  let itemText = 0;

  const listItem = document.createElement('li');
  listItem.textContent = itemText;
  list.appendChild(listItem);

// number 6

totalBox.textContent = 'Total: $' + total.toFixed(2);
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>textarea</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>div</SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>playable-buttons<SPAN class="token punctuation">"</SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>input</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>reset<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">type</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>button<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">value</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>Reset<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token punctuation">/&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>input</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>solution<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">type</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>button<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">value</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>Show solution<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token punctuation">/&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>div</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="/zDvZy5+Daz3tzieSl4Pye/x5eRV8TSr/7ufzSG1TxM="><CODE><SPAN class="token keyword">const</SPAN> textarea <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">getElementById</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"code"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> reset <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">getElementById</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"reset"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> solution <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">getElementById</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"solution"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> code <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> userEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token function">eval</SPAN><SPAN class="token punctuation">(</SPAN>textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

reset<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> code<SPAN class="token punctuation">;</SPAN>
  userEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
  solutionEntry <SPAN class="token operator">=</SPAN> jsSolution<SPAN class="token punctuation">;</SPAN>
  solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

solution<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> solutionEntry<SPAN class="token punctuation">;</SPAN>
    solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Hide solution"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN> <SPAN class="token keyword">else</SPAN> <SPAN class="token punctuation">{</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> userEntry<SPAN class="token punctuation">;</SPAN>
    solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
  <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">const</SPAN> jsSolution <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">const list = document.querySelector('.output ul');
const totalBox = document.querySelector('.output p');
let total = 0;
list.textContent = "";
totalBox.textContent = "";

const products = [
  'Underpants:6.99',
  'Socks:5.99',
  'T-shirt:14.99',
  'Trousers:31.99',
  'Shoes:23.99',
];

for (const product of products) {
  const subArray = product.split(':');
  const name = subArray[0];
  const price = Number(subArray[1]);
  total += price;
  const itemText = \`\${name} &#8212; $\${price}\`;

  const listItem = document.createElement('li');
  listItem.textContent = itemText;
  list.appendChild(listItem);
}

totalBox.textContent = \`Total: $\${total.toFixed(2)}\`;</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> solutionEntry <SPAN class="token operator">=</SPAN> jsSolution<SPAN class="token punctuation">;</SPAN>

textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"input"</SPAN><SPAN class="token punctuation">,</SPAN> updateCode<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
window<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"load"</SPAN><SPAN class="token punctuation">,</SPAN> updateCode<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token comment">// stop tab key tabbing out of textarea and</SPAN>
<SPAN class="token comment">// make it write a tab at the caret position instead</SPAN>

textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function-variable function">onkeydown</SPAN> <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token parameter">event</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>event<SPAN class="token punctuation">.</SPAN>code <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Tab"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    event<SPAN class="token punctuation">.</SPAN><SPAN class="token function">preventDefault</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
    <SPAN class="token function">insertAtCaret</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"\t"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>event<SPAN class="token punctuation">.</SPAN>code <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Escape"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function">blur</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">insertAtCaret</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token parameter">text</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">const</SPAN> scrollPos <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>scrollTop<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">let</SPAN> caretPos <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>selectionStart<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">const</SPAN> front <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">.</SPAN><SPAN class="token function">substring</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">,</SPAN> caretPos<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">const</SPAN> back <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">.</SPAN><SPAN class="token function">substring</SPAN><SPAN class="token punctuation">(</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>selectionEnd<SPAN class="token punctuation">,</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">.</SPAN>length<SPAN class="token punctuation">,</SPAN>
  <SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

  textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> front <SPAN class="token operator">+</SPAN> text <SPAN class="token operator">+</SPAN> back<SPAN class="token punctuation">;</SPAN>
  caretPos <SPAN class="token operator">+=</SPAN> text<SPAN class="token punctuation">.</SPAN>length<SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>selectionStart <SPAN class="token operator">=</SPAN> caretPos<SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>selectionEnd <SPAN class="token operator">=</SPAN> caretPos<SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function">focus</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>scrollTop <SPAN class="token operator">=</SPAN> scrollPos<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token comment">// Update the saved userCode every time the user updates the text area code</SPAN>

textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function-variable function">onkeyup</SPAN> <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token comment">// We only want to save the state when the user code is being shown,</SPAN>
  <SPAN class="token comment">// not the solution, so that solution is not saved over the user code</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    userEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN> <SPAN class="token keyword">else</SPAN> <SPAN class="token punctuation">{</SPAN>
    solutionEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
  <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="/FL4MLYypMZl5PG45Kt1EO8CioYgw3mlx2EoHNIx92I="><CODE><SPAN class="token selector">html</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">font-family</SPAN><SPAN class="token punctuation">:</SPAN> sans-serif<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">h2</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">font-size</SPAN><SPAN class="token punctuation">:</SPAN> 16px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">.a11y-label</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">margin</SPAN><SPAN class="token punctuation">:</SPAN> 0<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">text-align</SPAN><SPAN class="token punctuation">:</SPAN> right<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">font-size</SPAN><SPAN class="token punctuation">:</SPAN> 0.7rem<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">width</SPAN><SPAN class="token punctuation">:</SPAN> 98%<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">body</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">margin</SPAN><SPAN class="token punctuation">:</SPAN> 10px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">background-color</SPAN><SPAN class="token punctuation">:</SPAN> #f5f9fa<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<DIV id=sect3 class=code-example>
<DIV id=sect4 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_top_5_searches>
<H2 id=active_learning_top_5_searches><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#active_learning_top_5_searches">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2087">Topic #2,087: Active learning: Top 5 searches. A good use for array methods like push() and pop() is when you are maintaining a record of currently active items in a web app. In an animated .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Arrays : </font></strong>
Active learning: Top 5 searches</A></H2>
<DIV class=section-content>
<P>A good use for array methods like <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push"><CODE>push()</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"><CODE>pop()</CODE></A> is when you are maintaining a record of currently active items in a web app. In an animated scene for example, you might have an array of objects representing the background graphics currently displayed, and you might only want 50 displayed at once, for performance or clutter reasons. As new objects are created and added to the array, older ones can be deleted from the array to maintain the desired number.</P>
<P>In this example we're going to show a much simpler use &#8212; here we're giving you a fake search site, with a search box. The idea is that when terms are entered in the search box, the top 5 previous search terms are displayed in the list. When the number of terms goes over 5, the last term starts being deleted each time a new term is added to the top, so the 5 previous terms are always displayed.</P>
<DIV id=sect5 class="notecard note">
<P><STRONG>Note:</STRONG> In a real search app, you'd probably be able to click the previous search terms to return to previous searches, and it would display actual search results! We are just keeping it simple for now.</P></DIV>
<P>To complete the app, we need you to:</P>
<OL>
<LI>Add a line below the <CODE>// number 1</CODE> comment that adds the current value entered into the search input to the start of the array. This can be retrieved using <CODE>searchInput.value</CODE>. 
<LI>Add a line below the <CODE>// number 2</CODE> comment that removes the value currently at the end of the array.</LI></OL>
<DIV class=code-example><PRE class="brush: html hidden notranslate" data-signature="BUkxYVCJRbgQ7XJinT38BOcTMjWaTe5gq1lqEBtPKKg="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Live output<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>div</SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>output<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token special-attr"><SPAN class="token attr-name">style</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN><SPAN class="token value css language-css"><SPAN class="token property">min-height</SPAN><SPAN class="token punctuation">:</SPAN> 150px<SPAN class="token punctuation">;</SPAN></SPAN><SPAN class="token punctuation">"</SPAN></SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>input</SPAN> <SPAN class="token attr-name">type</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>text<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token punctuation">/&gt;</SPAN></SPAN><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>button</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Search<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>button</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>ul</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>ul</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>div</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Editable code<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>h2</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>a11y-label<SPAN class="token punctuation">"</SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  Press Esc to move focus away from the code area (Tab inserts a tab character).
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>textarea</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>code<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>playable-code<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token special-attr"><SPAN class="token attr-name">style</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN><SPAN class="token value css language-css"><SPAN class="token property">height</SPAN><SPAN class="token punctuation">:</SPAN> 370px<SPAN class="token punctuation">;</SPAN> <SPAN class="token property">width</SPAN><SPAN class="token punctuation">:</SPAN> 95%</SPAN><SPAN class="token punctuation">"</SPAN></SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
const list = document.querySelector('.output ul');
const searchInput = document.querySelector('.output input');
const searchBtn = document.querySelector('.output button');

list.textContent = "";

const myHistory = [];
const MAX_HISTORY = 5;

searchBtn.onclick = () =&gt; {
  // we will only allow a term to be entered if the search input isn't empty
  if (searchInput.value !== '') {
    // number 1

    // empty the list so that we don't display duplicate entries
    // the display is regenerated every time a search term is entered.
    list.textContent = "";

    // loop through the array, and display all the search terms in the list
    for (const itemText of myHistory) {
      const listItem = document.createElement('li');
      listItem.textContent = itemText;
      list.appendChild(listItem);
    }

    // If the array length is 5 or more, remove the oldest search term
    if (myHistory.length &gt;= MAX_HISTORY) {
      // number 2
    }

    // empty the search input and focus it, ready for the next term to be entered
    searchInput.value = '';
    searchInput.focus();
  }
}
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>textarea</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>

<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>div</SPAN> <SPAN class="token attr-name">class</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>playable-buttons<SPAN class="token punctuation">"</SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>input</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>reset<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">type</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>button<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">value</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>Reset<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token punctuation">/&gt;</SPAN></SPAN>
  <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>input</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>solution<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">type</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>button<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token attr-name">value</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>Show solution<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token punctuation">/&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>div</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: css hidden notranslate" data-signature="rE54QQGFRG3dI9noBugrfixo4OklLJ9Li8khAbWsxOo="><CODE><SPAN class="token selector">html</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">font-family</SPAN><SPAN class="token punctuation">:</SPAN> sans-serif<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">h2</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">font-size</SPAN><SPAN class="token punctuation">:</SPAN> 16px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">.a11y-label</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">margin</SPAN><SPAN class="token punctuation">:</SPAN> 0<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">text-align</SPAN><SPAN class="token punctuation">:</SPAN> right<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">font-size</SPAN><SPAN class="token punctuation">:</SPAN> 0.7rem<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">width</SPAN><SPAN class="token punctuation">:</SPAN> 98%<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">body</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">margin</SPAN><SPAN class="token punctuation">:</SPAN> 10px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">background</SPAN><SPAN class="token punctuation">:</SPAN> #f5f9fa<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<DIV class=code-example><PRE class="brush: js hidden notranslate" data-signature="yDq1k1NeM/ARFocVL2ahq/FQkPEBjkWSHP/DcUCKO2o="><CODE><SPAN class="token keyword">const</SPAN> textarea <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">getElementById</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"code"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> reset <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">getElementById</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"reset"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> solution <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">getElementById</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"solution"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> code <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> userEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token function">eval</SPAN><SPAN class="token punctuation">(</SPAN>textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

reset<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> code<SPAN class="token punctuation">;</SPAN>
  userEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
  solutionEntry <SPAN class="token operator">=</SPAN> jsSolution<SPAN class="token punctuation">;</SPAN>
  solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

solution<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> solutionEntry<SPAN class="token punctuation">;</SPAN>
    solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Hide solution"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN> <SPAN class="token keyword">else</SPAN> <SPAN class="token punctuation">{</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> userEntry<SPAN class="token punctuation">;</SPAN>
    solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
  <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">const</SPAN> jsSolution <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">const list = document.querySelector('.output ul');
const searchInput = document.querySelector('.output input');
const searchBtn = document.querySelector('.output button');

list.textContent = "";

const myHistory = [];
const MAX_HISTORY = 5;

searchBtn.onclick = () =&gt; {
  // we will only allow a term to be entered if the search input isn't empty
  if (searchInput.value !== '') {
    myHistory.unshift(searchInput.value);

    // empty the list so that we don't display duplicate entries
    // the display is regenerated every time a search term is entered.
    list.textContent = "";

    // loop through the array, and display all the search terms in the list
    for (const itemText of myHistory) {
      const listItem = document.createElement('li');
      listItem.textContent = itemText;
      list.appendChild(listItem);
    }

    // If the array length is 5 or more, remove the oldest search term
    if (myHistory.length &gt;= MAX_HISTORY) {
      myHistory.pop();
    }

    // empty the search input and focus it, ready for the next term to be entered
    searchInput.value = '';
    searchInput.focus();
  }
}</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> solutionEntry <SPAN class="token operator">=</SPAN> jsSolution<SPAN class="token punctuation">;</SPAN>

textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"input"</SPAN><SPAN class="token punctuation">,</SPAN> updateCode<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
window<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"load"</SPAN><SPAN class="token punctuation">,</SPAN> updateCode<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token comment">// stop tab key tabbing out of textarea and</SPAN>
<SPAN class="token comment">// make it write a tab at the caret position instead</SPAN>

textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function-variable function">onkeydown</SPAN> <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token parameter">event</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>event<SPAN class="token punctuation">.</SPAN>code <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Tab"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    event<SPAN class="token punctuation">.</SPAN><SPAN class="token function">preventDefault</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
    <SPAN class="token function">insertAtCaret</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"\t"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>event<SPAN class="token punctuation">.</SPAN>code <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Escape"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function">blur</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">insertAtCaret</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token parameter">text</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">const</SPAN> scrollPos <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>scrollTop<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">let</SPAN> caretPos <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>selectionStart<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">const</SPAN> front <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">.</SPAN><SPAN class="token function">substring</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token number">0</SPAN><SPAN class="token punctuation">,</SPAN> caretPos<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">const</SPAN> back <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">.</SPAN><SPAN class="token function">substring</SPAN><SPAN class="token punctuation">(</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>selectionEnd<SPAN class="token punctuation">,</SPAN>
    textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">.</SPAN>length<SPAN class="token punctuation">,</SPAN>
  <SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

  textarea<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">=</SPAN> front <SPAN class="token operator">+</SPAN> text <SPAN class="token operator">+</SPAN> back<SPAN class="token punctuation">;</SPAN>
  caretPos <SPAN class="token operator">+=</SPAN> text<SPAN class="token punctuation">.</SPAN>length<SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>selectionStart <SPAN class="token operator">=</SPAN> caretPos<SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>selectionEnd <SPAN class="token operator">=</SPAN> caretPos<SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function">focus</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  textarea<SPAN class="token punctuation">.</SPAN>scrollTop <SPAN class="token operator">=</SPAN> scrollPos<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token comment">// Update the saved userCode every time the user updates the text area code</SPAN>

textarea<SPAN class="token punctuation">.</SPAN><SPAN class="token function-variable function">onkeyup</SPAN> <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">=&gt;</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token comment">// We only want to save the state when the user code is being shown,</SPAN>
  <SPAN class="token comment">// not the solution, so that solution is not saved over the user code</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>solution<SPAN class="token punctuation">.</SPAN>value <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Show solution"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    userEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN> <SPAN class="token keyword">else</SPAN> <SPAN class="token punctuation">{</SPAN>
    solutionEntry <SPAN class="token operator">=</SPAN> textarea<SPAN class="token punctuation">.</SPAN>value<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
  <SPAN class="token function">updateCode</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<DIV id=sect6 class=code-example>
<DIV id=sect7 class=example-header></DIV></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Arrays#test_your_skills!">
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:42 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
