<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Storing the information you need — Variables">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Storing the information you need — Variables">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Storing the information you need — Variables (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Storing the information you need — Variables </font></b><br>(50 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="1415.htm"> - Next</a> - <a href="1031.htm">Previous</a> - <a href="339.htm">Parent</a> - <a href="1032.htm">Next sibling</a> - <a href="1031.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="339.htm">6. JavaScript fundamentals</a></li>
<ul>
<li>This page: Storing the information you need — Variables</li>
<ol>
<li><a href="1415.htm">What is a variable?</a> (3 elements)
<li><a href="1416.htm">Declaring a variable</a> (4 elements)
<li><a href="1417.htm">Initializing a variable</a> (4 elements)
<li>A note about var (see <a href="#1418">below)</a>
<li><a href="1419.htm">Updating a variable</a> (9 elements)
<li><a href="1420.htm">Variable types</a> (5 elements)
<li><a href="1421.htm">Dynamic typing</a> (10 elements)
<li><a href="1422.htm">Constants in JavaScript</a> (4 elements)
<li><a href="1423.htm">When to use const and when to use let</a> (2 elements)
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="1418">Topic #1,418: A note about var</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<STRONG><FONT color=blue>Storing the information you need &#8212; Variables : </FONT></STRONG><SPAN class=headers>Title:</SPAN></B><SPAN class=RefText> A note about var</SPAN></FONT></FONT></A> 
<H2></H2>
<DIV class=section-content>
<P>You'll probably also see a different way to declare variables, using the <CODE>var</CODE> keyword:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="Pz1fC2yAyGxLGGmPwGJ4ySyGYF6POagJ3j+dF09D5Zc="><CODE><SPAN class="token keyword">var</SPAN> myName<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">var</SPAN> myAge<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Back when JavaScript was first created, this was the only way to declare variables. The design of <CODE>var</CODE> is confusing and error-prone. So <CODE>let</CODE> was created in modern versions of JavaScript, a new keyword for creating variables that works somewhat differently to <CODE>var</CODE>, fixing its issues in the process.</P>
<P>A couple of simple differences are explained below. We won't go into all the differences now, but you'll start to discover them as you learn more about JavaScript (if you really want to read about them now, feel free to check out our <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"><FONT color=#0066cc>let reference page</FONT></A>).</P>
<P>For a start, if you write a multiline JavaScript program that declares and initializes a variable, you can actually declare a variable with <CODE>var</CODE> after you initialize it and it will still work. For example:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="BrYERtSLimH9C7V+LrU0Ua8PwMns29rpCSVFTrky0MY="><CODE>myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">logName</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>myName<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token function">logName</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">var</SPAN> myName<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<DIV id=sect8 class="notecard note">
<P><STRONG>Note:</STRONG> This won't work when typing individual lines into a JavaScript console, just when running multiple lines of JavaScript in a web document.</P></DIV>
<P>This works because of <STRONG>hoisting</STRONG> &#8212; read <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#hoisting"><FONT color=#0066cc>var hoisting</FONT></A> for more detail on the subject.</P>
<P>Hoisting no longer works with <CODE>let</CODE>. If we changed <CODE>var</CODE> to <CODE>let</CODE> in the above example, it would fail with an error. This is a good thing &#8212; declaring a variable after you initialize it results in confusing, harder to understand code.</P>
<P>Secondly, when you use <CODE>var</CODE>, you can declare the same variable as many times as you like, but with <CODE>let</CODE> you can't. The following would work:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="qfsipTFZFuqRhX6fxC9LuFpjG+spwvAKghO+jtfWzjQ="><CODE><SPAN class="token keyword">var</SPAN> myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">var</SPAN> myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Bob"</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>But the following would throw an error on the second line:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js example-bad notranslate" data-signature="o5/H2NdftwOdjA1z18nT4oN4GP//URVSNXcoeULzQVw="><CODE><SPAN class="token keyword">let</SPAN> myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">let</SPAN> myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Bob"</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>You'd have to do this instead:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="kRLS1oJWdIMpY0MysNnx7CXmUmr1lzAPFX8Zx/Uf1Ok="><CODE><SPAN class="token keyword">let</SPAN> myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>
myName <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Bob"</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Again, this is a sensible language decision. There is no reason to redeclare variables &#8212; it just makes things more confusing.</P>
<P>For these reasons and more, we recommend that you use <CODE>let</CODE> in your code, rather than <CODE>var</CODE>. Unless you are explicitly writing support for ancient browsers, there is no longer any reason to use <CODE>var</CODE> as all modern browsers have supported <CODE>let</CODE> since 2015.</P>
<DIV id=sect9 class="notecard note">
<P><STRONG>Note:</STRONG> If you are trying this code in your browser's console, prefer to copy &amp; paste each of the code blocks here as a whole. There's a <A class=external href="https://docs.google.com/document/d/1NP_FnHr4WCZRp7exgUklvNiXrH3nujcfwvp2pzMQ8-0/edit#heading=h.7y5hynxk52e9" target=_blank><FONT color=#0066cc>feature in Chrome's console</FONT></A> where variable re-declarations with <CODE>let</CODE> and <CODE>const</CODE> are allowed:</P><PRE class="brush: plain notranslate">&gt; let myName = "Chris";
  let myName = "Bob";
// As one input: SyntaxError: Identifier 'myName' has already been declared

&gt; let myName = "Chris";
&gt; let myName = "Bob";
// As two inputs: both succeed
</PRE></DIV></DIV></SECTION><SECTION aria-labelledby=updating_a_variable>
<H2 id=updating_a_variable><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables#updating_a_variable"><FONT color=#0066cc>
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a href="1422.htm">Topic #1,422: Constants in JavaScript</a></b> <font size="2">(4 elements)</font> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
Note that although a constant in JavaScript must always name the same value, you can change the content of the value that it names. This isn't a useful distinction for simple types like numbers or booleans, but consider an object:
<P></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="KGx4NOUIiALMkL4gwN0t432esFYw2JXHeDp0v+8CXuw="><CODE><SPAN class="token keyword">const</SPAN> bird <SPAN class="token operator">=</SPAN> <SPAN class="token punctuation">{</SPAN> <SPAN class="token literal-property property">species</SPAN><SPAN class="token operator">:</SPAN> <SPAN class="token string">"Kestrel"</SPAN> <SPAN class="token punctuation">}</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>bird<SPAN class="token punctuation">.</SPAN>species<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Kestrel"</SPAN>
</CODE></PRE></DIV>
<P>You can update, add, or remove properties of an object declared using <CODE>const</CODE>, because even though the content of the object has changed, the constant is still pointing to the same object:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="jdWJL3w9+fTZIyiQ0UVGr7Kf/5Mv3RyMAtC85h1PAJk="><CODE>bird<SPAN class="token punctuation">.</SPAN>species <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Striated Caracara"</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>bird<SPAN class="token punctuation">.</SPAN>species<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Striated Caracara"</SPAN>
</CODE></PRE></DIV>
<DIV></DIV></SECTION><SECTION aria-labelledby=when_to_use_const_and_when_to_use_let>
<H2 id=when_to_use_const_and_when_to_use_let><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables#when_to_use_const_and_when_to_use_let"><FONT color=#0066cc>
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:42 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
