<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Handling text — strings in JavaScript">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Handling text — strings in JavaScript">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Handling text — strings in JavaScript (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Handling text — strings in JavaScript </font></b><br>(7 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="2089.htm"> - Next</a> - <a href="1032.htm">Previous</a> - <a href="339.htm">Parent</a> - <a href="1034.htm">Next sibling</a> - <a href="1032.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="339.htm">6. JavaScript fundamentals</a></li>
<ul>
<li>This page: Handling text — strings in JavaScript</li>
<ol>
<li><a href="2089.htm">Declaring strings</a> (2 elements)
<li>Embedding JavaScript (see <a href="#2090">below)</a>
<li>Multiline strings (see <a href="#2091">below)</a>
<li>Including quotes in strings (see <a href="#2092">below)</a>
<li>Numbers vs. strings (see <a href="#2093">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="2090">Topic #2,090: Embedding JavaScript</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
</A>
<H2></H2>
<DIV class=section-content>
<P>Inside a template literal, you can wrap JavaScript variables or expressions inside <CODE>${ }</CODE>, and the result will be included in the string:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="i66gRRxcon2qsrV4fgnKMAMkXQjeufBkI5xTW4hYQyk="><CODE><SPAN class="token keyword">const</SPAN> name <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> greeting <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">Hello, </SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>name<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>greeting<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Hello, Chris"</SPAN>
</CODE></PRE></DIV>
<P>You can use the same technique to join together two variables:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="ozrjzgqP9rvYrFWBXifQHDd0f9DYkKgAbXYEbvFftNo="><CODE><SPAN class="token keyword">const</SPAN> one <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Hello, "</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> two <SPAN class="token operator">=</SPAN> <SPAN class="token string">"how are you?"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> joined <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>one<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>two<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>joined<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Hello, how are you?"</SPAN>
</CODE></PRE></DIV>
<P>Joining strings together like this is called <EM>concatenation</EM>.</P></DIV></SECTION><SECTION aria-labelledby=concatenation_in_context>
<H3 id=concatenation_in_context><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#concatenation_in_context">Concatenation in context</A></H3>
<DIV class=section-content>
<P>Let's have a look at concatenation being used in action:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>html</SPAN></DIV><PRE class="brush: html notranslate" data-signature="/YTFRkJj8/j6bYnqPmbmHvP0m9AOHsQirUBg0lds/10="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>button</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Press me<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>button</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>div</SPAN> <SPAN class="token attr-name">id</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>greeting<SPAN class="token punctuation">"</SPAN></SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>div</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="KXlvFJisUB82B4Md0by+V1+JB2B76Ktj+PnWLw8Pfhk="><CODE><SPAN class="token keyword">const</SPAN> button <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">querySelector</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"button"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">greet</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">const</SPAN> name <SPAN class="token operator">=</SPAN> <SPAN class="token function">prompt</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"What is your name?"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token keyword">const</SPAN> greeting <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">querySelector</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"#greeting"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  greeting<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">Hello </SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>name<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token string">, nice to see you!</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

button<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> greet<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<DIV id=sect1 class=code-example>
<DIV id=sect2 class=example-header></DIV></DIV>
<P>Here, we are using the <A title=window.prompt() href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"><CODE>window.prompt()</CODE></A> function, which prompts the user to answer a question via a popup dialog box and then stores the text they enter inside a given variable &#8212; in this case <CODE>name</CODE>. We then display a string that inserts the name into a generic greeting message.</P></DIV></SECTION><SECTION aria-labelledby=concatenation_using>
<H3 id=concatenation_using><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#concatenation_using">Concatenation using "+"</A></H3>
<DIV class=section-content>
<P>You can use <CODE>${}</CODE> only with template literals, not normal strings. You can concatenate normal strings using the <CODE>+</CODE> operator:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="UWpifwfpO1DZr1xcsEOTZFn1nh2M83OZyR76o7CkHzw="><CODE><SPAN class="token keyword">const</SPAN> greeting <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Hello"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> name <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>greeting <SPAN class="token operator">+</SPAN> <SPAN class="token string">", "</SPAN> <SPAN class="token operator">+</SPAN> name<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Hello, Chris"</SPAN>
</CODE></PRE></DIV>
<P>However, template literals usually give you more readable code:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="6yt/i7tY/NU0qbMEbZqza9hZdL+ukqhoGJ0cF9R8m+M="><CODE><SPAN class="token keyword">const</SPAN> greeting <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Hello"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> name <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Chris"</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>greeting<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token string">, </SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>name<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Hello, Chris"</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=including_expressions_in_strings>
<H3 id=including_expressions_in_strings><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#including_expressions_in_strings">Including expressions in strings</A></H3>
<DIV class=section-content>
<P>You can include JavaScript expressions in template literals, as well as just variables, and the results will be included in the result:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="QacX2VnzjnpGnvBnsJ3YWQBuzn6py1Fdxjoj2sar3H0="><CODE><SPAN class="token keyword">const</SPAN> song <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Fight the Youth"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> score <SPAN class="token operator">=</SPAN> <SPAN class="token number">9</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> highestScore <SPAN class="token operator">=</SPAN> <SPAN class="token number">10</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> output <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">I like the song </SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>song<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token string">. I gave it a score of </SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>
  <SPAN class="token punctuation">(</SPAN>score <SPAN class="token operator">/</SPAN> highestScore<SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">*</SPAN> <SPAN class="token number">100</SPAN>
<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token string">%.</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>output<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "I like the song Fight the Youth. I gave it a score of 90%."</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=multiline_strings>
<H2 id=multiline_strings><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#multiline_strings">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2091">Topic #2,091: Multiline strings</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<STRONG><FONT color=blue>Handling text &#8212; strings in JavaScript : </FONT></STRONG><SPAN class=headers>Title:</SPAN></B><SPAN class=RefText> Multiline strings</SPAN></FONT></A> 
<H2></H2>
<DIV class=section-content>
<P>Template literals respect the line breaks in the source code, so you can write strings that span multiple lines like this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="ra6B1CH0M/s/gIGkuwUkKqV0WiaRYYCiqih26rXaudE="><CODE><SPAN class="token keyword">const</SPAN> newline <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">One day you finally knew
what you had to do, and began,</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>newline<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token comment">/*
One day you finally knew
what you had to do, and began,
*/</SPAN>
</CODE></PRE></DIV>
<P>To have the equivalent output using a normal string you'd have to include line break characters (<CODE>\n</CODE>) in the string:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="W4jmd9f3uHaDqsKDdmFkiz135/CjKBFiVcZLu7hVDHw="><CODE><SPAN class="token keyword">const</SPAN> newline <SPAN class="token operator">=</SPAN> <SPAN class="token string">"One day you finally knew\nwhat you had to do, and began,"</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>newline<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token comment">/*
One day you finally knew
what you had to do, and began,
*/</SPAN>
</CODE></PRE></DIV>
<P>See our <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Template literals</A> reference page for more examples and details of advanced features.</P></DIV></SECTION><SECTION aria-labelledby=including_quotes_in_strings>
<H2 id=including_quotes_in_strings><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#including_quotes_in_strings">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2092">Topic #2,092: Including quotes in strings</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<STRONG><FONT color=blue>Handling text &#8212; strings in JavaScript : </FONT></STRONG><SPAN class=headers>Title:</SPAN></B><SPAN class=RefText> Including quotes in strings</SPAN></FONT></A> 
<H2></H2>
<DIV class=section-content>
<P>Since we use quotes to indicate the start and end of strings, how can we include actual quotes in strings? We know that this won't work:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js example-bad notranslate" data-signature="klUTbXc+tNfn6a/BmAiJTROsHbekHGQwRpiAD6eQgLA="><CODE><SPAN class="token keyword">const</SPAN> badQuotes <SPAN class="token operator">=</SPAN> <SPAN class="token string">"She said "</SPAN><SPAN class="token constant">I</SPAN> think so<SPAN class="token operator">!</SPAN><SPAN class="token string">""</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>One common option is to use one of the other characters to declare the string:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="kZ+RikXLclnbAh3G8EBymplFk78Zl7zYglfSFfu2roY="><CODE><SPAN class="token keyword">const</SPAN> goodQuotes1 <SPAN class="token operator">=</SPAN> <SPAN class="token string">'She said "I think so!"'</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> goodQuotes2 <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">She said "I'm not going in there!"</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Another option is to <EM>escape</EM> the problem quotation mark. Escaping characters means that we do something to them to make sure they are recognized as text, not part of the code. In JavaScript, we do this by putting a backslash just before the character. Try this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="UClBOyrl99q8R4kcnD1E5KVWnx+s1fMNOoF3QcViqVI="><CODE><SPAN class="token keyword">const</SPAN> bigmouth <SPAN class="token operator">=</SPAN> <SPAN class="token string">'I\'ve got no right to take my place&#8230;'</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>bigmouth<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>You can use the same technique to insert other special characters. See <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences">Escape sequences</A> for more details.</P></DIV></SECTION><SECTION aria-labelledby=numbers_vs._strings>
<H2 id=numbers_vs._strings><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#numbers_vs._strings">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2093">Topic #2,093: Numbers vs. strings</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<STRONG><FONT color=blue>Handling text &#8212; strings in JavaScript : </FONT></STRONG><SPAN class=headers>Title:</SPAN></B><SPAN class=RefText> Numbers vs. strings</SPAN></FONT></A> 
<H2></H2>
<DIV class=section-content>
<P>What happens when we try to concatenate a string and a number? Let's try it in our console:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="mqGARWXfdeU62mu4ZZpur3nEbUvBZqkWgBG9hFlmu/0="><CODE><SPAN class="token keyword">const</SPAN> name <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Front "</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> number <SPAN class="token operator">=</SPAN> <SPAN class="token number">242</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>name <SPAN class="token operator">+</SPAN> number<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// "Front 242"</SPAN>
</CODE></PRE></DIV>
<P>You might expect this to return an error, but it works just fine. How numbers should be displayed as strings is fairly well-defined, so the browser automatically converts the number to a string and concatenates the two strings.</P>
<P>If you have a numeric variable that you want to convert to a string or a string variable that you want to convert to a number, you can use the following two constructs:</P>
<UL>
<LI>The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number"><CODE>Number()</CODE></A> function converts anything passed to it into a number if it can. Try the following: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="w37iMA91BLCpra4BzixdnViHPdF45qj2DwhBHDtTl0g="><CODE><SPAN class="token keyword">const</SPAN> myString <SPAN class="token operator">=</SPAN> <SPAN class="token string">"123"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> myNum <SPAN class="token operator">=</SPAN> <SPAN class="token function">Number</SPAN><SPAN class="token punctuation">(</SPAN>myString<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token keyword">typeof</SPAN> myNum<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token comment">// number</SPAN>
</CODE></PRE></DIV>
<LI>Conversely, the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String"><CODE>String()</CODE></A> function converts its argument to a string. Try this: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="RP3xqwfoVzm20OszUTBHcavzvu4/jZx3qOk83zTtym4="><CODE><SPAN class="token keyword">const</SPAN> myNum2 <SPAN class="token operator">=</SPAN> <SPAN class="token number">123</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> myString2 <SPAN class="token operator">=</SPAN> <SPAN class="token function">String</SPAN><SPAN class="token punctuation">(</SPAN>myNum2<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token keyword">typeof</SPAN> myString2<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token comment">// string</SPAN>
</CODE></PRE></DIV></LI></UL>
<P>These constructs can be really useful in some situations. For example, if a user enters a number into a form's text field, it's a string. However, if you want to add this number to something, you'll need it to be a number, so you could pass it through <CODE>Number()</CODE> to handle this. We did exactly this in our <A class=external href="https://github.com/mdn/learning-area/blob/main/javascript/introduction-to-js-1/first-splash/number-guessing-game.html" target=_blank>Number Guessing Game</A>, in the <CODE>checkGuess</CODE> function.
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:42 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
