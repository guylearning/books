<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Flexbox">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Flexbox">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Flexbox (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Flexbox </font></b><br>(12 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="339.htm"> - Next</a> - <a href="1734.htm">Previous</a> - <a href="338.htm">Parent</a> - <a href="1734.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="338.htm">5. CSS layout</a></li>
<ul>
<li>This page: Flexbox</li>
<ol>
<li>Why flexbox?. CSS flexible box layout enables you to:. Vertically center a block of content inside its parent. Make all the children of a container take up an equal amount of . (see <a href="#2063">below)</a>
<li>Introducing a simple example. In this article, you'll work through a series of exercises to help you understand how flexbox works. To get started, you should make a local copy . (see <a href="#2064">below)</a>
<li>Specifying what elements to lay out as flexible boxes. To start with, we need to select which elements are to be laid out as flexible boxes. To do this, we set a special value . (see <a href="#2065">below)</a>
<li>The flex model. When elements are laid out as flex items, they are laid out along two axes:. The main axis is the axis running in the direction the flex items are laid out in . (see <a href="#2066">below)</a>
<li>Columns or rows?. Flexbox provides a property called flex-direction that specifies which direction the main axis runs (which direction the flexbox children are laid out in) . (see <a href="#2067">below)</a>
<li>Wrapping. One issue that arises when you have a fixed width or height in your layout is that eventually your flexbox children will overflow their container, breaking the . (see <a href="#2068">below)</a>
<li>flex-flow shorthand. At this point it's worth noting that a shorthand exists for flex-direction and flex-wrap: flex-flow. So, for example, you can replace. cssflex-direction . (see <a href="#2069">below)</a>
<li>Flexible sizing of flex items. Let's now return to our first example and look at how we can control what proportion of space flex items take up compared to the other flex . (see <a href="#2070">below)</a>
<li>flex: shorthand versus longhand. flex is a shorthand property that can specify up to three different values:. The unitless proportion value we discussed above. This can be . (see <a href="#2071">below)</a>
<li>Horizontal and vertical alignment. You can also use flexbox features to align flex items along the main or cross axis. Let's explore this by looking at a new example: flex . (see <a href="#2072">below)</a>
<li>Ordering flex items. Flexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do . (see <a href="#2073">below)</a>
<li>Nested flex boxes. It's possible to create some pretty complex layouts with flexbox. It's perfectly OK to set a flex item to also be a flex container, so that its children are . (see <a href="#2074">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<div align="center">
<center>
<table border="4" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFFF00" bordercolor="#FF0000">
<tr>
<td>
<b>Subject: Topic #1,735: Flexbox</b><p>
</td>
</tr>
<tr>
<td bordercolor="#FFCC00">
<H2 id=why_flexbox><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#why_flexbox"><FONT style="BACKGROUND-COLOR: #7be1e1">Why flexbox?</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">CSS flexible box layout enables you to:</FONT></P>
<UL>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">Vertically center a block of content inside its parent. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">Make all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">Make all columns in a multiple-column layout adopt the same height even if they contain a different amount of content.</FONT></LI></UL>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Flexbox features may be the perfect solution for your one dimensional layout needs. Let's dig in and find out!</FONT></P></DIV></SECTION><SECTION aria-labelledby=introducing_a_simple_example>
<H2 id=introducing_a_simple_example><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#introducing_a_simple_example"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Introducing a simple example</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">In this article, you'll work through a series of exercises to help you understand how flexbox works. To get started, you should make a local copy of the first starter file &#8212; </FONT><A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">flexbox0.html</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> from our GitHub repo. Load it in a modern browser (like Firefox or Chrome) and have a look at the code in your code editor. You can also </FONT><A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flexbox0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">see it live here</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1">.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="Image showing the starting point of flexbox tutorial" src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/bih741v.png" width=1310 height=670 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You'll see that we have a </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;header&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> element with a top level heading inside it and a </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> element containing three </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">s. We're going to use these to create a fairly standard three column layout.</FONT></P></DIV></SECTION><SECTION aria-labelledby=specifying_what_elements_to_lay_out_as_flexible_boxes>
<H2 id=specifying_what_elements_to_lay_out_as_flexible_boxes><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#specifying_what_elements_to_lay_out_as_flexible_boxes"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Specifying what elements to lay out as flexible boxes</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">To start with, we need to select which elements are to be laid out as flexible boxes. To do this, we set a special value of </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">display</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> on the parent element of the elements you want to affect. In this case we want to lay out the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> elements, so we set this on the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="oJHRr8VGPEYZEP7879orpkHU9b+BaVLM9fkRsRB22ZI="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">section</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">This causes the <CODE>&lt;section&gt;</CODE> element to become a <STRONG>flex container</STRONG> and its children become <STRONG>flex items</STRONG>. This is what it looks like:</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="A two row container that includes a single column in the first row and a 3-column layout in the second row that shows how a webpage can be divided into different layouts depending on the contents" src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example2.png" width=800 height=348 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">This single declaration gives us everything we need. Incredible, right? We have a multiple column layout with equal-sized columns, and the columns are all the same height. This is because the default values given to flex items (the children of the flex container) are set up to solve common problems such as this.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Let's recap what's happening here. Adding a </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">display</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> value of <CODE>flex</CODE> to an element makes it a flex container. The container is displayed as </FONT><A href="https://developer.mozilla.org/en-US/docs/Glossary/Block-level_content"><FONT style="BACKGROUND-COLOR: #7be1e1">Block-level content</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> in terms of how it interacts with the rest of the page. When the element is converted to a flex container, its children are converted to (and laid out as) flex items.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You can make the container inline using an </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display#outside"><FONT style="BACKGROUND-COLOR: #7be1e1">outside <CODE>display</CODE> value</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> (e.g., <CODE>display: inline flex</CODE>), which affects how the container itself is laid out in the page. The legacy <CODE>inline-flex</CODE> display value displays the container as inline as well. We'll focus on how the contents of the container behave in this tutorial, but if you want to see the effect of inline versus block layout, you can have a look at the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_value_comparison"><FONT style="BACKGROUND-COLOR: #7be1e1">value comparison</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> on the <CODE>display</CODE> property page. </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">The next sections explain in more detail what flex items are and what happens inside an element when you make it a flex container.</FONT></P></DIV></SECTION><SECTION aria-labelledby=the_flex_model>
<H2 id=the_flex_model><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#the_flex_model"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
The flex model</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">When elements are laid out as flex items, they are laid out along two axes:</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="Three flex items in a left-to-right language are laid out side-by-side in a flex container. The main axis &#8212; the axis of the flex container in the direction in which the flex items are laid out &#8212; is horizontal. The ends of the axis are main-start and main-end and are on the left and right respectively. The cross axis is vertical; perpendicular to the main axis. The cross-start and cross-end are at the top and bottom respectively. The length of the flex item along the main axis, in this case, the width, is called the main size, and the length of the flex item along the cross axis, in this case, the height, is called the cross size." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flex_terms.png" width=563 height=333 loading="lazy"> </FONT></P>
<UL>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The <STRONG>main axis</STRONG> is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.) The start and end of this axis are called the <STRONG>main start</STRONG> and <STRONG>main end</STRONG>. The length from the main-start edge to the main-end edge is the <STRONG>main size</STRONG>. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The <STRONG>cross axis</STRONG> is the axis running perpendicular to the direction the flex items are laid out in. The start and end of this axis are called the <STRONG>cross start</STRONG> and <STRONG>cross end</STRONG>. The length from the cross-start edge to the cross-end edge is the <STRONG>cross size</STRONG>. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The parent element that has <CODE>display: flex</CODE> set on it (the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> in our example) is called the <STRONG>flex container</STRONG>. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The items laid out as flexible boxes inside the flex container are called <STRONG>flex items</STRONG> (the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> elements in our example).</FONT></LI></UL>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Bear this terminology in mind as you go through subsequent sections. You can always refer back to it if you get confused about any of the terms being used.</FONT></P></DIV></SECTION><SECTION aria-labelledby=columns_or_rows>
<H2 id=columns_or_rows><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#columns_or_rows"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Columns or rows?</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Flexbox provides a property called </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-direction</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> that specifies which direction the main axis runs (which direction the flexbox children are laid out in). By default this is set to <CODE>row</CODE>, which causes them to be laid out in a row in the direction your browser's default language works in (left to right, in the case of an English browser).</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Try adding the following declaration to your </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> rule:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="RVpFOcDkIF8JOhmxDNQAzmiLAVA1Twzw+T4ceDgxYs0="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token property">flex-direction</SPAN><SPAN class="token punctuation">:</SPAN> column<SPAN class="token punctuation">;</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You'll see that this puts the items back in a column layout, much like they were before we added any CSS. Before you move on, delete this declaration from your example.</FONT></P>
<DIV id=sect1 class="notecard note">
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><STRONG>Note:</STRONG> You can also lay out flex items in a reverse direction using the <CODE>row-reverse</CODE> and <CODE>column-reverse</CODE> values. Experiment with these values too!</FONT></P></DIV></DIV></SECTION><SECTION aria-labelledby=wrapping>
<H2 id=wrapping><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#wrapping"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Wrapping</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">One issue that arises when you have a fixed width or height in your layout is that eventually your flexbox children will overflow their container, breaking the layout. Have a look at our </FONT><A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox-wrap0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">flexbox-wrap0.html</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> example and try </FONT><A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flexbox-wrap0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">viewing it live</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> (take a local copy of this file now if you want to follow along with this example):</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="The Sample flexbox example has all the flex items laid out in a single row of the flex container. The eighth flex item overflows the browser window, and the page has visible horizontal and vertical scroll bars as it cannot be accommodated within the width of the window as the previous seven flex items have taken the space available within the viewport." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example3.png" width=1003 height=795 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Here we see that the children are indeed breaking out of their container. By default, the browser tries to place all the flex items in a single row if the <CODE>flex-direction</CODE> is set to <CODE>row</CODE> or a single column if the <CODE>flex-direction</CODE> is set to <CODE>column</CODE>. One way in which you can fix this is to add the following declaration to your </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> rule:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="GmebdMhf6VlZbrGJXCnZXXkx5EI8mVnCxuyt/usVMDk="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token property">flex-wrap</SPAN><SPAN class="token punctuation">:</SPAN> wrap<SPAN class="token punctuation">;</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Also, add the following declaration to your </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> rule:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="KfLxmLgD03srKG9rFcNzSzBPBbwXWfZHbp6u522kzRg="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 200px<SPAN class="token punctuation">;</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Try this now. You'll see that the layout looks much better with this included:</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="Flex items are laid out in multiple rows in the flex container. The flex-wrap property is set to 'wrap' in the flex container which displays the flex items in a new row if the flex items in the previous row overflow outside the flexbox container. Each flex item is given a width of 200 pixels. All the items are stretched to be the same height, as tall as the flex item with the most content." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example4.png" width=1005 height=793 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">We now have multiple rows. Each row has as many flexbox children fitted into it as is sensible. Any overflow is moved down to the next line. The <CODE>flex: 200px</CODE> declaration set on the articles means that each will be at least <CODE>200px</CODE> wide. We'll discuss this property in more detail later on. You might also notice that the last few children on the last row are each made wider so that the entire row is still filled.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">But there's more we can do here. First of all, try changing your </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-direction</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> property value to <CODE>row-reverse</CODE>. Now you'll see that you still have your multiple row layout, but it starts from the opposite corner of the browser window and flows in reverse.</FONT></P></DIV></SECTION><SECTION aria-labelledby=flex-flow_shorthand>
<H2 id=flex-flow_shorthand><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#flex-flow_shorthand"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
flex-flow shorthand</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">At this point it's worth noting that a shorthand exists for </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-direction</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> and </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-wrap</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">: </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-flow</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">. So, for example, you can replace</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="yjCxLsCVz/p7wuWdz5G1cZtwYQmeh8Lzy23AceN/Rik="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token property">flex-direction</SPAN><SPAN class="token punctuation">:</SPAN> row<SPAN class="token punctuation">;</SPAN>
<SPAN class="token property">flex-wrap</SPAN><SPAN class="token punctuation">:</SPAN> wrap<SPAN class="token punctuation">;</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">with</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="shstRtWFDItZgZeVa+7A9zQgatx8sT6jaa89QN13M4g="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token property">flex-flow</SPAN><SPAN class="token punctuation">:</SPAN> row wrap<SPAN class="token punctuation">;</SPAN>
</FONT></CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=flexible_sizing_of_flex_items>
<H2 id=flexible_sizing_of_flex_items><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#flexible_sizing_of_flex_items"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Flexible sizing of flex items</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Let's now return to our first example and look at how we can control what proportion of space flex items take up compared to the other flex items. Open your local copy of </FONT><A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">flexbox0.html</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1">, or take a copy of </FONT><A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox1.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">flexbox1.html</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> as a new starting point (</FONT><A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flexbox1.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">see it live</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1">).</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">First, add the following rule to the bottom of your CSS:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="f96G12ef/0rGDG0D84MXpFaOVNFp8SUFRjMmyQqvb9Y="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">article</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">This is a unitless proportion value that dictates how much available space along the main axis each flex item will take up compared to other flex items. In this case, we're giving each </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> element the same value (a value of <CODE>1</CODE>), which means they'll all take up an equal amount of the spare space left after properties like padding and margin have been set. This value is proportionally shared among the flex items: giving each flex item a value of <CODE>400000</CODE> would have exactly the same effect.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Now add the following rule below the previous one:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="HWKQGYST5h0uFanYa8DmLnZROmnJiIafnvyu9WIe3+E="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">article:nth-of-type(3)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 2<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Now when you refresh, you'll see that the third </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> takes up twice as much of the available width as the other two. There are now four proportion units available in total (since 1 + 1 + 2 = 4). The first two flex items have one unit each, so they each take 1/4 of the available space. The third one has two units, so it takes up 2/4 of the available space (or one-half).</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You can also specify a minimum size value within the flex value. Try updating your existing article rules like so:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="GBwkZoDnpAY2Xc+jkpaYXXFK72QYxxSU4TTgNvZ/lOE="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">article</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 200px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">article:nth-of-type(3)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 2 200px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">This basically states, "Each flex item will first be given <CODE>200px</CODE> of the available space. After that, the rest of the available space will be shared according to the proportion units." Try refreshing and you'll see a difference in how the space is shared.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="A flex container with three flex items. The third flex item is slightly larger than the first two." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example1.png" width=800 height=324 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">All the flex items have a minimum width of 200 pixels&#8212;set using 'flex'. The value of flex for first two flex items is 1 and for the third item is 2. This splits the remaining space in the flex container into 4 proportion units. One unit is assigned to each of the first two flex items and 2 units are assigned to the third flex item, making the third flex item wider than the other two, which are of the same width.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">The real value of flexbox can be seen in its flexibility/responsiveness. If you resize the browser window or add another </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> element, the layout continues to work just fine.</FONT></P></DIV></SECTION><SECTION aria-labelledby=flex_shorthand_versus_longhand>
<H2 id=flex_shorthand_versus_longhand><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#flex_shorthand_versus_longhand"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
flex: shorthand versus longhand</FONT></A></H2>
<DIV class=section-content>
<P><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> is a shorthand property that can specify up to three different values:</FONT></P>
<UL>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The unitless proportion value we discussed above. This can be specified separately using the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-grow</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> longhand property. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">A second unitless proportion value, </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-shrink</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">, which comes into play when the flex items are overflowing their container. This value specifies how much an item will shrink in order to prevent overflow. This is quite an advanced flexbox feature and we won't be covering it any further in this article. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The minimum size value we discussed above. This can be specified separately using the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">flex-basis</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> longhand value.</FONT></LI></UL>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">We'd advise against using the longhand flex properties unless you really have to (for example, to override something previously set). They lead to a lot of extra code being written and can be somewhat confusing.</FONT></P></DIV></SECTION><SECTION aria-labelledby=horizontal_and_vertical_alignment>
<H2 id=horizontal_and_vertical_alignment><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#horizontal_and_vertical_alignment"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Horizontal and vertical alignment</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You can also use flexbox features to align flex items along the main or cross axis. Let's explore this by looking at a new example: </FONT><A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flex-align0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">flex-align0.html</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> (</FONT><A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flex-align0.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">see it live also</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1">). We're going to turn this into a neat, flexible button/toolbar. At the moment you'll see a horizontal menu bar with some buttons jammed into the top left-hand corner.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="Five buttons are laid out in a row in a flex container. The buttons are jammed into the top left-hand corner that doesn't look neat." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example5.png" width=600 height=77 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">First, take a local copy of this example.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Now, add the following to the bottom of the example's CSS:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="xkRy3IWATaEaSFrl8IwN4g+Sg4n4gzoRHAgCl0mAIEU="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">div</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">align-items</SPAN><SPAN class="token punctuation">:</SPAN> center<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">justify-content</SPAN><SPAN class="token punctuation">:</SPAN> space-around<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="Five buttons are laid out in a row in a flex container. The flex items are positioned vertically centered and they are evenly spaced out horizontally." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox_center_space-around.png" width=1217 height=209 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Refresh the page and you'll see that the buttons are now nicely centered horizontally and vertically. We've done this via two new properties. The flex items are positioned at the center of the cross-axis by setting the <CODE>align-items</CODE> property to <CODE>center</CODE>. The flex items are spaced evenly along the main-axis by setting the <CODE>justify-content</CODE> property to <CODE>space-around</CODE>.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">The </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">align-items</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> property controls where the flex items sit on the cross axis.</FONT></P>
<UL>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">By default, the value <CODE>normal</CODE> which behaves as <CODE>stretch</CODE> in flexbox. This stretches all flex items to fill the parent in the direction of the cross axis. If the parent doesn't have a fixed size in the cross axis direction, then all flex items will become as tall (or wide) as the tallest (or widest) flex item. This is how our first example had columns of equal height by default. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The <CODE>center</CODE> value that we used in our above code causes the items to maintain their intrinsic dimensions, but be centered along the cross axis. This is why our current example's buttons are centered vertically. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">You can also have values like <CODE>flex-start</CODE>, <CODE>self-start</CODE> or <CODE>start</CODE> and <CODE>flex-end</CODE>, <CODE>self-end</CODE> or <CODE>end</CODE>, which will align all items at the start and end of the cross axis respectively. The <CODE>baseline</CODE> values will line up the flex items by their baseline; basically the bottom of each flex items first line of text will be lined up with the bottom of the first line of the element with the greatest distance between the cross start and that baseline. See </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">align-items</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> for the full details.</FONT></LI></UL>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You can override the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">align-items</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> behavior for individual flex items by applying the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">align-self</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> property to them. For example, try adding the following to your CSS:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="TNTeLhv4MOTHqCBRwx1LFxDtj7mgulHSiMF0PfdK+NQ="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">button:first-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">align-self</SPAN><SPAN class="token punctuation">:</SPAN> flex-end<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="Five buttons are laid out in a row in a flex container. All the flex items except the first one are positioned at the center of the cross-axis, or vertically centered. The first item is flush against the bottom of the flex container, at the end of the cross-axis The flex items are spaced evenly along the main-axis, or width, of the container." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox_first-child_flex-end.png" width=1219 height=217 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Have a look at what effect this has and remove it again when you've finished.</FONT></P>
<P><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">justify-content</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> controls where the flex items sit on the main axis.</FONT></P>
<UL>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The default value is <CODE>normal</CODE>, which behaves as <CODE>start</CODE>, which makes all the items sit at the start of the main axis. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">You can use <CODE>end</CODE> or <CODE>flex-end</CODE> to make them sit at the end. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The <CODE>left</CODE> and <CODE>right</CODE> values behave as <CODE>start</CODE> or <CODE>end</CODE> depending on the writing mode direction. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1"><CODE>center</CODE> is also a value for <CODE>justify-content</CODE>. It'll make the flex items sit in the center of the main axis. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The value we've used above, <CODE>space-around</CODE>, is useful &#8212; it distributes all the items evenly along the main axis with a bit of space left at either end. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">There is another value, <CODE>space-between</CODE>, which is very similar to <CODE>space-around</CODE> except that it doesn't leave any space at either end.</FONT></LI></UL>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">The </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">justify-items</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> property is ignored in flexbox layouts.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">We'd like to encourage you to play with these values to see how they work before you continue.</FONT></P></DIV></SECTION><SECTION aria-labelledby=ordering_flex_items>
<H2 id=ordering_flex_items><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#ordering_flex_items"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Ordering flex items</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Flexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do with traditional layout methods.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Try adding the following CSS to your button bar example code:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="yjaF+H28xod+YvN91Mp8WX3HuVr2x7D8DgRcKCO0vLQ="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">button:first-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">order</SPAN><SPAN class="token punctuation">:</SPAN> 1<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Refresh and you'll see that the "Smile" button has moved to the end of the main axis. Let's talk about how this works in a bit more detail:</FONT></P>
<UL>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">By default, all flex items have an </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/order"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">order</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> value of <CODE>0</CODE>. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">Flex items with higher specified order values will appear later in the display order than items with lower order values. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">Flex items with the same order value will appear in their source order. So if you have four items whose order values have been set as <CODE>2</CODE>, <CODE>1</CODE>, <CODE>1</CODE>, and <CODE>0</CODE> respectively, their display order would be 4th, 2nd, 3rd, then 1st. </FONT>
<LI><FONT style="BACKGROUND-COLOR: #7be1e1">The 3rd item appears after the 2nd because it has the same order value and is after it in the source order.</FONT></LI></UL>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">You can set negative order values to make items appear earlier than items whose value is <CODE>0</CODE>. For example, you could make the "Blush" button appear at the start of the main axis using the following rule:</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="ECPqUlQDjA8NCr/IXV3vIOrx2mYqfHgPsoSDeYQx7hA="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">button:last-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">order</SPAN><SPAN class="token punctuation">:</SPAN> -1<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">While you can change the order using <CODE>order</CODE>, the tabbing order remains the same as the code order. Changing the order of focusable elements can negatively impact usability for your keyboard users!</FONT></P></DIV></SECTION><SECTION aria-labelledby=nested_flex_boxes>
<H2 id=nested_flex_boxes><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#nested_flex_boxes"><FONT style="BACKGROUND-COLOR: #7be1e1">
<HR>
Nested flex boxes</FONT></A></H2>
<DIV class=section-content>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">It's possible to create some pretty complex layouts with flexbox. It's perfectly OK to set a flex item to also be a flex container, so that its children are also laid out like flexible boxes. Have a look at </FONT><A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/complex-flexbox.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">complex-flexbox.html</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1"> (</FONT><A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/complex-flexbox.html" target=_blank><FONT style="BACKGROUND-COLOR: #7be1e1">see it live also</FONT></A><FONT style="BACKGROUND-COLOR: #7be1e1">).</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1"><img alt="The Sample flexbox example has three flex item children laid out in a row. The first two are the same width, the third is slightly wider. The third flex item is also a flex container. It has a set of buttons in two rows followed by text. The first row of buttons has 4 buttons that are laid out in a row; the buttons are the same width, taking up the full width of the container. The second row has a single button that takes up the entire width of the row on its own." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example7.png" width=800 height=347 loading="lazy"> </FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">This complex layout has a few flex items that are also flex containers. The HTML for this is fairly straightforward. We've got a </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> element containing three </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">s. The third </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> contains three </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;div&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">s, and the first </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;div&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> contains five </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;button&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">s:</FONT></P><PRE class="brush: plain notranslate"><FONT style="BACKGROUND-COLOR: #7be1e1">section - article
          article
          article - div - button
                    div   button
                    div   button
                          button
                          button
</FONT></PRE>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Let's look at the code we've used for the layout.</FONT></P>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">First of all, we set the children of the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;section&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> to be laid out as flexible boxes.</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="oJHRr8VGPEYZEP7879orpkHU9b+BaVLM9fkRsRB22ZI="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">section</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Next, we set some flex values on the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">s themselves. Take special note of the second rule here: we're setting the third </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;article&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> to have its children laid out like flex items too, but this time we're laying them out like a column.</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="hw63gd43iU4CdWJ63dpz+gqaCzVSjp3P2QR9+z0LaMM="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">article</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 200px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">article:nth-of-type(3)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 3 200px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">flex-flow</SPAN><SPAN class="token punctuation">:</SPAN> column<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Next, we select the first </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;div&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1">. We first use <CODE>flex: 1 100px;</CODE> to effectively give it a minimum height of <CODE>100px</CODE>, then we set its children (the </FONT><A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE><FONT style="BACKGROUND-COLOR: #7be1e1">&lt;button&gt;</FONT></CODE></A><FONT style="BACKGROUND-COLOR: #7be1e1"> elements) to also be laid out like flex items. Here we lay them out in a wrapping row and align them in the center of the available space as we did with the individual button example we saw earlier.</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="HXRwk0OF0ZF1TLd9SZGlW/qp7EOPii8xkou4E6hxmRQ="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">article:nth-of-type(3) div:first-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 100px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">flex-flow</SPAN><SPAN class="token punctuation">:</SPAN> row wrap<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">align-items</SPAN><SPAN class="token punctuation">:</SPAN> center<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">justify-content</SPAN><SPAN class="token punctuation">:</SPAN> space-around<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV>
<P><FONT style="BACKGROUND-COLOR: #7be1e1">Finally, we set some sizing on the button. This time by giving it a flex value of <CODE>1 auto</CODE>. This has a very interesting effect, which you'll see if you try resizing your browser window width. The buttons will take up as much space as they can. As many will fit on a line as is comfortable; beyond that, they'll drop to a new line.</FONT></P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name><FONT style="BACKGROUND-COLOR: #7be1e1">css</FONT></SPAN></DIV><PRE class="brush: css notranslate" data-signature="b84bodX2phgKMt/oHfeFb9tRv4TUbZl0/AjHMi/xsgA="><CODE><FONT style="BACKGROUND-COLOR: #7be1e1"><SPAN class="token selector">button</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 auto<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">margin</SPAN><SPAN class="token punctuation">:</SPAN> 5px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">font-size</SPAN><SPAN class="token punctuation">:</SPAN> 18px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">line-height</SPAN><SPAN class="token punctuation">:</SPAN> 1.5<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</FONT></CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#test_your_skills!"><BR><BR><FONT style="BACKGROUND-COLOR: #7be1e1">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2063">Topic #2,063: Why flexbox?. CSS flexible box layout enables you to:. Vertically center a block of content inside its parent. Make all the children of a container take up an equal amount of .</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong><H2 id=why_flexbox><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#why_flexbox">Why flexbox?</A></H2>
<DIV class=section-content>
<P>CSS flexible box layout enables you to:</P>
<UL>
<LI>Vertically center a block of content inside its parent. 
<LI>Make all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available. 
<LI>Make all columns in a multiple-column layout adopt the same height even if they contain a different amount of content.</LI></UL>
<P>Flexbox features may be the perfect solution for your one dimensional layout needs. Let's dig in and find out!</P></DIV></SECTION><SECTION aria-labelledby=introducing_a_simple_example>
<H2 id=introducing_a_simple_example><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#introducing_a_simple_example">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2064">Topic #2,064: Introducing a simple example. In this article, you'll work through a series of exercises to help you understand how flexbox works. To get started, you should make a local copy .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Introducing a simple example</A></H2>
<DIV class=section-content>
<P>In this article, you'll work through a series of exercises to help you understand how flexbox works. To get started, you should make a local copy of the first starter file &#8212; <A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox0.html" target=_blank>flexbox0.html</A> from our GitHub repo. Load it in a modern browser (like Firefox or Chrome) and have a look at the code in your code editor. You can also <A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flexbox0.html" target=_blank>see it live here</A>.</P>
<P><img alt="Image showing the starting point of flexbox tutorial" src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/bih741v.png" width=1310 height=670 loading="lazy"> </P>
<P>You'll see that we have a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header"><CODE>&lt;header&gt;</CODE></A> element with a top level heading inside it and a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A> element containing three <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A>s. We're going to use these to create a fairly standard three column layout.</P></DIV></SECTION><SECTION aria-labelledby=specifying_what_elements_to_lay_out_as_flexible_boxes>
<H2 id=specifying_what_elements_to_lay_out_as_flexible_boxes><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#specifying_what_elements_to_lay_out_as_flexible_boxes">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2065">Topic #2,065: Specifying what elements to lay out as flexible boxes. To start with, we need to select which elements are to be laid out as flexible boxes. To do this, we set a special value .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Specifying what elements to lay out as flexible boxes</A></H2>
<DIV class=section-content>
<P>To start with, we need to select which elements are to be laid out as flexible boxes. To do this, we set a special value of <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><CODE>display</CODE></A> on the parent element of the elements you want to affect. In this case we want to lay out the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> elements, so we set this on the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A>:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="oJHRr8VGPEYZEP7879orpkHU9b+BaVLM9fkRsRB22ZI="><CODE><SPAN class="token selector">section</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>This causes the <CODE>&lt;section&gt;</CODE> element to become a <STRONG>flex container</STRONG> and its children become <STRONG>flex items</STRONG>. This is what it looks like:</P>
<P><img alt="A two row container that includes a single column in the first row and a 3-column layout in the second row that shows how a webpage can be divided into different layouts depending on the contents" src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example2.png" width=800 height=348 loading="lazy"> </P>
<P>This single declaration gives us everything we need. Incredible, right? We have a multiple column layout with equal-sized columns, and the columns are all the same height. This is because the default values given to flex items (the children of the flex container) are set up to solve common problems such as this.</P>
<P>Let's recap what's happening here. Adding a <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><CODE>display</CODE></A> value of <CODE>flex</CODE> to an element makes it a flex container. The container is displayed as <A href="https://developer.mozilla.org/en-US/docs/Glossary/Block-level_content">Block-level content</A> in terms of how it interacts with the rest of the page. When the element is converted to a flex container, its children are converted to (and laid out as) flex items.</P>
<P>You can make the container inline using an <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display#outside">outside <CODE>display</CODE> value</A> (e.g., <CODE>display: inline flex</CODE>), which affects how the container itself is laid out in the page. The legacy <CODE>inline-flex</CODE> display value displays the container as inline as well. We'll focus on how the contents of the container behave in this tutorial, but if you want to see the effect of inline versus block layout, you can have a look at the <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_value_comparison">value comparison</A> on the <CODE>display</CODE> property page. </P>
<P>The next sections explain in more detail what flex items are and what happens inside an element when you make it a flex container.</P></DIV></SECTION><SECTION aria-labelledby=the_flex_model>
<H2 id=the_flex_model><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#the_flex_model">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2066">Topic #2,066: The flex model. When elements are laid out as flex items, they are laid out along two axes:. The main axis is the axis running in the direction the flex items are laid out in .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
The flex model</A></H2>
<DIV class=section-content>
<P>When elements are laid out as flex items, they are laid out along two axes:</P>
<P><img alt="Three flex items in a left-to-right language are laid out side-by-side in a flex container. The main axis &#8212; the axis of the flex container in the direction in which the flex items are laid out &#8212; is horizontal. The ends of the axis are main-start and main-end and are on the left and right respectively. The cross axis is vertical; perpendicular to the main axis. The cross-start and cross-end are at the top and bottom respectively. The length of the flex item along the main axis, in this case, the width, is called the main size, and the length of the flex item along the cross axis, in this case, the height, is called the cross size." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flex_terms.png" width=563 height=333 loading="lazy"> </P>
<UL>
<LI>The <STRONG>main axis</STRONG> is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.) The start and end of this axis are called the <STRONG>main start</STRONG> and <STRONG>main end</STRONG>. The length from the main-start edge to the main-end edge is the <STRONG>main size</STRONG>. 
<LI>The <STRONG>cross axis</STRONG> is the axis running perpendicular to the direction the flex items are laid out in. The start and end of this axis are called the <STRONG>cross start</STRONG> and <STRONG>cross end</STRONG>. The length from the cross-start edge to the cross-end edge is the <STRONG>cross size</STRONG>. 
<LI>The parent element that has <CODE>display: flex</CODE> set on it (the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A> in our example) is called the <STRONG>flex container</STRONG>. 
<LI>The items laid out as flexible boxes inside the flex container are called <STRONG>flex items</STRONG> (the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> elements in our example).</LI></UL>
<P>Bear this terminology in mind as you go through subsequent sections. You can always refer back to it if you get confused about any of the terms being used.</P></DIV></SECTION><SECTION aria-labelledby=columns_or_rows>
<H2 id=columns_or_rows><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#columns_or_rows">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2067">Topic #2,067: Columns or rows?. Flexbox provides a property called flex-direction that specifies which direction the main axis runs (which direction the flexbox children are laid out in) .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Columns or rows?</A></H2>
<DIV class=section-content>
<P>Flexbox provides a property called <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><CODE>flex-direction</CODE></A> that specifies which direction the main axis runs (which direction the flexbox children are laid out in). By default this is set to <CODE>row</CODE>, which causes them to be laid out in a row in the direction your browser's default language works in (left to right, in the case of an English browser).</P>
<P>Try adding the following declaration to your <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A> rule:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="RVpFOcDkIF8JOhmxDNQAzmiLAVA1Twzw+T4ceDgxYs0="><CODE><SPAN class="token property">flex-direction</SPAN><SPAN class="token punctuation">:</SPAN> column<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>You'll see that this puts the items back in a column layout, much like they were before we added any CSS. Before you move on, delete this declaration from your example.</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> You can also lay out flex items in a reverse direction using the <CODE>row-reverse</CODE> and <CODE>column-reverse</CODE> values. Experiment with these values too!</P></DIV></DIV></SECTION><SECTION aria-labelledby=wrapping>
<H2 id=wrapping><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#wrapping">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2068">Topic #2,068: Wrapping. One issue that arises when you have a fixed width or height in your layout is that eventually your flexbox children will overflow their container, breaking the .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Wrapping</A></H2>
<DIV class=section-content>
<P>One issue that arises when you have a fixed width or height in your layout is that eventually your flexbox children will overflow their container, breaking the layout. Have a look at our <A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox-wrap0.html" target=_blank>flexbox-wrap0.html</A> example and try <A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flexbox-wrap0.html" target=_blank>viewing it live</A> (take a local copy of this file now if you want to follow along with this example):</P>
<P><img alt="The Sample flexbox example has all the flex items laid out in a single row of the flex container. The eighth flex item overflows the browser window, and the page has visible horizontal and vertical scroll bars as it cannot be accommodated within the width of the window as the previous seven flex items have taken the space available within the viewport." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example3.png" width=1003 height=795 loading="lazy"> </P>
<P>Here we see that the children are indeed breaking out of their container. By default, the browser tries to place all the flex items in a single row if the <CODE>flex-direction</CODE> is set to <CODE>row</CODE> or a single column if the <CODE>flex-direction</CODE> is set to <CODE>column</CODE>. One way in which you can fix this is to add the following declaration to your <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A> rule:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="GmebdMhf6VlZbrGJXCnZXXkx5EI8mVnCxuyt/usVMDk="><CODE><SPAN class="token property">flex-wrap</SPAN><SPAN class="token punctuation">:</SPAN> wrap<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Also, add the following declaration to your <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> rule:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="KfLxmLgD03srKG9rFcNzSzBPBbwXWfZHbp6u522kzRg="><CODE><SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 200px<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Try this now. You'll see that the layout looks much better with this included:</P>
<P><img alt="Flex items are laid out in multiple rows in the flex container. The flex-wrap property is set to 'wrap' in the flex container which displays the flex items in a new row if the flex items in the previous row overflow outside the flexbox container. Each flex item is given a width of 200 pixels. All the items are stretched to be the same height, as tall as the flex item with the most content." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example4.png" width=1005 height=793 loading="lazy"> </P>
<P>We now have multiple rows. Each row has as many flexbox children fitted into it as is sensible. Any overflow is moved down to the next line. The <CODE>flex: 200px</CODE> declaration set on the articles means that each will be at least <CODE>200px</CODE> wide. We'll discuss this property in more detail later on. You might also notice that the last few children on the last row are each made wider so that the entire row is still filled.</P>
<P>But there's more we can do here. First of all, try changing your <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><CODE>flex-direction</CODE></A> property value to <CODE>row-reverse</CODE>. Now you'll see that you still have your multiple row layout, but it starts from the opposite corner of the browser window and flows in reverse.</P></DIV></SECTION><SECTION aria-labelledby=flex-flow_shorthand>
<H2 id=flex-flow_shorthand><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#flex-flow_shorthand">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2069">Topic #2,069: flex-flow shorthand. At this point it's worth noting that a shorthand exists for flex-direction and flex-wrap: flex-flow. So, for example, you can replace. cssflex-direction .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
flex-flow shorthand</A></H2>
<DIV class=section-content>
<P>At this point it's worth noting that a shorthand exists for <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"><CODE>flex-direction</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"><CODE>flex-wrap</CODE></A>: <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow"><CODE>flex-flow</CODE></A>. So, for example, you can replace</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="yjCxLsCVz/p7wuWdz5G1cZtwYQmeh8Lzy23AceN/Rik="><CODE><SPAN class="token property">flex-direction</SPAN><SPAN class="token punctuation">:</SPAN> row<SPAN class="token punctuation">;</SPAN>
<SPAN class="token property">flex-wrap</SPAN><SPAN class="token punctuation">:</SPAN> wrap<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>with</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="shstRtWFDItZgZeVa+7A9zQgatx8sT6jaa89QN13M4g="><CODE><SPAN class="token property">flex-flow</SPAN><SPAN class="token punctuation">:</SPAN> row wrap<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=flexible_sizing_of_flex_items>
<H2 id=flexible_sizing_of_flex_items><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#flexible_sizing_of_flex_items">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2070">Topic #2,070: Flexible sizing of flex items. Let's now return to our first example and look at how we can control what proportion of space flex items take up compared to the other flex .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Flexible sizing of flex items</A></H2>
<DIV class=section-content>
<P>Let's now return to our first example and look at how we can control what proportion of space flex items take up compared to the other flex items. Open your local copy of <A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox0.html" target=_blank>flexbox0.html</A>, or take a copy of <A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flexbox1.html" target=_blank>flexbox1.html</A> as a new starting point (<A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flexbox1.html" target=_blank>see it live</A>).</P>
<P>First, add the following rule to the bottom of your CSS:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="f96G12ef/0rGDG0D84MXpFaOVNFp8SUFRjMmyQqvb9Y="><CODE><SPAN class="token selector">article</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>This is a unitless proportion value that dictates how much available space along the main axis each flex item will take up compared to other flex items. In this case, we're giving each <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> element the same value (a value of <CODE>1</CODE>), which means they'll all take up an equal amount of the spare space left after properties like padding and margin have been set. This value is proportionally shared among the flex items: giving each flex item a value of <CODE>400000</CODE> would have exactly the same effect.</P>
<P>Now add the following rule below the previous one:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="HWKQGYST5h0uFanYa8DmLnZROmnJiIafnvyu9WIe3+E="><CODE><SPAN class="token selector">article:nth-of-type(3)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 2<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Now when you refresh, you'll see that the third <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> takes up twice as much of the available width as the other two. There are now four proportion units available in total (since 1 + 1 + 2 = 4). The first two flex items have one unit each, so they each take 1/4 of the available space. The third one has two units, so it takes up 2/4 of the available space (or one-half).</P>
<P>You can also specify a minimum size value within the flex value. Try updating your existing article rules like so:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="GBwkZoDnpAY2Xc+jkpaYXXFK72QYxxSU4TTgNvZ/lOE="><CODE><SPAN class="token selector">article</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 200px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">article:nth-of-type(3)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 2 200px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>This basically states, "Each flex item will first be given <CODE>200px</CODE> of the available space. After that, the rest of the available space will be shared according to the proportion units." Try refreshing and you'll see a difference in how the space is shared.</P>
<P><img alt="A flex container with three flex items. The third flex item is slightly larger than the first two." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example1.png" width=800 height=324 loading="lazy"> </P>
<P>All the flex items have a minimum width of 200 pixels&#8212;set using 'flex'. The value of flex for first two flex items is 1 and for the third item is 2. This splits the remaining space in the flex container into 4 proportion units. One unit is assigned to each of the first two flex items and 2 units are assigned to the third flex item, making the third flex item wider than the other two, which are of the same width.</P>
<P>The real value of flexbox can be seen in its flexibility/responsiveness. If you resize the browser window or add another <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> element, the layout continues to work just fine.</P></DIV></SECTION><SECTION aria-labelledby=flex_shorthand_versus_longhand>
<H2 id=flex_shorthand_versus_longhand><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#flex_shorthand_versus_longhand">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2071">Topic #2,071: flex: shorthand versus longhand. flex is a shorthand property that can specify up to three different values:. The unitless proportion value we discussed above. This can be .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
flex: shorthand versus longhand</A></H2>
<DIV class=section-content>
<P><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex"><CODE>flex</CODE></A> is a shorthand property that can specify up to three different values:</P>
<UL>
<LI>The unitless proportion value we discussed above. This can be specified separately using the <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow"><CODE>flex-grow</CODE></A> longhand property. 
<LI>A second unitless proportion value, <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink"><CODE>flex-shrink</CODE></A>, which comes into play when the flex items are overflowing their container. This value specifies how much an item will shrink in order to prevent overflow. This is quite an advanced flexbox feature and we won't be covering it any further in this article. 
<LI>The minimum size value we discussed above. This can be specified separately using the <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis"><CODE>flex-basis</CODE></A> longhand value.</LI></UL>
<P>We'd advise against using the longhand flex properties unless you really have to (for example, to override something previously set). They lead to a lot of extra code being written and can be somewhat confusing.</P></DIV></SECTION><SECTION aria-labelledby=horizontal_and_vertical_alignment>
<H2 id=horizontal_and_vertical_alignment><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#horizontal_and_vertical_alignment">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2072">Topic #2,072: Horizontal and vertical alignment. You can also use flexbox features to align flex items along the main or cross axis. Let's explore this by looking at a new example: flex .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Horizontal and vertical alignment</A></H2>
<DIV class=section-content>
<P>You can also use flexbox features to align flex items along the main or cross axis. Let's explore this by looking at a new example: <A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/flex-align0.html" target=_blank>flex-align0.html</A> (<A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/flex-align0.html" target=_blank>see it live also</A>). We're going to turn this into a neat, flexible button/toolbar. At the moment you'll see a horizontal menu bar with some buttons jammed into the top left-hand corner.</P>
<P><img alt="Five buttons are laid out in a row in a flex container. The buttons are jammed into the top left-hand corner that doesn't look neat." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example5.png" width=600 height=77 loading="lazy"> </P>
<P>First, take a local copy of this example.</P>
<P>Now, add the following to the bottom of the example's CSS:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="xkRy3IWATaEaSFrl8IwN4g+Sg4n4gzoRHAgCl0mAIEU="><CODE><SPAN class="token selector">div</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">align-items</SPAN><SPAN class="token punctuation">:</SPAN> center<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">justify-content</SPAN><SPAN class="token punctuation">:</SPAN> space-around<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P><img alt="Five buttons are laid out in a row in a flex container. The flex items are positioned vertically centered and they are evenly spaced out horizontally." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox_center_space-around.png" width=1217 height=209 loading="lazy"> </P>
<P>Refresh the page and you'll see that the buttons are now nicely centered horizontally and vertically. We've done this via two new properties. The flex items are positioned at the center of the cross-axis by setting the <CODE>align-items</CODE> property to <CODE>center</CODE>. The flex items are spaced evenly along the main-axis by setting the <CODE>justify-content</CODE> property to <CODE>space-around</CODE>.</P>
<P>The <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><CODE>align-items</CODE></A> property controls where the flex items sit on the cross axis.</P>
<UL>
<LI>By default, the value <CODE>normal</CODE> which behaves as <CODE>stretch</CODE> in flexbox. This stretches all flex items to fill the parent in the direction of the cross axis. If the parent doesn't have a fixed size in the cross axis direction, then all flex items will become as tall (or wide) as the tallest (or widest) flex item. This is how our first example had columns of equal height by default. 
<LI>The <CODE>center</CODE> value that we used in our above code causes the items to maintain their intrinsic dimensions, but be centered along the cross axis. This is why our current example's buttons are centered vertically. 
<LI>You can also have values like <CODE>flex-start</CODE>, <CODE>self-start</CODE> or <CODE>start</CODE> and <CODE>flex-end</CODE>, <CODE>self-end</CODE> or <CODE>end</CODE>, which will align all items at the start and end of the cross axis respectively. The <CODE>baseline</CODE> values will line up the flex items by their baseline; basically the bottom of each flex items first line of text will be lined up with the bottom of the first line of the element with the greatest distance between the cross start and that baseline. See <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><CODE>align-items</CODE></A> for the full details.</LI></UL>
<P>You can override the <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"><CODE>align-items</CODE></A> behavior for individual flex items by applying the <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self"><CODE>align-self</CODE></A> property to them. For example, try adding the following to your CSS:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="TNTeLhv4MOTHqCBRwx1LFxDtj7mgulHSiMF0PfdK+NQ="><CODE><SPAN class="token selector">button:first-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">align-self</SPAN><SPAN class="token punctuation">:</SPAN> flex-end<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P><img alt="Five buttons are laid out in a row in a flex container. All the flex items except the first one are positioned at the center of the cross-axis, or vertically centered. The first item is flush against the bottom of the flex container, at the end of the cross-axis The flex items are spaced evenly along the main-axis, or width, of the container." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox_first-child_flex-end.png" width=1219 height=217 loading="lazy"> </P>
<P>Have a look at what effect this has and remove it again when you've finished.</P>
<P><A href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"><CODE>justify-content</CODE></A> controls where the flex items sit on the main axis.</P>
<UL>
<LI>The default value is <CODE>normal</CODE>, which behaves as <CODE>start</CODE>, which makes all the items sit at the start of the main axis. 
<LI>You can use <CODE>end</CODE> or <CODE>flex-end</CODE> to make them sit at the end. 
<LI>The <CODE>left</CODE> and <CODE>right</CODE> values behave as <CODE>start</CODE> or <CODE>end</CODE> depending on the writing mode direction. 
<LI><CODE>center</CODE> is also a value for <CODE>justify-content</CODE>. It'll make the flex items sit in the center of the main axis. 
<LI>The value we've used above, <CODE>space-around</CODE>, is useful &#8212; it distributes all the items evenly along the main axis with a bit of space left at either end. 
<LI>There is another value, <CODE>space-between</CODE>, which is very similar to <CODE>space-around</CODE> except that it doesn't leave any space at either end.</LI></UL>
<P>The <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items"><CODE>justify-items</CODE></A> property is ignored in flexbox layouts.</P>
<P>We'd like to encourage you to play with these values to see how they work before you continue.</P></DIV></SECTION><SECTION aria-labelledby=ordering_flex_items>
<H2 id=ordering_flex_items><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#ordering_flex_items">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2073">Topic #2,073: Ordering flex items. Flexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Ordering flex items</A></H2>
<DIV class=section-content>
<P>Flexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do with traditional layout methods.</P>
<P>Try adding the following CSS to your button bar example code:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="yjaF+H28xod+YvN91Mp8WX3HuVr2x7D8DgRcKCO0vLQ="><CODE><SPAN class="token selector">button:first-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">order</SPAN><SPAN class="token punctuation">:</SPAN> 1<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Refresh and you'll see that the "Smile" button has moved to the end of the main axis. Let's talk about how this works in a bit more detail:</P>
<UL>
<LI>By default, all flex items have an <A href="https://developer.mozilla.org/en-US/docs/Web/CSS/order"><CODE>order</CODE></A> value of <CODE>0</CODE>. 
<LI>Flex items with higher specified order values will appear later in the display order than items with lower order values. 
<LI>Flex items with the same order value will appear in their source order. So if you have four items whose order values have been set as <CODE>2</CODE>, <CODE>1</CODE>, <CODE>1</CODE>, and <CODE>0</CODE> respectively, their display order would be 4th, 2nd, 3rd, then 1st. 
<LI>The 3rd item appears after the 2nd because it has the same order value and is after it in the source order.</LI></UL>
<P>You can set negative order values to make items appear earlier than items whose value is <CODE>0</CODE>. For example, you could make the "Blush" button appear at the start of the main axis using the following rule:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="ECPqUlQDjA8NCr/IXV3vIOrx2mYqfHgPsoSDeYQx7hA="><CODE><SPAN class="token selector">button:last-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">order</SPAN><SPAN class="token punctuation">:</SPAN> -1<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>While you can change the order using <CODE>order</CODE>, the tabbing order remains the same as the code order. Changing the order of focusable elements can negatively impact usability for your keyboard users!</P></DIV></SECTION><SECTION aria-labelledby=nested_flex_boxes>
<H2 id=nested_flex_boxes><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#nested_flex_boxes">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2074">Topic #2,074: Nested flex boxes. It's possible to create some pretty complex layouts with flexbox. It's perfectly OK to set a flex item to also be a flex container, so that its children are .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Flexbox : </font></strong>
Nested flex boxes</A></H2>
<DIV class=section-content>
<P>It's possible to create some pretty complex layouts with flexbox. It's perfectly OK to set a flex item to also be a flex container, so that its children are also laid out like flexible boxes. Have a look at <A class=external href="https://github.com/mdn/learning-area/blob/main/css/css-layout/flexbox/complex-flexbox.html" target=_blank>complex-flexbox.html</A> (<A class=external href="https://mdn.github.io/learning-area/css/css-layout/flexbox/complex-flexbox.html" target=_blank>see it live also</A>).</P>
<P><img alt="The Sample flexbox example has three flex item children laid out in a row. The first two are the same width, the third is slightly wider. The third flex item is also a flex container. It has a set of buttons in two rows followed by text. The first row of buttons has 4 buttons that are laid out in a row; the buttons are the same width, taking up the full width of the container. The second row has a single button that takes up the entire width of the row on its own." src="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox/flexbox-example7.png" width=800 height=347 loading="lazy"> </P>
<P>This complex layout has a few flex items that are also flex containers. The HTML for this is fairly straightforward. We've got a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A> element containing three <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A>s. The third <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> contains three <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A>s, and the first <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A> contains five <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A>s:</P><PRE class="brush: plain notranslate">section - article
          article
          article - div - button
                    div   button
                    div   button
                          button
                          button
</PRE>
<P>Let's look at the code we've used for the layout.</P>
<P>First of all, we set the children of the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"><CODE>&lt;section&gt;</CODE></A> to be laid out as flexible boxes.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="oJHRr8VGPEYZEP7879orpkHU9b+BaVLM9fkRsRB22ZI="><CODE><SPAN class="token selector">section</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Next, we set some flex values on the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A>s themselves. Take special note of the second rule here: we're setting the third <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"><CODE>&lt;article&gt;</CODE></A> to have its children laid out like flex items too, but this time we're laying them out like a column.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="hw63gd43iU4CdWJ63dpz+gqaCzVSjp3P2QR9+z0LaMM="><CODE><SPAN class="token selector">article</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 200px<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>

<SPAN class="token selector">article:nth-of-type(3)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 3 200px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">flex-flow</SPAN><SPAN class="token punctuation">:</SPAN> column<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Next, we select the first <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div"><CODE>&lt;div&gt;</CODE></A>. We first use <CODE>flex: 1 100px;</CODE> to effectively give it a minimum height of <CODE>100px</CODE>, then we set its children (the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><CODE>&lt;button&gt;</CODE></A> elements) to also be laid out like flex items. Here we lay them out in a wrapping row and align them in the center of the available space as we did with the individual button example we saw earlier.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="HXRwk0OF0ZF1TLd9SZGlW/qp7EOPii8xkou4E6hxmRQ="><CODE><SPAN class="token selector">article:nth-of-type(3) div:first-child</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 100px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">display</SPAN><SPAN class="token punctuation">:</SPAN> flex<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">flex-flow</SPAN><SPAN class="token punctuation">:</SPAN> row wrap<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">align-items</SPAN><SPAN class="token punctuation">:</SPAN> center<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">justify-content</SPAN><SPAN class="token punctuation">:</SPAN> space-around<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Finally, we set some sizing on the button. This time by giving it a flex value of <CODE>1 auto</CODE>. This has a very interesting effect, which you'll see if you try resizing your browser window width. The buttons will take up as much space as they can. As many will fit on a line as is comfortable; beyond that, they'll drop to a new line.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>css</SPAN></DIV><PRE class="brush: css notranslate" data-signature="b84bodX2phgKMt/oHfeFb9tRv4TUbZl0/AjHMi/xsgA="><CODE><SPAN class="token selector">button</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token property">flex</SPAN><SPAN class="token punctuation">:</SPAN> 1 auto<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">margin</SPAN><SPAN class="token punctuation">:</SPAN> 5px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">font-size</SPAN><SPAN class="token punctuation">:</SPAN> 18px<SPAN class="token punctuation">;</SPAN>
  <SPAN class="token property">line-height</SPAN><SPAN class="token punctuation">:</SPAN> 1.5<SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#test_your_skills!">
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:41 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
