<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Anatomy of an HTML element">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Anatomy of an HTML element">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Anatomy of an HTML element (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Anatomy of an HTML element </font></b><br>(6 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="378.htm"> - Next</a> - <a href="350.htm">Previous</a> - <a href="343.htm">Parent</a> - <a href="352.htm">Next sibling</a> - <a href="350.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="335.htm">2. Semantic HTML</a></li>
<ul>
<li><a href="1646.htm">Introduction to HTML</a></li>
<ul>
<li><a href="343.htm">Getting started with HTML</a></li>
<ul>
<li>This page: Anatomy of an HTML element</li>
<ol>
<li><a href="378.htm">Anatomy of an HTML element  Let's further explore our paragraph element from the previous section:   The anatomy of our element is: The opening tag: This consists of the name .</a> (3 elements)
<li>Nesting elements (see <a href="#376">below)</a>
<li>Void elements (see <a href="#377">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="376">Topic #376: Nesting elements</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<SPAN class=clozed>Elements can be placed within other elements</SPAN>. This is called <EM>nesting</EM>. If we wanted to state that our cat is <STRONG>very</STRONG> grumpy, we could wrap the word <EM>very</EM> in a <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong"><CODE>&lt;strong&gt;</CODE></A> element, which means that the word is to have strong(er) text formatting: 
<P></P><SPAN class=language-name>html</SPAN><PRE class="brush: html notranslate" data-signature="s8vdsDlqxaqukU0ez9HlIwWW3JuOMizb52YkXD6O2pk="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>My cat is <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>very<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN> grumpy.<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE>
<P>There is a right and wrong way to do nesting. In the example above, we opened the <CODE>p</CODE> element first, then opened the <CODE>strong</CODE> element. For proper nesting, we should close the <CODE>strong</CODE> element first, before closing the <CODE>p</CODE>.</P>
<P>The following is an example of the <EM>wrong</EM> way to do nesting:</P><SPAN class=language-name>html</SPAN><PRE class="brush: html example-bad notranslate" data-signature="SWcZ2nQi6xIgeBMI1k3nmhW79L48oSkW5bj0HwmC4Us="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>My cat is <SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>very grumpy.<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>strong</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE>
<P>The <STRONG><SPAN class=clozed><STRONG>tags have to open and close in a way that they are inside or outside one another</STRONG></SPAN></STRONG>. With the kind of overlap in the example above, the browser has to guess at your intent. This kind of guessing can result in unexpected results.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="377">Topic #377: Void elements</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<SPAN class=clozed>Not all</SPAN> elements follow the pattern of an opening tag, <SPAN class=clozed>content, and a closing tag</SPAN>. Some elements consist of <SPAN class=clozed>a single tag</SPAN>, which is typically used to insert/embed something in the document. Such elements are called <SPAN class=clozed><A href="https://developer.mozilla.org/en-US/docs/Glossary/Void_element">void elements</A></SPAN>. For example, the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"><CODE>&lt;img&gt;</CODE></A> element embeds an image file onto a page: 
<P></P><SPAN class=language-name>html</SPAN><PRE class="brush: html notranslate" data-signature="Hp95hxHo6qdE7F+d/fMV2G8U2e9rF8jRTO9DgIQlEDY="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>img</SPAN>
  <SPAN class="token attr-name">src</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png<SPAN class="token punctuation">"</SPAN></SPAN>
  <SPAN class="token attr-name">alt</SPAN><SPAN class="token attr-value"><SPAN class="token punctuation attr-equals">=</SPAN><SPAN class="token punctuation">"</SPAN>Firefox icon<SPAN class="token punctuation">"</SPAN></SPAN> <SPAN class="token punctuation">/&gt;</SPAN></SPAN>
</CODE></PRE>
<P>This would output the following:</P>
<P><STRONG>Note:</STRONG> In HTML, there is no requirement to add a <CODE>/</CODE> at the end of a void element's tag, for example: <CODE>&lt;img src="images/cat.jpg" alt="cat" /&gt;</CODE>. However, it is also a valid syntax, and you may do this when you want your HTML to <SPAN class=clozed>be valid XML</SPAN>.
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:40 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
