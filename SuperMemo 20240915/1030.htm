<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: What is JavaScript?">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), What is JavaScript?">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): What is JavaScript? (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): What is JavaScript? </font></b><br>(15 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="1044.htm"> - Next</a> - <a href="339.htm">Previous</a> - <a href="339.htm">Parent</a> - <a href="1035.htm">Next sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="339.htm">6. JavaScript fundamentals</a></li>
<ul>
<li>This page: What is JavaScript?</li>
<ol>
<li><a href="1044.htm">A high-level definition</a> (2 elements)
<li>So what can it really do? (see <a href="#1045">below)</a>
<li>What is JavaScript doing on your page? (see <a href="#777">below)</a>
<li><a href="1046.htm">How do you add JavaScript to your page?</a> (8 elements)
<li>Comments (see <a href="#1047">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="1045">Topic #1,045: So what can it really do?</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<STRONG><FONT color=blue>What is JavaScript? : </FONT></STRONG><SPAN class=headers>Title:</SPAN></B><SPAN class=RefText> So what can it really do?</SPAN></FONT></A> 
<H2></H2>
<DIV class=section-content>
<P>The core client-side JavaScript language consists of some common programming features that allow you to do things like:</P>
<UL>
<LI>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <CODE>name</CODE>. 
<LI>Operations on pieces of text (known as "strings" in programming). In the above example we take the string "Player 1: " and join it to the <CODE>name</CODE> variable to create the complete text label, e.g. "Player 1: Chris". 
<LI>Running code in response to certain events occurring on a web page. We used a <A title=click href="https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event"><CODE>click</CODE></A> event in our example above to detect when the label is clicked and then run the code that updates the text label. 
<LI>And much more!</LI></UL>
<P>What is even more exciting however is the functionality built on top of the client-side JavaScript language. So-called <STRONG>Application Programming Interfaces</STRONG> (<STRONG>APIs</STRONG>) provide you with extra superpowers to use in your JavaScript code.</P>
<P>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement. They do the same thing for programming that ready-made furniture kits do for home building &#8212; it is much easier to take ready-cut panels and screw them together to make a bookshelf than it is to work out the design yourself, go and find the correct wood, cut all the panels to the right size and shape, find the correct-sized screws, and <EM>then</EM> put them together to make a bookshelf. </P>
<P>They generally fall into two categories.</P>
<P><STRONG>Browser APIs</STRONG> are built into your web browser, and are able to expose data from the surrounding computer environment, or do useful complex things. For example:</P>
<UL>
<LI>The <A href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM (Document Object Model) API</A> allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc. Every time you see a popup window appear on a page, or some new content displayed (as we saw above in our simple demo) for example, that's the DOM in action. 
<LI>The <A href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API">Geolocation API</A> retrieves geographical information. This is how <A class=external href="https://www.google.com/maps" target=_blank>Google Maps</A> is able to find your location and plot it on a map. 
<LI>The <A href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas</A> and <A href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</A> APIs allow you to create animated 2D and 3D graphics. People are doing some amazing things using these web technologies &#8212; see <A class=external href="https://experiments.withgoogle.com/collection/chrome" target=_blank>Chrome Experiments</A> and <A class=external href="https://webglsamples.org/" target=_blank>webglsamples</A>. 
<LI><A href="https://developer.mozilla.org/en-US/docs/Web/Media/Audio_and_video_delivery">Audio and Video APIs</A> like <A href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement"><CODE>HTMLMediaElement</CODE></A> and <A href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">WebRTC</A> allow you to do really interesting things with multimedia, such as play audio and video right in a web page, or grab video from your web camera and display it on someone else's computer (try our simple <A class=external href="https://chrisdavidmills.github.io/snapshot/" target=_blank>Snapshot demo</A> to get the idea).</LI></UL>
<DIV id=sect3 class="notecard note">
<P><STRONG>Note:</STRONG> Many of the above demos won't work in an older browser &#8212; when experimenting, it's a good idea to use a modern browser like Firefox, Chrome, Edge or Opera to run your code in. You will need to consider <A href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing">cross browser testing</A> in more detail when you get closer to delivering production code (i.e. real code that real customers will use). </P></DIV>
<P><STRONG>Third party APIs</STRONG> are not built into the browser by default, and you generally have to grab their code and information from somewhere on the Web. For example:</P>
<UL>
<LI>The <A class=external href="https://developer.x.com/en/docs" target=_blank>Twitter API</A> allows you to do things like displaying your latest tweets on your website. 
<LI>The <A class=external href="https://developers.google.com/maps/" target=_blank>Google Maps API</A> and <A class=external href="https://wiki.openstreetmap.org/wiki/API" target=_blank>OpenStreetMap API</A> allows you to embed custom maps into your website, and other such functionality.</LI></UL>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> These APIs are advanced, and we'll not be covering any of these in this module. You can find out much more about these in our <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs">Client-side web APIs module</A>.</P></DIV>
<P>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps, or Instagram after studying JavaScript for 24 hours &#8212; there are a lot of basics to cover first. And that's why you're here &#8212; let's move on!
</td>
</tr>
<tr>
<td bordercolor="#0066FF">
<img src="79.png"alt="Two categories of API; 3rd party APIs are shown to the side of the browser and browser APIs are in the browser (So what can it really do?)">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="777">Topic #777: What is JavaScript doing on your page?</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
Here we'll actually start looking at some code, and while doing so, explore what actually happens when you run some JavaScript in your page.
<P></P>
<P>Let's briefly recap the story of what happens when you load a web page in a browser (first talked about in our <A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works#how_does_css_actually_work">How CSS works</A> article). When you load a web page in your browser, you are running your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab). This is like a factory that takes in raw materials (the code) and outputs a product (the web page).</P>
<P>A very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</P></SECTION><SECTION aria-labelledby=browser_security>
<H3 id=browser_security><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#browser_security">Browser security</A></H3>
<DIV class=section-content>
<P>Each browser tab has its own separate bucket for running code in (these buckets are called "execution environments" in technical terms) &#8212; this means that in most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab &#8212; or on another website. This is a good security measure &#8212; if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things. </P>
<DIV id=sect5 class="notecard note">
<P><STRONG>Note:</STRONG> There are ways to send code and data between different websites/tabs in a safe manner, but these are advanced techniques that we won't cover in this course.</P></DIV></DIV></SECTION><SECTION aria-labelledby=javascript_running_order>
<H3 id=javascript_running_order><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#javascript_running_order">JavaScript running order</A></H3>
<DIV class=section-content>
<P>When the browser encounters a block of JavaScript, it generally runs it in order, from top to bottom. This means that you need to be careful what order you put things in. For example, let's return to the block of JavaScript we saw in our first example: </P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="DzxE/xRLUvueInzaU+NoOjWDtdtw6KepnbTC8URvbfU="><CODE><SPAN class="token keyword">const</SPAN> button <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">querySelector</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"button"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

button<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> updateName<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">updateName</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">const</SPAN> name <SPAN class="token operator">=</SPAN> <SPAN class="token function">prompt</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"Enter a new name"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
  button<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">Player 1: </SPAN><SPAN class="token interpolation"><SPAN class="token interpolation-punctuation punctuation">${</SPAN>name<SPAN class="token interpolation-punctuation punctuation">}</SPAN></SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P>Here we first select a button using <CODE>document.querySelector</CODE>, then attaching an event listener to it using <CODE>addEventListener</CODE> so that when the button is clicked, the <CODE>updateName()</CODE> code block (lines 5&#8211;8) is run. The <CODE>updateName()</CODE> code block (these types of reusable code blocks are called "functions") asks the user for a new name, and then inserts that name into the button text to update the display.</P>
<P>If you swapped the order of the first two lines of code, it would no longer work &#8212; instead, you'd get an error returned in the <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">browser developer console</A> &#8212; <CODE>Uncaught ReferenceError: Cannot access 'button' before initialization</CODE>. This means that the <CODE>button</CODE> object has not been initialized yet, so we can't add an event listener to it. </P>
<DIV id=sect6 class="notecard note">
<P><STRONG>Note:</STRONG> This is a very common error &#8212; you need to be careful that the objects referenced in your code exist before you try to do stuff to them.</P></DIV></DIV></SECTION><SECTION aria-labelledby=interpreted_versus_compiled_code>
<H3 id=interpreted_versus_compiled_code><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#interpreted_versus_compiled_code">Interpreted versus compiled code</A></H3>
<DIV class=section-content>
<P>You might hear the terms <STRONG>interpreted</STRONG> and <STRONG>compiled</STRONG> in the context of programming. In interpreted languages, the code is run from top to bottom and the result of running the code is immediately returned. You don't have to transform the code into a different form before the browser runs it. The code is received in its programmer-friendly text form and processed directly from that. </P>
<P>Compiled languages on the other hand are transformed (compiled) into another form before they are run by the computer. For example, C/C++ are compiled into machine code that is then run by the computer. The program is executed from a binary format, which was generated from the original program source code. </P>
<P>JavaScript is a lightweight interpreted programming language. The web browser receives the JavaScript code in its original text form and runs the script from that. From a technical standpoint, most modern JavaScript interpreters actually use a technique called <STRONG>just-in-time compiling</STRONG> to improve performance; the JavaScript source code gets compiled into a faster, binary format while the script is being used, so that it can be run as quickly as possible. However, JavaScript is still considered an interpreted language, since the compilation is handled at run time, rather than ahead of time. </P>
<P>There are advantages to both types of language, but we won't discuss them right now.</P></DIV></SECTION><SECTION aria-labelledby=server-side_versus_client-side_code>
<H3 id=server-side_versus_client-side_code><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#server-side_versus_client-side_code">Server-side versus client-side code</A></H3>
<DIV class=section-content>
<P>You might also hear the terms <STRONG>server-side</STRONG> and <STRONG>client-side</STRONG> code, especially in the context of web development. Client-side code is code that is run on the user's computer &#8212; when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser. In this module we are explicitly talking about <STRONG>client-side JavaScript</STRONG>. </P>
<P>Server-side code on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, ASP.NET, and even JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment &#8212; you can find out more about server-side JavaScript in our <A href="https://developer.mozilla.org/en-US/docs/Learn/Server-side">Dynamic Websites &#8211; Server-side programming</A> topic. </P></DIV></SECTION><SECTION aria-labelledby=dynamic_versus_static_code>
<H3 id=dynamic_versus_static_code><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#dynamic_versus_static_code">Dynamic versus static code</A></H3>
<DIV class=section-content>
<P>The word <STRONG>dynamic</STRONG> is used to describe both client-side JavaScript, and server-side languages &#8212; it refers to the ability to update the display of a web page/app to show different things in different circumstances, generating new content as required. Server-side code dynamically generates new content on the server, e.g. pulling data from a database, whereas client-side JavaScript dynamically generates new content inside the browser on the client, e.g. creating a new HTML table, filling it with data requested from the server, then displaying the table in a web page shown to the user. The meaning is slightly different in the two contexts, but related, and both approaches (server-side and client-side) usually work together. </P>
<P>A web page with no dynamically updating content is referred to as <STRONG>static</STRONG> &#8212; it just shows the same content all the time.</P></DIV></SECTION><SECTION aria-labelledby=how_do_you_add_javascript_to_your_page>
<H2 id=how_do_you_add_javascript_to_your_page><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript#how_do_you_add_javascript_to_your_page">
</td>
</tr>
<tr>
<td bordercolor="#0066FF">
<img src="80.png"alt="HTML, CSS and JavaScript code come together to create the content in the browser tab when the page is loaded (What is JavaScript doing on your page?)">
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:41 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
