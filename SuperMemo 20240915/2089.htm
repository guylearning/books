<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Declaring strings">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Declaring strings">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Declaring strings (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Declaring strings </font></b><br>(2 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="1034.htm"> - Next</a> - <a href="1033.htm">Previous</a> - <a href="1033.htm">Parent</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="339.htm">6. JavaScript fundamentals</a></li>
<ul>
<li><a href="1033.htm">Handling text — strings in JavaScript</a></li>
<ul>
<li>This page: Declaring strings</li>
<ol>
<li>Strings are dealt with similarly to numbers at first glance, but when you dig deeper you'll start to see some notable differences. Let's start by entering some basic lines . (see <a href="#2094">below)</a>
<li>Single quotes, double quotes, and backticks (see <a href="#2095">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="2094">Topic #2,094: Strings are dealt with similarly to numbers at first glance, but when you dig deeper you'll start to see some notable differences. Let's start by entering some basic lines .</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Declaring strings : </font></strong>Strings are dealt with similarly to numbers at first glance, but when you dig deeper you'll start to see some notable differences. Let's start by entering some basic lines into the <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">browser developer console</A> to familiarize ourselves.
<P></P>
<P>To start with, enter the following lines:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="IyENn+UO00Pft/iH2CrmcYGk1pXX0h8baGRJhNo0a+o="><CODE><SPAN class="token keyword">const</SPAN> string <SPAN class="token operator">=</SPAN> <SPAN class="token string">"The revolution will not be televised."</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>string<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Just like we did with numbers, we are declaring a variable, initializing it with a string value, and then returning the value. The only difference here is that when writing a string, you need to surround the value with quotes.</P>
<P>If you don't do this, or miss one of the quotes, you'll get an error. Try entering the following lines:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js example-bad notranslate" data-signature="Pjf2PtgTa9E4r2sdgvLnzsFmf8oEr5ynxpvVn2IQVfo="><CODE><SPAN class="token keyword">const</SPAN> badString1 <SPAN class="token operator">=</SPAN> This is a test<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> badString2 <SPAN class="token operator">=</SPAN> 'This is a test<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> badString3 <SPAN class="token operator">=</SPAN> This is a test'<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>These lines don't work because any text without quotes around it is interpreted as a variable name, property name, reserved word, or similar. If the browser doesn't recognize the unquoted text, then an error is raised (e.g., "missing; before statement"). If the browser can detect where a string starts but not its end (owing to the missing second quote), it reports an "unterminated string literal" error. If your program is raising such errors, then go back and check all your strings to make sure you have no missing quotation marks.</P>
<P>The following will work if you previously defined the variable <CODE>string</CODE> &#8212; try it now:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="9CPuD8yrIchNrUa1hoiuvbwNFFiLF27Ogh6wPBM6Fm0="><CODE><SPAN class="token keyword">const</SPAN> badString <SPAN class="token operator">=</SPAN> string<SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>badString<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P><CODE>badString</CODE> is now set to have the same value as <CODE>string</CODE>.
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="2095">Topic #2,095: Single quotes, double quotes, and backticks</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<H3></H3>
<DIV class=section-content>
<P>In JavaScript, you can choose single quotes (<CODE>'</CODE>), double quotes (<CODE>"</CODE>), or backticks (<CODE>`</CODE>) to wrap your strings in. All of the following will work:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="PP9Z2QFSB44datMHt5lXe54cRfRF3nvtlGcBvsLH0LE="><CODE><SPAN class="token keyword">const</SPAN> single <SPAN class="token operator">=</SPAN> <SPAN class="token string">'Single quotes'</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> double <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Double quotes"</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> backtick <SPAN class="token operator">=</SPAN> <SPAN class="token template-string"><SPAN class="token template-punctuation string">`</SPAN><SPAN class="token string">Backtick</SPAN><SPAN class="token template-punctuation string">`</SPAN></SPAN><SPAN class="token punctuation">;</SPAN>

console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>single<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>double<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
console<SPAN class="token punctuation">.</SPAN><SPAN class="token function">log</SPAN><SPAN class="token punctuation">(</SPAN>backtick<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>You must use the same character for the start and end of a string, or you will get an error:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js example-bad notranslate" data-signature="ru4RPqpXaDMwQgfbMrSi96tyzxEv8kKqxMD4ethzEoM="><CODE><SPAN class="token keyword">const</SPAN> badQuotes <SPAN class="token operator">=</SPAN> 'This is not allowed<SPAN class="token operator">!</SPAN>"<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Strings declared using single quotes and strings declared using double quotes are the same, and which you use is down to personal preference &#8212; although it is good practice to choose one style and use it consistently in your code.</P>
<P>Strings declared using backticks are a special kind of string called a <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"><EM>template literal</EM></A>. In most ways, template literals are like normal strings, but they have some special properties:</P>
<UL>
<LI>you can <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#embedding_javascript">embed JavaScript</A> in them 
<LI>you can declare template literals over <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#multiline_strings">multiple lines</A></LI></UL></DIV></SECTION><SECTION aria-labelledby=embedding_javascript>
<H2 id=embedding_javascript><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings#embedding_javascript">
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:42 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
