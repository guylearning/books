<html>

<head>
<meta http-equiv="description" content="SuperMemo Collection: (((backup of mindx created on 2024-09-15 23-55-25))), Page: Basic math in JavaScript — numbers and operators">
<meta http-equiv="keywords" content="SuperMemo, (((backup of mindx created on 2024-09-15 23-55-25))), Basic math in JavaScript — numbers and operators">
<meta name="GENERATOR" content="SuperMemo for Windows (Build 18.05)">
<title>(((backup of mindx created on 2024-09-15 23-55-25))): Basic math in JavaScript — numbers and operators (SuperMemo collection)</title>
</head>

<body>

<p align="center"><b><font size="5">(((backup of mindx created on 2024-09-15 23-55-25))): Basic math in JavaScript — numbers and operators </font></b><br>(5 elements)</p>
<a name="TopOfPages"> </a>
<b>Contents:</b>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCCFF">
<tr>
<td width="100%">
  <a href="index.htm">Root</a> <a href="1033.htm"> - Next</a> - <a href="1423.htm">Previous</a> - <a href="339.htm">Parent</a> - <a href="1033.htm">Next sibling</a> - <a href="1036.htm">Previous sibling</a>
<font size="2">
<ul>
<li><a href="index.htm">MindX</a></li>
<ul>
<li><a href="3.htm">Explor</a></li>
<ul>
<li><a href="330.htm">MDN Front-End Developer</a></li>
<ul>
<li><a href="332.htm">Core</a></li>
<ul>
<li><a href="339.htm">6. JavaScript fundamentals</a></li>
<ul>
<li>This page: Basic math in JavaScript — numbers and operators</li>
<ol>
<li>Everybody loves math (see <a href="#1525">below)</a>
<li>Arithmetic operators. Arithmetic operators are used for performing mathematical calculations in JavaScript:. Operator. Name. Purpose. Example. +. Addition. Adds two numbers . (see <a href="#1526">below)</a>
<li>Increment and decrement operators. Sometimes you'll want to repeatedly add or subtract one to or from a numeric variable value. This can be conveniently done using the . (see <a href="#1527">below)</a>
<li>Assignment operators. Assignment operators are operators that assign a value to a variable. We have already used the most basic one, =, loads of times — it assigns the . (see <a href="#1528">below)</a>
<li>Comparison operators. Sometimes we will want to run true/false tests, then act accordingly depending on the result of that test — to do this we use comparison operators . (see <a href="#1529">below)</a>
</ol>
</ul>
</ul>
</ul>
</ul>
</ul>
</ul>
</font>
</td>
</tr>
</table>
</center>
</div>

<P align="center"><b><a name="1525">Topic #1,525: Everybody loves math</a></P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<H3 id=types_of_numbers><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#types_of_numbers">Types of numbers</A></H3>
<DIV class=section-content>
<P>In programming, even the humble decimal number system that we all know so well is more complicated than you might think. We use different terms to describe different types of decimal numbers, for example:</P>
<UL>
<LI><STRONG>Integers</STRONG> are numbers without a fractional part. They can either be positive or negative, e.g. 10, 400, or -5. 
<LI><STRONG>Floating point numbers</STRONG> (floats) have decimal points and decimal places, for example 12.5, and 56.7786543.</LI></UL>
<P>We even have different types of number systems! Decimal is base 10 (meaning it uses 0&#8211;9 in each digit), but we also have things like:</P>
<UL>
<LI><STRONG>Binary</STRONG> &#8212; The lowest level language of computers; 0s and 1s. 
<LI><STRONG>Octal</STRONG> &#8212; Base 8, uses 0&#8211;7 in each digit. 
<LI><STRONG>Hexadecimal</STRONG> &#8212; Base 16, uses 0&#8211;9 and then a&#8211;f in each digit. You may have encountered these numbers before when setting <A href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#hexadecimal_rgb_values">colors in CSS</A>.</LI></UL>
<P><STRONG>Before you start to get worried about your brain melting, stop right there!</STRONG> For a start, we are just going to stick to decimal numbers throughout this course; you'll rarely come across a need to start thinking about other types, if ever.</P>
<P>The second bit of good news is that unlike some other programming languages, JavaScript only has one data type for numbers, both integers and decimals &#8212; you guessed it, <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><CODE>Number</CODE></A>. This means that whatever type of numbers you are dealing with in JavaScript, you handle them in exactly the same way.</P>
<DIV id=sect1 class="notecard note">
<P><STRONG>Note:</STRONG> Actually, JavaScript has a second number type, <A href="https://developer.mozilla.org/en-US/docs/Glossary/BigInt">BigInt</A>, used for very, very large integers. But for the purposes of this course, we'll just worry about <CODE>Number</CODE> values.</P></DIV></DIV></SECTION><SECTION aria-labelledby=its_all_numbers_to_me>
<H3 id=its_all_numbers_to_me><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#its_all_numbers_to_me">It's all numbers to me</A></H3>
<DIV class=section-content>
<P>Let's quickly play with some numbers to reacquaint ourselves with the basic syntax we need. Enter the commands listed below into your <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">developer tools JavaScript console</A>.</P>
<OL>
<LI>First of all, let's declare a couple of variables and initialize them with an integer and a float, respectively, then type the variable names back in to check that everything is in order: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="0zXkkqVzb10Vis5ogW8/2W8gibyfEJ/oKzNCQh/l6kY="><CODE><SPAN class="token keyword">const</SPAN> myInt <SPAN class="token operator">=</SPAN> <SPAN class="token number">5</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> myFloat <SPAN class="token operator">=</SPAN> <SPAN class="token number">6.667</SPAN><SPAN class="token punctuation">;</SPAN>
myInt<SPAN class="token punctuation">;</SPAN>
myFloat<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Number values are typed in without quote marks &#8212; try declaring and initializing a couple more variables containing numbers before you move on. 
<LI>Now let's check that both our original variables are of the same datatype. There is an operator called <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"><CODE>typeof</CODE></A> in JavaScript that does this. Enter the below two lines as shown: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="nbMRuhCWz86zbtoLInZxQdIeohfD+z2ESbgStQPjCb8="><CODE><SPAN class="token keyword">typeof</SPAN> myInt<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">typeof</SPAN> myFloat<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>You should get <CODE>"number"</CODE> returned in both cases &#8212; this makes things a lot easier for us than if different numbers had different data types, and we had to deal with them in different ways. Phew! </LI></OL></DIV></SECTION><SECTION aria-labelledby=useful_number_methods>
<H3 id=useful_number_methods><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#useful_number_methods">Useful Number methods</A></H3>
<DIV class=section-content>
<P>The <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><CODE>Number</CODE></A> object, an instance of which represents all standard numbers you'll use in your JavaScript, has a number of useful methods available on it for you to manipulate numbers. We don't cover these in detail in this article because we wanted to keep it as a simple introduction and only cover the real basic essentials for now; however, once you've read through this module a couple of times it is worth going to the object reference pages and learning more about what's available.</P>
<P>For example, to round your number to a fixed number of decimal places, use the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed"><CODE>toFixed()</CODE></A> method. Type the following lines into your browser's <A class=external href="https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html" target=_blank>console</A>:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="dRJPGeri6yY0I4GXAQqQpjQ3+QPo/+Oap4DVigKI7Ak="><CODE><SPAN class="token keyword">const</SPAN> lotsOfDecimal <SPAN class="token operator">=</SPAN> <SPAN class="token number">1.766584958675746364</SPAN><SPAN class="token punctuation">;</SPAN>
lotsOfDecimal<SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> twoDecimalPlaces <SPAN class="token operator">=</SPAN> lotsOfDecimal<SPAN class="token punctuation">.</SPAN><SPAN class="token function">toFixed</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token number">2</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
twoDecimalPlaces<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV></DIV></SECTION><SECTION aria-labelledby=converting_to_number_data_types>
<H3 id=converting_to_number_data_types><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#converting_to_number_data_types">Converting to number data types</A></H3>
<DIV class=section-content>
<P>Sometimes you might end up with a number that is stored as a string type, which makes it difficult to perform calculations with it. This most commonly happens when data is entered into a <A href="https://developer.mozilla.org/en-US/docs/Learn/Forms">form</A> input, and the <A href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text">input type is text</A>. There is a way to solve this problem &#8212; passing the string value into the <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number"><CODE>Number()</CODE></A> constructor to return a number version of the same value.</P>
<P>For example, try typing these lines into your console:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="cdoAGJE84NO8WPjXqRZSHVt2FhYKDrLUPMn9oF3+yco="><CODE><SPAN class="token keyword">let</SPAN> myNumber <SPAN class="token operator">=</SPAN> <SPAN class="token string">"74"</SPAN><SPAN class="token punctuation">;</SPAN>
myNumber <SPAN class="token operator">+=</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>You end up with the result 743, not 77, because <CODE>myNumber</CODE> is actually defined as a string. You can test this by typing in the following:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="VeopL3XYGu3u4AKz/VN4GvIax3PmMwVFowApBM4PTWE="><CODE><SPAN class="token keyword">typeof</SPAN> myNumber<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>To fix the calculation, you can do this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="Vg0TenDjeAprNXrsR+bFcJgk6FsV7Pg5zbyd8US0zWM="><CODE><SPAN class="token keyword">let</SPAN> myNumber <SPAN class="token operator">=</SPAN> <SPAN class="token string">"74"</SPAN><SPAN class="token punctuation">;</SPAN>
myNumber <SPAN class="token operator">=</SPAN> <SPAN class="token function">Number</SPAN><SPAN class="token punctuation">(</SPAN>myNumber<SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">+</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>The result is then 77, as initially expected.</P></DIV></SECTION><SECTION aria-labelledby=arithmetic_operators>
<H2 id=arithmetic_operators><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#arithmetic_operators">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1526">Topic #1,526: Arithmetic operators. Arithmetic operators are used for performing mathematical calculations in JavaScript:. Operator. Name. Purpose. Example. +. Addition. Adds two numbers .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Basic math in JavaScript &#8212; numbers and operators : </font></strong>
Arithmetic operators</A></H2>
<DIV class=section-content>
<P>Arithmetic operators are used for performing mathematical calculations in JavaScript:</P><FIGURE class=table-container>
<TABLE class=standard-table>
<THEAD>
<TR>
<TH scope=col>Operator</TH>
<TH scope=col>Name</TH>
<TH scope=col>Purpose</TH>
<TH scope=col>Example</TH></TR></THEAD>
<TBODY>
<TR>
<TD><CODE>+</CODE></TD>
<TD>Addition</TD>
<TD>Adds two numbers together.</TD>
<TD><CODE>6 + 9</CODE></TD></TR>
<TR>
<TD><CODE>-</CODE></TD>
<TD>Subtraction</TD>
<TD>Subtracts the right number from the left.</TD>
<TD><CODE>20 - 15</CODE></TD></TR>
<TR>
<TD><CODE>*</CODE></TD>
<TD>Multiplication</TD>
<TD>Multiplies two numbers together.</TD>
<TD><CODE>3 * 7</CODE></TD></TR>
<TR>
<TD><CODE>/</CODE></TD>
<TD>Division</TD>
<TD>Divides the left number by the right.</TD>
<TD><CODE>10 / 5</CODE></TD></TR>
<TR>
<TD><CODE>%</CODE></TD>
<TD>Remainder (sometimes called modulo)</TD>
<TD>
<P>Returns the remainder left over after you've divided the left number into a number of integer portions equal to the right number. </P></TD>
<TD>
<P><CODE>8 % 3</CODE> (returns 2, as three goes into 8 twice, leaving 2 left over). </P></TD></TR>
<TR>
<TD><CODE>**</CODE></TD>
<TD>Exponent</TD>
<TD>Raises a <CODE>base</CODE> number to the <CODE>exponent</CODE> power, that is, the <CODE>base</CODE> number multiplied by itself, <CODE>exponent</CODE> times. </TD>
<TD><CODE>5 ** 2</CODE> (returns <CODE>25</CODE>, which is the same as <CODE>5 * 5</CODE>). </TD></TR></TBODY></TABLE></FIGURE>
<DIV id=sect2 class="notecard note">
<P><STRONG>Note:</STRONG> You'll sometimes see numbers involved in arithmetic referred to as <A href="https://developer.mozilla.org/en-US/docs/Glossary/Operand">operands</A>.</P></DIV>
<DIV id=sect3 class="notecard note">
<P><STRONG>Note:</STRONG> You may sometimes see exponents expressed using the older <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow"><CODE>Math.pow()</CODE></A> method, which works in a very similar way. For example, in <CODE>Math.pow(7, 3)</CODE>, <CODE>7</CODE> is the base and <CODE>3</CODE> is the exponent, so the result of the expression is <CODE>343</CODE>. <CODE>Math.pow(7, 3)</CODE> is equivalent to <CODE>7**3</CODE>.</P></DIV>
<P>We probably don't need to teach you how to do basic math, but we would like to test your understanding of the syntax involved. Try entering the examples below into your <A href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Tools_and_setup/What_are_browser_developer_tools">developer tools JavaScript console</A> to familiarize yourself with the syntax.</P>
<OL>
<LI>First try entering some simple examples of your own, such as 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="/F8tCialr66IzLQp4PxCtYS4GbsRdXg9qajo3LXTNjA="><CODE><SPAN class="token number">10</SPAN> <SPAN class="token operator">+</SPAN> <SPAN class="token number">7</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token number">9</SPAN> <SPAN class="token operator">*</SPAN> <SPAN class="token number">8</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token number">60</SPAN> <SPAN class="token operator">%</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>You can also try declaring and initializing some numbers inside variables, and try using those in the sums &#8212; the variables will behave exactly like the values they hold for the purposes of the sum. For example: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="z5Li1KCoK7a7kwlJ2eX6odUg+ZpTp4zLqmk/dPYuw4w="><CODE><SPAN class="token keyword">const</SPAN> num1 <SPAN class="token operator">=</SPAN> <SPAN class="token number">10</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> num2 <SPAN class="token operator">=</SPAN> <SPAN class="token number">50</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token number">9</SPAN> <SPAN class="token operator">*</SPAN> num1<SPAN class="token punctuation">;</SPAN>
num1 <SPAN class="token operator">**</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN>
num2 <SPAN class="token operator">/</SPAN> num1<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<LI>Last for this section, try entering some more complex expressions, such as: 
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="2AsIDe5U31Liaxo8HWnwSFUmIRvXx3wodkR1xvvODp4="><CODE><SPAN class="token number">5</SPAN> <SPAN class="token operator">+</SPAN> <SPAN class="token number">10</SPAN> <SPAN class="token operator">*</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token punctuation">(</SPAN>num2 <SPAN class="token operator">%</SPAN> <SPAN class="token number">9</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">*</SPAN> num1<SPAN class="token punctuation">;</SPAN>
num2 <SPAN class="token operator">+</SPAN> num1 <SPAN class="token operator">/</SPAN> <SPAN class="token number">8</SPAN> <SPAN class="token operator">+</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV></LI></OL>
<P>Parts of this last set of calculations might not give you quite the result you were expecting; the section below might well give the answer as to why.</P></DIV></SECTION><SECTION aria-labelledby=operator_precedence>
<H3 id=operator_precedence><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#operator_precedence">Operator precedence</A></H3>
<DIV class=section-content>
<P>Let's look at the last example from above, assuming that <CODE>num2</CODE> holds the value 50 and <CODE>num1</CODE> holds the value 10 (as originally stated above):</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="cZ1x4dsJxdYjPsQkD5OST0Od3smHoyopy+JG6Z5oREU="><CODE>num2 <SPAN class="token operator">+</SPAN> num1 <SPAN class="token operator">/</SPAN> <SPAN class="token number">8</SPAN> <SPAN class="token operator">+</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>As a human being, you may read this as <EM>"50 plus 10 equals 60"</EM>, then <EM>"8 plus 2 equals 10"</EM>, and finally <EM>"60 divided by 10 equals 6"</EM>.</P>
<P>But the browser does <EM>"10 divided by 8 equals 1.25"</EM>, then <EM>"50 plus 1.25 plus 2 equals 53.25"</EM>.</P>
<P>This is because of <STRONG>operator precedence</STRONG> &#8212; some operators are applied before others when calculating the result of a calculation (referred to as an <EM>expression</EM>, in programming). Operator precedence in JavaScript is the same as is taught in math classes in school &#8212; multiply and divide are always done first, then add and subtract (the calculation is always evaluated from left to right).</P>
<P>If you want to override operator precedence, you can put parentheses around the parts that you want to be explicitly dealt with first. So to get a result of 6, we could do this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="P2Psw5Z3rqHcOikHeZo5HS+clwO8ezvHuFhgb4rsILc="><CODE><SPAN class="token punctuation">(</SPAN>num2 <SPAN class="token operator">+</SPAN> num1<SPAN class="token punctuation">)</SPAN> <SPAN class="token operator">/</SPAN> <SPAN class="token punctuation">(</SPAN><SPAN class="token number">8</SPAN> <SPAN class="token operator">+</SPAN> <SPAN class="token number">2</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Try it and see.</P>
<DIV id=sect4 class="notecard note">
<P><STRONG>Note:</STRONG> A full list of all JavaScript operators and their precedence can be found in <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence">Operator precedence</A>.</P></DIV></DIV></SECTION><SECTION aria-labelledby=increment_and_decrement_operators>
<H2 id=increment_and_decrement_operators><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#increment_and_decrement_operators">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1527">Topic #1,527: Increment and decrement operators. Sometimes you'll want to repeatedly add or subtract one to or from a numeric variable value. This can be conveniently done using the .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Basic math in JavaScript &#8212; numbers and operators : </font></strong>
Increment and decrement operators</A></H2>
<DIV class=section-content>
<P>Sometimes you'll want to repeatedly add or subtract one to or from a numeric variable value. This can be conveniently done using the increment (<CODE>++</CODE>) and decrement (<CODE>--</CODE>) operators. We used <CODE>++</CODE> in our "Guess the number" game back in our <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/A_first_splash">first splash into JavaScript</A> article, when we added 1 to our <CODE>guessCount</CODE> variable to keep track of how many guesses the user has left after each turn.</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="CtFiz8JFePW4hyZh9Uib80W0EIEE8rvWEf7LcN486fg="><CODE>guessCount<SPAN class="token operator">++</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Let's try playing with these in your console. For a start, note that you can't apply these directly to a number, which might seem strange, but we are assigning a variable a new updated value, not operating on the value itself. The following will return an error:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js example-bad notranslate" data-signature="8RuLVxFV2T6OTR+tbHzgfPEv4LDknxqm39E/qsvhdog="><CODE><SPAN class="token number">3</SPAN><SPAN class="token operator">++</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>So, you can only increment an existing variable. Try this:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="MSeDqWPAEQpRdxt6fmHPpfisLORxZSEqvMkYVnoVBlg="><CODE><SPAN class="token keyword">let</SPAN> num1 <SPAN class="token operator">=</SPAN> <SPAN class="token number">4</SPAN><SPAN class="token punctuation">;</SPAN>
num1<SPAN class="token operator">++</SPAN><SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>Okay, strangeness number 2! When you do this, you'll see a value of 4 returned &#8212; this is because the browser returns the current value, <EM>then</EM> increments the variable. You can see that it's been incremented if you return the variable value again:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="o8qnocKlyYGmNkII3vFOhWLjjVEiJGY64ThshnZuQpM="><CODE>num1<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<P>The same is true of <CODE>--</CODE> : try the following</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="zfYwieWgsq/Ati8NI6vhVUvxQVEuTzbEn/7SKfXhqWY="><CODE><SPAN class="token keyword">let</SPAN> num2 <SPAN class="token operator">=</SPAN> <SPAN class="token number">6</SPAN><SPAN class="token punctuation">;</SPAN>
num2<SPAN class="token operator">--</SPAN><SPAN class="token punctuation">;</SPAN>
num2<SPAN class="token punctuation">;</SPAN>
</CODE></PRE></DIV>
<DIV id=sect5 class="notecard note">
<P><STRONG>Note:</STRONG> You can make the browser do it the other way round &#8212; increment/decrement the variable <EM>then</EM> return the value &#8212; by putting the operator at the start of the variable instead of the end. Try the above examples again, but this time use <CODE>++num1</CODE> and <CODE>--num2</CODE>.</P></DIV></DIV></SECTION><SECTION aria-labelledby=assignment_operators>
<H2 id=assignment_operators><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#assignment_operators">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1528">Topic #1,528: Assignment operators. Assignment operators are operators that assign a value to a variable. We have already used the most basic one, =, loads of times &#8212; it assigns the .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Basic math in JavaScript &#8212; numbers and operators : </font></strong>
Assignment operators</A></H2>
<DIV class=section-content>
<P>Assignment operators are operators that assign a value to a variable. We have already used the most basic one, <CODE>=</CODE>, loads of times &#8212; it assigns the variable on the left the value stated on the right:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="d2U5uLbAbgdUXXyIdUa6vpIp4cutBcp4I1j9Lx5DhbA="><CODE><SPAN class="token keyword">let</SPAN> x <SPAN class="token operator">=</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// x contains the value 3</SPAN>
<SPAN class="token keyword">let</SPAN> y <SPAN class="token operator">=</SPAN> <SPAN class="token number">4</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// y contains the value 4</SPAN>
x <SPAN class="token operator">=</SPAN> y<SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// x now contains the same value y contains, 4</SPAN>
</CODE></PRE></DIV>
<P>But there are some more complex types, which provide useful shortcuts to keep your code neater and more efficient. The most common are listed below:</P><FIGURE class=table-container>
<TABLE class="standard-table no-markdown">
<THEAD>
<TR>
<TH scope=col>Operator</TH>
<TH scope=col>Name</TH>
<TH scope=col>Purpose</TH>
<TH scope=col>Example</TH>
<TH scope=col>Shortcut for</TH></TR></THEAD>
<TBODY>
<TR>
<TD><CODE>+=</CODE></TD>
<TD>Addition assignment</TD>
<TD>Adds the value on the right to the variable value on the left, then returns the new variable value </TD>
<TD><CODE>x += 4;</CODE></TD>
<TD><CODE>x = x + 4;</CODE></TD></TR>
<TR>
<TD><CODE>-=</CODE></TD>
<TD>Subtraction assignment</TD>
<TD>Subtracts the value on the right from the variable value on the left, and returns the new variable value </TD>
<TD><CODE>x -= 3;</CODE></TD>
<TD><CODE>x = x - 3;</CODE></TD></TR>
<TR>
<TD><CODE>*=</CODE></TD>
<TD>Multiplication assignment</TD>
<TD>Multiplies the variable value on the left by the value on the right, and returns the new variable value </TD>
<TD><CODE>x *= 3;</CODE></TD>
<TD><CODE>x = x * 3;</CODE></TD></TR>
<TR>
<TD><CODE>/=</CODE></TD>
<TD>Division assignment</TD>
<TD>Divides the variable value on the left by the value on the right, and returns the new variable value </TD>
<TD><CODE>x /= 5;</CODE></TD>
<TD><CODE>x = x / 5;</CODE></TD></TR></TBODY></TABLE></FIGURE>
<P>Try typing some of the above examples into your console, to get an idea of how they work. In each case, see if you can guess what the value is before you type in the second line.</P>
<P>Note that you can quite happily use other variables on the right-hand side of each expression, for example:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="olakVKsVtJ10NctX1IN2hwnOIzPaabkizvc7CiaZbaw="><CODE><SPAN class="token keyword">let</SPAN> x <SPAN class="token operator">=</SPAN> <SPAN class="token number">3</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// x contains the value 3</SPAN>
<SPAN class="token keyword">let</SPAN> y <SPAN class="token operator">=</SPAN> <SPAN class="token number">4</SPAN><SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// y contains the value 4</SPAN>
x <SPAN class="token operator">*=</SPAN> y<SPAN class="token punctuation">;</SPAN> <SPAN class="token comment">// x now contains the value 12</SPAN>
</CODE></PRE></DIV>
<DIV id=sect6 class="notecard note">
<P><STRONG>Note:</STRONG> There are lots of <A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#assignment_operators">other assignment operators available</A>, but these are the basic ones you should learn now.</P></DIV></DIV></SECTION><SECTION aria-labelledby=active_learning_sizing_a_canvas_box>
<H2 id=active_learning_sizing_a_canvas_box><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#active_learning_sizing_a_canvas_box">Active learning: sizing a canvas box</A></H2>
<DIV class=section-content>
<P>In this exercise, you will manipulate some numbers and operators to change the size of a box. The box is drawn using a browser API called the <A href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas API</A>. There is no need to worry about how this works &#8212; just concentrate on the math for now. The width and height of the box (in pixels) are defined by the variables <CODE>x</CODE> and <CODE>y</CODE>, which are initially both given a value of 50.</P>
<P><STRONG><A class=external href="https://mdn.github.io/learning-area/javascript/introduction-to-js-1/maths/editable_canvas.html" target=_blank>Open in new window</A></STRONG></P>
<P>In the editable code box above, there are two lines marked with a comment that we'd like you to update to make the box grow/shrink to certain sizes, using certain operators and/or values in each case. Let's try the following:</P>
<UL>
<LI>Change the line that calculates x so the box is still 50px wide, but the 50 is calculated using the numbers 43 and 7 and an arithmetic operator. 
<LI>Change the line that calculates y so the box is 75px high, but the 75 is calculated using the numbers 25 and 3 and an arithmetic operator. 
<LI>Change the line that calculates x so the box is 250px wide, but the 250 is calculated using two numbers and the remainder (modulo) operator. 
<LI>Change the line that calculates y so the box is 150px high, but the 150 is calculated using three numbers and the subtraction and division operators. 
<LI>Change the line that calculates x so the box is 200px wide, but the 200 is calculated using the number 4 and an assignment operator. 
<LI>Change the line that calculates y so the box is 200px high, but the 200 is calculated using the numbers 50 and 3, the multiplication operator, and the addition assignment operator.</LI></UL>
<P>Don't worry if you totally mess the code up. You can always press the Reset button to get things working again. After you've answered all the above questions correctly, feel free to play with the code some more or create your own challenges.</P></DIV></SECTION><SECTION aria-labelledby=comparison_operators>
<H2 id=comparison_operators><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#comparison_operators">
</td>
</tr>
</table>
</center>
</div>
<hr>
<P align="center"><b><a name="1529">Topic #1,529: Comparison operators. Sometimes we will want to run true/false tests, then act accordingly depending on the result of that test &#8212; to do this we use comparison operators .</a> (<a href="#TopOfPages"><font size="1">top</font></a></b>)</P>
<div align="center">
<center>
<table border="1" cellpadding="5" cellspacing="5" width="100%" bgcolor="#99CCFF">
<tr>
<td bordercolor="#0066FF">
<strong><font color="blue">Basic math in JavaScript &#8212; numbers and operators : </font></strong>
Comparison operators</A></H2>
<DIV class=section-content>
<P>Sometimes we will want to run true/false tests, then act accordingly depending on the result of that test &#8212; to do this we use <STRONG>comparison operators</STRONG>.</P><FIGURE class=table-container>
<TABLE>
<THEAD>
<TR>
<TH>Operator</TH>
<TH>Name</TH>
<TH>Purpose</TH>
<TH>Example</TH></TR></THEAD>
<TBODY>
<TR>
<TD><CODE>===</CODE></TD>
<TD>Strict equality</TD>
<TD>Tests whether the left and right values are identical to one another</TD>
<TD><CODE>5 === 2 + 4</CODE></TD></TR>
<TR>
<TD><CODE>!==</CODE></TD>
<TD>Strict-non-equality</TD>
<TD>Tests whether the left and right values are <STRONG>not</STRONG> identical to one another</TD>
<TD><CODE>5 !== 2 + 3</CODE></TD></TR>
<TR>
<TD><CODE>&lt;</CODE></TD>
<TD>Less than</TD>
<TD>Tests whether the left value is smaller than the right one.</TD>
<TD><CODE>10 &lt; 6</CODE></TD></TR>
<TR>
<TD><CODE>&gt;</CODE></TD>
<TD>Greater than</TD>
<TD>Tests whether the left value is greater than the right one.</TD>
<TD><CODE>10 &gt; 20</CODE></TD></TR>
<TR>
<TD><CODE>&lt;=</CODE></TD>
<TD>Less than or equal to</TD>
<TD>Tests whether the left value is smaller than or equal to the right one.</TD>
<TD><CODE>3 &lt;= 2</CODE></TD></TR>
<TR>
<TD><CODE>&gt;=</CODE></TD>
<TD>Greater than or equal to</TD>
<TD>Tests whether the left value is greater than or equal to the right one.</TD>
<TD><CODE>5 &gt;= 4</CODE></TD></TR></TBODY></TABLE></FIGURE>
<DIV id=sect7 class="notecard note">
<P><STRONG>Note:</STRONG> You may see some people using <CODE>==</CODE> and <CODE>!=</CODE> in their tests for equality and non-equality. These are valid operators in JavaScript, but they differ from <CODE>===</CODE>/<CODE>!==</CODE>. The former versions test whether the values are the same but not whether the values' datatypes are the same. The latter, strict versions test the equality of both the values and their datatypes. The strict versions tend to result in fewer errors, so we recommend you use them.</P></DIV>
<P>If you try entering some of these values in a console, you'll see that they all return <CODE>true</CODE>/<CODE>false</CODE> values &#8212; those booleans we mentioned in the last article. These are very useful, as they allow us to make decisions in our code, and they are used every time we want to make a choice of some kind. For example, booleans can be used to:</P>
<UL>
<LI>Display the correct text label on a button depending on whether a feature is turned on or off 
<LI>Display a game over message if a game is over or a victory message if the game has been won 
<LI>Display the correct seasonal greeting depending on what holiday season it is 
<LI>Zoom a map in or out depending on what zoom level is selected</LI></UL>
<P>We'll look at how to code such logic when we look at conditional statements in a future article. For now, let's look at a quick example:</P>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>html</SPAN></DIV><PRE class="brush: html notranslate" data-signature="E4SnqK4CbIJVnFSLnPVjxQUcvHb9ppsajJ4EPjSyWvI="><CODE><SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>button</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>Start machine<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>button</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>The machine is stopped.<SPAN class="token tag"><SPAN class="token tag"><SPAN class="token punctuation">&lt;/</SPAN>p</SPAN><SPAN class="token punctuation">&gt;</SPAN></SPAN>
</CODE></PRE></DIV>
<DIV class=code-example>
<DIV class=example-header><SPAN class=language-name>js</SPAN></DIV><PRE class="brush: js notranslate" data-signature="xGkodDpoVoK5znPrCw+dq92kOOvZ3OBB5FtXbfHmwW8="><CODE><SPAN class="token keyword">const</SPAN> btn <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">querySelector</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"button"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>
<SPAN class="token keyword">const</SPAN> txt <SPAN class="token operator">=</SPAN> document<SPAN class="token punctuation">.</SPAN><SPAN class="token function">querySelector</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"p"</SPAN><SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

btn<SPAN class="token punctuation">.</SPAN><SPAN class="token function">addEventListener</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token string">"click"</SPAN><SPAN class="token punctuation">,</SPAN> updateBtn<SPAN class="token punctuation">)</SPAN><SPAN class="token punctuation">;</SPAN>

<SPAN class="token keyword">function</SPAN> <SPAN class="token function">updateBtn</SPAN><SPAN class="token punctuation">(</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
  <SPAN class="token keyword">if</SPAN> <SPAN class="token punctuation">(</SPAN>btn<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">===</SPAN> <SPAN class="token string">"Start machine"</SPAN><SPAN class="token punctuation">)</SPAN> <SPAN class="token punctuation">{</SPAN>
    btn<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Stop machine"</SPAN><SPAN class="token punctuation">;</SPAN>
    txt<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">=</SPAN> <SPAN class="token string">"The machine has started!"</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN> <SPAN class="token keyword">else</SPAN> <SPAN class="token punctuation">{</SPAN>
    btn<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">=</SPAN> <SPAN class="token string">"Start machine"</SPAN><SPAN class="token punctuation">;</SPAN>
    txt<SPAN class="token punctuation">.</SPAN>textContent <SPAN class="token operator">=</SPAN> <SPAN class="token string">"The machine is stopped."</SPAN><SPAN class="token punctuation">;</SPAN>
  <SPAN class="token punctuation">}</SPAN>
<SPAN class="token punctuation">}</SPAN>
</CODE></PRE></DIV>
<P><STRONG><A class=external href="https://mdn.github.io/learning-area/javascript/introduction-to-js-1/maths/conditional.html" target=_blank>Open in new window</A></STRONG></P>
<P>You can see the equality operator being used just inside the <CODE>updateBtn()</CODE> function. In this case, we are not testing if two mathematical expressions have the same value &#8212; we are testing whether the text content of a button contains a certain string &#8212; but it is still the same principle at work. If the button is currently saying "Start machine" when it is pressed, we change its label to "Stop machine", and update the label as appropriate. If the button is currently saying "Stop machine" when it is pressed, we swap the display back again.</P>
<DIV id=sect8 class="notecard note">
<P><STRONG>Note:</STRONG> Such a control that swaps between two states is generally referred to as a <STRONG>toggle</STRONG>. It toggles between one state and another &#8212; light on, light off, etc.</P></DIV></DIV></SECTION><SECTION aria-labelledby=test_your_skills!>
<H2 id=test_your_skills!><A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math#test_your_skills!">Test your skills!</A></H2>
<DIV class=section-content>
<P>You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on &#8212; see <A href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Test_your_skills:_Math">Test your skills: Math</A>.
</td>
</tr>
</table>
</center>
</div>
<hr>
<div align="center">
<center>
<table border="2" cellpadding="5" cellspacing="5" width="100%" bgcolor="#FFCC66">
<tr>
<td width="100%">
<p><b>About using this material:</b></p>
<p>The best way to <b>learn</b> this material is to use <a href="http://super-memory.com/english/smintro.htm">SuperMemo</a> software.<br>
SuperMemo is the world's leader in accelerated learning technologies
 (see: <a href="http://www.super-memory.com">SuperMemo Website</a>)
<p>
No download URL currently available
</td>
</tr>
<tr>
<td width="100%">
<b>Contact data:</b></p>
<p><b>Author: User of SuperMemo</b><br>
<a href="http://super-memory.com">super-memory.com</a><br>
date: 10/3/2024 10:20:42 AM<br>
Page generated with:<br> SuperMemo 18<br>Build: 18.05 of Oct 29, 2020
</td>
</tr>
<tr>
<td width="100%">
</td>
</tr>
</table>
</center>
</div>
</body>

</html>
