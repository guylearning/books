<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-21</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-21" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-137"><a id="idTextAnchor413"/>| 15 | </h2>

    <p class="Chapter-Title" id="idParaDest-138"><a id="idTextAnchor414"/>Workflow</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">Clean, organized project structure is vital.</p>

        </li>

        <li>

          <p class="marked-list-item">Use scaffolding and wireframing to plan projects.</p>

        </li>

        <li>

          <p class="marked-list-item">Content management systems help to customize existing code.</p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">In the previous chapters, we have covered the nuts and bolts of HTML and CSS. At this point, you should be able to construct a web page from scratch and add text, images, and visual styling, and adjust it to look good on all devices.</p>

    <p class="H2_Body">In part IV, we’ll explore the workflow and tools of a web developer. Workflow is simply the steps and procedures you take to design a website—from the first HTML file and line of code to the ongoing maintenance of the site throughout its lifetime. A good workflow, paired with your new HTML and CSS skills, is the last piece of the puzzle, allowing you to unlock your full potential as a web designer.</p>

    <h3 class="H2" id="idParaDest-139"><a id="idTextAnchor415"/>Project Setup and Management</h3>

    <p class="H2_Body">There is no perfect way to set up a structure for a website. Every site will have different requirements, and every web designer has their preferred style of organization. In this section, my goal is not to force you to follow a particular method. Instead, I want to help you establish your own comfortable and productive workflow by providing examples and recommendations with instructions on how to adjust them to suit your needs.</p>

    <p class="H3">Folder Structure</p>

    <p class="H3_Body">HTML has no specific requirements for file and folder placement. In fact, in the early days of web design, I saw websites with all HTML, CSS, image, and other related files in the same folder! This layout would be unthinkable today, especially on a complex website. Managing more than just a few pages and images would quickly become a chore.</p>

    <p class="H3_Body">Over the years, folder and file name conventions have evolved. Following these conventions is helpful but not required. Here is a list of standard file and folder names used in modern web design.</p>

    <ul class="marked1">

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">HTML Files</span>: Pages usually reside in the main folder of the site. It is possible to store pages in subfolders, but keep in mind that doing so makes using relative paths for CSS, JavaScript, and images a more tedious process. </p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">Images</span>: A folder called <code class="CODE">images</code> usually stores the graphic elements for the website.</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">Audio/Video</span>: If present, this content is usually contained in the media folder. Sometimes the <code class="CODE">media</code> folder also contains images.</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">CSS Files</span>: If a site uses just one style sheet, it is often named style.css and located in a folder called <code class="CODE">css</code>. On small sites, you may see the style.css file placed in the home folder.</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">JavaScript Files</span>: These usually sit in a folder called <code class="CODE">js</code> or <code class="CODE">javascript</code>.</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">Favorite Icon (Favicon)</span>: A favicon.ico file is a special kind of image file shown as an icon on the tab or bookmark of your website. It isn’t required, but it’s a good idea to use one. It <span class="italic idGenCharOverride-2">must</span> be in the main folder of the site.</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">PDF, Text, and Downloads</span>: Files intended to be downloaded, like PDFs, text files, executables, ZIP files, and the like, are generally found in a folder called <code class="CODE">assets</code> or <code class="CODE">downloads</code>.</p>

      </li>

    </ul>

    <h3 class="H2" id="idParaDest-140"><a id="idTextAnchor416"/>Scaffolding</h3>

    <p class="H2_Body">It’s helpful to have gathered all the text, images, and layout details you’ll need before you start to design a website. If all the data is there, you can arrange it without having to break your workflow to obtain more information from your client or team. Unfortunately, this rarely happens. You’ll often receive an overall idea of what is needed on the website but few pieces of content. Text and images will trickle in as you progress through the project, and pages may be added just before the site is complete.</p>

    <p class="H2_Body">When you design a website, get in the habit of paying attention to future expansion—it will save you hours of work in the long run. The goal isn’t to try to think so far ahead you are paralyzed in the present, but rather to consider possible upgrades and additions to your design so that you don’t have to rework the entire site just to add a page. In programming terminology, this attribute is referred to as <span class="italic idGenCharOverride-2">scalability</span>; a site that “scales” well handles additions without significant problems.</p>

    <p class="H2_Body">Construction crews use framing to support additional building materials when a house is under construction. The framers may not know what color the homeowner will paint the walls, but that data isn’t needed at that stage of building. In web design, scaffolding (also known as “wireframing”) provides placeholder content, so the overall layout of the site can be constructed without finalizing details.</p>

    <p class="H2_Body">Recall the empty anchor links on the ClydeBank Coffee Shop website. The original designer wasn’t sure what the page names would be, so they used <code class="CODE">#</code> as a placeholder link. When a visitor clicked the link, they would be directed to the top of the current page, but this was preferable to triggering a 404 Not Found error or being taken to a page not yet finished.</p>

    <p class="H2_Body">Lorem Ipsum text is an excellent way to provide scaffolded text content, enabling you and the client to envision the page layout with full text. Sample images can fill in empty areas, and empty divs with their height and width set to match the eventual size can provide spacing for future content.</p>

    <p class="H2_Body">In some cases, a client may provide a sketch of a website on paper. Translating this into a web design layout can be challenging, but remember that most pages use a similar structure. Pages usually contain a header, often with an embedded navigation element; the main content area, sometimes with a div floating left or right for a sidebar; a content div; some kind of separation after the div break; and then a footer with links, copyright, and contact information.</p>

    <h3 class="H2" id="idParaDest-141"><a id="idTextAnchor417"/>Testing and Debugging</h3>

    <p class="H2_Body">Testing can be just as challenging and time-consuming as designing the website. We’ll get into some specific techniques you can use to test and debug, but the most important thing to remember about producing a problem-free website is to test early and often. By testing as you go, you avoid having to make massive “all or nothing” changes. A series of small tweaks and improvements with feedback from colleagues or your client along the way generally works best. You don’t want to put a lot of work into something that might not be what the client wants, so it’s better to know sooner rather than later, when it’s still possible to make changes without undoing a lot of work.</p>

    <p class="H3">Browser Development Tools</p>

    <p class="H3_Body">We’ve been working with local HTML files throughout this book, so testing has not been a cumbersome task. Making a change in your editor and then refreshing the web page in your browser has been sufficient. The process is similar when working with a remotely hosted website via file transfer protocol (FTP), with the added step of uploading the saved file to the server and testing it on the live site. But this testing workflow has significant drawbacks.</p>

    <p class="H3_Body">The biggest problem with live testing is that you are making changes to a website in real time. Visitors will be able to see these changes and possibly inaccurate, incomplete, or broken HTML content. This isn’t a big deal for a personal or hobby page, but it is highly undesirable for a company site. This issue can mostly be eliminated with the use of a <span class="glossaryterm idGenCharOverride-1">staging site</span> (a private site for testing or showing work to others), but this can incur extra cost with your web hosting company and still requires uploading the changed file to your web server via FTP. If it takes one hundred changes to make a complex element render correctly in the browser, you will be wasting a lot of time re-uploading your work.</p>

    <p class="H3_Body">This is where browser-based testing and debugging comes into the workflow. Rather than using your code editor to change the file, re-upload, refresh, and hope for the best, you can use the live development tools in modern web browsers, including Mozilla Firefox and Google Chrome (and derivates like Microsoft Edge, Brave, and Chromium). You can access this toolbox via the F12 key on the keyboard or by right-clicking on an element and clicking <span class="italic idGenCharOverride-2">Inspect</span> in Chrome or <span class="italic idGenCharOverride-2">Inspect Element</span> in Firefox.</p>

    <p class="H3_Body">Figure 147 shows the Chrome inspector, but other browser development tools are similar and follow the same basic layout. The left pane shows the website, and the right pane displays the source code and property inspectors. The inspector frame is further divided into multiple sections—the most important two being the source code (left) and the CSS properties (right). </p>

    <p class="H3_Body">If you double-click on the source code, you can edit it directly in the browser. If you click on the empty CSS rule that looks like this…</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">  element.style {</pre>

      <pre class="CODE_body">  }</pre>

    </div>

    <p class="H3_Body">…you can add CSS rules to the highlighted element. The results of your edits are displayed in real time, and no changes are made to the files, so you don’t have to worry about messing up a live website. This development environment isn’t suitable for adding enormous amounts of content and HTML code, but it can speed up a lot of small, incremental changes with instant feedback.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo147.jpg"/>

        <img alt="" class="w-100" src="image/Figure147.jpg"/>

      </figure>

      <p class="Caption">The Chrome inspector/development tools for debugging the ClydeBank Media home page</p>

    </div>

    <p class="H3_Body">The JavaScript console, usually found within the development tools in a tab titled <span class="italic idGenCharOverride-2">Console</span>, shows any warning or error messages from the JavaScript code executed on the page and provides a command line for manually entering JavaScript code. This is incredibly useful for debugging JavaScript.</p>

    <p class="H3_Body">You can use the <span class="italic idGenCharOverride-2">Network</span> tab to see a waterfall display of the various page assets (CSS files, images, etc.) that are loaded on the site, as well as their attributes and the time it took to load them. If you have a slow-loading website, this view can show you which files are taking the longest to load, providing a handy report for website speed optimization (figure 148).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo148.jpg"/>

        <img alt="" class="w-100" src="image/Figure148.jpg"/>

      </figure>

      <p class="Caption">The Chrome inspector/development tools with the Network tab selected</p>

    </div>

    <h3 class="H2" id="idParaDest-142"><a id="idTextAnchor421"/>Going Live</h3>

    <p class="H2_Body">Until now, you have been designing your website on your hard drive. This is effective but provides no way for others to see your work. If you are in the middle of a design and need to showcase your work to a client or other interested party, you <span class="italic idGenCharOverride-2">can</span> compress the files and send the resulting ZIP archive to them via email, but this isn’t very efficient. Large sites can exceed the storage limit on most email accounts.</p>

    <p class="H2_Body">A <span class="glossaryterm idGenCharOverride-1">shared web hosting</span> provider might be a good choice for showcasing and ultimately <span class="glossaryterm idGenCharOverride-1">deploying</span> your work. Once you purchase the account, you’ll need to upload your files via an FTP client. Instructions vary with different FTP software packages, but we’ve covered the basics in appendix II, “FTP.” </p>

    <p class="H3">Development, Staging, Production</p>

    <p class="H3_Body">On simple sites, using FTP is probably enough, but complex sites may need a source code control system like Git (see chapter 16) or a method of first uploading changes to a staging server for approval before making it live.</p>

    <p class="H3_Body">Using multiple websites, usually named <code class="CODE">dev.yourwebsite.com</code>, <code class="CODE">new.yourwebsite.com</code>, or <code class="CODE">staging.yourwebsite.com</code>, provides an excellent way to test changes before going live. If you are working as part of a larger team, consult your system administrator for instructions on uploading to a development or staging server. </p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">In some organizations, designers and developers make changes only to dev and staging sites, while senior engineers deploy fully tested code to the live production site.</p>

    </div>

    <h3 class="H2" id="idParaDest-143"><a id="idTextAnchor423"/>Customizing Existing Code</h3>

    <p class="H2_Body">If no CMS software like WordPress is used, files for the website will likely be in plain HTML format. You may also find HTML code in PHP files with the .php extension.</p>

    <p class="H2_Body">A freelance web designer who picks up a job will often be able to jump right into the work after the client provides them with FTP access. We’ll cover FTP in appendix II.</p>

    <p class="H3">WordPress</p>

    <p class="H3_Body">WordPress allows you to add and edit pages and posts via the administration dashboard. Posts (which include blog posts) are dated content that can be accessed under <span class="italic idGenCharOverride-2">Posts</span>. Pages, located under the <span class="italic idGenCharOverride-2">Pages </span>menu, contains content like the home page, about pages, contact pages, and perhaps other static, non-blog text. Custom themes and plugins may change this behavior.</p>

    <p class="H3_Body">Construction of posts and pages and the adjusting of options and themes in WordPress is done in the administration panel. This is almost always located at <code class="CODE">yoursite.com/wp-admin</code> (replace yoursite.com with your domain name). Only those with an administrator account have full access to the administrative backend, so if you aren’t the site owner, you’ll need to obtain a user account with this permission.</p>

    <p class="H3_Body">WordPress is straightforward to use, and most nontechnical people can create compelling-looking content within its administration panel. For composing, a WYSIWYG (What You See Is What You Get) editor allows the user to type just as they would in a program like Microsoft Word. Through JavaScript, this is converted to HTML code. However, these kinds of HTML editors generally include a way to edit or add raw HTML code. Look for a <code class="CODE">&lt; &gt;</code> symbol in WYSIWYG editors for this functionality.</p>

    <p class="H3_Body">If you want to edit the theme—that is, the header, footer, sidebar, and other page content, including CSS—first check out the theme customization options found under <span class="italic idGenCharOverride-2">Appearance</span> &gt;&gt; <span class="italic idGenCharOverride-2">Customize</span>. A graphical interface will guide you through making changes to the theme. For more complex changes that aren’t supported by the theme’s customize function, you can click <span class="italic idGenCharOverride-2">Appearance</span> &gt;&gt; <span class="italic idGenCharOverride-2">Theme Editor</span> to access a file manager that gives you the ability to edit style.css and other template files directly.</p>

    <p class="H3_Body">You can also edit the style sheet and theme files with FTP. Navigate to the <code class="CODE">wp-content/themes/theme-name</code> folder (replace “theme-name” with the name of the theme). For complex edits to a theme, using FTP is easier because it allows you to use your favorite HTML editor.</p>

    <p class="H3">Other CMS Systems</p>

    <p class="H3_Body">There are a lot of content management systems (CMSs) and website builders currently in use (Squarespace and Wix are among the most popular). Though we won’t cover each of them extensively here, knowing some common terminology and workflow methods will help you adapt to any of these systems. Knowing HTML and CSS gives you a tremendous advantage when using these CMS platforms, as you’ll be able to customize nearly every aspect of the site.</p>

    <p class="H3_Body">In most cases, other than choosing and customizing a theme, there will be three primary modes of input: adding pages or posts with a WYSIWYG editor, adding widgets (small blocks of functionality like an inline social media feed), and adding HTML code snippets. Instructions and capabilities vary considerably, so we’ll focus on inserting raw HTML.</p>

    <p class="H3_Body">When inserting HTML into a content management system, you’ll almost always want to omit the content in the head tag and any other page content that you don’t intend to add. For example, if you want to add a bulleted list, only add the <code class="CODE">&lt;ul&gt; &lt;/ul&gt;</code> element and its containing <code class="CODE">&lt;li&gt; &lt;/li&gt;</code> elements. </p>

    <p class="H3_Body">Some content management systems (and some themes within these CMSs) will allow you to modify the CSS. If you cannot add or modify the CSS, you will need to use inline styles.</p>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">A well-structured, consistent website design workflow is essential to efficient site creation and maintenance.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Scaffolding and wireframing content helps to reserve space for other elements while facilitating site construction and editing.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Frequent testing on a variety of devices, paired with a strategy to stage your updates for others to check before going live, helps reduce mistakes. </p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Content management systems, like WordPress, allow for easy creation of content and can often be customized with raw HTML code.</p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>