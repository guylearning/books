<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-18</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-18" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-118"><a id="idTextAnchor299"/>| 13 | </h2>

    <p class="Chapter-Title" id="idParaDest-119"><a id="idTextAnchor300"/>Media Queries</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">Media queries adjust elements for various devices.</p>

        </li>

        <li>

          <p class="marked-list-item">Printers and screen readers use media queries.</p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">Designing a web page that looks great on all devices can be quite a challenge. You have undoubtedly seen web pages that worked just fine on a laptop but were nearly impossible to use on a phone. Fortunately, responsive design provides a solution. <span class="glossaryterm idGenCharOverride-1">Responsive design</span> is a philosophy of using relative sizing, positioning, and media queries to make your page look good on all devices (figure 111).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo111.jpg"/>

        <img alt="" class="w-100" src="image/47.jpg"/>

      </figure>

      <p class="Caption">The difference between a responsive site and an unresponsive site</p>

    </div>

    <p class="H2_Body">So far, we’ve learned various techniques for addressing sizes in a relative fashion. You can use percentages for width and height to scale to any screen. But even for simple web pages, this relative position and sizing just isn’t enough for every device. On certain screen sizes, some elements, like sidebars and navigation menus, look better hidden or stacked in a different order. Navigation menus and advertisements often look terrible when printed.</p>

    <p class="H2_Body">With media queries, we can assign different rules to various screen sizes. On a phone, we can collapse the top navigation menu into a small dropdown menu or move the sidebar to the bottom. On large screens, we can include a right sidebar or add additional screen elements that would never fit on smaller devices. And on printers or screen readers, we can omit difficult-to-represent elements and prioritize useful content.</p>

    <h3 class="H2" id="idParaDest-120"><a id="idTextAnchor302"/>Structure</h3>

    <p class="H2_Body">There are two primary ways to introduce media queries on your web page. First, you can use the <code class="CODE">&lt;link&gt;</code> tag to reference a CSS file for a specific device and/or size via the media attribute.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">13-01.html</p>

      <pre class="CODE_body">   &lt;link rel="stylesheet" media="screen and (max-width: 600px)" href="mobile.css"&gt;</pre>

      <pre class="CODE_body">   &lt;link rel="stylesheet" media="screen and (min-width: 600px)" href="style.css"&gt;</pre>

      <pre class="CODE_body">   &lt;link rel="stylesheet" media="print" href="print.css"&gt;</pre>

    </div>

    <p class="H2_Body">In this case, we have defined three CSS files—one for mobile, one for regular screens, and one to use when the user prints the web page. </p>

    <p class="H2_Body">We’ll get into the specific syntax for the media attribute in a moment, but for now let’s examine the alternative approach: the single-file CSS method. In this example, the main style sheet, often called style.css, handles all three definitions.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">13-02.css</p>

      <pre class="CODE_body">   /* For small screens like phones */</pre>

      <pre class="CODE_body">   @media only screen and (max-width: 1000px) {</pre>

      <pre class="CODE_body">      background-color: darkgray;</pre>

      <pre class="CODE_body">         color: white;</pre>

      <pre class="CODE_body">         font-size: 16px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   /* There are, of course, more elements than color and font size, but we are just using these two attributes for our example */</pre>

      <pre class="CODE_body">   /* For larger tablets, laptops, and desktops */</pre>

      <pre class="CODE_body">   @media only screen and (min-width: 1000px) {</pre>

      <pre class="CODE_body">      background-color: darkgray;</pre>

      <pre class="CODE_body">         color: white;</pre>

      <pre class="CODE_body">         font-size: 12px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   /* For the printed page */</pre>

      <pre class="CODE_body">   @media print {</pre>

      <pre class="CODE_body">      background-color: white;</pre>

      <pre class="CODE_body">         color: black;</pre>

      <pre class="CODE_body">         font-size: 12px;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">In this example, all screens will have a dark gray background and white text. Smaller screens will have a larger font (16px) and larger screens will have a smaller font (12px). And the printed page will contain a white background and black text to avoid wasting ink.</p>

    <p class="H2_Body">Though we specified only colors and font sizes, you can use any valid CSS rule inside the <code class="CODE">@media { }</code> block that you want to apply to that device or size.</p>

    <p class="H2_Body">The <code class="CODE">min-width: 1000px</code> and <code class="CODE">max-width: 1000px</code> keywords in the size definitions tell the browser to apply the rules for that query only on screens that are at least 1000 pixels wide and at most 1000 pixels wide, respectively. You can use any number of pixels for these definitions, but there are recommendations based on common screen sizes that we’ll explore in the “Choosing Breakpoints” section in this chapter.</p>

    <p class="H2_Body">You may notice the “only” keyword used in the previous example. This makes the media query apply only to a certain device. If we didn’t use it, our queries would also modify printer and screen reader devices.</p>

    <p class="H2_Body">On devices with screens that rotate (phones and tablets), we can assign a query to match a certain orientation.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">13-03.css</p>

      <pre class="CODE_body">   @media screen and (orientation: landscape) {</pre>

      <pre class="CODE_body">      /* CSS rules here apply to landscape mode (device on its side) */</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   @media screen and (orientation: portrait) {</pre>

      <pre class="CODE_body">      /* CSS rules here apply to portrait mode (device upright) */</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">We can use this same technique to adjust our page, depending on the orientation selected during print setup. It’s impossible to print in both orientations at once, so only one of these will be used.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">13-04.css</p>

      <pre class="CODE_body">   @media print and (orientation: landscape) {</pre>

      <pre class="CODE_body">      /* CSS rules here apply to printing in landscape mode */</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   @media print and (orientation: portrait) {</pre>

      <pre class="CODE_body">      /* CSS rules here apply to printing in portrait mode */</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <h3 class="H2" id="idParaDest-121"><a id="idTextAnchor307"/>Choosing Breakpoints</h3>

    <p class="H2_Body">Device screen size varies wildly, but a general rule of thumb is that devices with widths <span class="italic idGenCharOverride-2">under</span> 1000 are phones or tablets, and screen sizes larger than that usually belong to laptops or desktops. There are exceptions to this rule, especially with high-resolution screens, but for optimum readability for your users, it’s best to use mobile-style menus (that is, the “hamburger menu”) for screens less than 1000 pixels in width (figure 112).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo112.jpg"/>

        <img alt="" class="w-10" src="image/48.png"/>

      </figure>

      <p class="Caption">The hamburger menu</p>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/downloadLogo.png"/>

      </figure>

      <p class="Note">For a list of common device sizes, please reference Screen Sizes on Popular Devices found at <a class="underline" href="https://www.clydebankmedia.com/htmlcss-assets">www.clydebankmedia.com/htmlcss-assets</a>. </p>

    </div>

    <p class="H3">Content Fit/Feel </p>

    <p class="H3_Body">You’ve likely been frustrated with a website not working exactly as intended on your mobile device. You don’t want annoyed users, so always remember to give some thought to the types of devices your visitors are likely to use. Various third-party “web analytics” platforms will allow you to view data on which types of devices are being used to access your website.</p>

    <p class="H3_Body">Placing buttons or selectable elements too close together can present a usability challenge on phones. Since mobile users <span class="italic idGenCharOverride-2">tap</span> rather than <span class="italic idGenCharOverride-2">click</span>, objects must be spaced far enough apart so that a tap not precisely on center doesn’t accidentally select something else on the page. This small area around selectable elements is known as a “tap target” and requires special consideration on touch screens. You can use additional padding on input boxes, buttons, and links in your lower-width media queries to provide a wider area for a user to tap.</p>

    <p class="H3_Body">As you can see, media queries enable a tremendous amount of customization and flexibility. Paired with relative sizing, carefully sized <span class="glossaryterm idGenCharOverride-1">breakpoints</span>, and comfortable tap targets, your website can look pixel-perfect on any device.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">Google encourages websites to be “mobile friendly” (that is, responsive) and publishes their own guidelines on this topic. Those interested in search engine optimization and optimal user experience should review the Mobile Friendly guidelines at developers.google.com/search/mobile-sites.</p>

    </div>

    <h3 class="H2" id="idParaDest-122"><a id="idTextAnchor311"/>Viewport Meta Tag</h3>

    <p class="H2_Body">The viewing area of a web browser is called the viewport. Viewports vary with the size of the screen and, in the case of a desktop or laptop, the browser window. For the sake brevity, we have omitted the viewport meta tag in most examples, but it should be used on all your web pages.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">13-05.html</p>

      <pre class="CODE_body">   &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</pre>

    </div>

    <p class="H2_Body">In this default example, the width is set to the device width, and the scaling (zoom) is set to 1.0. Decimal numbers below 1 instruct the browser to zoom away from the page, or shrink, making content smaller but fitting more on the screen at once. Larger numbers will zoom in to the content.</p>

    <h3 class="H2" id="idParaDest-123"><a id="idTextAnchor313"/>Simulating Screen Sizes</h3>

    <p class="H2_Body">Testing a web design can be challenging, especially considering the vast array of screen sizes and browsers. There’s nothing like testing on the actual device, but when you don’t have that luxury, browser development tools can help make quality assurance a breeze.</p>

    <p class="H2_Body">To activate the device toolbar in Chrome-based and Firefox web browsers, open the development tools with F12, then click on the device icon in the top right, as shown in figure 113.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo113.jpg"/>

        <img alt="" class="w-100" src="image/49.jpg"/>

      </figure>

      <p class="Caption">The toggle icon for the device toolbar in both Chrome and Firefox. (The design of this icon may change in future browser versions.)</p>

    </div>

    <p class="H2_Body">The left-hand pane displaying the web page will shrink. This will display the responsive toolbar, allowing you to select from an array of devices and screen sizes (figure 114). The responsive toolbar is invaluable for testing media queries and page compatibility with various screen widths and heights.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo114.jpg"/>

        <img alt="" class="w-100" src="image/Figure114.jpg"/>

      </figure>

      <p class="Caption">The responsive toolbar and view in Chrome</p>

    </div>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Image-Line">

        <img alt="" class="idGenObjectAttribute-1" src="image/25.jpg"/>

      </p>

      <p class="CBC_Heading">Going Mobile</p>

      <p class="H2_Body">Our ClydeBank Coffee Shop website is looking better on the desktop but does not scale well at all on mobile devices. In this exercise, we’re going to fix that. Making the website look good on every type of device would take a while, so we’re going to focus on the most popular device: the modern cell phone. Of course, sizes vary considerably, so we’ll focus on an average size range that should work well on most screens. For the purposes of this task, let’s assume our device has a minimum screen width of 375 pixels and a maximum width of 725 pixels.</p>

      <p class="H2_Body">Using media queries added to the bottom of our style.css file, adjust the various elements on the coffee shop website to look good both on mobile and laptop/desktop screens. Solutions can vary slightly depending on the approach, but we want the navigation, front page elements, and both header and footer to look good on either device.</p>

      <p class="H2_Body">Try this on your own first, but if you get stuck, a solution can be found in appendix V.</p>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/myTakeLogo.png"/>

      </figure>

      <p class="Note">Since this is the last of our coffee shop site-building exercises in the text, I wanted to give you the opportunity to go the extra mile with me. I’ve expanded on this design with some of my own special enhancements. Feel free to download the code and explore my version of the ClydeBank Coffee Shop site. All site files can be downloaded from our GitHub account. The main repository is called “David’s Perfect Cup.” Access it directly here: <a href="https://github.com/clydebankmedia/davids-perfect-cup">www.github.com/clydebankmedia/davids-perfect-cup</a>.  </p>

    </div>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">Your users will display your site on a wide variety of devices, so making your site responsive using media queries and relative sizing is essential for a good user experience.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Media queries allow printed web pages and screen readers to ignore certain parts of the page to focus on the appropriate content for those devices. </p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>