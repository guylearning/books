<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-13</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-13" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-80"><a id="idTextAnchor077"/>| 9 | </h2>

    <p class="Chapter-Title" id="idParaDest-81"><a id="idTextAnchor078"/>Layout/Format</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">CSS allows elements to be positioned in a variety of ways.</p>

        </li>

        <li>

          <p class="marked-list-item">Elements can float and deviate from the normal flow of HTML.</p>

        </li>

        <li>

          <p class="marked-list-item">CSS Flexbox allows for dynamic positioning of elements.</p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">In this chapter, we will explore how to lay out your web page. Until now, we have been using simple elements to put content on the page, assign those elements ids and classes, and style them with CSS. Now it’s time to explore how objects are sized and positioned, and how to use “floating” to break free from the linear style of development and create regions of content on your page.</p>

    <h3 class="H2" id="idParaDest-82"><a id="idTextAnchor079"/>Position</h3>

    <p class="H2_Body">The CSS position property tells the browser how an element should be positioned on the page. There are four possible values for position: static, relative, fixed, and absolute. </p>

    <p class="H3">static</p>

    <p class="H3_Body">The default setting, static, tells the browser to follow the normal flow of the page. Elements will appear in the order they are presented in the HTML code. Since this is the default, you only need to set the position to static if you are changing the position attribute of a nested element (for example, a <code class="CODE">&lt;p&gt;</code> inside a <code class="CODE">&lt;div&gt;</code>) and you want the inner element to deviate from its container.</p>

    <p class="H3">relative</p>

    <p class="H3_Body">Relative position specifies that any formatting we provide for an element will be relative to its normal position. When we set a position to relative, we usually define additional properties like top, right, bottom, and left. This lets us describe the desired position in relation to the normal position. Here’s an example:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-01.css</p>

      <pre class="CODE_body">   .relative-position {</pre>

      <pre class="CODE_body">      position: relative;</pre>

      <pre class="CODE_body">      left: 20px;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-02.html</p>

      <pre class="CODE_body">   &lt;div&gt;</pre>

      <pre class="CODE_body">      I have a hard time relating to this div.</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

      <pre class="CODE_body">   &lt;div class="relative-position"&gt;</pre>

      <pre class="CODE_body">      I can relate to this div.</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">This CSS rule will move the div 20 pixels left of its normal position.</p>

    <p class="H3">fixed</p>

    <p class="H3_Body">Elements given a position of “fixed” will hold their position on the page relative to the viewport. In other words, even if you scroll the page, the item will stay in place. This can be useful for keeping a static link menu on the page, keeping a “Back to Top” link in the bottom right corner, or keeping a footer from disappearing when the visitor scrolls. Remember our #top-ad element? Let’s make it “stick” to the top:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-03.css</p>

      <pre class="CODE_body">#top-ad {</pre>

      <pre class="CODE_body">    position: fixed;</pre>

      <pre class="CODE_body">    top: 0;</pre>

      <pre class="CODE_body">    right: 0;</pre>

      <pre class="CODE_body">    width: 640px;</pre>

      <pre class="CODE_body">    background-color: yellow;</pre>

      <pre class="CODE_body">    color: red; </pre>

      <pre class="CODE_body">}</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-04.html</p>

      <pre class="CODE_body">   &lt;div id="top-ad"&gt;This ad not only catches your attention but insists on sticking around!&lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">The class “top-ad” sets the top and right positions to 0 and sets the fixed position attribute. This will always keep the footer at the top of the view, regardless of how much the user scrolls.</p>

    <p class="H3">absolute</p>

    <p class="H3_Body">If we want an element to be fixed in relationship to its containing element rather than to the viewport, then we use absolute position. When we set an element to absolute, it will look for the nearest ancestor (that is, any element that contains it) with a position property not set to “static” and will position itself to be fixed in relation to that element.</p>

    <p class="H3_Body">Let’s consider the following code:</p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-05.html</p>

      <pre class="CODE_body">   &lt;div class="the-parent"&gt;</pre>

      <pre class="CODE_body">      This is the parent (ancestor) element, called the-parent, which is set to relative.</pre>

      <pre class="CODE_body">         &lt;div class="the-child"&gt;</pre>

      <pre class="CODE_body">      This child element, called the-child, is set to absolute. Its properties will be in relationship to the parent element.</pre>

      <pre class="CODE_body">         &lt;/div&gt;</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">Next, we will apply the CSS:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-06.css</p>

      <pre class="CODE_body">   div.the-parent {</pre>

      <pre class="CODE_body">      position: relative;</pre>

      <pre class="CODE_body">      background-color: #CCCCCC;</pre>

      <pre class="CODE_body">      width: 400px;</pre>

      <pre class="CODE_body">      height: 200px;</pre>

      <pre class="CODE_body">      border: 1px solid black;</pre>

      <pre class="CODE_body">   } </pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   div.the-child {</pre>

      <pre class="CODE_body">      position: absolute;</pre>

      <pre class="CODE_body">      background-color: #ffffff;</pre>

      <pre class="CODE_body">      top: 80px;</pre>

      <pre class="CODE_body">      right: 0;</pre>

      <pre class="CODE_body">      width: 200px;</pre>

      <pre class="CODE_body">      height: 100px;</pre>

      <pre class="CODE_body">      border: 1px solid black;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">The resulting layout will look something like this (figure 68): </p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo068.jpg"/>

        <img alt="" class="w-100" src="image/Figure68.jpg"/>

      </figure>

    </div>

    <h3 class="H2" id="idParaDest-83"><a id="idTextAnchor080"/>Floating Elements</h3>

    <p class="H2_Body">With the position attribute, we can move elements around on a page and specify where we want them based on the page, viewport, or parent element. Rather than assigning specific locations, we may want an element to flow with the text. We use the float property to accomplish this. </p>

    <p class="H3">float</p>

    <p class="H3_Body">Let’s look at this HTML code:</p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-07.html</p>

      <pre class="CODE_body">   &lt;div class="sidebar"&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;Excerpt from: A Floating Home by Cyril Ionides &amp; J. B. Atkins&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

      <pre class="CODE_body">   &lt;div class="main-text"&gt;</pre>

      <pre class="CODE_body">   &lt;h1&gt;A Floating Home&lt;/h1&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;One winter I made up my mind that it was necessary to live in some sort of vessel afloat instead of in a house on the land. This decision was the result, at last pressed on me by circumstances, of vague dreams which had held my imagination for many years.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt; These dreams were not, I believe, peculiar to myself. The child, young or old, whose fancy is captive to water, builds for castles in Spain houseboats wherein he may spend his life floating in his element. His fancy at some time or other has played with the thought of possessing almost every type of craft for his home—a three-decker with a glorious gallery, a Thames houseboat all ready to step into, a disused schooner, a bluff-bowed old brig. He will moor her in some delectable water, and when his restlessness falls upon him he will have her removed to another place. Civilization shall never rule him. As though to prove it he will live free of rates, and weigh his anchor and move on if the matter should ever happen to come under dispute. Nor will he pay rent resentfully to a grasping landlord. For a mere song he will pick up the old vessel that shall contain his happiness. Her walls will be stout enough to shelter him for a lifetime, though Lloyd’s agent may have condemned her, according to the exacting tests that take count of sailors’ lives, as unfit to sail the deep seas.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">Now let’s style the “sidebar” and “main-text” divs with CSS:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-08.css</p>

      <pre class="CODE_body">   .sidebar {</pre>

      <pre class="CODE_body">      float: right;</pre>

      <pre class="CODE_body">      height: 100px;</pre>

      <pre class="CODE_body">      width: 200px;</pre>

      <pre class="CODE_body">      padding: 5px;</pre>

      <pre class="CODE_body">      border: 1px solid black;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   .main-text { border: 1px solid #333333; }</pre>

    </div>

    <p class="H3_Body">Our resulting display will look like this (figure 69):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo069.jpg"/>

        <img alt="" class="w-100" src="image/Figure69.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">At first glance, float may seem like the other relative positioning methods previously described. But with float we don’t specify any specific location or offset information—we only tell the browser to place the element on the right or left of other elements.</p>

    <p class="H3">clear</p>

    <p class="H3_Body">Float allows us to shift elements to the left or right, but once multiple elements are involved it’s easy to experience overlapping or unexplained results. To prevent this, we use the clear property. When we set clear, we are telling the browser to start over with float positioning. Let’s add a clear property to the main-text div, like so:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-09.css</p>

      <pre class="CODE_body">   .main-text {</pre>

      <pre class="CODE_body">      border:1px solid #333333;</pre>

      <pre class="CODE_body">      clear: right;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">Here we are telling the browser that no floating element can exist to the right of the main-text element, thus resetting the float until the next row (figure 70).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo070.jpg"/>

        <img alt="" class="w-100" src="image/Figure70.jpg"/>

      </figure>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo071.jpg"/>

      </figure>

      <table class="Table1" id="table006">

        <colgroup>

          <col/>

          <col/>

        </colgroup>

        <thead>

          <tr class="Table1">
            <td class="Table1 CellHead" colspan="2">
              <p class="TableHead">CLEAR VALUES</p>
            </td>
          </tr>

        </thead>

        <tbody>

          <tr class="Table1">
            <td class="Table1 CellText idGenCellOverride-1">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">none</span></p>
            </td>
            <td class="Table1 CellText idGenCellOverride-1">
              <p class="TableText">the default setting, allowing elements to float on either side</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">left</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">no elements can float to the left</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">right</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">no elements can float to the right</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">both</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">no floating elements will appear on either side of the specified element</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">inherit</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">the element will inherit the clear value from its containing element</p>
            </td>
          </tr>

        </tbody>

      </table>

    </div>

    <p class="H3_Body">As you can see, using float and clear in concert gives us a lot of control in the layout of our page.</p>

    <p class="H3_Body">When we set up floating elements, we can run into issues when content (usually an image) is larger than its container. Float, like other relative positioning methods, can allow the image to bleed over the edge of its container.</p>

    <p class="H3_Body">Consider this example: </p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-10.html</p>

      <pre class="CODE_body">   &lt;div class="carter"&gt;</pre>

      <pre class="CODE_body">      &lt;img src="images/carter_dome_view.jpg" id="carter-pic" alt="Carter Dome" height="120" width="160"&gt;</pre>

      <pre class="CODE_body">       This is a picture of Carter Dome.</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">Now let’s add a basic CSS float.</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-11.css</p>

      <pre class="CODE_body">   .carter {</pre>

      <pre class="CODE_body">      border: 1px solid #000;</pre>

      <pre class="CODE_body">      padding: 5px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   #carter-pic { float: right; }</pre>

    </div>

    <p class="H3_Body">Our rendering will look something like this (figure 72):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo072.jpg"/>

        <img alt="" class="w-100" src="image/Figure72.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">Had there been enough text, the image would be fully contained within the div. To handle this situation, we can assign “auto” to the overflow property in our div, like so:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-12.css</p>

      <pre class="CODE_body">   .carter {</pre>

      <pre class="CODE_body">      border: 1px solid #000;</pre>

      <pre class="CODE_body">      padding: 5px;</pre>

      <pre class="CODE_body">      overflow: auto;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">Now the image fits within the element (figure 73):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo073.jpg"/>

        <img alt="" class="w-100" src="image/Figure73.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">This will work in many cases, but you may run into issues where the margin or padding of one of the elements causes a display issue. A better way to handle this is to use a CSS technique called “clearfix”:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-13.css</p>

      <pre class="CODE_body">   .carter {</pre>

      <pre class="CODE_body">      border: 1px solid #000;</pre>

      <pre class="CODE_body">      padding: 5px;</pre>

      <pre class="CODE_body">      overflow: auto;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   .carter::after {</pre>

      <pre class="CODE_body">      content: "";</pre>

      <pre class="CODE_body">      clear: both;</pre>

      <pre class="CODE_body">      display: table;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">The <code class="CODE">::after</code> suffix allows you to append properties to the content after the element. In this case, we’re adding an empty string ("") and a <code class="CODE">clear: both</code> to prevent overlap. The <code class="CODE">display: table</code> (that is, the display property set to table) causes the additional empty content to be displayed as though it were a table. We’ll dive into the display property in the next section.</p>

    <p class="H3_Body">Float and clear allow for some interesting page layouts. For example, we can create a horizontal grid of three boxes.</p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-14.html</p>

      <pre class="CODE_body">   &lt;div class="grid"&gt;</pre>

      <pre class="CODE_body">      &lt;div class="box"&gt;</pre>

      <pre class="CODE_body">          &lt;p&gt;Box 1&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;div class="box"&gt;</pre>

      <pre class="CODE_body">         &lt;p&gt;Box 2&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;div class="box"&gt;</pre>

      <pre class="CODE_body">         &lt;p&gt;Box 3&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;/div&gt;</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-15.css</p>

      <pre class="CODE_body">   .box {</pre>

      <pre class="CODE_body">      float: left;</pre>

      <pre class="CODE_body">      width: 33.33%;</pre>

      <pre class="CODE_body">      padding: 50px;</pre>

      <pre class="CODE_body">      border: 1px solid #000000;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   .grid::after {</pre>

      <pre class="CODE_body">      content: "";</pre>

      <pre class="CODE_body">      clear: both;</pre>

      <pre class="CODE_body">      display: table;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   .box, .grid, .grid::after { box-sizing: border-box; }</pre>

    </div>

    <p class="H3_Body">This HTML/CSS will render this layout (figure 74):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo074.jpg"/>

        <img alt="" class="w-100" src="image/Figure74.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">First, we created classes for box and grid (specifically <code class="CODE">grid::after</code>), then told the browser, via the box-sizing property set to the value <code class="CODE">border-box</code>, to include border and padding in the element’s calculated width and height.</p>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Image-Line">

        <img alt="" class="idGenObjectAttribute-1" src="image/25.jpg"/>

      </p>

      <p class="CBC_Heading">Advertisement</p>

      <p class="H2_Body">The ClydeBank Coffee Shop is running a promotion this month—free delivery on all orders over $15. You can’t beat that. Since it’s such a great deal, we’re going to add it to the ClydeBank Coffee Shop website via a banner at the top of the page. Though you can use the yellow background color we used in the previous absolute positioning example, feel free to experiment with various background and text colors. </p>

      <p class="H2_Body">You might think that <code class="CODE">position: absolute</code> would be ideal for this, but unfortunately that will cut off the top part of the header. To fix this, you can set <code class="CODE">top</code>, <code class="CODE">left</code>, and <code class="CODE">right</code> to 0 and use <code class="CODE">position: relative</code>. </p>

      <p class="H2_Body">Try this on your own. If you get stuck, you can always refer to the answer key in appendix V.</p>

    </div>

    <h3 class="H2" id="idParaDest-84"><a id="idTextAnchor094"/>Display</h3>

    <p class="H2_Body">The display property, as its name suggests, specifies how an element is to be displayed, if at all. There are lots of values in this property, so we’ll now focus on the most frequently used.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/downloadLogo.png"/>

      </figure>

      <p class="Note">Check out <a class="underline" href="https://www.clydebankmedia.com/htmlcss-assets">www.clydebankmedia.com/htmlcss-assets</a> for some additional display properties. The link you’re looking for in the vault is called “Display Properties.” Go figure. </p>

    </div>

    <p class="H3">none </p>

    <p class="H3_Body">If the display property is set to “none,” the element will not display on the page. You might wonder why you would go to the trouble of defining an element in HTML only to prevent it from being displayed. The most common use case for this is when you need to hide an element initially (for example, an error box), then display that element after a certain condition has been met. This is usually paired with JavaScript code.</p>

    <p class="H3_Body">For instance, consider a class defined as follows:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-16.css</p>

      <pre class="CODE_body">   .error-message { display: none; }</pre>

    </div>

    <p class="H3_Body">Now let’s create an error message:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-17.html</p>

      <pre class="CODE_body">   &lt;div id="error-message"&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;Something went wrong!&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">The error message won’t be shown until the display property is changed, via JavaScript, to anything but “none.”</p>

    <p class="H3">inline</p>

    <p class="H3_Body">An inline display will show all elements as part of one line, regardless of their normal HTML attributes. </p>

    <p class="H3_Body">For instance:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-18.html</p>

      <pre class="CODE_body">   &lt;div&gt;</pre>

      <pre class="CODE_body">      This is some text.</pre>

      <pre class="CODE_body">      &lt;p class="inline-paragraph"&gt;This is a paragraph.&lt;/p&gt;</pre>

      <pre class="CODE_body">      And here is some more text</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">If we define the following CSS:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-19.css</p>

      <pre class="CODE_body">   .inline-paragraph { display: inline; }</pre>

    </div>

    <p class="H3_Body">Then the paragraph element will be treated as part of the same line, like this (figure 75):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo075.jpg"/>

        <img alt="" class="w-100" src="image/Figure75.jpg"/>

      </figure>

    </div>

    <p class="H3">block</p>

    <p class="H3_Body">A display value set to “block” will treat each element of text as its own separate block on its own line. </p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-20.css</p>

      <pre class="CODE_body">   .block-paragraph { display: block; }</pre>

    </div>

    <p class="H3_Body">The same HTML will display like this (figure 76):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo076.jpg"/>

        <img alt="" class="w-60" src="image/Figure76.png"/>

      </figure>

    </div>

    <p class="H3_Body">While this is expected behavior in HTML, allowing the developer to assign this value is helpful when they need to revert to block layout inside containing elements that use a different display property.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/myTakeLogo.png"/>

      </figure>

      <p class="Note">I usually force elements to behave like blocks via the <code class="CODE">display: block</code> attribute when converting links to navigation—especially for mobile, when the links need to stack. </p>

    </div>

    <p class="H3">inline-block</p>

    <p class="H3_Body">The inline-block value defines the display layout as a hybrid of the block and inline styles. In this case, an element with this value will display inline but as part of a block layout. </p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-21.html</p>

      <pre class="CODE_body">   &lt;div&gt;</pre>

      <pre class="CODE_body">      This is some text.</pre>

      <pre class="CODE_body">      &lt;p class="inline-text"&gt;This is a paragraph.&lt;br&gt;It has a line break, but is still part of this block&lt;/p&gt;</pre>

      <pre class="CODE_body">      And here is some more text</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-22.css</p>

      <pre class="CODE_body">   .inline-text { display: inline-block; }</pre>

    </div>

    <p class="H3_Body">This will display as follows (figure 77):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo077.jpg"/>

        <img alt="" class="w-100" src="image/Figure77.jpg"/>

      </figure>

    </div>

    <h3 class="H2" id="idParaDest-85"><a id="idTextAnchor107"/>Navigation Bar</h3>

    <p class="H2_Body">Until now, the display property may have seemed abstract and theoretical, but in page navigation, the display property is invaluable. It was noted in chapter 5 that, in addition to providing bullets and numbered lists, navigation bars also benefit from the list element. Let’s put that functionality to use.</p>

    <p class="H2_Body">Say we have a simple list of pages we want to use in our site:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-23.html</p>

      <pre class="CODE_body">   &lt;ul&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="about.html"&gt;About&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="learn.html"&gt;Learn More&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="contact.html"&gt;Contact&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">   &lt;/ul&gt;</pre>

    </div>

    <p class="H2_Body">By default, it would look like this (figure 78):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo078.jpg"/>

        <img alt="" class="w-60" src="image/Figure78.png"/>

      </figure>

    </div>

    <p class="H2_Body">In some situations, this might be useful, but we can make it far more interesting. Let’s add a little bit of styling using some of the CSS techniques we have learned in this chapter:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-24.css</p>

      <pre class="CODE_body">   .main-nav {</pre>

      <pre class="CODE_body">      font-family: verdana, sans-serif;</pre>

      <pre class="CODE_body">      font-size: .8rem;</pre>

      <pre class="CODE_body">      list-style-type: none;</pre>

      <pre class="CODE_body">      margin: 0;</pre>

      <pre class="CODE_body">      padding: 0;</pre>

      <pre class="CODE_body">      overflow: hidden;</pre>

      <pre class="CODE_body">      background-color: #333333;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   </pre>

      <pre class="CODE_body">   .main-nav li { float: left; }</pre>

      <pre class="CODE_body">   .main-nav li a {</pre>

      <pre class="CODE_body">      display: block;</pre>

      <pre class="CODE_body">      color: #EEEEEE;</pre>

      <pre class="CODE_body">      text-align: center;</pre>

      <pre class="CODE_body">      padding: 10px 12px;</pre>

      <pre class="CODE_body">      text-decoration: none;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">Now we need to modify our HTML to include the class names. Note that in the previous CSS the <code class="CODE">li</code> and <code class="CODE">a</code> elements are listed after <code class="CODE">.main-nav</code>, so rather than all <code class="CODE">li</code> and <code class="CODE">a</code> elements being redefined, only those inside a containing element with the <code class="CODE">main-nav</code> class will be affected.</p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-25.html</p>

      <pre class="CODE_body">   &lt;ul class="main-nav"&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="about.html"&gt;About&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="learn.html"&gt;Learn More&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;&lt;a href="contact.html"&gt;Contact&lt;/a&gt;&lt;/li&gt;</pre>

      <pre class="CODE_body">   &lt;/ul&gt;</pre>

    </div>

    <p class="H2_Body">The result is a stylish navigation bar (figure 79):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo079.jpg"/>

        <img alt="" class="w-100" src="image/Figure79.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">Using the float property, we told the browser to have all list elements forgo their usual vertical arrangement and horizontally align to the left. The overflow property set to “hidden” on the main nav prevents a new line on the navigation bar from being created by the browser. Setting <code class="CODE">text-decoration: none</code> on an element in the list prevents links from being underlined, giving the overall design a nicer look.</p>

    <h3 class="H2" id="idParaDest-86"><a id="idTextAnchor113"/>CSS Flexbox</h3>

    <p class="H2_Body">In previous versions of HTML and CSS, page layout tended to follow a grid pattern. There were essentially four different element-arrangement strategies: “block” for handling blocks of content within a web page, “inline” for handling strings of text, “table” for representing two-dimensional data, and “positioned” for specifying the explicit position of items on a page. Now that pages are being viewed on a wider variety of devices, this grid lacks the flexibility needed to automatically arrange elements on multiple screens.</p>

    <p class="H2_Body">Recently, the concept of “flex” or “flexbox” layout has emerged. The flexbox strategy expands on the four traditional layout display values with additional values that instruct the browser on how to stack, wrap, and arrange elements. This model allows for layout without using floats or relative positioning, thereby avoiding the dreaded overlap issues associated with these techniques.</p>

    <p class="H2_Body">Imagine a bag of marbles. If you lay the bag on the table, the marbles will align in a roughly horizontal fashion. Putting the bag of marbles in your pocket forces the marbles into tighter arrangement. The marbles will remain in the bag but will reorient themselves to fit the available area.</p>

    <p class="H2_Body">To construct flexbox-style layouts, we begin by defining an HTML structure with a container and then add a few internal elements.</p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-26.html</p>

      <pre class="CODE_body">   &lt;div class="flex-container"&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;1&lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;2&lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;3&lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;4&lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;5&lt;/div&gt; </pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/rememberLogo.png"/>

      </figure>

      <p class="Note">Visual Studio Code has a nifty shortcut for designing multiple elements that is most useful for creating divs and spans. Type <code class="CODE">div*3</code>, then hit ENTER and three div elements will appear. Replace <code class="CODE">div</code> with the element and <code class="CODE">3</code> with the number of elements you want to create.</p>

    </div>

    <p class="H2_Body">In our CSS, we set the display property of the parent element “flex-container” to flex. Let’s give it a light gray background color:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-27.css</p>

      <pre class="CODE_body">   .flex-container {</pre>

      <pre class="CODE_body">      display: flex;</pre>

      <pre class="CODE_body">      background-color: #CCCCCC;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">We can now define the behavior of any div elements within our flex-container class.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-28.css</p>

      <pre class="CODE_body">   .flex-container &gt; div {</pre>

      <pre class="CODE_body">      background-color: #ffffff;</pre>

      <pre class="CODE_body">      margin: 10px;</pre>

      <pre class="CODE_body">      padding: 20px;</pre>

      <pre class="CODE_body">      font-size: 30px;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">The resulting display will look something like this (figure 80):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo080.jpg"/>

        <img alt="" class="w-100" src="image/Figure80.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">Flex also allows us to alter the way the content displays. We can change the display to a column format using the flex-direction property (figure 81):</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">09-29.css</p>

      <pre class="CODE_body">   .flex-container {</pre>

      <pre class="CODE_body">      display: flex;</pre>

      <pre class="CODE_body">      flex-direction: column;</pre>

      <pre class="CODE_body">      background-color: #CCCCCC;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo081.jpg"/>

        <img alt="" class="w-60" src="image/Figure81.png"/>

      </figure>

    </div>

    <p class="H2_Body">Sometimes content will not fit in a single line. If we set the flex-wrap property to “wrap,” the browser will display the layout in a line if there is enough room; if not, it will create a new line to display the remaining content. This allows us to adapt to a wide variety of screen widths (figure 82).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo082.jpg"/>

        <img alt="" class="w-60" src="image/Figure82.png"/>

      </figure>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">There are many more CSS flex properties. For a complete listing, go to <a class="underline" href="https://www.clydebankmedia.com/htmlcss-assets">www.clydebankmedia.com/htmlcss-assets</a> and look for the “Flex Container List.”</p>

    </div>

    <h3 class="H2" id="idParaDest-87"><a id="idTextAnchor123"/>Moving Forward</h3>

    <p class="H2_Body">In part II, we’ve covered the basics of HTML and CSS. With this knowledge, you can build simple and attractive web pages. In part III, we’ll cover more advanced topics to help you style your pages to look great on all devices, including tablets and phones. We’ll also explore HTML forms, allowing you to collect data from your visitors.</p>

    <p class="H2_Body">You’ve done a great job! See you in part III!</p>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">With CSS, we can position HTML elements in a variety of ways. In addition to altering the flow and order of presentation, we can make elements float outside their normal position, stick to a side of the window, or even disappear.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">The list element can be used to build an attractive and functional navigation bar.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">CSS Flexbox allows elements in a container to adapt to the size of the screen on which they are being displayed, giving the designer tremendous layout flexibility.</p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>