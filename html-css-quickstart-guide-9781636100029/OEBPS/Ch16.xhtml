<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-22</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-22" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-144"><a id="idTextAnchor424"/>| 16 | </h2>

    <p class="Chapter-Title" id="idParaDest-145"><a id="idTextAnchor425"/>Git</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">Git is a distributed version control system.</p>

        </li>

        <li>

          <p class="marked-list-item">Git maintains version history and allows coders to collaborate.</p>

        </li>

        <li>

          <p class="marked-list-item">GitHub provides free hosted git repositories.</p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">Now that you’ve learned the basic workflow of website management, it’s time to add another layer of knowledge to your website maintenance skills. Version control systems, like Git, allow you to not only produce versions of your work but easily collaborate with other designers and developers.</p>

    <p class="H2_Body">Git is an advanced topic, and some designers may not ever use this technology. Nevertheless, since Git is becoming quite popular, you’ll have a leg up on future expansion should you decide to use this system.</p>

    <h3 class="H2" id="idParaDest-146"><a id="idTextAnchor426"/>What Is Git?</h3>

    <p class="H2_Body">Git is a distributed version control system written by Linus Torvalds, the creator of the Linux kernel. “Version control system” sounds overly complex, so let’s unpack the definition.</p>

    <p class="H2_Body">A version control system is a method of storing versions of your files. A version is simply an update to a previous version. Each time you add or edit content from a page, you’re essentially creating a new version. A version control system keeps track of these changes by tracking the delta, or difference, between a file before and after you edit it.</p>

    <p class="H2_Body">Version control systems are usually centralized on a hosted server so users can check in and check out the content they’re developing. In many centralized version control systems, the server maintains a series of locks, ensuring that two developers don’t inadvertently work on the same file and make incompatible changes. This is a good arrangement but presents problems if developers need to work offline or if differences arise between individual developers’ working copies. </p>

    <p class="H2_Body">The <span class="italic idGenCharOverride-2">distributed</span> nature of Git is what separates it from most version control systems. With decentralization technology, Git hosts the repository of version-controlled files on each developer’s machine, not in any particular centralized location. Rather than relying on file locking, Git encourages the use of “branches” to separate individual developer efforts on specific features from the main branch and other developers’ branches. When it’s time to merge these branches, Git uses advanced algorithms to help reconcile and merge differences in files. When Git can’t automatically merge the changes, it marks the conflicting files with a readable syntax, guiding developers to fix the issue manually.</p>

    <p class="H2_Body">Beyond these advantages, learning Git offers you a leg up on other web designers. Not only will you be able to work seamlessly with other programmers, you will also stand out in the eyes of prospective employers. They love to see these advanced technologies on a web designer’s résumé.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/myTakeLogo.png"/>

      </figure>

      <p class="Note">Isn’t Git overkill for a simple website? Possibly. If your website becomes a huge success and many people begin working on its code, you’ll be glad you used it. But using Git from the beginning of a project provides benefits even if you never work with anyone else—mainly the ability to retain older versions of your files and revert to them if disaster strikes. On the other hand, it is fairly easy to import a site into a Git repository after it’s been built, so this isn’t a concern that should keep you up at night. </p>

    </div>

    <h3 class="H2" id="idParaDest-147"><a id="idTextAnchor428"/>Downloading and Installing Git</h3>

    <p class="H2_Body">You’ll need to install Git on your machine. There are two primary methods of interfacing with Git—via command line and using a graphical user interface (GUI). The GUI approach is easier for new users, but the command line tools are more powerful.</p>

    <ul>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">GUI for Windows and macOS –GitHub Desktop</span>: www.desktop.github.com</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">GUI for Linux – GitKraken</span>: www.gitkraken.com</p>

      </li>

      <li>

        <p class="marked-list-item"><span class="Semi-Bold idGenCharOverride-2">Command Line for Windows, macOS, and Linux</span>: www.git-scm.com</p>

      </li>

    </ul>

    <p class="H2_Body">The instructions in this chapter will cover both the GUI and the command line. The GUI instructions will be somewhat too generic to account for the variation in software layouts and user interfaces. But no matter which you choose, the steps and workflow will be the same.</p>

    <h3 class="H2" id="idParaDest-148"><a id="idTextAnchor429"/>Accessing the Command Line</h3>

    <p class="H2_Body">The command-line interface, or CLI for short, is a direct interface to the system that allows you to type commands instead of using a mouse or selecting icons and menu items. Many developers find the entering of commands preferable to a graphical user interface in certain situations. For more advanced development-related tasks, the CLI is often the only viable way to accomplish your goal.</p>

    <p class="H2_Body">While it’s possible to use Git via a GUI, it’s difficult to explain the steps involved, as each user interface is different. Skills learned in one GUI-based Git client may not translate well to another, and thus the command-line interface is the most stable and robust approach to using Git.</p>

    <p class="H2_Body">The command line may seem intimidating, but it’s safer in some ways than using the GUI. A wrong click or inadvertent drag won’t move files all over your drive. We will explore the process of starting a Git repository, adding files to it, updating, and pushing to a remote provider like GitHub. To get started, you’ll need to install the Git command-line software.</p>

    <p class="H2_Body">Once Git is installed, you can launch a command-line (sometimes referred to as terminal) window and begin entering commands. On Windows, search for Command Prompt in the start menu or press WIN+R and type “cmd”, then press ENTER to run the command prompt (figure 149). On Mac, run the terminal application. Linux terminal applications vary, but every distribution has one installed. On Ubuntu, for example, you can press CTRL+ALT+T to bring up a terminal, but your application list will undoubtedly show a terminal program.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo149.jpg"/>

        <img alt="" class="w-100" src="image/Figure149.jpg"/>

      </figure>

      <p class="Caption">The Command Prompt window on Windows</p>

    </div>

    <h3 class="H2" id="idParaDest-149"><a id="idTextAnchor431"/>Starting a Website with Git</h3>

    <p class="H2_Body">If you are just starting a new website on your hard drive, create the folder for your site in your home directory and call it <code class="CODE">New-Website</code> (or some other meaningful name). Next, add some initial files (even if it’s just an <code class="CODE">index.html</code>), then “initialize” a Git repository in that folder.</p>

    <p class="H2_Body">Before you can create a Git repository, you must change to the directory of your website. To do this, run the change directory (<code class="CODE">cd</code>) command:</p>

    <p class="CODE_heading">Windows</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.01</p>

      <pre class="CODE_body">   cd %homepath%\New-Website</pre>

    </div>

    <p class="CODE_heading">macOS and Linux</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.02</p>

      <pre class="CODE_body">   cd ~/New-Website</pre>

    </div>

    <p class="H2_Body">In the Windows example, <code class="CODE">%homepath%</code> is substituted for your home directory, usually something like <code class="CODE">C:\Users\YourName</code>. On macOS and Linux, the <code class="CODE">~</code> is replaced with your home directory by the command prompt. If you use another folder name besides New-Website, be sure to change this.</p>

    <p class="H2_Body">Now it’s time to start the repository. Once you’ve entered the folder of your website via the <code class="CODE">cd</code> command, run:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.03</p>

      <pre class="CODE_body">   git init</pre>

      <pre class="CODE_body">   git add .</pre>

      <pre class="CODE_body">   git commit -a -m "Initial commit."</pre>

    </div>

    <p class="H2_Body">In the <code class="CODE">git add</code> command, we specify a period after the add to tell Git to add any files in the current directory. You can replace the dot with a specific file name if you only want to add one file. The <code class="CODE">-a</code> option is to tell Git to stage all changes, and the <code class="CODE">-m</code> option, followed by text in quotes, is to append a message to the commit. This message isn’t shown on the site and doesn’t modify the code, but instead provides a note to yourself or to others about the changes you made to this specific version. Since this is our first time committing a version of our site to the repository, our note states “Initial commit.”</p>

    <p class="H2_Body">In a Git GUI, add the folder as a project, then initialize a Git repository. You’ll also want to add any existing files you’ve created, then do an initial commit. You will be prompted for a message when committing.</p>

    <p class="H2_Body">Your commit was only to your local Git repository. If you want to add a remote repository and sync to it, such as with GitHub, you’ll need to sign up for a GitHub account, create the repository on the website, then follow the instructions provided to add, commit, and sync. The GitHub Desktop GUI has integration with GitHub, so interfacing it with your GitHub account is easy.</p>

    <h3 class="H2" id="idParaDest-150"><a id="idTextAnchor435"/>Importing an Existing Website into Git</h3>

    <p class="H2_Body">Importing an existing site is similar to starting a new one, except the <code class="CODE">add</code> command will import all the existing files. The steps under “Starting a Website with Git” apply, but be sure to include your current HTML, CSS, and JavaScript files.</p>

    <p class="H2_Body">Also, keep in mind that version history will not be available until you make a commit. Git cannot track changes unless it has been added to a folder, so any changes made before adding Git are without history.</p>

    <h3 class="H2" id="idParaDest-151"><a id="idTextAnchor436"/>The Git Workflow</h3>

    <p class="H2_Body">In the previous steps, we performed several operations: initializing (<code class="CODE">init</code>), adding (<code class="CODE">add</code>), and committing. In the <code class="CODE">init</code> step, we added Git support to the folder. This is done only once for a repository. With the <code class="CODE">add</code> command, we add files into Git to be tracked, then we commit the changes with the <code class="CODE">commit</code> command.</p>

    <p class="H2_Body">The only step missing is the “push” (sometimes referred to as “sync” in GUI tools) command. Pushing allows you to sync your commits with another repository in another location. If you have added the repository to GitHub, you will push to GitHub. </p>

    <p class="H2_Body">We’ll get into the nuances of pushing a repository later. For now, let’s review the basic workflow. In figure 150, we create a new file called <code class="CODE">new.html</code> and observe its life cycle within the Git paradigm.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo150.jpg"/>

        <img alt="" class="w-60" src="image/51.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">This workflow is repeated over and over, except the creation process is omitted if the file already exists. You can also skip the <code class="CODE">add</code> part if you use the <code class="CODE">-a</code> option on <code class="CODE">git commit</code>, because it will include all changed files previously added (GUI programs will offer “include unstaged changes” or a similar option). With each commit, be sure to include a useful and meaningful message so you’ll be able to refer to that change in the future, then push to GitHub if desired.</p>

    <h3 class="H2" id="idParaDest-152"><a id="idTextAnchor438"/>Git Branches</h3>

    <p class="H2_Body">By default, your project has one branch, the <span class="italic idGenCharOverride-2">master</span> branch. For simple, single-developer projects, this may be all you need, but complex projects benefit significantly from multiple branches. Think of branches like diverging highways. You’re still moving forward but in slightly different paths.</p>

    <p class="H2_Body">Branching your development allows you to work on new changes that might break your existing work, without disrupting your current site. Branches, when given meaningful names like “new_navigation_menu,” are easily spotted in an online tool like GitHub and let you deviate from the existing code without affecting others.</p>

    <p class="H2_Body">To create a new branch, run…</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.04</p>

      <pre class="CODE_body">   git checkout -b new_branch</pre>

    </div>

    <p class="H2_Body">…(where <code class="CODE">new_branch</code> is the name). GUI programs have buttons enabling the creation of new branches within your repository.</p>

    <p class="H2_Body">To switch branches, simply run:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.05</p>

      <pre class="CODE_body">   git checkout master</pre>

    </div>

    <p class="H2_Body">In this case, you return to the master branch. Note the omission of the <code class="CODE">-b</code> option, since the branch already exists.</p>

    <p class="H2_Body">When you’re ready to merge your shiny new changes from <code class="CODE">new_branch </code>into <code class="CODE">master</code>, you have two options. The easiest is to use GitHub to create a pull request between branches and then merge them using GitHub’s online interface. This pull request allows you (or another coder) to review the changes before merging them into the master branch. This adds a layer of oversight that helps reduce mistakes in live websites. GUI tools have similar functionality, or you can use the command line.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.06</p>

      <pre class="CODE_body">   git checkout master</pre>

      <pre class="CODE_body">   git merge new_branch</pre>

    </div>

    <p class="H2_Body">If you want to delete the <code class="CODE">new_branch</code> branch after merging, you can run:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">16.07</p>

      <pre class="CODE_body">   git branch -d new_branch</pre>

    </div>

    <p class="H2_Body">A final note about branches: if your separate branch will be used for a long time, it’s advisable to periodically pull changes from the master into the new branch so that you don’t end up with a branch that is horrifically out of date. If you work in a large team, a merge can be disastrous if your code hasn’t kept up with what’s going on in the master and other branches.</p>

    <h3 class="H2" id="idParaDest-153"><a id="idTextAnchor443"/>Git Production Auto-Sync</h3>

    <p class="H2_Body">In some web hosting control panels, you can configure an auto-pull from the master branch of a hosted repository on a provider like GitHub. This will automatically pull the contents of <code class="CODE">master</code> from GitHub whenever you commit to <code class="CODE">master</code>, providing a one-touch solution for deploying code to your website.</p>

    <p class="H2_Body">If you don’t have this capability in your control panel, you can use your control panel to create a scheduled task (often called a “cron job”) that runs the following code:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">   cd ~/public_html</pre>

      <pre class="CODE_body">   git pull origin master</pre>

    </div>

    <p class="H2_Body">In the previous example, replace <code class="CODE">public_html</code> with the path that contains your website files (if necessary) and <code class="CODE">origin master</code> with the name of the remote Git repository and remote branch to pull. If you use GitHub, <code class="CODE">origin master</code> will be the correct values.</p>

    <p class="H2_Body">Web hosts have a variety of control panels, and covering them all would be far beyond the scope of this book. However, the basic instructions, perhaps with the help of your web hosting technical support team to fill in any provider-specific values, should get you up and running.</p>

    <h3 class="H2" id="idParaDest-154"><a id="idTextAnchor445"/>GitHub and GitLab</h3>

    <p class="H2_Body">Providers like GitHub and GitLab provide a centralized location to sync your Git repositories for easy collaboration with other developers.</p>

    <p class="H2_Body">You may have read that sentence and wondered why you would want a centralized location when Git touts itself as being a decentralized technology. Decentralization is indeed a powerful design feature of Git, but having a central repository with issue tracking, a wiki, and comment features amounts to a powerful suite of tools that will aid and enhance your team’s collaborative efforts.</p>

    <p class="H2_Body">As you know by now, the ClydeBank Coffee Shop website and the source code for this entire book is stored on GitHub. You don’t need an account to download or browse the code, but a free account is required for access to advanced features on GitHub, like forking and issue tracking.</p>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">The version history and branch components of Git are powerful features for both stand-alone developers and those working on a team.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">GitHub is a popular provider of hosted Git repositories, but there are other providers. Most let you create and host repositories for free.</p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>