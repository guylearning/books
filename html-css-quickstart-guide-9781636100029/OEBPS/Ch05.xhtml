<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-9</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-9" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-47"><a id="idTextAnchor044"/>| 5 | </h2>

    <p class="Chapter-Title" id="idParaDest-48"><a id="idTextAnchor045"/>Basic HTML Elements</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">HTML uses elements for structure.</p>

        </li>

        <li>

          <p class="marked-list-item">A wide assortment of HTML elements is available.</p>

        </li>

        <li>

          <p class="marked-list-item">Div and span tags allow for logical content grouping.</p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">In the last chapter, we addressed the basic structure of an HTML page. To reiterate, HTML pages consist of a DOCTYPE declaration and “head” and “body” sections. In this chapter, we will pursue a more precise understanding of how some of the most common HTML tags work.</p>

    <p class="H2_Body">Let’s look at some basic HTML. I encourage you to fire up your Visual Studio Code editor and experiment with the various HTML elements we discuss in this chapter.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-01.html</p>

      <pre class="CODE_body">&lt;!DOCTYPE html&gt;</pre>

      <pre class="CODE_body">&lt;html lang="en"&gt;</pre>

      <pre class="CODE_body">   &lt;head&gt;</pre>

      <pre class="CODE_body">      &lt;meta charset="UTF-8"&gt;</pre>

      <pre class="CODE_body">      &lt;title&gt;Carter Dome&lt;/title&gt;</pre>

      <pre class="CODE_body">   &lt;/head&gt;</pre>

      <pre class="CODE_body">   &lt;body&gt;</pre>

      <pre class="CODE_body">Carter Dome</pre>

      <pre class="CODE_body">Carter Dome, or simply The Dome, is a mountain located in Coos County, New Hampshire. The mountain is part of the Carter-Moriah Range of the White Mountains, which runs along the northern east side of Pinkham Notch. Carter Dome is flanked to the northeast by Mount Hight and to the southwest by Wildcat Mountain (across Carter Notch).</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">The origins of Carter Dome’s name is unknown. Local folklore suggests that it was named after a hunter named Carter, while a neighboring peak is named after his hunting partner, Hight.</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">The mountain is ascended from the west by the Carter Dome Trail and Nineteen Mile Brook Trail, and from the east by the Black Angel Trail.</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">Statistics</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">Elevation: 4,832 ft (1,473 m)</pre>

      <pre class="CODE_body">Prominence: 2,821 ft (860 m)</pre>

      <pre class="CODE_body">Coordinates: 44°16'02"N 71°10'44"W</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;/body&gt;</pre>

      <pre class="CODE_body">&lt;/html&gt;</pre>

    </div>

    <div class="idGenClearFloat">
			</div>

    <div class="floatleft2em" id="idContainer039">

      <img alt="" class="idGenObjectAttribute-4" src="image/CC_logo.png"/>

    </div>

    <p class="source">All Carter Dome-related content used here and elsewhere in this text is from Wikipedia and is used per the Creative Commons Attribution-ShareAlike 3.0 Unported License.</p>

    <p class="H2_Body">If we look at the raw HTML code, we can see that the information presented is relatively straightforward. The content is grouped in an organized fashion. We can see headers and clear paragraph breaks, and some list items. We would expect this code, when rendered, to be readable and understandable, right? Let’s load the code into a web browser and see what it looks like.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo040.jpg"/>

        <img alt="" class="w-100" src="image/figure40.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">Right away we can see that the browser has ignored our careful formatting. Everything is displayed as a solid block of text. Though our markup was sufficient to tell the browser to (a) use HTML, (b) use the UTF-8 character set, (c) title the page “Carter Dome” (which can be seen on the browser tab), and (d) add a bunch of text to the body, we did not tell the browser how to organize and display the text.</p>

    <p class="H2_Body">As shown in figure 40, paragraph breaks are ignored by the web browser. Browsers are not intuitive, so we need to provide a set of instructions via HTML markup to tell the browser how to organize the text.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">When formatting text, the browser will ignore extra spaces (any beyond one), tabs, and line breaks as well as HTML comments. The only exception is the <code class="CODE">&lt;pre&gt;&lt;/pre&gt;</code> element, which is used to format source code that should be displayed exactly as written.</p>

    </div>

    <h3 class="H2" id="idParaDest-49"><a id="idTextAnchor046"/>Paragraphs</h3>

    <p class="H2_Body">To break text into paragraphs, we need to define where a paragraph begins and ends. Paragraphs in HTML are defined using the <code class="CODE">&lt;p&gt;</code> tag. To mark a paragraph, we place a <code class="CODE">&lt;p&gt;</code> at the beginning and a <code class="CODE">&lt;/p&gt;</code> at the end, like this:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-02.html</p>

      <pre class="CODE_body">   &lt;p&gt;Carter Dome&lt;/p&gt;</pre>

      <pre class="CODE_body">   </pre>

      <pre class="CODE_body">   &lt;p&gt;Carter Dome, or simply The Dome, is a mountain located in Coos County, New Hampshire. The mountain is part of the Carter-Moriah Range of the White Mountains, which runs along the northern east side of Pinkham Notch. Carter Dome is flanked to the northeast by Mount Hight and to the southwest by Wildcat Mountain (across Carter Notch).&lt;/p&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;p&gt;The origins of Carter Dome’s name is unknown. Local folklore suggests that it was named after a hunter named Carter, while a neighboring peak is named after his hunting partner, Hight.&lt;/p&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;p&gt;The mountain is ascended from the west by the Carter Dome Trail and Nineteen Mile Brook Trail, and from the east by the Black Angel Trail.&lt;/p&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;p&gt;Statistics&lt;/p&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;p&gt;Elevation: 4,832 ft (1,473 m)&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;Prominence: 2,821 ft (860 m)&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;Coordinates: 44°16'02"N 71°10'44"W&lt;/p&gt;</pre>

    </div>

    <p class="H2_Body">After adding these <code class="CODE">&lt;p&gt;</code> elements, if we save and refresh our page, we will get a result like the following (figure 41):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo041.jpg"/>

        <img alt="" class="w-100" src="image/figure41.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">As you can see, the page is beginning to take shape. The paragraphs are clearly shown with line breaks in the page, not just in our code. </p>

    <h3 class="H2" id="idParaDest-50"><a id="idTextAnchor047"/>Headings</h3>

    <p class="H2_Body">Headings are commonly used to visually delineate sections of text in a site. Headings in HTML take the format of “h” followed by a number to identify the level of heading.</p>

    <p class="H2_Body">In our HTML code for the “Carter Dome” web page, we currently have our heading inside <code class="CODE">&lt;p&gt;</code> tags. Let’s swap the <code class="CODE">&lt;p&gt;</code> tags for <code class="CODE">&lt;h1&gt;</code> tags. The “1” portion of the heading tag tells the browser we want it to show as the highest-level heading (with the largest font size).</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">   &lt;h1&gt;Carter Dome&lt;/h1&gt;</pre>

    </div>

    <p class="H2_Body">When we refresh the page, we will instantly notice the change. The <code class="CODE">&lt;h1&gt;</code> tag is not unlike the <code class="CODE">&lt;p&gt;</code> tag in that, when applied, it creates a paragraph break. However, the heading tag will, by default, bold the text and increase the font size (as in figure 42). Additionally, <code class="CODE">&lt;h1&gt;</code> headings have more space above and below them than do normal lines of text. </p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">Size and spacing around elements in HTML are often overridden in CSS.</p>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo042.jpg"/>

        <img alt="" class="w-100" src="image/figure42.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">Now let’s wrap the “Statistics” heading inside h2 tags, like so:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">   &lt;h2&gt;Statistics&lt;/h2&gt;</pre>

    </div>

    <p class="H2_Body">If you reload the page, you will see that the h2 tag has an effect similar to the h1, except that, by default, it’s a little smaller (figure 43).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo043.jpg"/>

        <img alt="" class="w-100" src="image/figure43.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">HTML has six default headings of different sizes:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">   &lt;h1&gt;This is heading 1&lt;/h1&gt;</pre>

      <pre class="CODE_body">   &lt;h2&gt;This is heading 2&lt;/h2&gt;</pre>

      <pre class="CODE_body">   &lt;h3&gt;This is heading 3&lt;/h3&gt;</pre>

      <pre class="CODE_body">   &lt;h4&gt;This is heading 4&lt;/h4&gt;</pre>

      <pre class="CODE_body">   &lt;h5&gt;This is heading 5&lt;/h5&gt;</pre>

      <pre class="CODE_body">   &lt;h6&gt;This is heading 6&lt;/h6&gt;</pre>

    </div>

    <p class="H2_Body">This HTML will, by default, display as follows (figure 44):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo044.jpg"/>

        <img alt="" class="w-100" src="image/Figure44.jpg"/>

      </figure>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">There are no firm limits on the use of h1 tags, but you’ll rarely find more than one h1 tag on a page, since they are main headings. Sections of text are generally titled with h2, then subsections within each of those are titled with h3, and so on. </p>

    </div>

    <p class="H2_Body">Headings are primarily used for document structuring purposes. CSS gives us the ability to style these in any way, but they should remain hierarchical (that is, h2 should delineate sections of text on a page, and h3 should be used for subsections, etc.). This may seem overly rigid—especially since HTML allows you the flexibility to structure headings however you choose—but there are advantages in adhering to a sequential and hierarchical approach with headings.</p>

    <p class="H2_Body">For web users with visual disabilities, text readers use headings to navigate a page. If a page is poorly structured, it will create a bad experience for those users. </p>

    <p class="H2_Body">Also, search engines tend to attribute greater importance to higher-level headings. When a search engine indexes a site, lower-level elements (h2, h3, etc.) are logically grouped with the content they decorate, thereby assigning more precise meaning to that text for the ranking algorithm. Using good heading structure will help your site rank more favorably in search engine results.</p>

    <h3 class="H2" id="idParaDest-51"><a id="idTextAnchor048"/>Lists</h3>

    <p class="H2_Body">You may wish to break up points of data or key ideas into lists. In HTML, we designate lists in two ways. For numbered, or “ordered,” lists we use the <code class="CODE">&lt;ol&gt;&lt;/ol&gt;</code> tags to specify the beginning and ending of the list. For simple “unordered” lists (such as those with bullet points), we use <code class="CODE">&lt;ul&gt;&lt;/ul&gt;</code>. For both types of lists, each element is identified as a “list item” and is marked with <code class="CODE">&lt;li&gt;&lt;/li&gt;</code> tags.</p>

    <p class="H2_Body">Let’s try this with the “Statistics” section of our page using this code:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-03.html</p>

      <pre class="CODE_body">   &lt;h2&gt;Statistics&lt;/h2&gt;</pre>

      <pre class="CODE_body">   &lt;ul&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;Elevation: 4,832 ft (1,473 m)&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;Prominence: 2,821 ft (860 m)&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;Coordinates: 44°16′02″N 71°10′44″W&lt;/li&gt;</pre>

      <pre class="CODE_body">   &lt;/ul&gt;</pre>

    </div>

    <p class="H2_Body">The code will display as shown in figure 45.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo045.jpg"/>

        <img alt="" class="w-100" src="image/Figure45.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">If we chose to make this an ordered list (though it does not really make sense in this situation), we could do it like this:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-04.html</p>

      <pre class="CODE_body">   &lt;h2&gt;Statistics&lt;/h2&gt;</pre>

      <pre class="CODE_body">   &lt;ol&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;Elevation: 4,832 ft (1,473 m)&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;Prominence: 2,821 ft (860 m)&lt;/li&gt;</pre>

      <pre class="CODE_body">      &lt;li&gt;Coordinates: 44°16′02″N 71°10′44″W&lt;/li&gt;</pre>

      <pre class="CODE_body">   &lt;/ol&gt;</pre>

    </div>

    <p class="H2_Body"> . . . which would display as follows (figure 46):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo046.jpg"/>

        <img alt="" class="w-60" src="image/Figure46.png"/>

      </figure>

    </div>

    <p class="H2_Body">By default, all list items will be left-indented. Each <code class="CODE">&lt;li&gt;</code> element will appear on its own line. Lists can be styled in many ways to make them extremely useful for several purposes, such as navigation bars. We will discuss alternate uses for lists in chapters 9 and 14.</p>

    <div class="oyo">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Image-Line">

        <img alt="" class="idGenObjectAttribute-1" src="image/25.jpg"/>

      </p>

      <p class="CBC_Heading">Editing the Coffee Shop Menu</p>

      <p class="H3">Add “Americano” to Your Coffee Shop Menu</p>

      <p class="H3_Body">Let’s return to our great work in progress, the ClydeBank Coffee Shop website. It was just brought to your attention that the coffee shop is going to offer Americanos for $2.25. Update the website to reflect this change. You can find a walk-through of how to do this in appendix V.</p>

      <p class="H3">Edit, Save, Refresh, and Repeat</p>

      <p class="H3_Body">For the most satisfying work experience, remember to keep your web page (.html file) open in a browser as you make edits in the code editor. After you make and save your edits, you can simply refresh the web page in your browser window and your changes will instantly render. This <span class="italic idGenCharOverride-2">edit</span>, <span class="italic idGenCharOverride-2">save</span>, <span class="italic idGenCharOverride-2">refresh</span>, and <span class="italic idGenCharOverride-2">repeat</span> workflow will become a common habit in your web design career and will allow you to experiment quickly with new ideas as you continue to learn the ropes of HTML and CSS. </p>

    </div>

    <h3 class="H2" id="idParaDest-52"><a id="idTextAnchor049"/>Links</h3>

    <p class="H2_Body">Now is the moment you’ve been waiting for. The feature that makes HTML unique from other markup languages is <span class="italic idGenCharOverride-2">hypertext</span>. HTML uses “hyperlinks,” commonly known as <span class="glossaryterm idGenCharOverride-1">links</span>, to connect sites with other sites or with web pages within the existing site.</p>

    <p class="H2_Body">Links are designated by “anchor” elements. The anchor tags, <code class="CODE">&lt;a&gt;&lt;/a&gt;</code>, are responsible for creating that ubiquitous blue “link” text seen on many websites.</p>

    <p class="H2_Body">The <code class="CODE">&lt;a&gt;</code> element can be used for many purposes, but for now let’s focus on its most popular usage: creating links. Wrapping the <code class="CODE">&lt;a&gt;&lt;/a&gt;</code> tags around content—typically text or an image—makes the content clickable. </p>

    <p class="H2_Body">To demonstrate, let’s show a simple text-based link:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-05.html</p>

      <pre class="CODE_body">   &lt;a href="newpage.html"&gt;click me!&lt;/a&gt;</pre>

    </div>

    <p class="H2_Body">The <code class="CODE">&lt;a&gt;</code> tag denotes that a piece of text, in this case <span class="italic idGenCharOverride-2">click me</span>, is to be an anchor, meaning the user can click on it. Wrapping content between the <code class="CODE">&lt;a&gt;</code> and <code class="CODE">&lt;/a&gt;</code> tags tells the browser that the content is intended to serve as a link. The <code class="CODE">href</code> attribute (which stands for <span class="italic idGenCharOverride-2">hypertext reference</span>) tells the browser where to send the user upon clicking.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/cautionLogo.png"/>

      </figure>

      <p class="Note">Any file or page pointed to with the <code class="CODE">href</code> attribute needs complete information or the link will not work.</p>

    </div>

    <p class="H2_Body">In our preceding example, clicking on the link will send the user to a local page (that is, on the same website) named newpage.html. This type of link is called a “relative” link, meaning the file newpage.html is assumed to be in the same directory as the current HTML document. </p>

    <p class="H2_Body">If we attempt to direct a hyperlink to a location that does not exist, the web browser will return a “404 Not Found” error message.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/questionLogo.png"/>

      </figure>

      <p class="Question">Q: What is a 404 error, anyway?</p>

      <p class="H2_Body">Answer: All web browsers use what we refer to as HTTP (hypertext transfer protocol) access codes to identify whether a file has been retrieved or delivered, as well as to provide a whole host of other information. You have likely seen these messages many times (sometimes customized to say something like “Oops! The page you are looking for isn’t here.”). When clicking on a link, you are providing instructions to the web browser to look for the item specified by the <code class="CODE">href</code> attribute. The browser will perform an <code class="CODE">HTTP GET</code> command to call the location specified. If the command succeeds, then the browser will return a 200, which means “OK.” There are several reasons why a request can fail, but the 404 Not Found error is by far the most common.</p>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo047.jpg"/>

      </figure>

      <table class="Table1" id="table004">

        <colgroup>

          <col/>

          <col/>

          <col/>

        </colgroup>

        <thead>

          <tr class="Table1">
            <td class="Table1 CellHead" colspan="3">
              <p class="TableHead">MOST COMMON HTTP STATUS CODES</p>
            </td>
          </tr>

        </thead>

        <tbody>

          <tr class="Table1">
            <td class="Table1 Gray CellText idGenCellOverride-1">
              <p class="TableText">CODE</p>
            </td>
            <td class="Table1 Gray CellText idGenCellOverride-1">
              <p class="TableText">STATUS</p>
            </td>
            <td class="Table1 Gray CellText idGenCellOverride-1">
              <p class="TableText">MEANING</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">200</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">OK</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">The request was successful.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">301</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Moved Permanently</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">The requested URL has changed. The new URL is provided in the response and the browser is directed to the new page.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">302</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Found</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">The requested URL has been temporarily changed. The browser is redirected to the new page.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">304</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Not Modified</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">This status informs the browser that the page hasn’t been modified, so requesting a new copy of it isn’t necessary. This saves time and bandwidth.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">403</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Forbidden</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">The visitor doesn’t have the permissions necessary to access this content.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">404</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Not Found</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">The requested page couldn’t be found on the server.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">500</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Internal Server Error</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">A problem in the website’s backend code is preventing the page from being served to the browser.</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText"><span class="DemiBold idGenCharOverride-4">503</span></p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Service Unavailable</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableTextLeft">This indicates that the server is overloaded or the backend functionality is offline.</p>
            </td>
          </tr>

        </tbody>

      </table>

    </div>

    <p class="H2_Body">We mentioned that our link to newpage.html is a relative link. Relative links can be used to link to content within the same site, but linking to other websites requires an “absolute” link. In an absolute link, the entire <span class="glossaryterm idGenCharOverride-1">URL</span> (universal resource locator) must be specified. For example: </p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-06.html</p>

      <pre class="CODE_body">&lt;a href="https://www.google.com/search/howsearchworks/"&gt;Google&lt;/a&gt;</pre>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo048.jpg"/>

        <img alt="" class="w-100" src="image/27.jpg"/>

      </figure>

    </div>

    <p class="H2_Body">Relative links only use the file (and sometimes path) part of the URL structure, but absolute links use the entire URL, including protocol, site, and, optionally, path and file. Since each website handles its file structure differently, files and paths may not be needed in the destination absolute URL, but the protocol and site name will always be included (figure 48).</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">Though we’re discussing HTTP, most links these days use HTTPS, which stands for hypertext transfer protocol secure. The “secure” portion indicates that encryption is provided over the HTTP connection, protecting requests and responses between web server and web browser from prying eyes. This encryption uses a technology commonly called SSL, though this is an older term and TLS (transport layer security) is now used. </p>

    </div>

    <p class="H2_Body">Relative paths are usually used for local pages within a site, but you are free to use absolute paths. If you do use absolute paths, changing your domain name (the “site” portion of the URL) becomes a lot more cumbersome, because you will have to manually change all your absolute links. </p>

    <p class="H2_Body">The “target” attribute tells the browser in which frame to open the link. Since frames are rarely used nowadays, the most common use of the target attribute is to tell the browser to open the link in a new tab. To do this, set the target attribute to “_blank,” like so: </p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-07.html</p>

      <pre class="CODE_body">&lt;a href="https://www.google.com/" target="_blank"&gt;Google&lt;/a&gt;</pre>

    </div>

    <p class="H2_Body">In HTML5, the “download” attribute was introduced to the <code class="CODE">&lt;a&gt;</code> tag. This allows you to specify that the file should be downloaded rather than viewed. Consider the following example:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-08.html</p>

      <pre class="CODE_body">   &lt;a href="files/file.txt" download&gt;Download this file&lt;/a&gt;</pre>

    </div>

    <p class="H2_Body">If you hadn’t used the download attribute, the text file (files/file.txt) would have been displayed directly in the browser. But in this case, due to the download attribute, the file will be downloaded.</p>

    <p class="H2_Body">Another type of link that uses the <code class="CODE">&lt;a&gt;</code> tag is the “anchored” link, which can be used to link to a different section of the current page. Also known as placeholders, jump links, and in-page links, anchor links are often used on large pages (think of sites with a multitude of different content sections, such as Wikipedia).</p>

    <p class="H2_Body">To use an anchored link, you must first add an id attribute to your destination heading. In the following example, we will identify an h2 heading with the name “stats”:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-09.html</p>

      <pre class="CODE_body">   &lt;h2 id="stats"&gt;Statistics&lt;/h2&gt;</pre>

    </div>

    <p class="H2_Body">Now that the heading has a named id, we can set up a link to that heading anywhere on the page using “#stats”:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-10.html</p>

      <pre class="CODE_body">   &lt;a href="#stats"&gt;View the statistics&lt;/a&gt;</pre>

    </div>

    <p class="H2_Body">In HTML and in CSS, “<code class="CODE">#</code>” always refers to an id attribute. </p>

    <h3 class="H2" id="idParaDest-53"><a id="idTextAnchor050"/>Images</h3>

    <p class="H2_Body">In many cases, we will want to add images to our web pages. HTML uses the <code class="CODE">&lt;img&gt;</code> element to tell the browser to load an image. Image elements do not require closing tags, because all the needed information is provided via their attributes. </p>

    <p class="H2_Body">The primary attribute of the <code class="CODE">&lt;img&gt;</code> element is the <code class="CODE">src</code> attribute. This attribute acts much like the <code class="CODE">href</code> attribute of the <code class="CODE">&lt;a&gt;</code> tag in that it requires a file name or URL. In this case, however, rather than following a link to another page, the <code class="CODE">src</code> attribute tells the browser where to find the image file.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-11.html</p>

      <pre class="CODE_body">   &lt;img src="images/Carter-Dome.jpg"&gt;</pre>

    </div>

    <p class="H2_Body">Just like with a link, you can use either a relative or an absolute path to the image file:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">&lt;!-- This path starts from the same folder of the HTML file --&gt;</pre>

      <pre class="CODE_body">&lt;img src=”images/Carter-Dome.jpg"&gt;</pre>

      <pre class="CODE_body">&lt;!-- This path starts from the site’s root directory --&gt;</pre>

      <pre class="CODE_body">&lt;img src="/images/Carter-Dome.jpg"&gt;</pre>

    </div>

    <p class="H2_Body">In the first example, we are using a relative path to reference the file <code class="CODE">Carter-Dome.jpg</code> in the images folder. In the second line, we use the absolute path.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/cautionLogo.png"/>

      </figure>

      <p class="Note">Be careful when using absolute paths with the <code class="CODE">&lt;img&gt;</code> element! If you are loading an image from another site, you should seek permission from the website owner, as you are using their server resources to serve the image to your viewers.</p>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/myTakeLogo.png"/>

      </figure>

      <p class="Note">Copyrights are important. You should only use images on your site that are yours or that you have permission from the copyright holder to use. To do otherwise puts you in serious legal jeopardy. I recommend using the search engine at Creative Commons to search for free-to-use images: https://search.creativecommons.org/ </p>

    </div>

    <p class="H2_Body">If you need to refer to an image or file that’s in a directory above the current folder, you can use the <code class="CODE">..</code> shortcut to refer to that path.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <pre class="CODE_body">  &lt;img src="../images/Carter-Dome.jpg"&gt;</pre>

    </div>

    <p class="H2_Body">This is especially useful when referring to files in CSS because the CSS file will likely be in a folder called CSS, so the two-dot shortcut will tell the browser to go up one directory (from the CSS file itself). At that point, the relative path takes over, in this case, “images/Carter-Dome.jpg,” telling the browser where to find the image.</p>

    <p class="H2_Body">In any of these cases, it is best to avoid using spaces or special characters in file names, as some servers and browsers may not process these names correctly. If you need a space, use an underscore or dash instead, as we have done in “Carter-Dome.jpg.”</p>

    <p class="H2_Body">As mentioned in the introduction, it is best to keep your images in a designated directory—one that is separate from your HTML files. In the case of our Carter-Dome.jpg image, we are pointing to our image in a local directory called “images.”</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-12.html</p>

      <pre class="CODE_body"> &lt;img src="https://www.yoursite.com/images/Carter-Dome.jpg"&gt;</pre>

    </div>

    <p class="H2_Body">The image will be displayed in the browser in its native (actual) size if the <code class="CODE">width</code> and/or <code class="CODE">height</code> attributes are not specified in the <code class="CODE">&lt;img&gt;</code> element, so it is important to resize the image file to meet the design requirements of your page. You can use the <code class="CODE">width</code> or <code class="CODE">height</code> attributes to resize the image during page rendering, or use CSS to set sizing specifications (we will discuss this in chapter 7). Using the correct size saves bandwidth and provides a better experience for users (especially those with slower connections). </p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-13.html</p>

      <pre class="CODE_body"> &lt;img src="images/Carter-Dome.jpg" height="600" width="800"&gt;</pre>

    </div>

    <p class="H2_Body">The numbers for each of these dimensions, height and width, are specified in units called pixels. Pixels are small points that together make up an image. An image that is 600 pixels wide and 800 pixels tall contains 480,000 pixels. Pixels are not the same size on every screen, because different devices render pixels with different densities. We’ll address this further when we discuss CSS in chapter 7 and in appendix III.</p>

    <p class="H2_Body">Even if the image file is sized correctly, it’s still a good idea to specify the width and height, so the browser knows how much space to reserve while the page is rendering.</p>

    <p class="H2_Body">As a best practice, “alternate text” should be added to all images. Alternate text describes the image and serves several important functions:</p>

    <ul class="marked1">

      <li>

        <p class="marked-list-item">It helps search engines identify the image (search engines cannot “see”—not yet, anyway).</p>

      </li>

      <li>

        <p class="marked-list-item">It provides an important service to visually impaired people who may rely on alternate text audio transcriptions in their web browsing. </p>

      </li>

      <li>

        <p class="marked-list-item">It provides displayable placeholder data in the event the image does not load properly.</p>

      </li>

    </ul>

    <p class="H2_Body">Alternate text is added using an “alt” attribute in the <code class="CODE">&lt;img&gt;</code> element:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-14.html</p>

      <pre class="CODE_body"> &lt;img src="images/Carter-Dome.jpg" height="600" width="800" alt="A picture of Carter Dome"&gt;</pre>

    </div>

    <h3 class="H2" id="idParaDest-54"><a id="idTextAnchor051"/>Other Tags</h3>

    <p class="H2_Body">There are a few other commonly used tags that warrant discussion in this chapter. The following tags have very simple effects and do not require closing tags.</p>

    <ul class="marked1">

      <li>

        <p class="marked-list-item"><code class="CODE">&lt;hr&gt;</code> Use this tag to produce a “horizontal rule,” or a line across the page. This helps to divide content; for example, to separate sections of a page. A typical use is to divide the footer from the rest of the page.</p>

      </li>

      <li>

        <p class="marked-list-item"><code class="CODE">&lt;br&gt;</code> Use this tag to produce a manual line break. This is especially helpful when you want to place line breaks inside of paragraphs.</p>

      </li>

    </ul>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/questionLogo.png"/>

      </figure>

      <p class="Question">Q: A break is a break, right? How does a coder decide whether to begin a new <code class="CodeBold">&lt;p&gt;</code> element or use the <code class="CodeBold">&lt;br&gt;</code> tag?</p>

      <p class="H2_Body">Answer: Paragraphs separate groups of sentences into meaningful chunks of text. They usually start with a thesis or proposal and end with a conclusion. A new paragraph starts a new thought and, by keeping your text organized as in a regular document, provides benefits in both visual style and logical format and flow. The <code class="CODE">&lt;br&gt;</code> tag does not start a new paragraph, and this gives you the freedom to control the display of text within a <code class="CODE">&lt;p&gt;</code> element without disrupting the logical organization of the page.</p>

    </div>

    <h3 class="H2" id="idParaDest-55"><a id="idTextAnchor052"/>Divs and Spans</h3>

    <p class="H2_Body">So far, every HTML element discussed has had a specific and singular purpose that is immediately observable when using that element in a web page. Divs and spans are a bit different. By default, if you designate text, images, or any other elements contained in a div or a span, it will make no visual changes to your document. These two elements are designed to work with CSS to allow you to style parts (span) or full sections of content (div) in a unique way. </p>

    <p class="H2_Body">By default, <code class="CODE">&lt;div&gt;</code> does nothing visually but provides a way to identify a block of content, usually via CSS or JavaScript. It is like the <code class="CODE">&lt;p&gt;</code> tag in that it is often used to logically group blocks of content.</p>

    <p class="H2_Body"><code class="CODE">&lt;span&gt;</code>, like div, has no effect on the layout of text itself. Instead, it provides a way to logically group smaller blocks of content, usually within <code class="CODE">&lt;div&gt;&lt;/div&gt;</code>. While <code class="CODE">&lt;div&gt;</code> refers to larger segments of elements, <code class="CODE">&lt;span&gt;</code> designates single lines of text. </p>

    <p class="H2_Body">Let’s demonstrate how <code class="CODE">&lt;span&gt;</code> and <code class="CODE">&lt;div&gt;</code> work together:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-15.html</p>

      <pre class="CODE_body">&lt;!DOCTYPE html&gt;</pre>

      <pre class="CODE_body">&lt;html lang="en"&gt;</pre>

      <pre class="CODE_body">&lt;head&gt;</pre>

      <pre class="CODE_body">   &lt;title&gt;Div vs. Span&lt;/title&gt;</pre>

      <pre class="CODE_body">   &lt;style&gt;</pre>

      <pre class="CODE_body">      span {</pre>

      <pre class="CODE_body">         color: white;</pre>

      <pre class="CODE_body">         background-color: darkgrey;</pre>

      <pre class="CODE_body">      }</pre>

      <pre class="CODE_body">      div {</pre>

      <pre class="CODE_body">         color: lightgrey;</pre>

      <pre class="CODE_body">         background-color: black;</pre>

      <pre class="CODE_body">      }</pre>

      <pre class="CODE_body">   &lt;/style&gt;</pre>

      <pre class="CODE_body">&lt;/head&gt;</pre>

      <pre class="CODE_body">&lt;body&gt;</pre>

      <pre class="CODE_body">   &lt;header&gt;</pre>

      <pre class="CODE_body">      &lt;h1&gt;DIVs vs SPANs&lt;/h1&gt;</pre>

      <pre class="CODE_body">   &lt;/header&gt;</pre>

      <pre class="CODE_body">   &lt;main&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;The div element provides a way to identify a block of content that can be styled by CSS specified in the style element.&lt;/div&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">      &lt;p&gt;Without the style element, a div would be indistinguishable from a paragraph within the body of an HTML document. However, paragraphs like this aren’t automatically styled unless specified in the style element.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;span&gt;Spans&lt;/span&gt;</pre>

      <pre class="CODE_body">      &lt;span&gt;are not blocks&lt;/span&gt;</pre>

      <pre class="CODE_body">      &lt;span&gt;of text,&lt;/span&gt;</pre>

      <pre class="CODE_body">      &lt;span&gt;so they remain&lt;/span&gt;</pre>

      <pre class="CODE_body">      &lt;span&gt;inline without wrapping like divs&lt;/span&gt;</pre>

      <pre class="CODE_body">      &lt;div&gt;&lt;p&gt;You can even put a &lt;span&gt;span&lt;/span&gt; inside of a div if there is something inside requiring &lt;span&gt;special styling&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</pre>

      <pre class="CODE_body">   &lt;/main&gt;</pre>

      <pre class="CODE_body">&lt;/body&gt;</pre>

      <pre class="CODE_body">&lt;/html&gt;</pre>

    </div>

    <p class="H2_Body">If we set our div formatting to light grey text on a black background, and our span formatting to white text on a dark grey background, we should get a web page that is displayed like this (figure 49):</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo049.jpg"/>

        <img alt="" class="w-100" src="image/Figure49.jpg"/>

      </figure>

    </div>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-16.html</p>

      <pre class="CODE_body">&lt;div class="div-example"&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;This is a large block of text. We are using multiple lines.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;As we can see, we can use paragraphs inside div elements. This serves to break up the layout.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;We can have multiple paragraphs inside a div, but they are all still seen as part of the div, decorated with the "div-example" class.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;On occasion, we may want to&lt;span class="span-example"&gt;style a single line of text without any breaks&lt;/span&gt;, so we enclose it within a span element.&lt;/p&gt;</pre>

      <pre class="CODE_body">&lt;/div&gt; </pre>

    </div>

    <p class="H2_Body">If you try this on a page, you’ll see very little display formatting other than the line breaks provided by <code class="CODE">&lt;p&gt;</code> tags. However, the <code class="CODE">&lt;div&gt;</code> and <code class="CODE">&lt;span&gt;</code> tags will prove useful when formatting with CSS.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">Visual Studio Code has a nifty shortcut for designing multiple elements that is most useful for creating divs and spans. Type <code class="CODE">div*3</code>, then hit ENTER, and three div elements will appear. Replace <code class="CODE">div</code> with <code class="CODE">span</code> or any other element, and <code class="CODE">3</code> with the number of elements you want to create.</p>

    </div>

    <h3 class="H2" id="idParaDest-56"><a id="idTextAnchor053"/>Semantic Elements</h3>

    <p class="H2_Body">A semantic element is an HTML element named after its intended purpose. The name of a semantic element, like <code class="CODE">&lt;header&gt;</code>, precisely defines its content type, position, and purpose. Non-semantic elements, such as <code class="CODE">&lt;div&gt;</code>, are important for page structure, but the tags do not describe the element’s function.</p>

    <p class="H2_Body">The benefits of semantic elements extend far beyond providing a friendly naming scheme. Semantic elements make it easier to read, understand, and maintain HTML code. Browsers can display semantic elements in a way that makes sense for the user’s device. For example, when you print something from your browser, semantic elements allow the browser to easily recognize text intended for printing while skipping elements like headers and footers that might print awkwardly or consume excess ink and paper. Additionally, screen readers and accessibility extensions can better interpret the organization and context of important parts of a document.</p>

    <p class="H2_Body">Even though semantic elements serve a defined purpose within the overall logical flow of the HTML document, CSS can style and position them in ways that might deviate from their intended purpose or display (as is the case with any HTML element).</p>

    <p class="H3">Header</p>

    <p class="H3_Body">The <code class="CODE">&lt;header&gt;</code> element denotes content that is intended for the top, or head, of the page. Here’s an example:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-17.html</p>

      <pre class="CODE_body">   &lt;header&gt;</pre>

      <pre class="CODE_body">      &lt;img src="images/logo.jpg" alt="Our Magnificent Logo"&gt;</pre>

      <pre class="CODE_body">      &lt;h1&gt;Welcome to Our Site&lt;/h1&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;Come for the information. Stay for the cookies.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/header&gt; </pre>

    </div>

    <p class="H3_Body">When used inside another semantic element like <code class="CODE">&lt;article&gt;&lt;/article&gt;</code>, the header element can be used to mark content that serves as an introduction to the rest of the content within the containing element. An example of this can be found under the “Article” heading of this chapter.</p>

    <p class="H3">Footer</p>

    <p class="H3_Body">The <code class="CODE">&lt;footer&gt;</code> element specifies content intended for the bottom of the page. Consider this example:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-18.html</p>

      <pre class="CODE_body">   &lt;footer&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;Copyright &amp;copy; 2020, Our Magnificent Company, All Rights Reserved.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;Please read our &lt;a href="terms.html"&gt;Terms of Use&lt;/a&gt; and &lt;a href="privacy.html"&gt;Privacy Policy&lt;/a&gt;.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/footer&gt;</pre>

    </div>

    <p class="H3_Body">As with the <code class="CODE">&lt;header&gt;</code> element, a <code class="CODE">&lt;footer&gt;</code> can exist within another element and serve to mark content intended to be at the bottom of the containing element.</p>

    <p class="H3">Aside</p>

    <p class="H3_Body">The <code class="CODE">&lt;aside&gt;</code> element allows you to mark a section of content to be separate from the rest of the article. This is commonly used for quotes, definitions, and callouts.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-19.html</p>

      <pre class="CODE_body">   &lt;aside&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Content in this article may be completely fictitious.</pre>

      <pre class="CODE_body">   &lt;/aside&gt;</pre>

    </div>

    <p class="H3">Article</p>

    <p class="H3_Body">The <code class="CODE">&lt;article&gt;</code> element provides a logical way to delineate a piece of content separate from the rest of the site. An article element may contain (but is certainly not limited to) a blog article, a social media post, or even a comment. Any content that is independent from the rest of the page can be wrapped inside an article element.</p>

    <p class="H3_Body">An article is not limited to text. It may have images, tables, or even other semantic elements within it. Consider this example:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-20.html</p>

      <pre class="CODE_body">   &lt;article&gt;</pre>

      <pre class="CODE_body">      &lt;header&gt;</pre>

      <pre class="CODE_body">       &lt;h2&gt;A Tale of Two Articles&lt;/h2&gt;</pre>

      <pre class="CODE_body">         &lt;p&gt;By Charlie Kitchens, Feb 20, 2020&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;/header&gt;</pre>

      <pre class="CODE_body">         &lt;p&gt;It was the best of articles and the worst of articles. Some article written long ago, never mind precisely how long, was phenomenal. Others? Not so much.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/article&gt;</pre>

    </div>

    <p class="H3_Body">Here we wrap introductory content, such as the title, author, and date, inside a header element within the article element. In this case, the article element is serving as a container for other elements while still maintaining its stated purpose of being an article.</p>

    <p class="H3">Section</p>

    <p class="H3_Body">The <code class="CODE">&lt;section&gt;</code> element serves as a logical collection of other parts or, as the name implies, sections of a page.</p>

    <p class="H3_Body">Consider a blog page with a header, footer, menu, sidebar, and list of articles. Each of those elements has a stated purpose obvious in the name, but the section element provides a more generic way to group elements. For example, if a page has multiple articles, a section element can contain those articles to keep them separate from the other structural parts of the page.</p>

    <p class="H3_Body">You can see an example of the section element in use in code snippet 05-21.</p>

    <p class="H3">Main</p>

    <p class="H3_Body">The <code class="CODE">&lt;main&gt;</code> element contains the primary content on your page, providing a canvas where all other semantic elements can logically organize within a master containing element. Now we can use all the elements we’ve learned about to form a logical, self-explanatory structure for our page.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-21.html</p>

      <pre class="CODE_body">&lt;!DOCTYPE html&gt;</pre>

      <pre class="CODE_body">&lt;html lang="en"&gt;</pre>

      <pre class="CODE_body">&lt;head&gt;</pre>

      <pre class="CODE_body">   &lt;meta charset="utf-8"&gt;</pre>

      <pre class="CODE_body">   &lt;title&gt;An Outstanding Blog&lt;/title&gt;</pre>

      <pre class="CODE_body">&lt;/head&gt;</pre>

      <pre class="CODE_body">&lt;body&gt;</pre>

      <pre class="CODE_body">&lt;header&gt;</pre>

      <pre class="CODE_body">   &lt;img src="images/logo.jpg" alt="Our Magnificent Logo"&gt;</pre>

      <pre class="CODE_body">   &lt;h1&gt;Welcome to Our Site&lt;/h1&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;Come for the information. Stay for the cookies.&lt;/p&gt;</pre>

      <pre class="CODE_body">&lt;/header&gt;</pre>

      <pre class="CODE_body">&lt;main&gt; </pre>

      <pre class="CODE_body">   &lt;section&gt;</pre>

      <pre class="CODE_body">         &lt;article&gt;</pre>

      <pre class="CODE_body">            &lt;header&gt;</pre>

      <pre class="CODE_body">                  &lt;h2&gt;A Tale of Two Articles&lt;/h2&gt;</pre>

      <pre class="CODE_body">                  &lt;p&gt;By Charlie Kitchens, Feb 20, 2020&lt;/p&gt;</pre>

      <pre class="CODE_body">            &lt;/header&gt;</pre>

      <pre class="CODE_body">            &lt;p&gt;It was the best of articles and the worst of articles. Some article written long ago, never mind precisely how long, was phenomenal. Others? Not so much.&lt;/p&gt;</pre>

      <pre class="CODE_body">            &lt;aside&gt;</pre>

      <pre class="CODE_body">                  &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Content in this article may be completely fictitious.</pre>

      <pre class="CODE_body">            &lt;/aside&gt;</pre>

      <pre class="CODE_body">                  &lt;p&gt;You may be surprised to learn that the internet contains a wide assortment of articles of varying quality. Finding good articles can be difficult, so consider the source of everything you read.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;/article&gt;</pre>

      <pre class="CODE_body">         &lt;article&gt;</pre>

      <pre class="CODE_body">            &lt;header&gt;</pre>

      <pre class="CODE_body">               &lt;h2&gt;Another Great Article&lt;/h2&gt;</pre>

      <pre class="CODE_body">               &lt;p&gt;By Mark Samuel Clemons, Feb 17, 2020&lt;/p&gt;</pre>

      <pre class="CODE_body">            &lt;/header&gt;</pre>

      <pre class="CODE_body">            &lt;p&gt;One of the crowning achievements of my childhood was convincing my friends to write an article for me. It wasn’t as easy a crime as my infamous fence whitewashing scheme, but it was nevertheless effective.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;/article&gt;</pre>

      <pre class="CODE_body">   &lt;/section&gt;</pre>

      <pre class="CODE_body">&lt;/main&gt;</pre>

      <pre class="CODE_body">&lt;footer&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;Copyright &amp;copy; 2020, Our Magnificent Company, All Rights Reserved.&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;p&gt;Please read our &lt;a href="terms.html"&gt;Terms of Use&lt;/a&gt; and &lt;a href="privacy.html"&gt;Privacy Policy&lt;/a&gt;.&lt;/p&gt;</pre>

      <pre class="CODE_body">&lt;/footer&gt;</pre>

      <pre class="CODE_body">&lt;/body&gt;</pre>

      <pre class="CODE_body">&lt;/html&gt;</pre>

    </div>

    <h3 class="H2" id="idParaDest-57"><a id="idTextAnchor054"/>Putting It All Together</h3>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">05-22.html</p>

      <pre class="CODE_body">&lt;!DOCTYPE html&gt;</pre>

      <pre class="CODE_body">&lt;html lang="en"&gt;</pre>

      <pre class="CODE_body">   &lt;head&gt;</pre>

      <pre class="CODE_body">      &lt;meta charset="UTF-8"&gt;</pre>

      <pre class="CODE_body">      &lt;title&gt;Carter Dome&lt;/title&gt;</pre>

      <pre class="CODE_body">      &lt;meta description="Carter Dome is a mountain located in New Hampshire."&gt;</pre>

      <pre class="CODE_body">   &lt;/head&gt;</pre>

      <pre class="CODE_body">   &lt;body&gt;</pre>

      <pre class="CODE_body">      &lt;h1&gt;Carter Dome&lt;/h1&gt;</pre>

      <pre class="CODE_body">      &lt;img src="images/Carter-Dome.jpg" height="600" width="800" alt="A picture of Carter Dome"&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;See &lt;a href="#stats"&gt;statistics&lt;/a&gt; or find &lt;a href="#additional"&gt;additional reading&lt;/a&gt; on Carter Dome.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;Carter Dome, or simply The Dome, is a mountain located in Coos County, New Hampshire. The mountain is part of the Carter-Moriah Range of the White Mountains, which runs along the northern east side of Pinkham Notch. Carter Dome is flanked to the northeast by Mount Hight and to the southwest by Wildcat Mountain (across Carter Notch).&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;The origins of Carter Dome’s name are unknown. Local folklore suggests that it was named after a hunter named Carter, while a neighboring peak is named after his hunting partner, Hight.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;The mountain is ascended from the west by the Carter Dome Trail and Nineteen Mile Brook Trail, and from the east by the Black Angel Trail.&lt;/p&gt;</pre>

      <pre class="CODE_body">      &lt;hr&gt;</pre>

      <pre class="CODE_body">      &lt;div id="stats"&gt;</pre>

      <pre class="CODE_body">          &lt;h2&gt;Statistics&lt;/h2&gt;</pre>

      <pre class="CODE_body">         &lt;ul&gt;</pre>

      <pre class="CODE_body">               &lt;li&gt;&lt;span class="cat"&gt;Elevation:&lt;/span&gt; 4,832 ft (1,473 m)&lt;/li&gt;</pre>

      <pre class="CODE_body">               &lt;li&gt;&lt;span class="cat"&gt;Prominence:&lt;/span&gt; 2,821 ft (860 m)&lt;/li&gt;</pre>

      <pre class="CODE_body">               &lt;li&gt;&lt;span class="cat"&gt;Coordinates:&lt;/span&gt; 44°16'02"N 71°10'44"W&lt;/li&gt;</pre>

      <pre class="CODE_body">         &lt;/ul&gt;</pre>

      <pre class="CODE_body">      &lt;/div&gt;</pre>

      <pre class="CODE_body">      &lt;hr&gt;</pre>

      <pre class="CODE_body">      &lt;div id="additional"&gt;</pre>

      <pre class="CODE_body">         &lt;h2&gt;Additional Reading&lt;/h2&gt;</pre>

      <pre class="CODE_body">         &lt;p&gt;For more information, please see the &lt;a href="https://en.wikipedia.org/wiki/Carter_Dome"&gt; Wikipedia article on Carter Dome&lt;/a&gt;</pre>

      <pre class="CODE_body">      &lt;/div&gt;</pre>

      <pre class="CODE_body">   &lt;/body&gt;</pre>

      <pre class="CODE_body">&lt;/html&gt;</pre>

    </div>

    <p class="H2_Body">You may have noticed that the example uses the id and class attributes on some of its div and span elements. The id attributes provide a way to link to those sections on the page, but the class attributes are, as of yet in our studies, unused. We’ll get into that in the next chapter.</p>

    <div class="oyo">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Image-Line">

        <img alt="" class="idGenObjectAttribute-1" src="image/25.jpg"/>

      </p>

      <p class="CBC_Heading">Editing the "About" Page and Navigation</p>

      <p class="H3">“About” Page</p>

      <p class="H3_Body">The ClydeBank Coffee Shop needs an About page. We made the <code class="CODE">about.html</code> file back in the introduction, but we didn’t add content. It is merely a copy of <code class="CODE">template.html</code>. Open the <code class="CODE">about.html</code> file in your text editor and a paragraph tag in the main content area. The main content area can be identified as the div element with the following comment:</p>

      <div class="white2">

        <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

          <img class="w-100" src="image/snipetLogo.jpg"/>

        </figure>

        <pre class="CODE_body">   &lt;!-- CONTENT GOES HERE --&gt;</pre>

      </div>

      <p class="H3_Body">Remove that comment and place the following text in a paragraph tag:</p>

      <p class="H3_Body"><span class="italic idGenCharOverride-2">ClydeBank Coffee Shop welcomes you to our website. If you’re in the area, we kindly ask you to stop by and have a cup with us.</span></p>

      <p class="H3_Body">To complete the About page, change the title tag to “About ClydeBank Coffee Shop.” Don’t forget to close the paragraph tag, then refresh the <code class="CODE">about.html</code> file in your browser to see your changes. Feel free to add additional text if you wish.</p>

      <p class="H3_Body">I recommend trying this change on your own. If you get stuck, you can refer to appendix V, “ClydeBank Coffee Shop Solutions” under “Chapter 5: About Page.”</p>

      <p class="H3">Navigation</p>

      <p class="H3_Body">Our client called for our help to address another issue—some of the links in the navigation menu don’t work correctly. We can certainly fix that with our newly gained knowledge of links.</p>

      <div class="standard-box">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img class="w-100" src="image/rememberLogo.png"/>

        </figure>

        <p class="Note">If you haven’t yet, please download the ClydeBank Coffee Shop website from our GitHub site: <a href="https://github.com/clydebankmedia/clydebank-coffee-shop">www.github.com/clydebankmedia/clydebank-coffee-shop</a>.</p>

      </div>

      <p class="H3_Body">In the <code class="CODE">index.html</code> file, you’ll see these items nested within the navigation:</p>

      <div class="white2">

        <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

          <img class="w-100" src="image/snipetLogo.jpg"/>

        </figure>

        <p class="snippet">05-23.html</p>

        <pre class="CODE_body">&lt;div class="container"&gt;</pre>

        <pre class="CODE_body">   &lt;ul&gt;</pre>

        <pre class="CODE_body">      &lt;li class="active"&gt;&lt;a href="index.html"&gt;Menu&lt;/a&gt;&lt;/li&gt;</pre>

        <pre class="CODE_body">      &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt;</pre>

        <pre class="CODE_body">      &lt;li&gt;&lt;a href="events.html"&gt;Events&lt;/a&gt;&lt;/li&gt;</pre>

        <pre class="CODE_body">      &lt;li&gt;&lt;a href="contact.html"&gt;Contact&lt;/a&gt;&lt;/li&gt;</pre>

        <pre class="CODE_body">   &lt;/ul&gt;</pre>

        <pre class="CODE_body">&lt;/div&gt;</pre>

      </div>

      <p class="H3_Body">The pound sign <code class="CODE">#</code> normally denotes an in-page link, but in this case, it’s used as a placeholder. The browser will display the link, but clicking on it will perform no action. The links should point to the appropriately named pages.</p>

      <ul>

        <li>

          <p class="marked-list-item">Home – <code class="CODE">index.html</code></p>

        </li>

        <li>

          <p class="marked-list-item">About – <code class="CODE">about.html</code></p>

        </li>

        <li>

          <p class="marked-list-item">Events – <code class="CODE">events.html</code></p>

        </li>

        <li>

          <p class="marked-list-item">Contact – <code class="CODE">contact.html</code></p>

        </li>

      </ul>

      <div class="standard-box">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img class="w-100" src="image/cautionLogo.png"/>

        </figure>

        <p class="Note">If you did not complete the coffee shop exercise at the beginning of the book where you create an <code class="CODE">about.html</code> file, then you obviously can’t link to your About page. Take a moment to go back to the Introduction chapter and find the section called “Accessing the Horrible Coffee Shop Website.” Complete the exercise found at the bottom of that section.</p>

      </div>

      <p class="H3_Body">Open your text editor and change these links to the pages above as needed (you only need to do it for the <code class="CODE">about.html</code> page, but you’ll need to make this change in all of the <code class="CODE">.html</code> files in the site). If you are unclear on why or how this is done, you may need to spend some time reviewing this chapter, specifically the “Links” section. The answer is in appendix V, but try it on your own first.</p>

      <p class="H3_Body">Here’s a quick tip. Since you’re going to be updating your navigation links in several HTML files, use the “Open Folder” option in your text editor. Go to File &gt;&gt; Open Folder, then select the folder containing your locally hosted coffee shop site (the one you downloaded from GitHub and saved onto your computer). All HTML and CSS files from that folder will open in your text editor. You will be able to quickly move from file to file using your text editor’s navigation menu or tabs (figure 50).</p>

      <div class="whitebox">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img alt="" class="w-100" src="image/graphicLogo050.jpg"/>

          <img alt="" class="w-100" src="image/figure50.jpg"/>

        </figure>

      </div>

      <p class="H3_Body">Be sure to add the <code class="CODE">about.html</code> link to the <code class="CODE">template.html</code> file as well, and save all your changes after you make them in the text editor. And remember, don’t be shy with your text editor. Click on some new buttons; explore some of the various functionalities that you don’t currently understand. If you feel you’ve messed something up with your website, just use Ctrl+z to undo it. You’re going to learn a lot through play and experimentation. Enjoy it. And if you get stuck, you can reference appendix V, but please try this task on your own. When you’re done, you’ll have fixed the navigation on the website and let visitors know those pages will be coming soon. Great job! </p>

    </div>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">HTML requires elements to provide structure and organization.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Headings and paragraphs organize text. </p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Links can be relative, where they assume the content is in the same directory, or absolute, where the full location, including site name, is specified.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s"><code class="CODE">&lt;div&gt;</code> and <code class="CODE">&lt;span&gt;</code> tags provide organizational structure but generally serve as a way to style content via CSS and provide functionality with JavaScript code.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Semantic elements are named after their intended use on a page and provide well-formatted, easy-to-maintain, and easy-to-read structure.</p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>