<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-4</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-4" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-16"><a id="idTextAnchor013"/>| 1 | </h2>

    <p class="Chapter-Title" id="idParaDest-17"><a id="idTextAnchor014"/>The Basics and the Bigger Picture</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">HTML and CSS power the web.</p>

        </li>

        <li>

          <p class="marked-list-item">HTML, CSS, and JavaScript are frontend languages.</p>

        </li>

        <li>

          <p class="marked-list-item">You must understand your audience.</p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">HTML, or hypertext markup language, is the markup language that makes the web work. In other words, all web pages on the internet use HTML. When you access a web page, your web browser is interpreting a text file written in HTML that contains a set of instructions for formatting the content of the page so a human can read it. The earliest web browsers could <span class="italic idGenCharOverride-2">only</span> read HTML. In fact, the very earliest ones did not even have a graphical component; they were text-only and could be viewed only in command-line-based operating systems. Obviously, much has changed since the early days of command-line operating systems and HTML-only web pages. HTML now lives in a broader online ecosystem with other languages, online content management systems, and website search engines and aggregators. Let’s explore this ecosystem in more detail.</p>

    <h3 class="H2" id="idParaDest-18"><a id="idTextAnchor015"/>HTML and CSS Basic Structure</h3>

    <p class="H2_Body">No matter how complicated or fancy a website looks, at its core is HTML. In your web browsing experience, you may have (either accidentally or intentionally) clicked on a button that allowed you to view the source of a website’s code. That code may have looked like gibberish to you then, but by the time you finish this text, you will be able to identify elements of HTML and CSS within code. Although we will cover HTML and CSS syntax in much greater detail later, it is important for now that you be able to identify the basic building blocks of both HTML and CSS, as we will be referring to these features quite often. Let’s get a sneak preview of what HTML and CSS look like on some simplified web pages.</p>

    <p class="H3">HTML Structure</p>

    <p class="H3_Body"><span class="glossaryterm idGenCharOverride-1">HTML</span> defines the basic structure of a web page. It provides additional formatting and organization information about the content of a website, no matter if that content is text, images, videos, tables, or data entry forms. Much of this process involves giving instructions to the browser, such as “this is a header,” “this is a paragraph,” “this is a link,” etc. (figure 10).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo010.jpg"/>

        <img alt="" class="w-100" src="image/8.jpg"/>

      </figure>

    </div>

    <p class="H3">Think in Terms of Elements</p>

    <p class="H3_Body">Each browser instruction written in HTML takes the form of an element. An <span class="glossaryterm idGenCharOverride-1">element</span> is the basic building block of HTML; it is fair to think of elements as the basic building blocks of any web page (figure 11).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo011.jpg"/>

        <img alt="" class="w-100" src="image/9.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">Each element begins with an opening tag and ends with a closing tag. The <span class="glossaryterm idGenCharOverride-1">tag</span> performs two key functions: it defines the starting point and stopping point of each element, and it defines the element type.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo012.jpg"/>

        <img alt="" class="w-60" src="image/10.jpg"/>

      </figure>

      <p class="Caption">The basic structure of an HTML element</p>

    </div>

    <p class="H3_Body">In figure 12, we can see that the tag <code class="CODE">&lt;h1&gt;</code> defines a heading. All tags are encased in angle brackets <code class="CODE">&lt;&gt;</code> with the closing tag having a forward slash <code class="CODE">/</code> to denote the end of the element. All text inside these tags is considered part of that element.</p>

    <p class="H3">CSS Structure</p>

    <p class="H3_Body">As you know, most web pages, when viewed through a browser, include much more than basic text. Modern websites employ creative formatting, color, navigation menus, and more. The look and feel of the internet are guided by an additional set of instructions handed to the browser, which tell it how to display the text formatted by the HTML. These instructions have been given by a different but dependent language: <span class="glossaryterm idGenCharOverride-1">CSS</span>, or Cascading Style Sheets. CSS tells the browser to display not only the basic structure of the content, but how to format it to make it look visually appealing and, most important, usable.</p>

    <p class="H3_Body">Consider this example of HTML and its result in the browser in figure 13.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">01-01.html</p>

      <pre class="CODE_body">&lt;!DOCTYPE html&gt;</pre>

      <pre class="CODE_body">&lt;html&gt;</pre>

      <pre class="CODE_body">  &lt;head&gt;</pre>

      <pre class="CODE_body">  &lt;style&gt;</pre>

      <pre class="CODE_body">    body { margin: 0; }</pre>

      <pre class="CODE_body">    .header {</pre>

      <pre class="CODE_body">      color: white;</pre>

      <pre class="CODE_body">      background-color: darkgray;</pre>

      <pre class="CODE_body">      padding: 20px;</pre>

      <pre class="CODE_body">      text-align: center;</pre>

      <pre class="CODE_body">    }</pre>

      <pre class="CODE_body"> &lt;/style&gt;</pre>

      <pre class="CODE_body">  &lt;/head&gt;</pre>

      <pre class="CODE_body">  &lt;body&gt;</pre>

      <pre class="CODE_body">    &lt;div class="header"&gt;</pre>

      <pre class="CODE_body">      &lt;h1&gt;My First Heading&lt;/h1&gt;</pre>

      <pre class="CODE_body">    &lt;/div&gt;</pre>

      <pre class="CODE_body">    &lt;p&gt;My first paragraph.&lt;/p&gt;</pre>

      <pre class="CODE_body">  &lt;/body&gt;</pre>

      <pre class="CODE_body">&lt;/html&gt;</pre>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo013.jpg"/>

        <img alt="" class="w-100" src="image/Figure13.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">On the right-hand side of figure 13 we can see our HTML example being displayed in the browser. We will explain the HTML and CSS code in depth in later chapters, but for now, the main purpose of this example is to show that the CSS code between <code class="CODE">&lt;style&gt;</code> and <code class="CODE">&lt;/style&gt;</code> provides additional formatting for one of the HTML elements, the header. Note that the CSS code only provides structure for existing HTML elements. </p>

    <p class="H3_Body">If we take a closer look, we will see that CSS has a structure similar to that of HTML (figure 14).</p>

    <p class="H3_Body">CSS uses a piece of code called a selector to choose what HTML element to modify. It then describes the modification process in another piece of code, the declaration. The declaration consists of one or many properties (such as text color, centering, etc.). These properties are similar to the format controls in any word processor. You can apply a certain value to each property, such as bold, italics, or text alignment. CSS selectors will be described in more detail later. For now, it’s sufficient for you to be able to differentiate CSS structure from that of HTML.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo014.jpg"/>

        <img alt="" class="w-60" src="image/11.jpg"/>

      </figure>

    </div>

    <h3 class="H2" id="idParaDest-19"><a id="idTextAnchor016"/>The Relationship Between HTML and CSS</h3>

    <p class="H2_Body">In the earlier days of the web, HTML stood pretty much on its own. Styling was built into the language, and any formatting that needed to occur would be applied directly to each element in the text via HTML coding. Incorporating styles right into individual elements worked fairly well, at least for small websites. However, when working with a large amount of web content, using this HTML-only approach was highly inefficient. Adding styling to a page required inserting the same piece of code repeatedly throughout an entire website—a time-consuming and error-prone process. Furthermore, HTML code could become very bloated. For each line of code that was written, the file size would increase, resulting in slower loading of web pages.</p>

    <p class="H2_Body">Demand grew for more robust web designs; a system was needed with which one could create a simple set of rules or instructions that could be stored in one place but would cascade across the entire site. In response to this problem, CSS offered sets of style instructions that allowed web designers to make changes across their entire website with only one small piece of code in a CSS file, resulting in cleaner code and huge time savings.</p>

    <p class="H2_Body">Instead of adding styles directly to each header tag, like this . . .</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">01-02.html</p>

      <pre class="CODE_body">&lt;header style="background-color: #f1f1f1; padding: 20px; text-align: center;"&gt;</pre>

    </div>

    <p class="H2_Body"> . . . we define this style <span class="italic idGenCharOverride-2">once</span> in our CSS file:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">01-03.css</p>

      <pre class="CODE_body">.header { </pre>

      <pre class="CODE_body">    background-color: #f1f1f1; </pre>

      <pre class="CODE_body">    padding: 20px; </pre>

      <pre class="CODE_body">    text-align: center; </pre>

      <pre class="CODE_body">}</pre>

    </div>

    <p class="H2_Body">And now, <span class="italic idGenCharOverride-2">all</span> our <code class="CODE">&lt;header&gt;</code> tags on the site will adopt this styling.</p>

    <p class="H2_Body">While HTML and CSS are technically two different languages, we use them together, as they are dependent on each other for the web to exist as we know it. CSS requires HTML, but HTML can, theoretically, stand on its own. A web browser can read and interpret a web page written in pure HTML with no problem at all. CSS, by itself, will do nothing. Loading a CSS file into a browser will produce a result that is meaningless to an end user (figure 15).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo015.jpg"/>

        <img alt="" class="w-100" src="image/12.jpg"/>

      </figure>

      <p class="Caption">Existing websites can be viewed with all CSS turned off. This demonstrates the vast improvements CSS brings to web page design.</p>

    </div>

    <p class="H2_Body">The difference between building a page with HTML alone and building one with CSS is the difference between building a house all by yourself and hiring a construction team. With a construction team, you can provide some universal guidelines, such as: “The house should have wooden floors, except for the bathrooms, which should be outfitted in tile” or “Paint all the bedroom walls blue except the master bedroom, which should be an eggshell white.” If you were building a tiny house, perhaps you would not need the “CSS building team.” However, if you were building a mansion, some general guidelines for design consistency would save you a lot of time and keep your house from looking like it was designed by an eccentric millionaire. You have probably encountered some websites with bizarre styling choices. More likely than not, those websites have inadequate or nonexistent CSS.</p>

    <p class="H2_Body">HTML and CSS are designed to be compatible with each other. HTML helps to identify the function of any piece of content on any given page, and CSS determines how it looks and works with the other pieces of content and with the page as a whole. If we think of HTML as a series of building blocks, CSS gives us the ability to change the shape, color, size, etc., to fit our needs. With the instructions provided by CSS, that simple set of building blocks takes on new shapes and sizes without affecting the integrity of the underlying structure. The two languages have become dependent on each other. In fact, most advancements in HTML are specifically intended to facilitate CSS’s ability to make ever more granular and useful changes to the look and feel of web content.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">You may have associated websites with certain website-generating software such as Wix, WordPress, or SiteBuilder. Site-building tools may be used to generate content in many different ways and from many different sources, but in the end, what is sent to the browser is HTML, usually formatted with CSS.</p>

    </div>

    <h3 class="H2" id="idParaDest-20"><a id="idTextAnchor017"/>Comparable and Complementary Languages</h3>

    <p class="H2_Body">If all we ever wanted was static content on a web page, HTML, CSS, and a few other tools would be sufficient. However, very few web pages display only static content. For example, think of the last time you looked up a web page for a restaurant, only to find very basic contact information, background music that you could not turn off, and a few scanned images of the restaurant’s menu that had not been updated for a year. How helpful was that website? We have grown to expect much more from online content, including up-to-date inventory information, online purchasing and delivery services, and our own user accounts with customizable settings. All these items cannot exist on the frontend, or client-facing, part of a website that is designed by HTML and CSS. The extra functionality we expect requires a host of servers, databases, and other utilities on the backend that we as end users do not interact with directly (figure 16).</p>

    <p class="H2_Body">Think of a restaurant kitchen. The backend is where orders are organized and food is prepared. The frontend, including the wait staff, tables, and register, is where the customer interacts with the restaurant. Just as the waiters and maître d’ don’t cook the food, HTML and CSS cannot interact with databases and server processes. The backend requires its own programming languages that interface with the frontend languages to provide content we can see on our computers and mobile devices.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo016.jpg"/>

        <img alt="" class="w-100" src="image/13.jpg"/>

      </figure>

    </div>

    <p class="H3">Frontend Languages</p>

    <p class="H3_Body">Frontend languages are those which are interpreted by the “client,” or the web browser. These languages have a direct impact on the user’s sensory experience and dictate how information is displayed on computers and mobile devices. While the information displayed may have originated from backend sources, frontend languages act as a showcase and can present that information in a variety of ways. </p>

    <p class="H3_Body">Beyond HTML and CSS, the most prevalent frontend language on the web is JavaScript. JavaScript is a frontend programming language used for a variety of purposes but principally to provide some interactive elements on web pages, including form validation, pop-up windows, and animations. During the development of HTML5, JavaScript was formally integrated into HTML and, since then, has been fully supported to some level in all major web browsers.</p>

    <p class="H3">Backend Languages</p>

    <p class="H3_Body">Backend languages address the need for accurate, dynamic, up-to-date content. Behind many frontend interfaces, there is a backend system with its own programming language that connects a website to databases, file servers, and other digital resources. Backend languages tend to fall in and out of popularity, with some websites switching backends completely or employing a combination of different backends to attain the desired functionality.</p>

    <p class="H3_Body">A website may use more than one programming language. Some of the most popular websites, which offer a multitude of features, employ several backend languages. Figure 17 provides a rundown, compiled and published by Wikipedia. </p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo017.jpg"/>

      </figure>

      <table class="Table1" id="table001">

        <colgroup>

          <col/>

          <col/>

        </colgroup>

        <thead>

          <tr class="Table1">
            <td class="Table1 CellHead">
              <p class="TableHead">Website</p>
            </td>
            <td class="Table1 CellHead">
              <p class="TableHead">Backend (server side)</p>
            </td>
          </tr>

        </thead>

        <tbody>

          <tr class="Table1">
            <td class="Table1 CellText idGenCellOverride-1">
              <p class="TableText">Facebook.com</p>
            </td>
            <td class="Table1 CellText idGenCellOverride-1">
              <p class="TableText">Hack, PHP (HHVM), Python, C++, Java, Erlang, D, XHP, Haskell</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText">YouTube.com</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">C, C++, Python, Java, Go</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText">Yahoo.com</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">PHP</p>
            </td>
          </tr>

          <tr class="Table1">
            <td class="Table1 CellText">
              <p class="TableText">Amazon.com</p>
            </td>
            <td class="Table1 CellText">
              <p class="TableText">Java, C++, Perl</p>
            </td>
          </tr>

        </tbody>

      </table>

      <p class="Caption">A table of popular websites and their backend technologies</p>

    </div>

    <p class="H3_Body">As a website’s functionality increases, so does the need for additional languages to handle new features.</p>

    <p class="H3_Body">Backend languages have related <span class="glossaryterm idGenCharOverride-1">frameworks</span>, such as Symfony (PHP), Laravel (PHP), CodeIgniter (PHP), and Django (Python), providing additional functionality and an easy-to-use code structure for the developer.</p>

    <h3 class="H2" id="idParaDest-21"><a id="idTextAnchor018"/>Content Management Systems</h3>

    <p class="H2_Body">When you think of building a website, HTML coding may not be the first thing that comes to mind. To many people, building a website is a matter of downloading a website-building software package, choosing a template, and then uploading the results to a hosted site. Website-building tools are an example of <span class="glossaryterm idGenCharOverride-1">content management systems</span> (CMS). CMSs are software programs that allow non-coders to build, update, and modify websites (figure 18).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo018.jpg"/>

        <img alt="" class="w-100" src="image/figure18.jpg"/>

      </figure>

      <p class="Caption">Popular content management systems</p>

    </div>

    <p class="H2_Body">More than a third of all web pages on the internet are created in WordPress, which is a free, <span class="glossaryterm idGenCharOverride-1">open-source</span> CMS. </p>

    <p class="H2_Body">While any CMS system will generate a frontend page, each software package has different capabilities when it comes to providing backend programming and database support.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/rememberLogo.png"/>

      </figure>

      <p class="Note">As we’ve previously discussed, WordPress and other content management systems are excellent tools, but knowing HTML and CSS transforms you from being a <span class="italic idGenCharOverride-3">user</span> of WordPress to a <span class="italic idGenCharOverride-3">designer</span> who uses WordPress. With custom CSS entries, you can achieve a look and feel far beyond any standard WordPress theme, and with HTML you can edit the header, footer, and even the sidebar without having to rely on widgets. Instead of depending on the creativity of theme designers, you can make a WordPress website look any way you want with a good working knowledge of HTML and CSS.</p>

    </div>

    <h3 class="H2" id="idParaDest-22"><a id="idTextAnchor019"/>Understanding Our Online Audience</h3>

    <p class="H2_Body">When making the transition from being a <span class="italic idGenCharOverride-2">consumer</span> of web content to being a <span class="italic idGenCharOverride-2">creator</span>, we must take a step back and think about who is looking at our site. Our goal is to provide information and content that can be consumed with minimal effort. In order to do this effectively, we need to create our content with all potential consumers in mind. Will they be able to read it? Will they be able to understand it? Can they find the information they need without assistance?</p>

    <p class="H2_Body">When designing websites, we typically think of creating them for someone very much like ourselves. Most people read web pages in the same way—it’s a visual experience. How complicated could it be? In most cases, it’s okay to take the approach of imagining ourselves as the reader of the site. However, it is extremely important to remember that every person (or thing!) reading a site does not process information the same way we do.</p>

    <p class="H3">Search Engines / Spiders</p>

    <p class="H3_Body">Some of the visitors to your website will not even be human! Search engines and other online aggregation services employ an army of autonomous programs, often called “spiders” or “bots,” which “crawl” through the web finding new pages to categorize and rank. These spiders do not experience the web in the same way as their human counterparts. Search engines such as Google use spiders to improve their search algorithm and increase the relevance of their search results. This improvement process has three main tasks: crawling, indexing, and ranking. Crawling attempts to discover new websites, and indexing attempts to understand the contents of a website. The ranking process then determines the relevance of a website to potential search terms. For example, the website of a local business would be deemed much more relevant to someone searching from the same geographical location as the business (figure 19).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo019.jpg"/>

        <img alt="" class="w-100" src="image/14.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">Web developers generally want their sites to be as discoverable as possible, so it’s important to have an understanding of <span class="italic idGenCharOverride-2">how</span> search engines discover and rank websites. There are ways to optimize a website for all three of the processes previously mentioned. Search engine optimization (SEO) is the art of creating website content or structure in a way that ensures the website is highly ranked (that is, it appears in the first few results or pages) within a given search engine in order to drive traffic to the site. SEO techniques could fill a book by themselves, and many marketing departments employ people specifically for their expertise in SEO.</p>

 &lt; 

    

    

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/exampleLogo.png"/>

      </figure>

      <p class="H3_Body">A beautiful web page is created with many pictures of rare gemstones and hardly any text. While human consumers may clearly see the value of the web page, a spider may be unable to assess the page’s value without the presence of text associated with the images.</p>

    </div>

    <p class="H3_Body">In many situations, it is important for web developers to add text and other meta content that may be unviewable to the end user but viewable to the search engine spider. Maintaining an awareness of how spiders access and index data will help developers ensure their sites are given optimal placement in search engine results.</p>

    <p class="H3">Online Accessibility Standards</p>

    <p class="H3_Body">According to figures released by the US Census Bureau on July 25, 2012, 8.1 million Americans (3.3 percent) have a vision impairment. In order to use the internet, many people use screen readers to relay the content. Screen readers are software programs that employ text-to-speech capabilities, in combination with knowledge of a program’s common buttons and operations, to provide an audio-powered alternative to navigating the internet via point-and-click on a screen. Text-to-speech is not perfect, so a little forethought in web design goes a long way in accommodating people with vision impairments who may want to access your website. There are methods to ensure that web content can be read by screen readers. Moreover, HTML has built-in structures and features that can automatically handle screen reader accessibility.</p>

    <p class="H3_Body">In the United States, federal agencies are required by law to make all information on their websites accessible to people with disabilities. Regardless of whether it’s a requirement for a specific website, it is a good idea to make it a habit to design accessible sites. An added perk is that good accessibility improves SEO performance.</p>

    <p class="H3_Body">More information about US federal requirements for websites can be found on the Americans with Disabilities website: <a href="https://www.ada.gov/pcatoolkit/chap5toolkit.htm">www.ada.gov/pcatoolkit/chap5toolkit.htm</a>.</p>

    <p class="H2_Body">There are many more protocols, web technologies, and internet standards than can be covered in this book. As mentioned previously, topics like search engine optimization can fill entire books by themselves. This text will stick to HTML and CSS web development as much as possible but will also identify other relevant topics and jumping-off points so that readers can follow their interests accordingly. </p>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">HTML/CSS are markup languages that direct the display and layout of content on a web page.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">HTML is text content contained in elements. These elements are generally named after their purpose, such as <code class="CODE">&lt;p&gt;</code> for paragraph and <code class="CODE">&lt;header&gt;</code> for header.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">CSS is text markup that describes how the elements should look.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">JavaScript allows you to add interactive functionality to a web page.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Content management systems (CMSs) like WordPress allow you to construct large websites with less HTML/CSS code.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Search engines like Google crawl web pages and rank each site according to the content it contains.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Search engine optimization (SEO) is the art of optimizing your HTML and content to rank higher in search engine results.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Accessibility standards describe how web designers can aid site visitors with disabilities.</p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>