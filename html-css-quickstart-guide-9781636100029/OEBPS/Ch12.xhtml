<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ibooks="http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0" epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0                z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en-US" xml:lang="en-US">

<head>
  <title>htmlcss_epub-17</title>
  <link href="css/idGeneratedStyles.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:e0000000-0000-0000-0000-000006605679" name="Adept.expected.resource"/>
</head>

<body id="htmlcss_epub-17" lang="en-US">

  <div>

    <h2 class="Chapter--" id="idParaDest-109"><a id="idTextAnchor237"/>| 12 | </h2>

    <p class="Chapter-Title" id="idParaDest-110"><a id="idTextAnchor238"/>Cool Tricks</p>

    <div class="chapterOverview-wrap">

      <h3 class="chapterOverview-title"><b>Chapter Overview</b></h3>

      <ul class="marked">

        <li>

          <p class="marked-list-item">Using CSS enables creativity and efficiency.</p>

        </li>

        <li>

          <p class="marked-list-item">Use overlays to grab attention.</p>

        </li>

        <li>

          <p class="marked-list-item">Calculated values make for fast and flexible coding. </p>

        </li>

      </ul>

    </div>

    <p class="IntroParagraph">The HTML and CSS we’ve learned up until this point covers common elements and CSS selectors you’ll use every day in web design. Since you’ve progressed to a more advanced stage in your learning, it’s time to go over some exciting tricks and techniques that can add additional visual interest and flexibility to your work while allowing you to save coding time and enhance your users’ experience.</p>

    <h3 class="H2" id="idParaDest-111"><a id="idTextAnchor239"/>CSS Gradients</h3>

    <p class="H2_Body">A gradient is a transition between at least two colors. The change can be gradual or abrupt, but a gradient differs from a border between two colors in that there is a space where the colors mingle with one another. There are two primary types of gradients: linear and radial.</p>

    <p class="H2_Body">You may wonder why you would use CSS to create a gradient when one is so easily made in Photoshop, GIMP, or pretty much any graphics program. Until gradients were added to CSS, that’s what web designers had to do.</p>

    <p class="H2_Body">There’s nothing wrong with that approach, but adding an image to a page, especially an image that includes important text, puts an extra burden on the web designer: if you want to change the text, you must change the entire image. And with CSS, you can style an element with a gradient in a fraction of the time it takes to download even the smallest image.</p>

    <p class="H3">Linear Gradients</p>

    <p class="H3_Body">A linear gradient is a transition of colors along a single line. In figure 106, we have a square div element with two colors, white and black.</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo106.jpg"/>

        <img alt="" class="w-100" src="image/41.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">Here’s the CSS and HTML code:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-01.css</p>

      <pre class="CODE_body">   #linear-gradient {</pre>

      <pre class="CODE_body">      width: 500px;</pre>

      <pre class="CODE_body">      height: 150px;</pre>

      <pre class="CODE_body">      background-color: black;</pre>

      <pre class="CODE_body">      background-image: linear-gradient(black, white); </pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   </pre>

      <pre class="CODE_body">   #linear-gradient p {</pre>

      <pre class="CODE_body">      text-align: center;</pre>

      <pre class="CODE_body">      vertical-align: middle;</pre>

      <pre class="CODE_body">      line-height: 150px;</pre>

      <pre class="CODE_body">      color: white;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-02.html</p>

      <pre class="CODE_body">   &lt;div id="linear-gradient"&gt;</pre>

      <pre class="CODE_body">      &lt;p&gt;Linear Gradients&lt;/p&gt;</pre>

      <pre class="CODE_body">   &lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">The div with the “linear-gradient” id has several important definitions. </p>

    <p class="H3_Body">Even though we’re using a gradient, we are still specifying a background color in case the browser is too old to support gradients. This is rare, as all browsers in modern use have this ability, but it’s a good idea to add this for backward compatibility.</p>

    <p class="H3_Body">The actual gradient is created in the “background-image” attribute. This is done via the linear-gradient keyword. At a minimum, you must specify two colors. In this case, we’ve chosen black and white. But you can specify additional colors. For example, you could create a rainbow:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-03.css</p>

      <pre class="CODE_body">   #linear-gradient {</pre>

      <pre class="CODE_body">      width: 500px;</pre>

      <pre class="CODE_body">      height: 150px;</pre>

      <pre class="CODE_body">      background-color: black;</pre>

      <pre class="CODE_body">      background-image: linear-gradient(red, orange, yellow, green, blue, indigo, violet); </pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">We have embedded a paragraph of text inside the div. Because we want to style this paragraph differently, we specify the <code class="CODE">p</code> selector after the id definition:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-03.css</p>

      <pre class="CODE_body">   #linear-gradient p {</pre>

      <pre class="CODE_body">      text-align: center;</pre>

      <pre class="CODE_body">       vertical-align: middle;</pre>

      <pre class="CODE_body">      line-height: 150px;</pre>

      <pre class="CODE_body">      color: white;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">Only the paragraph(s) inside this specific div will be styled in this definition.</p>

    <p class="H3_Body">Additionally, we centered the text in the div, both horizontally and vertically, using the “vertical-align” and “text-align” attributes of the paragraph element. We specified the line-height to match the height of the containing div so that the vertical alignment would be centered based on the full size of the div, not just the pixel size of the paragraph element font. This technique perfectly centers the text in both dimensions.</p>

    <p class="H3_Body">Even though the linear gradient follows a straight line, it can go in different directions. We can specify this in our definition:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-04.css</p>

      <pre class="CODE_body">   #linear-gradient {</pre>

      <pre class="CODE_body">      width: 500px;</pre>

      <pre class="CODE_body">      height: 150px;</pre>

      <pre class="CODE_body">      background-color: black;</pre>

      <pre class="CODE_body">      background-image: linear-gradient(to right, black, white); </pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3_Body">In this case, we specify that the gradient should move from left to right, with black on the left and white on the right (figure 107).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo107.jpg"/>

        <img alt="" class="w-100" src="image/42.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">If we specify “to left” instead, the white will be displayed on the left side and the black on the right side.</p>

    <p class="H3_Body">If we specify “to bottom right,” the gradient will move from the top left corner to the bottom right corner. You can use “to bottom left,” “to top right,” or any other similar variant to create a diagonal linear gradient.</p>

    <p class="H3_Body">If you want finer control over the angle, you can specify it in degrees:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-05.css</p>

      <pre class="CODE_body">   background-image: linear-gradient(45deg, black, white); </pre>

    </div>

    <p class="H3_Body">You can even provide a negative angle to reverse the direction:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-06.css</p>

      <pre class="CODE_body">   background-image: linear-gradient(-45deg, black, white); </pre>

    </div>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Note">Use the web page starter template (<code class="CODE">starter.html</code>) and experiment with the different gradient options to create your own interesting patterns. You will need to create a div element, then give it an id with a meaningful name. In CSS, assign it a width and height, and apply a gradient of your choice. Now is the perfect time to check out and experiment with the “Fun with Layering Gradients” link in your Digital Asset Vault. Go to <a class="underline" href="https://www.clydebankmedia.com/htmlcss-assets">www.clydebankmedia.com/htmlcss-assets</a>. </p>

    </div>

    <p class="H3">Radial Gradients</p>

    <p class="H3_Body">Radial gradients are a transition of colors in a circular or elliptical shape. In figure 108, we have a square div element with two colors, white and black, in a radial gradient. </p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo108.jpg"/>

        <img alt="" class="w-100" src="image/43.jpg"/>

      </figure>

    </div>

    <p class="H3_Body">Here is the CSS and HTML code:</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-07.css</p>

      <pre class="CODE_body">   #radial-gradient {</pre>

      <pre class="CODE_body">      width: 300px;</pre>

      <pre class="CODE_body">      height: 300px;</pre>

      <pre class="CODE_body">      background-color: black;</pre>

      <pre class="CODE_body">      background-image: radial-gradient(black, white); </pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-08.html</p>

      <pre class="CODE_body">   &lt;div id="radial-gradient"&gt;&lt;/div&gt;</pre>

    </div>

    <p class="H3_Body">By default, the shape is circular, but we can create an ellipse by specifying it before the colors.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-09.html</p>

      <pre class="CODE_body">   background-image: radial-gradient(ellipse, black, white); </pre>

    </div>

    <p class="H3_Body">    We can also specify the center point of the radial gradient:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-10.css</p>

      <pre class="CODE_body">   background-image: radial-gradient(circle at top right, orange, yellow, black);</pre>

    </div>

    <p class="H3_Body">Using the same techniques as with the linear gradient, we can create a bigger transition with the yellow color and a smaller transition of the orange color, creating an even nicer gradient:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-11.css</p>

      <pre class="CODE_body">   background-image: radial-gradient(circle at top right, orange 10%, yellow 30%, black);</pre>

    </div>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Note">Create the gradient as shown in the last two examples, and you’ll be treated to a vibrant gradient that looks like the sun in space. Remember to name the div, assign it a width and height, and specify its name as an id in your CSS rule.</p>

    </div>

    <h3 class="H2" id="idParaDest-112"><a id="idTextAnchor257"/>Sprites</h3>

    <p class="H2_Body">A sprite is usually a small graphic that is used in a larger image. Video games use sprites to allow the computer to “paint” the screen with ready-made images from a palette of sprites. It may help to think of sprites like letters in an alphabet. Instead of painting the screen with letters, the game (or, in our case, the web browser) can display sprites from a larger palette.</p>

    <p class="H2_Body">CSS allows you to use one file, composed of multiple images, as separate graphics. This helps speed up your website by eliminating the need for multiple requests to the web server. Instead, all necessary graphics are downloaded in one image (figure 109).</p>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo109.jpg"/>

        <img alt="" class="w-100" src="image/44.jpg"/>

      </figure>

      <p class="Caption">An image composed of sprite images as used in the ClydeBank Coffee Shop</p>

    </div>

    <p class="H2_Body">Sprites are often used for buttons, navigational icons, and other small images that are used frequently throughout a site.</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-12.css</p>

      <pre class="CODE_body">   #palette {</pre>

      <pre class="CODE_body">      width: 40px;</pre>

      <pre class="CODE_body">      height: 40px;</pre>

      <pre class="CODE_body">      padding: 0;</pre>

      <pre class="CODE_body">      border: none;</pre>

      <pre class="CODE_body">      background: url('/img/sprites.png') 0 0;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   #guitar {</pre>

      <pre class="CODE_body">      width: 40px;</pre>

      <pre class="CODE_body">      height: 40px;</pre>

      <pre class="CODE_body">      padding: 0;</pre>

      <pre class="CODE_body">      border: none;</pre>

      <pre class="CODE_body">      background: url('/img/sprites.png') -40px 0;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   #mask {</pre>

      <pre class="CODE_body">      width: 40px;</pre>

      <pre class="CODE_body">      height: 40px;</pre>

      <pre class="CODE_body">      padding: 0;</pre>

      <pre class="CODE_body">      border: none;</pre>

      <pre class="CODE_body">      background: url('/img/sprites.png') -80px 0;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-13.html</p>

      <pre class="CODE_body">   &lt;form&gt;</pre>

      <pre class="CODE_body">      &lt;input id="palette" type="submit" name="smile" value=""&gt;</pre>

      <pre class="CODE_body">      &lt;input id="guitar" type="submit" name="envelope" value=""&gt;</pre>

      <pre class="CODE_body">      &lt;input id="mask" type="submit" name="tag" value=""&gt;</pre>

      <pre class="CODE_body">   &lt;/form&gt;</pre>

    </div>

    <p class="H2_Body">In this example, we have three buttons—a palette, a guitar, and a mask. They are wrapped in a form element and each is a submit button, so clicking on any of them will submit the form. Padding and borders have been set to 0 to hide the traditional submit button effect, and a background image, <code class="CODE">/img/sprites.png</code>, has been specified.</p>

    <p class="H2_Body">At first, you might wonder how this will work. Won’t all three elements show the same background image? If we didn’t specify the background-position-x and background-position-y attributes, it would, but by defining the width and height and specifying these x and y offsets, we can cycle through the image and display any part of it we wish.</p>

    <p class="H2_Body">Recall the shorthand method of specifying borders and padding from chapter 7. In this case, we used the same shorthand approach by appending these two values, first the x (left) value and second the y (top) value, to the end of the URL definition in the background attribute. This shorthand method leads to less typing and a smaller CSS file.</p>

    <p class="H2_Body">The first image is the palette, and thus the offset, defined by <code class="CODE">0 0</code> in the palette example, tells the browser that it will find the image at left 0 and top 0. The second image, a guitar, is found at 40px left and 0 top. The mask image is found at 80px left and 0 top. Since every image is the same width, we simply add the width of an image to move from image to image (from left to right). When we use negative numbers for the y offset, we’re moving the background to the left. Imagine the element as a window through which we view various parts of the background image that moves in accordance with our instructions.</p>

    <p class="H2_Body">You can also use multiple rows of images. If you do this, you must increment the top offset to match the row. For example, if we had a graphic with two rows of three images, and all were 40 pixels by 40 pixels, we would specify <code class="CODE">url('/img/sprites.png') -40px -80px;</code> to show the third image on the second row.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">It is not necessary to specify a unit (px, em, etc.) when specifying a zero width or height for this or any other position or size element in CSS.</p>

    </div>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Image-Line">

        <img alt="" class="idGenObjectAttribute-1" src="image/25.jpg"/>

      </p>

      <p class="CBC_Heading">Sprites</p>

      <p class="H2_Body">By astounding coincidence, the owner of the ClydeBank Coffee Shop discovered that you recently learned about sprites. He wants you to use your newfound knowledge to convert the icons used throughout the site into <code class="CODE">&lt;span&gt;</code> elements with various class names that point to the sprite in question, eliminating the need to load multiple images on each page and, in turn, hopefully speeding up the website.</p>

      <div class="standard-box">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img class="w-100" src="image/downloadLogo.png"/>

        </figure>

        <p class="Note">If you haven’t yet downloaded the ClydeBank Coffee Shop website, please do so from <a href="https://github.com/clydebankmedia/clydebank-coffee-shop">www.github.com/clydebankmedia/clydebank-coffee-shop</a>.</p>

      </div>

      <p class="H2_Body">In the images folder of the coffee shop website, you’ll find a file called <code class="CODE">sprite.png</code> that contains all of our icons and the ClydeBank logo. Create the necessary CSS additions so that the following <code class="CODE">&lt;span&gt;</code> elements will display an inline representation of the image.</p>

      <div class="white2">

        <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

          <img class="w-100" src="image/snipetLogo.jpg"/>

        </figure>

        <p class="snippet">12-14.html</p>

        <pre class="CODE_body">   &lt;span class="sprite-palette"&gt;&lt;/span&gt; </pre>

        <pre class="CODE_body">   &lt;span class="sprite-guitar"&gt;&lt;/span&gt; </pre>

        <pre class="CODE_body">   &lt;span class="sprite-mask"&gt;&lt;/span&gt; </pre>

        <pre class="CODE_body">   &lt;span class="sprite-controller"&gt;&lt;/span&gt; </pre>

        <pre class="CODE_body">   &lt;span class="sprite-mic"&gt;&lt;/span&gt;</pre>

        <pre class="CODE_body">   &lt;span class="sprite-quill"&gt;&lt;/span&gt;</pre>

        <pre class="CODE_body">   &lt;span class="sprite-cup"&gt;&lt;/span&gt;</pre>

        <pre class="CODE_body">   &lt;span class="sprite-utensils"&gt;&lt;/span&gt;</pre>

        <pre class="CODE_body">   &lt;span class="sprite-milk"&gt;&lt;/span&gt; </pre>

      </div>

      <div class="standard-box">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img class="w-100" src="image/noteLogo.png"/>

        </figure>

        <p class="Note">The names I have assigned for the span classes in this exercise have the word <span class="italic idGenCharOverride-3">sprite</span> followed by a dash (<code class="CODE">sprite–</code>) before the name of the icon. This technique is called namespacing (the process of creating namespaces). Namespaces are used to separate names in code to avoid name collisions with other existing (or future) additions to your code. For example, without this technique, naming a CSS class “milk” would work for now but would pose a problem if we later wanted to add a div with an id of milk.</p>

      </div>

      <p class="H2_Body">Once you have created the classes in CSS to enable use of various parts of this collection of sprites, you will need to change the <code class="CODE">&lt;img&gt;</code> elements in the HTML pages to use these <code class="CODE">&lt;span&gt;</code> elements instead.</p>

      <div class="standard-box">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img class="w-100" src="image/noteLogo.png"/>

        </figure>

        <p class="Note"><span class="Note-Demi-bold idGenCharOverride-3">HINT</span>: The icons in the sprite image are 40 px wide and 40 px tall.</p>

      </div>

      <p class="H2_Body">Try this exercise on your own. If you run into problems, you can refer to the answer key in appendix V.</p>

      <div class="standard-box">

        <figure class="horizontal-image-wrap" epub:type="z3998:figure">

          <img class="w-100" src="image/noteLogo.png"/>

        </figure>

        <p class="Note"><span class="Note-Demi-bold idGenCharOverride-3">HINT</span>: The CSS file, style.css, is in the CSS folder, and the sprite image is in the images folder. The two-dot shortcut (<code class="CODE">..</code>) (see the “Images” section of chapter 5) will be useful here to instruct the browser to go up one directory before trying to check the images folder for sprite.png.</p>

      </div>

    </div>

    <h3 class="H2" id="idParaDest-113"><a id="idTextAnchor267"/>Transitions</h3>

    <p class="H2_Body">You can add dynamic motion and effects to your HTML elements via CSS transitions. Transitions allow you to define an initial state, an end state, and how quickly the change between those states occurs. This basic form of animation is a bit too abstract to explain in words, so let’s illustrate it with a practical example.</p>

    <p class="H2_Body">Say you have an image that you’d like to enlarge when the user hovers over it. To make this happen, you’ll need to use an initial value and a pseudo-class variant, <code class="CODE">:hover</code>, on the element with the image.</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-15.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   #car:hover {</pre>

      <pre class="CODE_body">      width: 640px;</pre>

      <pre class="CODE_body">      height: 480px;</pre>

      <pre class="CODE_body">      transition: width 2s, height 2s;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-16.html</p>

      <pre class="CODE_body">   &lt;img id="car" src="images/car.jpg" alt="A car"&gt;</pre>

    </div>

    <p class="H2_Body">In this example, the hover size is twice as big as the normal size. Additionally, the transition attribute is assigned a two-second width and a two-second height transition time. The image will be resized when the user hovers with their mouse, and the transition will take two seconds. The time in seconds doesn’t have to match—you can specify four seconds for height and two seconds for width if you like.</p>

    <p class="H2_Body">You can also transition just width (or just height):</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-17.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   #car:hover {</pre>

      <pre class="CODE_body">      width: 640px;</pre>

      <pre class="CODE_body">      transition: width 2s;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">Notice that in this example the height for the hover pseudo-class was omitted. If it had been left in, the image would have instantaneously resized to the larger height and, over two seconds, resized to the new width, because no height transition time was specified.</p>

    <p class="H2_Body">You can add a delay on the transition so that the resize won’t start for a certain number of seconds.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-18.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   #car:hover {</pre>

      <pre class="CODE_body">      width: 640px;</pre>

      <pre class="CODE_body">      transition: width 2s;</pre>

      <pre class="CODE_body">      transition-delay: 1s;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">By default, the resize is eased in, meaning it starts a bit slow, gets faster as it proceeds, then slows again as it ends. If this isn’t what you want, you can change the behavior of the default “ease” value via the transition-timing-function attribute.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-19.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   #car:hover {</pre>

      <pre class="CODE_body">      width: 640px;</pre>

      <pre class="CODE_body">      transition: width 2s;</pre>

      <pre class="CODE_body">      transition-timing-function: linear;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">A linear behavior will eliminate the slow start and finish. You can also specify <code class="CODE">ease-in</code>, <code class="CODE">ease-out</code>, and <code class="CODE">ease-in-out</code> to further modify this effect.</p>

    <h3 class="H2" id="idParaDest-114"><a id="idTextAnchor273"/>Transforms</h3>

    <p class="H2_Body">You can animate elements with CSS transformations. Various attributes allow you to rotate, scale, and even move elements across the page. You can pair these effects with events, like <code class="CODE">:hover</code>, to create a truly dynamic experience for your users.</p>

    <p class="H2_Body">There are many different CSS transforms, both two and three dimensional. We’ll cover the most common ones here, but you can see them all in our “2D and 3D Transforms Index” found in your Digital Asset Vault at clydebankmedia.com/htmlcss-assets. </p>

    <p class="H3">Rotation</p>

    <p class="H3_Body">Recall our car example from the “Transitions” section. To demonstrate rotation, let’s shift the car 45 degrees to the right.	</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-20.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">      transform: rotate(45deg);</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-21.html</p>

      <pre class="CODE_body">   &lt;img id="car" src="images/car.jpg" alt="A car"&gt;</pre>

    </div>

    <p class="H3_Body">To use this example on your local workspace, you’ll need an image. It doesn’t specifically have to be a car, but if you use a different file name, change the image source to match. After you save this to an HTML file, you’ll see the car has been tilted. We can animate this with <code class="CODE">:hover</code> as well. When you hover your mouse over the image, the car will rotate.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-22.css</p>

      <pre class="CODE_body">   #car:hover {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">      transform: rotate(45deg);</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H3">Scale</p>

    <p class="H3_Body">Scaling allows you to expand or contract an element based on a decimal value. Remember when we increased the size of the car from 320x240 to 640x480 in the beginning of this chapter? You may have noticed that we doubled the dimensions. It’s important to keep the same aspect ratio, which is the proportion of the width and height, to avoid distorting an element (especially an image). Using the scale transform allows us to specify this multiplier for the width and height of an object.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-23.css</p>

      <pre class="CODE_body">   #car:hover { transform: scale(2, 2); }</pre>

    </div>

    <p class="H3_Body">In this example, we have removed the expanded size and specified that when the user hovers over the car it will multiply the width and height times two. You can specify different values for each if you wish, and you can also use numbers smaller than 1, like <code class="CODE">0.5, 0.5</code>, for example, to shrink the image’s width and height by half.</p>

    <p class="H3">Skew</p>

    <p class="H3_Body">To skew an element along both its <span class="italic idGenCharOverride-2">x</span> and <span class="italic idGenCharOverride-2">y</span> axes, you can use the <code class="CODE">skewX</code>, <code class="CODE">skewY</code>, or <code class="CODE">skew</code> transforms. <code class="CODE">skewX</code> and <code class="CODE">skewY</code> allow you to alter the applicable axis, and skew takes both axes as values (figure 110). </p>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-24.html</p>

      <pre class="CODE_body">&lt;div id="warning"&gt;This element is a bit off its rocker!&lt;/div&gt;</pre>

    </div>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-25.css</p>

      <pre class="CODE_body">   #warning { </pre>

      <pre class="CODE_body">      width: 250px;</pre>

      <pre class="CODE_body">      height: 30px;</pre>

      <pre class="CODE_body">      background-color: gray;</pre>

      <pre class="CODE_body">      color: white;    </pre>

      <pre class="CODE_body">      text-align: center;</pre>

      <pre class="CODE_body">      line-height: 30px;</pre>

      <pre class="CODE_body">      transform: skew(45deg, 30deg); </pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <div class="whitebox">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img alt="" class="w-100" src="image/graphicLogo110.jpg"/>

        <img alt="" class="w-100" src="image/Figure110.jpg"/>

      </figure>

      <p class="H3_Body">Note that in this example we could have specified the <code class="CODE">skewX</code> and <code class="CODE">skewY</code> separately, but using skew is easier if you are going to adjust both axes.</p>

    </div>

    <h3 class="H2" id="idParaDest-115"><a id="idTextAnchor281"/>Overlay/Modal Without JavaScript</h3>

    <p class="H2_Body">You have likely run across a website that darkens the view and forces you to click “OK” or something similar before you can proceed. This is called a modal overlay and is usually used to hide content behind a terms of service agreement or a newsletter registration. Modal interfaces, like an overlay, limit the user’s input to a given set of options, creating a very effective technique for requesting your user’s attention.</p>

    <p class="H2_Body">To construct an example of this technique, we’ll use gradients to create the overlay. </p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-26.css</p>

      <pre class="CODE_body">   /*  */</pre>

      <pre class="CODE_body">   .overlay{</pre>

      <pre class="CODE_body">      background: rgba(0,0,0, 0.8);</pre>

      <pre class="CODE_body">      position: fixed;</pre>

      <pre class="CODE_body">      top: 0;</pre>

      <pre class="CODE_body">      right: 0;</pre>

      <pre class="CODE_body">      bottom: 0;</pre>

      <pre class="CODE_body">      left: 0;</pre>

      <pre class="CODE_body">      display: none;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   /* Checkbox */</pre>

      <pre class="CODE_body">   #onOff{</pre>

      <pre class="CODE_body">      position: fixed;</pre>

      <pre class="CODE_body">      clip: rect(0,0,0,0);</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   #onOff:checked ~ .overlay { display: block; }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   /* Buttons */</pre>

      <pre class="CODE_body">   .overlayButton{</pre>

      <pre class="CODE_body">      display: inline-block;</pre>

      <pre class="CODE_body">      margin-left: auto;</pre>

      <pre class="CODE_body">      margin-right: auto;</pre>

      <pre class="CODE_body">      background: steelblue;</pre>

      <pre class="CODE_body">      border-radius: 8px;</pre>

      <pre class="CODE_body">      padding: 10px;</pre>

      <pre class="CODE_body">      color: #fff;</pre>

      <pre class="CODE_body">      font-weight: bold;</pre>

      <pre class="CODE_body">      text-transform: uppercase;</pre>

      <pre class="CODE_body">      margin-left: 50%;</pre>

      <pre class="CODE_body">      margin-top: 40px;</pre>

      <pre class="CODE_body">      text-align: center;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body">   .overlay .overlayButton { background-color: darkred; }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   /* Background and Fonts */</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   body{</pre>

      <pre class="CODE_body">      font-family: sans-serif;</pre>

      <pre class="CODE_body">      background-color:#556;</pre>

      <pre class="CODE_body">   /* Set a linear gradient as the background image */    background-image: linear-gradient(30deg, #445 12%, transparent 12.5%, transparent 87%, #445 87.5%, #445),</pre>

      <pre class="CODE_body">      linear-gradient(150deg, #445 12%, transparent 12.5%, transparent 87%, #445 87.5%, #445),</pre>

      <pre class="CODE_body">      linear-gradient(30deg, #445 12%, transparent 12.5%, transparent 87%, #445 87.5%, #445),</pre>

      <pre class="CODE_body">      linear-gradient(150deg, #445 12%, transparent 12.5%, transparent 87%, #445 87.5%, #445),</pre>

      <pre class="CODE_body">      linear-gradient(60deg, #99a 25%, transparent 25.5%, transparent 75%, #99a 75%, #99a),</pre>

      <pre class="CODE_body">      linear-gradient(60deg, #99a 25%, transparent 25.5%, transparent 75%, #99a 75%, #99a);</pre>

      <pre class="CODE_body">      background-size:80px 140px;</pre>

      <pre class="CODE_body">      background-position: 0 0, 0 0, 40px 70px, 40px 70px, 0 0, 40px 70px;</pre>

      <pre class="CODE_body">}</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-27.html</p>

      <pre class="CODE_body">   &lt;input id="onOff" type="checkbox"&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;!-- Overlay --&gt;</pre>

      <pre class="CODE_body">   &lt;label for="onOff" class="overlay"&gt;</pre>

      <pre class="CODE_body">      &lt;label class="overlayButton" for="onOff"&gt;</pre>

      <pre class="CODE_body">         Overlay Off</pre>

      <pre class="CODE_body">      &lt;/label&gt;</pre>

      <pre class="CODE_body">   &lt;/label&gt;</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   &lt;!-- Button --&gt;</pre>

      <pre class="CODE_body">   &lt;label class="overlayButton" for="onOff"&gt;</pre>

      <pre class="CODE_body">      Overlay On</pre>

      <pre class="CODE_body">   &lt;/label&gt;</pre>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">You’ll notice that the class names are composed of two words without a space, with the first letter of the second word capitalized. This is camel case, as we introduced in the “Elements” section of chapter 4. When using longer words to describe classes and ids, it’s good to use camel case or dashes between the words to make the names easier to read.</p>

    </div>

    <p class="H2_Body">In this example, you can toggle the overlay with the button provided in the middle of the page. This provides interactive functionality without your having to use JavaScript, offering faster performance and helping to ensure that add-ons that block JavaScript won’t interfere with the overlay.</p>

    <h3 class="H2" id="idParaDest-116"><a id="idTextAnchor285"/>Keyframe Animation</h3>

    <p class="H2_Body">When web designers wanted to animate parts of their web pages, they used to turn to plugins like Adobe Flash™. Now it’s possible to animate elements via CSS.</p>

    <p class="H2_Body">CSS animation is an in-depth topic, so we won’t be able to go over every detail of it in this book. Regardless, we can meet most common animation needs with a discussion and example of keyframes and a few animation functions.</p>

    <p class="H2_Body">Animations are simply a series of images (frames) that, when displayed in rapid sequence, give the impression of seamless movement. Storing or rendering every frame (25 or more per second) can be taxing on the browser and bandwidth. Keyframes are frames that define a specific state of the animation, and the browser uses the properties in these keyframes to construct the animation between the keyframes. Keyframes can be defined for the beginning and end of the animation or for points in between. Since the duration of the animation is controlled separately, the keyframes are identified by percentage of the total animation (0%, 20%, 80%, 100%, etc.).</p>

    <p class="H2_Body">That’s a technical explanation, so let’s consider a real-life situation using our car example. Let’s say we want to move the car image across the screen. If we had to construct an image of the car’s position at each moment, it might take hundreds or even thousands of separate images to give the illusion of movement. A much simpler approach is to give the browser a “start” keyframe and an “end” keyframe and provide instructions on how to handle the rest. </p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-28.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">      position: relative;</pre>

      <pre class="CODE_body">      animation-name: zoom;</pre>

      <pre class="CODE_body">      animation-duration: 5s;</pre>

      <pre class="CODE_body">      animation-iteration-count: 2;</pre>

      <pre class="CODE_body">      animation-direction: alternate;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   @keyframes zoom {</pre>

      <pre class="CODE_body">      from { left: 0px; }</pre>

      <pre class="CODE_body">      to { left: 500px; }</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-29.html</p>

      <pre class="CODE_body">   &lt;img id="car" src="images/car.jpg" alt="A motorized conveyance."&gt;</pre>

    </div>

    <p class="H2_Body">In this example, the image of the car will move from the left to the right and back again, over a span of five seconds in each direction. The “from” and “to” states of the animation define starting and ending positions. In this case, we’re using the left relative position, but you could use many other CSS attributes. We assign this keyframe definition with <code class="CODE">animation-name</code>, and in the example, “zoom” after <code class="CODE">@keyframes</code> defines the name of the set of keyframes we create within the brackets of that selector.</p>

    <p class="H2_Body">We specify the duration by setting <code class="CODE">animation-duration</code> to five seconds. The animation is repeated twice; this is defined by <code class="CODE">animation-interaction-count</code>. If you set animation-interaction-count to “infinite,” then the animation will be repeated infinitely. And the animation is alternated (reversed) each time via <code class="CODE">animation-direction</code>.</p>

    <p class="H2_Body">Another example can be created using the “percent complete” keyframe option. This works almost identically but allows us to track multiple properties animated at the same time for one element on the page. In this example, the CSS properties of the element remain the same, but adjustments are made to the keyframe animation.</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-30.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">      position: relative;</pre>

      <pre class="CODE_body">      animation-name: zoom;</pre>

      <pre class="CODE_body">      animation-duration: 5s;</pre>

      <pre class="CODE_body">      animation-iteration-count: 2;</pre>

      <pre class="CODE_body">      animation-direction: alternate;</pre>

      <pre class="CODE_body">   }</pre>

      <pre class="CODE_body"> </pre>

      <pre class="CODE_body">   @keyframes zoom {</pre>

      <pre class="CODE_body">      0%{ left: 0px; }</pre>

      <pre class="CODE_body">      20% { transform:rotate(-45deg); }</pre>

      <pre class="CODE_body">      100%{ left: 500px; }</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-31.html</p>

      <pre class="CODE_body">   &lt;img id="car" src="images/car.jpg" alt="A motorized conveyance."&gt;</pre>

    </div>

    <p class="H2_Body">In this example, the keyframes “from” and “to” were replaced with the percent equivalents, 0% and 100%, respectively. Also added is a 20% keyframe that changes the rotation of the car, leveraging the transform property we discussed earlier to rotate the car 45 degrees counterclockwise by the 20% mark of duration. The browser will start this rotation at 0% and return to the default of 0 degrees rotation by the time the animation is 100% complete. How is this better? The car does a wheelie! This same technique could be used if we needed an element to change color and then change back again, or perhaps have something move in a different axis, as if it was thrown. With the correct combination of properties you could “throw” a stick across the screen, changing the distance from the left and having the distance from the bottom increase and then peak at 50% before coming back down. You could even add a subtle rotation (as in the previous example). </p>

    <p class="H2_Body">One other piece of CSS magic that makes this animation work is <code class="CODE">position: relative</code>. In this case, the left position is relative to the body element, but you could wrap this in a div and it would be relative to that. You can even run multiple animations at once with elements using keyframe definitions that are different from their containing elements. This advanced feature would allow you, for example, to animate the wheels of a moving car if the wheels were a div element within the moving car div. Relative positioning makes this possible by eliminating the need to specify (and thus keep track of) the exact pixel-perfect position of every element on the page.</p>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Note">Experiment with various values for the animation settings. You can also specify background colors and other CSS attributes like size, font, and even CSS transforms. Just for fun, grab a photo of a family member and animate them across the page. The opportunities for creativity with CSS keyframe animation are nearly limitless!</p>

    </div>

    <h3 class="H2" id="idParaDest-117"><a id="idTextAnchor291"/>Calculated Values</h3>

    <p class="H2_Body">So far, whenever we have coded an example with a specified size, we have used absolute values. For example, our car image is 320 pixels wide by 240 pixels high.</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-32.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: 320px;</pre>

      <pre class="CODE_body">      height: 240px;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">CSS has a built-in function for calculating values on the fly. We could use this:</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-33.css</p>

      <pre class="CODE_body">   #car {</pre>

      <pre class="CODE_body">      width: calc(300px + 20px);</pre>

      <pre class="CODE_body">      height: calc(200px + 40px);</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="H2_Body">The browser would add the values together as directed and use them for the width and height. The previous two examples will produce the same results. You can add (with <code class="CODE">+</code>), subtract (with <code class="CODE">-</code>), multiply (with <code class="CODE">*</code>), or divide (with <code class="CODE">/</code>).</p>

    <p class="H2_Body">You may wonder why someone would use the <code class="CODE">calc()</code> function when they could simply specify the total value. If you’re just adding pixels, there isn’t much of an advantage. The true power of using calculated values is in the ability to compute <span class="italic idGenCharOverride-2">unlike</span> values.</p>

    <p class="H2_Body">Let’s say you want a div to be not quite the width of the screen.</p>

    <p class="CODE_heading">CSS</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-34.css</p>

      <pre class="CODE_body">   #mydiv {</pre>

      <pre class="CODE_body">      width: calc(100% - 50px);</pre>

      <pre class="CODE_body">      background-color: black;</pre>

      <pre class="CODE_body">      color: silver;</pre>

      <pre class="CODE_body">   }</pre>

    </div>

    <p class="CODE_heading">HTML</p>

    <div class="white2">

      <figure class="horizontal-image-wrap2" epub:type="z3998:figure">

        <img class="w-100" src="image/snipetLogo.jpg"/>

      </figure>

      <p class="snippet">12-35.html</p>

      <pre class="CODE_body">   &lt;div id="mydiv"&gt;I’m wide, but not too wide!&lt;/div&gt;</pre>

    </div>

    <p class="H2_Body">Here, we told the browser to make the width 100% but then to subtract 50 pixels from that. The div will always be 80 pixels less than its container’s size.</p>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/downloadLogo.png"/>

      </figure>

      <p class="Note">If you haven’t yet downloaded the ClydeBank Coffee Shop website, please do so from <a href="https://github.com/clydebankmedia/clydebank-coffee-shop">www.github.com/clydebankmedia/clydebank-coffee-shop</a>.</p>

    </div>

    <div class="oyo">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/oyoLogo.jpg"/>

      </figure>

      <p class="Image-Line">

        <img alt="" class="idGenObjectAttribute-1" src="image/25.jpg"/>

      </p>

      <p class="CBC_Heading">Gradients</p>

      <p class="H2_Body">In chapter 8, our client had us give the ClydeBank Coffee Shop website a new look and feel. Unfortunately, they have grown tired of the color scheme we implemented and want a new, fresh look for the header.</p>

      <p class="H2_Body">They still like the sienna-colored header, so after some thought you decide to add a gradient to the header. You can start with <code class="CODE">sienna</code> and work in the color from the menu, <code class="CODE">saddlebrown</code>. The header is styled in the style.css file, so your work will focus there. Try to add the gradient on your own. If you get stuck, the solution is in appendix V.</p>

      <p class="CBC_Heading">Keyframe Animation</p>

      <p class="H2_Body">Our client wants to show off work they have done in the coffee shop. They’ve shared a large image, named background.jpg, that captures the whole space. You will find background.jpg in the images folder of the ClydeBank Coffee Shop website.</p>

      <p class="H2_Body">Using keyframe animation, apply a “camera pan”-style effect to the <code class="CODE">&lt;main&gt;</code> element by adjusting the <code class="CODE">background-position</code> to move the image right and left. Since we only have one <code class="CODE">&lt;main&gt;</code> element on the page, we can get away with applying the CSS animation to it. That said, you may want to consider assigning the <code class="CODE">&lt;main&gt;</code> element an id and adding the CSS animation to it rather than redefining the element.</p>

      <p class="H2_Body">We want this animation to continue to move, but select an appropriate timing function to ensure smooth motion. You can test various durations to avoid a distracting background. Try this on your own first, but if you get stuck, a solution can be found in appendix V.</p>

    </div>

    <div class="standard-box">

      <figure class="horizontal-image-wrap" epub:type="z3998:figure">

        <img class="w-100" src="image/noteLogo.png"/>

      </figure>

      <p class="Note">If your screen is larger than fifteen inches, the keyframe animation effect may be less pronounced (or not at all pronounced). But fear not—even if you have a huge screen, you can simply resize the window to experience the animation in all its glory! We’ll teach you more about adjusting your website for various device sizes in the following chapter on media queries.</p>

    </div>

    <div class="chapterRecap-wrap">

      <h2 class="chapterRecap-title"><b>Chapter Recap</b></h2>

      <ul class="marked">

        <li>

          <p class="marked-list-item margin-bottom-s">Various CSS features can enliven otherwise static web content.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Gradients allow for beautiful and expressive coloring of your web pages.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Sprites allow a single image file to act as the source file for many images.</p>

        </li>

        <li>

          <p class="marked-list-item margin-bottom-s">Becoming proficient in keyframe animation and calculated values enables CSS coders to be flexible, creative, and efficient.</p>

        </li>

      </ul>

    </div>

  </div>

</body>

</html>