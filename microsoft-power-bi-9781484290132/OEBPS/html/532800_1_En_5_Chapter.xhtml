<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Microsoft Power BI Data Analyst Certification Companion: Preparation for Exam PL-300</title>
<link rel="stylesheet" type="text/css" href="../override_v1.css"/>
<link rel="stylesheet" type="text/css" href="../css/springer_epub.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div epub:type="chapter" role="doc-chapter"><div class="ChapterContextInformation"><div class="ContextInformation" id="b978-1-4842-9013-2_5"><div class="ChapterCopyright">© The Author(s), under exclusive license to APress Media, LLC, part of Springer Nature 2023</div><span class="ContextInformationAuthorEditorNames">J. Jolly</span><span class="ContextInformationBookTitles"><span class="BookTitle">Microsoft Power BI Data Analyst Certification Companion</span></span><span class="ContextInformationSeries"><span class="SeriesTitle" lang="en">Certification Study Companion Series</span></span><span class="ChapterDOI"><a href="https://doi.org/10.1007/978-1-4842-9013-2_5">https://doi.org/10.1007/978-1-4842-9013-2_5</a></span></div></div><!--Begin Abstract--><div class="MainTitleSection"><h1 class="ChapterTitle" lang="en">5. Design a Data Model</h1></div><div class="AuthorGroup"><div class="AuthorNames"><span class="Author"><span class="AuthorName">Jessica Jolly</span><sup><a href="#Aff11">1</a> <span class="ContactIcon"> </span></sup></span></div><div class="Affiliations"><div class="Affiliation" id="Aff11"><span class="AffiliationNumber">(1)</span><div class="AffiliationText">Evanston, IL, USA</div></div><div class="ClearBoth"> </div></div></div><!--End Abstract--><div class="Fulltext"><p class="Para" id="Par2">What is a <span id="ITerm1">data model</span> and why is it necessary? This is (perhaps) the most difficult concept to understand for a business user because Excel works in a flat world. Any summarization you want to perform requires that all the data is on the same worksheet. So, at most, you must use some LOOKUP functions to “retrieve” the data you need to include. While having everything on one worksheet is easy to comprehend, it is unwieldy and inefficient. Enter the data model.</p><p class="Para" id="Par3">A data model allows the <span id="ITerm2">logical combination</span> of different groups of data (arranged in tables) <em class="EmphasisTypeItalic ">without physically combining them</em>. The model is the structure within which you will define these connections (relationships) between the tables.</p><p class="Para" id="Par4">Of all the skills we cover together in this book, <span id="ITerm3">data modeling</span> may be the most critical to your success as a Power BI practitioner. Certainly, there are questions on the exam that test your knowledge of data modeling, and that <em class="EmphasisTypeItalic ">is</em> our main purpose here. However, when you use <span id="ITerm4">Power BI</span>, by far most of your challenges will arise because of your data model structure. A good data model is vital for a performant Power BI report; a bad data model will hinder the speed and responsiveness of the report despite your best efforts. In this chapter I explain the basic principles of data modeling that you should know, both for the exam and in real life.</p><section class="Section1 RenderAsSection1" id="Sec1"><h2 class="Heading">Define the Tables</h2><p class="Para" id="Par5">As we saw in Chapter <span class="ExternalRef"><a href="532800_1_En_4_Chapter.xhtml"><span class="RefSource">4</span></a></span>, a query is the form your extracted data takes in the <span id="ITerm5">Power Query Editor</span>. Once you finish all your transformations and apply your changes, those queries become tables inside the <span id="ITerm6">Power BI Desktop</span><span id="ITerm7"></span>. (For example, if you extract data from an Excel worksheet, it first becomes a query in the Power Query Editor and then a table once it is loaded into the data model. The same is true for any extracted data.) Once all your data has been loaded, you will have at least one table and usually many more. Now we need to define the <span id="ITerm8">connections</span> between all these disparate tables. (Remember, they may come from a wide variety of different sources and may never have been combined before. That’s part of the magic of Power BI!) Before we explore relationships, I need to define some important terminology.</p><section class="Section2 RenderAsSection2" id="Sec2"><h3 class="Heading">Dims and Facts</h3><div class="Para" id="Par6">There are two primary types of <span id="ITerm9">tables</span> in a data model: a fact table and (usually) several dimension (dim) tables.<div class="Table" id="Taba"><table style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col class="tcol1 align-left"/><col class="tcol2 align-left"/></colgroup><thead><tr><th style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;"><p class="SimplePara">Fact Tables</p></th><th style="border-bottom: 0.5pt solid ; text-align: left;"><p class="SimplePara">Dimension Tables</p></th></tr></thead><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; text-align: left;"><p class="SimplePara">A fact <span id="ITerm10">table</span> contains the data you are reporting on. In retail, it could be sales transactions. In medicine, it could be appointments and/or outcomes. In manufacturing, it could be data from each production line. Fact tables record things that have happened (usually), and so you will almost always see a date (and maybe time) stamp as part of a fact table record. A fact table <em class="EmphasisTypeItalic ">ideally</em> only contains values that are in numeric format (quantity; date; time; price; unique IDs for customers, patients, and products; etc.).</p><p class="SimplePara">For example, if the fact table contains sales transactions, each record will have an ID for the customer and for the product. Ideally, this ID will be an integer (whole number). This ID is a foreign key that allows the fact table to be related to the dim table for the customer (or product).</p><p class="SimplePara">The fact <span id="ITerm11">table</span> is usually the longest (the greatest number of rows) of the tables in the model. There <em class="EmphasisTypeItalic ">can</em> be two fact tables in a model, but that is a more advanced modeling problem, so I assume only one fact table in this book.</p><p class="SimplePara">Fact tables can have <em class="EmphasisTypeItalic ">many</em> rows for each element such as product or customer or store.</p></td><td style="border-bottom: 0.5pt solid ; text-align: left;"><p class="SimplePara">Dimension (dim) <span id="ITerm12">tables</span> describe the elements of your fact table in greater detail. A dim table usually has a lot of columns (very wide), many of which are “strings” or alphanumeric.</p><p class="SimplePara">In the dim table, the ID number for the product (or customer or patient) is a primary key. (See Chapter <span class="ExternalRef"><a href="532800_1_En_4_Chapter.xhtml"><span class="RefSource">4</span></a></span>, “Keys and IDs,” for more information.) In the dim table, the record for that ID number is very detailed: the customer’s name, address, birth date, demographic info, etc.</p><p class="SimplePara">Dimension tables have <em class="EmphasisTypeItalic ">just one row</em> for each element being described (customer, product, store, etc.).</p><p class="SimplePara">Models usually have multiple dimension tables. Ideally, dim tables connect directly to the fact table, but they can be related to other dimension tables.</p></td></tr><tr><td colspan="2" style="border-right: 0.5pt solid ; text-align: left;"><p class="SimplePara">A quick note about other types of <span id="ITerm13">tables</span>: There can be other types of tables in a data model such as a factless fact table or a bridge table. This book does not tackle those concepts, nor will the PL-300.</p></td></tr></tbody></table></div></div></section>
<section class="Section2 RenderAsSection2" id="Sec3"><h3 class="Heading">Using Fields in Visuals</h3><div class="Para" id="Par7">We will be tackling visuals in a later chapter, but I want to introduce the concept of which <em class="EmphasisTypeItalic ">types of fields</em><span id="ITerm14"></span> you will use in a visual:<div class="UnorderedList"><ul class="UnorderedListMarkBullet"><li><p class="Para" id="Par8">Dimension table fields are descriptive; they should be used as labels on charts (e.g., rows, columns, and axes).</p></li><li><p class="Para" id="Par9">Fact table fields are the values that are analyzed in a visual (e.g., summarized, averaged, counted).</p></li></ul></div></div></section>
</section>
<section class="Section1 RenderAsSection1" id="Sec4"><h2 class="Heading">Relationships: A Model’s Connective Tissue</h2><p class="Para" id="Par10">There are multiple types of relationships that Power BI supports. Let’s walk through each of them. But first a word for those of you with a database background: relationships in Power BI are similar to but <em class="EmphasisTypeItalic ">not the same as a</em> join. <em class="EmphasisTypeItalic ">The purpose of a relationship in the Power BI context is to transmit filters.</em> (Much more on filters later.)</p><section class="Section2 RenderAsSection2" id="Sec5"><h3 class="Heading">One-to-Many Relationship (1-Many)</h3><div class="Para" id="Par11">Dimension <span id="ITerm15">tables</span> have <em class="EmphasisTypeItalic ">one</em> row for each record (customer, product, store, etc.). (See the preceding definition.) Fact tables usually have <em class="EmphasisTypeItalic ">many</em> <span id="ITerm16">rows</span> for each element described in a particular dim table (see the preceding definition). Therefore, the relationship used to connect a dim table to a fact table is a <span id="ITerm17">one-to-many relationship</span> as shown in Figure <span class="InternalRef"><a href="#Fig1">5-1</a></span>.<figure class="Figure" id="Fig1"><div class="MediaObject" id="MO1"><img alt="" aria-describedby="d64e549" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig1_HTML.jpg" style="width:42.82em" width="1713" height="1085"/><div class="TextObject" id="d64e549"><p class="Para" id="Par85">A screenshot has three tables for the product, store, and sales. Each has different options. The product key option under the product and sales is selected.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-1</span><p class="SimplePara">A <span id="ITerm18">one-to-many relationship</span> between a dimension and fact table</p></div></figcaption></figure></div><div class="Para" id="Par12">In Figure <span class="InternalRef"><a href="#Fig1">5-1</a></span>, both the Product and the fact table have a field called <span id="ITerm19"><span class="EmphasisFontCategoryNonProportional ">ProductKey</span></span>. Because there is only <em class="EmphasisTypeItalic ">one</em> row for each product in the Product (dim) table and there are <em class="EmphasisTypeItalic ">multiple</em> <span id="ITerm20">rows</span><span id="ITerm21"></span> for each product in the Sales (fact) table, the relationship is one-to-many. The one side of the relationship is indicated by a tiny 1. The many side of the relationship is indicated by an asterisk, as shown in Figure <span class="InternalRef"><a href="#Fig2">5-2</a></span>.<figure class="Figure" id="Fig2"><div class="MediaObject" id="MO2"><img alt="" aria-describedby="d64e595" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig2_HTML.jpg" style="width:17.72em" width="709" height="272"/><div class="TextObject" id="d64e595"><p class="Para" id="Par86">A screenshot has two icons for one and an asterisk connected by a line.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-2</span><p class="SimplePara">The one-to-many <span id="ITerm22">icons</span></p></div></figcaption></figure></div><div class="FormalPara FormalParaRenderingStyle1 ParaTypeImportant" id="FPar1"><div class="Heading">Tip</div><p class="Para FirstParaInFormalPara" id="Par13">If you can’t figure out which table is your fact table, look for the table that has lots of rows with repeating customer IDs or product IDs or store IDs (the ID will depend on what data you are reporting on). Each fact will usually have a date (and maybe a time) associated with it.</p></div><div class="Para" id="Par14">Using the preceding <span id="ITerm23">example</span>, if you choose a particular <span id="ITerm24"><span class="EmphasisFontCategoryNonProportional ">ProductKey</span></span> in the <span class="EmphasisFontCategoryNonProportional ">Product</span> table, the relationship will convey that selection to the <span class="EmphasisFontCategoryNonProportional ">Sales</span> table as outlined in Figure <span class="InternalRef"><a href="#Fig3">5-3</a></span>. The <span class="EmphasisFontCategoryNonProportional ">Sales</span> <span id="ITerm25">table</span> is then filtered to only show facts related to the selected product (or selected products).<figure class="Figure" id="Fig3"><div class="MediaObject" id="MO3"><img alt="" aria-describedby="d64e652" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig3_HTML.jpg" style="width:29.6em" width="1184" height="1407"/><div class="TextObject" id="d64e652"><p class="Para" id="Par87">A screenshot has two tables for product and sales connected by an arrow. Each has different options. The product key option is selected in both.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-3</span><p class="SimplePara">Filter transmission from the Product to the Sales <span id="ITerm26">table</span></p></div></figcaption></figure></div></section>
<section class="Section2 RenderAsSection2" id="Sec6"><h3 class="Heading">Many-to-Many Relationships (Many-Many)</h3><div class="Para" id="Par15">The opposite of a 1-many relationship is a many-to-many <span id="ITerm27">relationship</span><span id="ITerm28"></span>. If your model has two tables with multiple rows for the same customer (or store or product), the only way to connect these two tables is with a many-to-many relationship (meaning there are multiple rows for each customer in both the fact and the dimension table). I ask my students to visualize two sheets of paper, each with a list that has multiple lines for the customer they are interested in. I have illustrated the challenge in Figure <span class="InternalRef"><a href="#Fig4">5-4</a></span>.<figure class="Figure" id="Fig4"><div class="MediaObject" id="MO4"><img alt="" aria-describedby="d64e682" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig4_HTML.jpg" style="width:42.82em" width="1713" height="395"/><div class="TextObject" id="d64e682"><p class="Para" id="Par88">A screenshot has two tables for dimension and fact. Each has a different number of customers from A to D.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-4</span><p class="SimplePara">A dimension table with multiple rows for each customer</p></div></figcaption></figure></div><p class="Para" id="Par16">How can you select the right rows in the dimension table? What is the difference between each row listing Customer A in the dimension table? The multiple rows in the fact table are to be expected; after all, you hope that there are multiple sales for each customer. We can create a many-to-many <span id="ITerm29">relationship</span><span id="ITerm30"></span> between these two tables and then ask the engine to process through the records. Here’s the problem, and it is a big one: <em class="EmphasisTypeItalic ">You run the risk of duplicate counts or of records not being included. Either way, your report will be inaccurate.</em> If your tables contain millions of records, you are not likely to spot the error. Your report will also be slow. If you <em class="EmphasisTypeItalic ">must</em> create a many-to-many relationship, you can mitigate its potential ill effects by setting a filter direction (see below). But your best course of action is to redesign your model before resorting to a many-to-many relationship. Return to the <span id="ITerm31"><span class="EmphasisFontCategoryNonProportional ">Power Query Editor</span></span> and simplify the dimension table. How you do this will vary based on your data, but keep the goal in mind: you want the dimension tables to contain one unique record for each element described (customer, store, product, etc.). Usually, you must simplify the dimension table (de-duplicate, add a field, etc.), which will result in the dimension table having a unique record for each element. Apply your changes to the model and create a one-to-many relationship.</p></section>
<section class="Section2 RenderAsSection2" id="Sec7"><h3 class="Heading">One-to-One (1-1)</h3><div class="Para" id="Par17">The third type of relationship is a one-to-one <span id="ITerm32">relationship</span>. A one-to-one <span id="ITerm33">relationship</span> is created between two tables when there is a unique row in <em class="EmphasisTypeItalic ">both</em> tables for a particular customer (store, product, etc.). (Don’t confuse this with a fact table that <em class="EmphasisTypeItalic ">currently</em> only has one row for a particular customer. In that case, the fact table <em class="EmphasisTypeItalic ">can</em> have multiple rows for a customer. It just does not right now.) If Power BI suggests a one-to-one <span id="ITerm34">relationship</span>, this is an opportunity to simplify your data model, as shown in Figure <span class="InternalRef"><a href="#Fig5">5-5</a></span>.<figure class="Figure" id="Fig5"><div class="MediaObject" id="MO5"><img alt="" aria-describedby="d64e753" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig5_HTML.jpg" style="width:42.82em" width="1713" height="902"/><div class="TextObject" id="d64e753"><p class="Para" id="Par89">A screenshot has three tables: dimension table A, B, and dimension table merged. For both A and B, there are 4 customers with attribute. For the merged table, each customer has 2 attributes.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-5</span><p class="SimplePara">Two dimension tables merged</p></div></figcaption></figure></div><p class="Para" id="Par18">Return to the <span id="ITerm35">Power Query Editor</span> and combine the two tables (it will probably be a merge operation). Apply your changes; you will only have one table and can proceed to create the standard one-to-many relationship.</p><p class="Para" id="Par19">Unlike the many-to-many <span id="ITerm36">relationship</span>, the one-to-one <span id="ITerm37">relationship</span> doesn’t come with any significant disadvantages. Notwithstanding, if Power BI suggests a one-to-one relationship, you should try to merge the two tables to streamline your data model.</p></section>
<section class="Section2 RenderAsSection2" id="Sec8"><h3 class="Heading">For Future Reference: Disconnected Tables</h3><p class="Para" id="Par20">What happens if a table does not have a relationship with any other tables in the model? If you try to use a field from the disconnected <span id="ITerm38">table</span> in a visual with a field from another table in the model, you will usually see repeating values. There <em class="EmphasisTypeItalic ">are</em> situations in which a disconnected table can be useful, but they are not in the scope of this book and are not included in the exam.</p><div class="FormalPara FormalParaRenderingStyle1 ParaTypeImportant" id="FPar2"><div class="Heading">Tip</div><p class="Para FirstParaInFormalPara" id="Par21">If you see repeating values in a visual, the first place to look is in your model. There is a missing relationship or a problem with the existing relationship between the two tables. Do not waste time trying to “fix” the visual—that is almost never the problem.</p></div></section>
<section class="Section2 RenderAsSection2" id="Sec9"><h3 class="Heading">Active and Inactive Relationships</h3><p class="Para" id="Par22">There can only be <em class="EmphasisTypeItalic ">one</em> active relationship between two tables, but there can be as many inactive <span id="ITerm39">relationships</span> as necessary. We will explore one of the most common use cases for inactive relationships below.</p></section>
</section>
<section class="Section1 RenderAsSection1" id="Sec10"><h2 class="Heading">Star Schema</h2><p class="Para" id="Par23">As soon as you get started with Power BI, you will start reading and hearing about <span id="ITerm40">star schemas</span>. This term refers to the “shape” of your data model, but it is much more metaphorical than physical. In a star schema, the fact table (usually just one) sits at the “virtual” center of your tables. The dimension tables are arranged in a circle around the fact table. Each dimension table is connected to the fact table through a relationship.</p><p class="Para" id="Par24">The star schema is not required. Rather, you should consider it the ideal that you are striving toward as you create your model. There is a common variant called the “snowflake” <span id="ITerm41">schema</span>.</p><p class="Para ParaOneEmphasisChild" id="Par25"><em><strong class="EmphasisTypeBoldItalic ">For Future Reference: Normalized Tables</strong></em></p><p class="Para ParaTypeImportant" id="Par26">A normalized schema is one in which tables have been deconstructed into their constituent parts. For example, if you have a Product table that has Subcategory and Category information in it, in a normalized schema, this table is broken down into three separate tables (or maybe even further). You will see this type of schema referred to as Third Normal Form, and it is quite common in data modeling generally.</p><p class="Para ParaTypeImportant" id="Par27">Power BI aims for a happy medium. You don’t want to break down your tables to their furthest extreme, but you also don’t want all your data in one table (as in Excel).</p><p class="Para" id="Par28"><span id="ITerm42">Snowflake schemas</span> are not the worst design for a data model, and sometimes they are necessary. Remember, the star schema is your <em class="EmphasisTypeItalic ">ideal</em> data model structure.</p></section>
<section class="Section1 RenderAsSection1" id="Sec11"><h2 class="Heading">Relationships and Directions</h2><p class="Para" id="Par29">Now that we have covered relationships, we must address the direction of the relationship. Yes, relationships have a direction. In Power BI a relationship is <em class="EmphasisTypeItalic ">not</em> a join; rather, it is a method to convey a filter from one table to another.</p><section class="Section2 RenderAsSection2" id="Sec12"><h3 class="Heading">Single-Direction Relationships</h3><div class="Para" id="Par30">By default, when Power <span id="ITerm43">BI</span> creates a 1-many relationship, the direction will be single, flowing from the one side (usually the dim table) to the many side (usually the fact table). Recall the example from earlier (Figure <span class="InternalRef"><a href="#Fig6">5-6</a></span>).<figure class="Figure" id="Fig6"><div class="MediaObject" id="MO6"><img alt="" aria-describedby="d64e879" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig6_HTML.jpg" style="width:42.82em" width="1713" height="1624"/><div class="TextObject" id="d64e879"><p class="Para" id="Par90">A screenshot has three tables for the product, store, and sales. Each has a different options. The productkey is selected in product table. The product and store are connected to sales via 1 and an asterisk.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-6</span><p class="SimplePara">Two dimension tables connected by single-direction one-to-many relationships</p></div></figcaption></figure></div><p class="Para" id="Par31">This <span id="ITerm44">behavior</span> enables you to make a selection in the dim table where there is only one row for each customer (or product or store), thereby avoiding ambiguity in your selection. This selection is then transmitted from the dim table to the fact table via the direction of the relationship. As long as the direction is one way, you don’t have to worry about incorrect results arising from a bidirectional relationship.</p></section>
<section class="Section2 RenderAsSection2" id="Sec13"><h3 class="Heading">Bidirectional Relationships</h3><div class="Para" id="Par32">A <span id="ITerm45">bidirectional relationship</span><span id="ITerm46"></span> is one in which a filter can be transmitted from <em class="EmphasisTypeItalic ">either</em> table in the relationship. This may sound very convenient, and there will be times you will be tempted to use a bidirectional relationship to solve a data modeling problem, as shown in Figure <span class="InternalRef"><a href="#Fig7">5-7</a></span>. <em class="EmphasisTypeItalic ">Avoid this if you can.</em> <span id="ITerm47">Bidirectional relationships</span> can introduce ambiguity (or, worse, errors) in your reports. They can also slow your report down significantly. With that warning out of the way, there are ways to mitigate the potential damage a bidirectional relationship can do.<figure class="Figure" id="Fig7"><div class="MediaObject" id="MO7"><img alt="" aria-describedby="d64e937" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig7_HTML.jpg" style="width:35.45em" width="1418" height="809"/><div class="TextObject" id="d64e937"><p class="Para" id="Par91">A screenshot has tables for the date dim and employees connected by a bi-directional arrow. The text box reads a bi-directional relationship will have arrows pointing in both directions.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-7</span><p class="SimplePara"><span id="ITerm48">Bidirectional relationship</span></p></div></figcaption></figure></div><div class="Para" id="Par33">You will be presented with a bidirectional filter in two scenarios:<div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">1.</div><div class="ItemContent"><p class="Para" id="Par34"><em class="EmphasisTypeItalic ">In a 1-1 relationship</em>: These <span id="ITerm49">relationships</span><span id="ITerm50"></span> are automatically created as bidirectional, and largely in this instance, the bidirectional filter won’t do much damage to your report. The risk of ambiguity is not present, because both tables have unique rows for each element.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">2.</div><div class="ItemContent"><p class="Para" id="Par35"><em class="EmphasisTypeItalic ">In a many-many relationship</em>: This is the scenario in which you do not want a <span id="ITerm51">bidirectional relationship</span>, but <em class="EmphasisTypeItalic ">a many-to-many relationship is always created as bidirectional</em>. Usually, you are going to use one of the tables to filter the other table, so in this situation, mimic a single-direction relationship by setting the filter direction artificially. This selection will mitigate the potential for ambiguity because the selection is made in one table and is filtered to the other one.</p></div><div class="ClearBoth"> </div></li></ol></div></div><p class="Para" id="Par36">With all that said, avoid bidirectional relationships as much as possible!</p></section>
<section class="Section2 RenderAsSection2" id="Sec14"><h3 class="Heading">Finally, Cardinality!</h3><p class="Para" id="Par37">In the previous chapter, I mentioned cardinality, and I promised that I would go into great depth explaining this very important concept. First, a formal <span id="ITerm52">definition</span>: A <span id="ITerm53">column’s cardinality</span> is defined by how many unique (non-repeating) values it has. A column that is a “key” column has, by its very nature, high cardinality. In contrast, a column that has the same values repeated has lower cardinality. <em class="EmphasisTypeItalic ">One of your primary jobs as a data modeler is to reduce or eliminate high cardinality everywhere you can, because a column with high cardinality is “expensive” to store.</em></p><p class="Para ParaOneEmphasisChild" id="Par38"><strong class="EmphasisTypeBold ">For Future Reference: The VertiPaq Engine</strong></p><p class="Para ParaTypeImportant" id="Par39">The engine that powers Power <span id="ITerm54">BI</span> is called “Vertipaq.” <span id="ITerm55">Vertipaq</span> stores and accesses data in columns (vertically), not horizontally. This method makes Vertipaq very fast at retrieving data and performing computations. It uses several compression algorithms, all of which are less effective the higher the number of unique values in a column. Therefore, a column with high cardinality is “expensive” to store: the engine cannot perform as much compression.</p><div class="Para" id="Par40">The best place to reduce cardinality is in the <span id="ITerm56">Power Query Editor</span><span id="ITerm57"></span>. Can you eliminate the column entirely (is it necessary for your reporting)? Can you split the column into smaller units with more repeating values? For example, here’s a single column with values separated by a <span id="ITerm58">pipe (|) symbol</span>:<div class="ProgramCode" id="PC1"><div class="LineGroup"><div class="FixedLine">Contoso | Mountain Bike| MB-200</div></div></div></div><div class="Para" id="Par41">This column could be split into potentially four <span id="ITerm59">columns</span>:<div class="ProgramCode" id="PC2"><div class="LineGroup"><div class="FixedLine">Contoso || Mountain Bike || MB || 200</div></div></div></div><div class="Para" id="Par42">Each of the columns, except the last one (with the “200”), would have much lower cardinality than the original column. Another common opportunity to lower cardinality is a <span id="ITerm60">date/time column</span>:<div class="ProgramCode" id="PC3"><div class="LineGroup"><div class="FixedLine">4/15/2022 09:43 am</div></div></div></div><div class="Para" id="Par43">If you are using the <span id="ITerm61">time component</span>, you can split the column into two (date and time), each of which will have much lower cardinality than the original column:<div class="ProgramCode" id="PC4"><div class="LineGroup"><div class="FixedLine">4/15/2022 || 9:43 am</div></div></div></div><p class="Para" id="Par44">If you are not using the <span id="ITerm62">time component</span>, change the contents to date only.</p><p class="Para" id="Par45">When you do have a column with high cardinality that you cannot simplify (e.g., a key column), try to store that column as an integer, preferably a whole number. <span id="ITerm63">Integers</span> are easier to compress, so even if the column is “expensive,” you can mitigate the impact by selecting the most efficient data type.</p><div class="Para" id="Par46">Selecting the <span id="ITerm64">data type</span> for the column is best done in the <span id="ITerm65">Power Query Editor</span>, but you <em class="EmphasisTypeItalic ">can</em> change the data type in the <span id="ITerm66">Power BI Desktop</span> if needed. There are a few other things you can set for the column in the Desktop:<div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">1.</div><div class="ItemContent"><p class="Para" id="Par47"><em class="EmphasisTypeItalic ">The format of the data</em>: You are not changing the data type (which is how the data is stored); rather, <span id="ITerm67">you</span> are changing how it is displayed in your report. The only place you can change the format of the data type is in the Desktop; you <em class="EmphasisTypeItalic ">cannot</em> change the data format in the Power Query Editor.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">2.</div><div class="ItemContent"><div class="Para" id="Par48"><em class="EmphasisTypeItalic ">The categorization of the data</em>: There are certain types of data that benefit from being correctly categorized. The most frequently <span id="ITerm68">categorized</span> data is geographic data, shown in Figure <span class="InternalRef"><a href="#Fig8">5-8</a></span>. For example, if you have a column with a city name and a column with country names, both columns are text data types. By categorizing columns—these respectively as “City” and “Country”—you can ensure that they won’t be inaccurately mapped. (Cities and countries can have the same name: Columbia, South Carolina, and Columbia the country.)<figure class="Figure" id="Fig8"><div class="MediaObject" id="MO8"><img alt="" aria-describedby="d64e1171" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig8_HTML.jpg" style="width:42.82em" width="1713" height="1173"/><div class="TextObject" id="d64e1171"><p class="Para" id="Par92">A screenshot has drop-down menus for summarization and data categories. A pop-up window for fields has the option for the city highlighted.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-8</span><p class="SimplePara">Categorizing data using the Column tools menu in the Report <span id="ITerm69">view</span></p></div></figcaption></figure></div><p class="Para" id="Par49">Another use case for categorization is if you have a column with a URL that points to a storage location for an image. When you categorize that column as <span class="EmphasisFontCategoryNonProportional ">Image URL</span>, and then use that column in a visual, it will display the image, not the text string for the URL.</p></div><div class="ClearBoth"> </div></li></ol></div></div><p class="Para" id="Par50">Once you have successfully categorized a geographical field, a globe symbol will appear next to the field.</p><div class="FormalPara FormalParaRenderingStyle1 ParaTypeImportant" id="FPar3"><div class="Heading">Tip</div><p class="Para FirstParaInFormalPara" id="Par51">This is a Microsoft tool, which means that there are almost always <em class="EmphasisTypeItalic ">at least</em> two ways to perform a task. You can categorize data in the <span class="EmphasisFontCategoryNonProportional ">Model</span> view as well, as shown in Figure <span class="InternalRef"><a href="#Fig9">5-9</a></span>.</p></div><div class="Para"><figure class="Figure" id="Fig9"><div class="MediaObject" id="MO9"><img alt="" aria-describedby="d64e1212" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig9_HTML.jpg" style="width:35.45em" width="1418" height="1082"/><div class="TextObject" id="d64e1212"><p class="Para" id="Par93">A screenshot has a drop-down menu for the data category. The right side has a table of columns with the option city selected.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-9</span><p class="SimplePara">Data categorization in the Model <span id="ITerm70">view</span></p></div></figcaption></figure></div><div class="Para" id="Par52"><div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">3.</div><div class="ItemContent"><p class="Para" id="Par53"><em class="EmphasisTypeItalic ">The name of the column</em>: Ideally, this is something you did in the <span id="ITerm71">Power Query Editor</span>, but if you forgot or need to change the name of a <span id="ITerm72">column</span>, you can do so in the Desktop. The change will propagate back to the Power Query Editor, if the data was loaded from the Power Query Editor.</p></div><div class="ClearBoth"> </div></li></ol></div></div></section>
</section>
<section class="Section1 RenderAsSection1" id="Sec15"><h2 class="Heading">Adding a Date Table</h2><div class="Para" id="Par54">Almost every data model will have fields with dates in them; quite frequently, there will be several fields that store dates. In a data model that contains information about orders (for example), the <span id="ITerm73">fact table</span> may have three fields related to dates: order date, ship date, delivery date. You <em class="EmphasisTypeItalic ">could</em> use these <span id="ITerm74">date fields</span> in your reports, but this will present some problems:<div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">1)</div><div class="ItemContent"><p class="Para" id="Par55">The fact table may not have <em class="EmphasisTypeItalic ">all</em> the dates between the earliest and latest dates represented. What if the company in question does not accept orders, ship, or deliver on the weekends? (Improbable, I know, but work with me here.) The fact table will not contain any rows for dates that fall on a Saturday or Sunday. What if the company observes holidays that <em class="EmphasisTypeItalic ">can</em> fall on a weekday (Christmas, New Year’s Day, Fourth of July)? None of these dates will be represented in the fact table. These gaps in your data mean that you will not be able to make accurate calculations of time elapsed between an order date and a ship date (performed by a simple subtraction of dates) or any other calculations involving dates.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">2)</div><div class="ItemContent"><p class="Para" id="Par56">What if your company is based in a country whose weekend falls on Friday and Saturday?</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">3)</div><div class="ItemContent"><p class="Para" id="Par57">Any <span id="ITerm75">reports</span> that display information using your company’s specific calendar will not be correct, unless your fiscal calendar strictly follows the Gregorian calendar. For example, if your company’s fiscal year ends on June 30th, just using dates that are included in the fact table will not accurately portray your financial performance.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">4)</div><div class="ItemContent"><p class="Para" id="Par58">The built-in time intelligence functions in DAX will not work as designed. These functions will be covered in the next chapter, but here’s a sneak preview: you will <em class="EmphasisTypeItalic ">want</em> to use the time intelligence functions!</p></div><div class="ClearBoth"> </div></li></ol></div></div><div class="Para" id="Par59">By now you are wondering what to do to avoid all these dire circumstances, and well you might! The answer is simple: <em class="EmphasisTypeItalic ">add a dimension table specifically for dates</em>. And the good news is that it is (relatively) easy to do so. A date dimension <span id="ITerm76">table</span> (often shortened to “date dim”) can be constructed in one of three ways, all of which are equally effective. Which one you should choose depends on your company’s particular data environment:<div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">1.</div><div class="ItemContent"><p class="Para" id="Par60">Use one that has been created by someone else and stored in a data warehouse. If you are lucky enough to have one of these, rejoice! All you do is to import that table the same way you would any other table from a data source. The good news is that it will be accurate, standardized, and complete.</p><p class="Para ParaTypeImportant" id="Par61"><strong class="EmphasisTypeBold ">Tip</strong> If your company does not already have a corporate date table, make it your mission to get one created and stored in an area where anyone using <span id="ITerm77">Power BI</span> can access it.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">2.</div><div class="ItemContent"><p class="Para" id="Par62">Create one in the <span id="ITerm78">Power Query Editor</span><span id="ITerm79"></span>. This method has the advantage of taking up less “space” in your model (more on that in the next chapter). You can readily find the M code for date tables that have been created by experts in M such as Ken Puls and others. Or you can watch one of the several excellent YouTube videos on the subject and create one yourself.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">3.</div><div class="ItemContent"><p class="Para" id="Par63">You can use <span id="ITerm80">DAX</span> to create a date <span id="ITerm81">table</span> in the <span id="ITerm82">Power BI Desktop</span>. As with the M code date tables, there are excellent examples readily available on the Internet. Most would agree that the best examples are those provided by SQLBI (I have no affiliation with them, just a big fan). In the next chapter, wherein we explore DAX more fully, I will return to using DAX for your date dimension table.</p></div><div class="ClearBoth"> </div></li></ol></div></div><div class="Para" id="Par64">Whichever method you choose (or have available), <em class="EmphasisTypeItalic ">you need a date table in your model.</em> Once the date dimension table has been created, there are several steps you must take for it to be useful:<div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">1.</div><div class="ItemContent"><p class="Para" id="Par65">Establish a numerical sort column for the months of the year. Otherwise, when you use the <span id="ITerm83">month column</span> in a report, it will be sorted alphabetically (e.g., April, August, February, etc.).</p><p class="Para ParaTypeImportant" id="Par66"><strong class="EmphasisTypeBold ">Best Practice</strong> In your <span id="ITerm84">sort column</span>, include the year number <em class="EmphasisTypeItalic ">and</em> the month number (e.g., 202101, 202102, 210203). That way, the months and years will be sorted appropriately in your report.</p></div><div class="ClearBoth"> </div></li><li class="ListItem"><div class="ItemNumber">2.</div><div class="ItemContent"><p class="Para" id="Par67">Mark your date <span id="ITerm85">table</span>. You will need to have one column that <em class="EmphasisTypeItalic ">has a row for every date</em> between the earliest and the latest date present in your model<em class="EmphasisTypeItalic ">. This column must be formatted as a date.</em> Once you have successfully marked the date table, you see a little icon next to your date column that looks something like an ID card as <span id="ITerm86">shown</span> in Figures <span class="InternalRef"><a href="#Fig10">5-10</a></span> and <span class="InternalRef"><a href="#Fig11">5-11</a></span>.</p></div><div class="ClearBoth"> </div></li></ol></div><figure class="Figure" id="Fig10"><div class="MediaObject" id="MO10"><img alt="" aria-describedby="d64e1478" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig10_HTML.jpg" style="width:42.82em" width="1713" height="983"/><div class="TextObject" id="d64e1478"><p class="Para" id="Par94">A screenshot has the tab for table tools selected. It has an option for mark as date table. The right side has a table for fields with the datedim highlighted.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-10</span><p class="SimplePara">Marking a date <span id="ITerm87">table</span></p></div></figcaption></figure><figure class="Figure" id="Fig11"><div class="MediaObject" id="MO11"><img alt="" aria-describedby="d64e1498" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig11_HTML.jpg" style="width:26.58em" width="1063" height="1574"/><div class="TextObject" id="d64e1498"><p class="Para" id="Par95">A screenshot has a table for fields. It has different options, and the date dim is selected. The date option has an icon alongside.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-11</span><p class="SimplePara">The date column indicates that the date table has been <span id="ITerm88">marked</span></p></div></figcaption></figure></div><p class="Para ParaOneEmphasisChild" id="Par68"><em><strong class="EmphasisTypeBoldItalic ">For Future Reference: Shadow Date Tables</strong></em></p><div class="Para ParaTypeImportant" id="Par69">Without a date table, <span id="ITerm89">Power BI</span> creates mini date tables “behind” every date field in your model; these tables are called “shadow” date <span id="ITerm90">tables</span>, and they are problematic for several reasons: 1) You have no control over them. You can’t add to or modify them.2) They bloat the data model unnecessarily. 3) They don’t work <em class="EmphasisTypeItalic ">reliably</em> with DAX time intelligence functions.There are several ways to get rid of them. The first is to create a date table (using one of the methods listed earlier), <em class="EmphasisTypeItalic ">mark it as a date table, and establish a relationship between the date dim table and the fact table</em>. Once you perform these three steps, the shadow date <span id="ITerm91">tables</span> are expunged from the data model for each table connected to the date dimension table. The second way is to prevent them from being created at all, either for the current file or for all of your PBIX files. You do this in the <span class="EmphasisFontCategoryNonProportional ">File</span> ➤ <span class="EmphasisFontCategoryNonProportional ">Options and settings</span> ➤ <span class="EmphasisFontCategoryNonProportional ">Options</span> under <span class="EmphasisFontCategoryNonProportional ">Data Load</span>, as shown in Figure <span class="InternalRef"><a href="#Fig12">5-12</a></span>.<figure class="Figure" id="Fig12"><div class="MediaObject" id="MO12"><img alt="" aria-describedby="d64e1572" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig12_HTML.jpg" style="width:42.82em" width="1713" height="1415"/><div class="TextObject" id="d64e1572"><p class="Para" id="Par96">A screenshot for options has tabs for global and current files highlighted. A text box details the steps to disable the time intelligence option.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-12</span><p class="SimplePara">Disabling “shadow” date tables <span id="ITerm92">forever</span></p></div></figcaption></figure></div><div class="Para" id="Par70"><div class="OrderedList"><ol><li class="ListItem"><div class="ItemNumber">3.</div><div class="ItemContent"><p class="Para" id="Par71">Connect the date dimension table to the fact table via a <span id="ITerm93">1-many relationship</span>. (Remember, the date dim table is a dimension table just like any other in your model. There is one row for each date between the earliest and the latest date in your model.)</p></div><div class="ClearBoth"> </div></li></ol></div></div><p class="Para" id="Par72">Now that I have covered the why and the how of creating a date dim <span id="ITerm94">table</span>, we can return to the first statement of this section: almost every data model will have multiple fields that are dates. To use each date field in a report visual accurately, the field must be connected to the date dimension table. But remember: there can only be <em class="EmphasisTypeItalic ">one</em> active <span id="ITerm95">relationship</span><span id="ITerm96"></span> between two tables, which leads us to inactive relationships.</p><section class="Section2 RenderAsSection2" id="Sec16"><h3 class="Heading">Inactive Relationships</h3><div class="Para" id="Par73">If you create a second <span id="ITerm97">relationship</span> between two tables, the second one will automatically be inactive. You can’t manually activate a relationship once the report is published, which is why there is a DAX function called <span id="ITerm98"><span class="EmphasisFontCategoryNonProportional ">UseRelationship</span></span>. I will address DAX in Chapter <span class="ExternalRef"><a href="532800_1_En_7_Chapter.xhtml"><span class="RefSource">7</span></a></span>, so don’t worry if you are not sure what a DAX function is. For now, the important thing to know is that you can create as many inactive relationships as you need between two tables. Returning to our example, you would create one active relationship and two inactive relationships between the fact table and the date dim table (as shown in Figure <span class="InternalRef"><a href="#Fig13">5-13</a></span>):<div class="UnorderedList"><ul class="UnorderedListMarkNone"><li><p class="Para" id="Par74"><span class="EmphasisFontCategoryNonProportional ">'FactTable'[OrderDate] to 'DateDim'[Date]</span> (active)</p></li><li><p class="Para" id="Par75"><span class="EmphasisFontCategoryNonProportional ">'FactTable'[ShipDate] to 'DateDim'[Date]</span> (inactive)</p></li><li><p class="Para" id="Par76"><span class="EmphasisFontCategoryNonProportional ">'FactTable'[DeliveryDate] to 'DateDim'[Date]</span> (inactive)</p></li></ul></div><figure class="Figure" id="Fig13"><div class="MediaObject" id="MO13"><img alt="" aria-describedby="d64e1678" src="../images/532800_1_En_5_Chapter/532800_1_En_5_Fig13_HTML.jpg" style="width:41.25em" width="1650" height="1533"/><div class="TextObject" id="d64e1678"><p class="Para" id="Par97">A screenshot has 2 tables for orders and datedim with different options. Both are connected via 1 and an asterisk.</p></div></div><figcaption class="Caption" lang="en"><div class="CaptionContent"><span class="CaptionNumber">Figure 5-13</span><p class="SimplePara">Active and inactive (dotted lines) relationships</p></div></figcaption></figure></div><p class="Para" id="Par77">Usually, the <span id="ITerm99">field</span> that you use most in your reports is the one that has the active relationship. In this example, the <span class="EmphasisFontCategoryNonProportional ">'Orders'[OrderDate]</span> field is the most used in reports, which is why it is the active relationship. If <span class="EmphasisFontCategoryNonProportional ">'Orders'[ShipDate]</span> is more commonly used in reports, then the active relationship could be between <span class="EmphasisFontCategoryNonProportional ">'Orders'[ShipDate</span>] and <span class="EmphasisFontCategoryNonProportional ">'DateDim'[Date]</span>.</p></section>
<section class="Section2 RenderAsSection2" id="Sec17"><h3 class="Heading">Role-Playing Dimensions</h3><div class="Para" id="Par78">There are <span id="ITerm100">scenarios</span> in which you don’t want to use the imactive relationship technique. Perhaps you can’t identify which date field will be used the most in reports. There is another way to model the data so that you can use the <span class="EmphasisFontCategoryNonProportional ">OrderDate</span>, <span class="EmphasisFontCategoryNonProportional ">ShipDate</span>, and <span class="EmphasisFontCategoryNonProportional ">DeliveryDate</span> without having to activate a relationship: role-playing dimensions. In our example, you would duplicate the <span class="EmphasisFontCategoryNonProportional ">DateDim</span> table twice (so you have three total), and each <span class="EmphasisFontCategoryNonProportional ">DateDim</span> table would have an active relationship to the appropriate date field in the fact table:<div class="UnorderedList"><ul class="UnorderedListMarkNone"><li><p class="Para" id="Par79"><span class="EmphasisFontCategoryNonProportional ">FactTable[OrderDate] to OrderDateDim[Date]</span> (active)</p></li><li><p class="Para" id="Par80"><span class="EmphasisFontCategoryNonProportional ">FactTable[ShipDate] to ShipDateDim[Date]</span> (active)</p></li><li><p class="Para" id="Par81"><span class="EmphasisFontCategoryNonProportional ">FactTable[DeliveryDate] to DeliverDateDim[Date]</span> (active)</p></li></ul></div></div><p class="Para" id="Par82">Every <span id="ITerm101">table</span> that you add increases the size of your model, so think carefully before you choose role-playing instead of using active/inactive relationships. If your model is small overall, then the penalty for the extra tables may not be important for performance. But if your model is already complex, with lots of tables, opting for active/inactive relationships is probably a better choice.</p></section>
</section>
<section class="Section1 RenderAsSection1" id="Sec18"><h2 class="Heading">Critical to Success</h2><p class="Para" id="Par83">Creating the correct relationships is critical to the success of your report. Without the proper relationships, your visuals will be, at best, inaccurate. At worst, they will be wrong. <span id="ITerm102">Relationships</span> play an important role in the performance of your report. A <span id="ITerm103">bidirectional relationship</span> can slow your report significantly, among its other drawbacks.</p><p class="Para" id="Par84">There is a rule of thumb in the Power BI community that you will spend 80% of your time cleaning, transforming, and modeling your data. If you find yourself wondering when you can get to building a report, be patient! Once the model is complete, you will be amazed at how fast the report comes together. In the meantime, let’s move to perhaps (?) the most challenging part of modeling: writing DAX.</p></section>
</div></div></div>
</div>
</body>
</html>