<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Microsoft Power BI Data Analyst Certification Guide</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="css/style-JRserifv5.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><div id="_idContainer029">
			<h1 id="_idParaDest-58"><em class="italic"><a id="_idTextAnchor059"></a>Chapter 4</em>: <a id="_idTextAnchor060"></a>Cleansing, Transforming, and Shaping Data</h1>
			<p>For data to be used effectively in any kind of reporting, analytics, or AI use case, it must be clean and ready to be joined or shaped with other data. When data is viewed only in the context of the source system that creates it, we're often limited in how we can use it. </p>
			<p>For example, if we have sales data coming from point-of-sale terminals, then we can draw conclusions about the total amount of sales completed on any given day, week, or month by simply summing the sales for a given time period. However, if we could join the sales data with weather data, then we could possibly draw conclusions about the impact weather has on sales. Perhaps we believe that rainy weather will have a negative impact on the sales for a given location. In order to test this hypothesis by correlating sales data with weather data, we'll need to ensure things such as that the date and time fields in the weather data can be joined with the date and time fields in our sales data (since weather and sales both change from day to day). If the sales data represents a date and time in the format "2021-10-14T11:03" but the weather data represents the same date and time in the format "10-14-2021 11:00am," then we must do some shaping of the data in order to help test our hypothesis. Likewise, after we've profiled our data, if we discover we are missing data or it has become corrupt, we'll need to be able to cleanse the data in order to make it usable.</p>
			<p>Power BI includes a component called Power Query that allows us to not only connect to data but also apply data transformations, cleansing operations, and shaping to data to enable the creation of new datasets that are used as part of the Power BI data model. This chapter will get you familiar with Power Query so you can use it to shape and transform data. By learning how to use Power Query, you will be able to build data models to use for interactive Power BI reports and dashboards. </p>
			<p>In this chapter, we're going to cover the following topics:</p>
			<ul>
				<li>Accessing Power Query in Power BI Desktop</li>
				<li>Sorting and filtering</li>
				<li>Managing columns</li>
				<li>Column transformations</li>
				<li>Row transformations</li>
				<li>Combining data</li>
				<li>Enriching data with AI</li>
				<li>Advanced operations</li>
			</ul>
			<h1 id="_idParaDest-59"><a id="_idTextAnchor061"></a>Technical requirements</h1>
			<p>For this chapter, you'll need the following:</p>
			<ul>
				<li>Microsoft Power BI Desktop installed on a Microsoft Windows PC.</li>
				<li>Access to some data to use. We've also provided synthetic data that can be used, which is available on the GitHub repository for this book here: <a href="https://github.com/PacktPublishing/Microsoft-Power-BI-Data-Analyst-Certification-Guide/tree/main/example-data">https://github.com/PacktPublishing/Microsoft-Power-BI-Data-Analyst-Certification-Guide/tree/main/example-data</a>.</li>
			</ul>
			<h1 id="_idParaDest-60"><a id="_idTextAnchor062"></a>Accessing Power Query in Power BI</h1>
			<p>Power Query is <a id="_idIndexMarker117"></a>accessible inside the Power BI Desktop tool by connecting to <a id="_idIndexMarker118"></a>a data source and then clicking <strong class="bold">Transform Data</strong> (rather than <strong class="bold">Load</strong> or <strong class="bold">Cancel</strong>). For existing data models, Power Query can be accessed <a id="_idIndexMarker119"></a>by right-clicking on the query in the <strong class="bold">Fields</strong> pane and clicking <strong class="bold">Edit query</strong>.</p>
			<p>The Power Query window provides a ribbon at the top with tabs for <strong class="bold">Home</strong>, <strong class="bold">Transform</strong>, <strong class="bold">Add Column</strong>, <strong class="bold">View</strong>, <strong class="bold">Tools</strong>, and <strong class="bold">Help</strong>. There is also a <strong class="bold">Query Settings</strong> pane on the right-hand side that shows the name of the query and the steps applied to the data that get built up as you transform the data. The <strong class="bold">Applied Steps</strong> pane makes it easy to undo or redo different transforms and immediately see the impact of those transforms on the data, which is shown in the center of the window. The last part of the user interface is the <strong class="bold">Queries</strong> pane on the left-hand side of the window. This shows all queries that make up the data model and allows you to flip back and forth between them as you're transforming and shaping data in your data model.</p>
			<p>Unless stated otherwise, all data transformation capabilities discussed in this chapter will happen in Power Query. Let's start with sorting and filtering data after we've connected to it.</p>
			<h1 id="_idParaDest-61"><a id="_idTextAnchor063"></a>Sorting and filtering</h1>
			<p>Sorting data is <a id="_idIndexMarker120"></a>a key capability that helps us understand more about the data. When data is displayed in Power Query, it is shown in tabular format with rows and columns and sorting is easily accomplished by clicking the <strong class="bold">▼</strong> button on the column you want to sort on. From there, you can select <strong class="bold">Sort Ascending</strong> or <strong class="bold">Sort Descending</strong>. When this happens, a step gets added to the <strong class="bold">Applied Steps</strong> pane and you can instantly see the data sorted in the center of the window. Sorting can also be achieved by clicking the name of the column and then clicking the appropriate button under the <strong class="bold">Home</strong> ribbon under <strong class="bold">Sort</strong>.</p>
			<p>To filter data in <a id="_idIndexMarker121"></a>a column, you also use the <strong class="bold">▼</strong> button on the column you want to filter on and you see some options for <strong class="bold">Remove Empty</strong> and data type-specific filtering. The data type filtering options are shown in the following table: </p>
			<div>
				<div id="_idContainer024" class="IMG---Figure">
					<img src="image/B18086_04_001_a_new.jpg" alt="Figure 4.1 – Filtering options by data type
" width="695" height="837"/>
				</div>
			</div>
			<div>
				<div id="_idContainer025" class="IMG---Figure">
					<img src="image/B18086_04_001_b.jpg" alt="Figure 4.1 – Filtering options by data type
" width="926" height="1755"/>
				</div>
			</div>
			<p class="figure-caption">Figure 4.1 – Filtering options by data type</p>
			<p>A core capability <a id="_idIndexMarker122"></a>of working with tabular data as we have in Power Query is managing the <a id="_idIndexMarker123"></a>columns and rows of data. In the next section, we'll explore how we can manage columns.</p>
			<h1 id="_idParaDest-62"><a id="_idTextAnchor064"></a>Managing columns</h1>
			<p>There are many kinds of transformations that can be done on columns. The first step for columns is often identifying <a id="_idIndexMarker124"></a>which columns are needed and whether there are any that are not needed for the given data model. </p>
			<p>Power Query makes it easy to change the order of columns; just simply drag and drop by clicking on the column name. It's also possible to remove columns by right-clicking and selecting <strong class="bold">Remove</strong>. Other column operations on the right-click menu include <strong class="bold">Remove Other Columns</strong>, <strong class="bold">Duplicate Column</strong>, and <strong class="bold">Add Column from Examples</strong>. </p>
			<p>It's also possible to make these changes using buttons on the <strong class="bold">Home</strong> ribbon under <strong class="bold">Manage Columns</strong>. The <strong class="bold">Choose Columns</strong> capability under <strong class="bold">Manage Columns</strong> is an efficient way of selecting many columns to be removed at once because it presents you with a full list of all columns preselected with a checkbox and you only need to uncheck the columns you'd like to remove and click <strong class="bold">OK</strong>. After the operation completes, you'll be left with only those columns where a checkbox remained.</p>
			<p>Once we've ordered, removed, or possibly duplicated columns in our dataset, we also need to know how to perform more advanced transformations.</p>
			<h1 id="_idParaDest-63"><a id="_idTextAnchor065"></a>Using column transformations</h1>
			<p>Columns in a <a id="_idIndexMarker125"></a>query can be transformed in multiple ways. The simplest transform that can take place on a column is to rename it. Often, columns in source systems are named in a meaningful way within the context of the source system. For example, within a point-of-sale system, there might be a table to record each sale transaction. This table would contain a column named <strong class="source-inline">UnitPrice</strong>, which is used to record the price of each item in a sales transaction. When this data is summed to get total sales for the hour or for the day, then the name <strong class="source-inline">UnitPrice</strong> no longer makes sense in the context of an analytical data model, so it would be best to rename this column to be <strong class="source-inline">TotalSales</strong>. </p>
			<p>To rename a column, right-click the column name and click <strong class="bold">Rename</strong>. Columns can also be renamed by selecting the column (clicking on the column name) and then clicking <strong class="bold">Rename</strong> under the <strong class="bold">Any Column</strong> group in the <strong class="bold">Transform</strong> tab on the ribbon.</p>
			<p>Another key aspect of column transformations in Power Query is ensuring the proper data type is set for each <a id="_idIndexMarker126"></a>column to enable the needed data transformation or shaping required. Power Query considers the source systems when deciding on the data type to set by default; for example, if you connect to a relational database that will have defined data types, then this is used to help define the data types set in Power Query. For some data sources, Power Query needs to make its own guess on the data type, although it's important to understand that this default data type can be changed. It is also possible to force Power Query to detect the data type of a column using the <strong class="bold">Detect Data Type</strong> button under the <strong class="bold">Any Column</strong> group in the <strong class="bold">Transform</strong> tab on the ribbon.</p>
			<p>To change the data type of a column, right-click the column and select the type you'd like to change to under the <strong class="bold">Change Data Type</strong> submenu. This can also be accomplished under the <strong class="bold">Transform</strong> tab in the ribbon by clicking the <strong class="bold">Data Type</strong> drop-down menu under <strong class="bold">Any Column</strong> and selecting the type you'd like to set.</p>
			<p>Now, we'll look at the other column transforms.</p>
			<h2 id="_idParaDest-64"><a id="_idTextAnchor066"></a>Transforming any data type columns</h2>
			<p>First, let's look <a id="_idIndexMarker127"></a>at column transformations <a id="_idIndexMarker128"></a>available for any data type: </p>
			<ul>
				<li><strong class="bold">Replace Values</strong> – Replaces a defined value in the selected column with another value. This is used to replace values in the data, like how Find and Replace is used to replace values in a text file.</li>
				<li><strong class="bold">Replace Errors</strong> – Replaces error values in the selected column with another value. This is used like Replace Values except it's looking for error values in the data.</li>
				<li><strong class="bold">Fill</strong> – Replaces empty or null values in a column with the value from the adjacent row, the adjacent row being defined as either <strong class="bold">Fill Up</strong> or <strong class="bold">Fill</strong> <strong class="bold">Down</strong>.</li>
				<li><strong class="bold">Pivot Column</strong> – Similar to how pivot works in Microsoft Excel, this will create new columns using values in the selected column and turn values for each row into new rows for the <a id="_idIndexMarker129"></a>newly created columns.</li>
				<li><strong class="bold">Unpivot Columns</strong> – Generates <strong class="bold">Attribute</strong> and <strong class="bold">Value</strong> columns for selected or unselected <a id="_idIndexMarker130"></a>columns.</li>
				<li><strong class="bold">Convert to List</strong> – Converts the selected column into a list. Lists are another M query language primitive and useful for things such as parameters.</li>
			</ul>
			<h2 id="_idParaDest-65"><a id="_idTextAnchor067"></a>Transforming text columns</h2>
			<p>Column <a id="_idIndexMarker131"></a>transformations <a id="_idIndexMarker132"></a>for text data type columns include the following:</p>
			<ul>
				<li><strong class="bold">Split Column</strong> – This allows you to split a column of text by delimiter, number of characters, positions, lowercase to uppercase, uppercase to lowercase, digit to non-digit, and non-digit to digit.</li>
				<li><strong class="bold">Format</strong> – This provides formatting options that are applied to every row of the selected column. Options include changing all text to lowercase or uppercase, capitalizing each word, and trimming spaces at the beginning or end of the text. This can also be used to add a prefix or suffix to text or remove control characters.</li>
				<li><strong class="bold">Extract</strong> – <strong class="bold">Extract</strong> is like split column capability, but it just leaves the extract value in the existing column rather than splitting a new column into two. For example, if there are delimiters in your text and you only need the text before the delimiter, then this can be used rather than splitting and then removing the unneeded column.</li>
				<li><strong class="bold">Parse</strong> – When working with XML or JSON data, this is used to transform the embedded XML or JSON data and turn it into tabular data.</li>
			</ul>
			<h2 id="_idParaDest-66"><a id="_idTextAnchor068"></a>Transforming number columns</h2>
			<p>Number <a id="_idIndexMarker133"></a>data type columns can be <a id="_idIndexMarker134"></a>transformed in these ways:</p>
			<ul>
				<li><strong class="bold">Statistics</strong> – Provides basic statistical functions to perform against the selected number column. Functions include sum, minimum, maximum, median, average, standard deviation, count values, and count distinct values.</li>
				<li><strong class="bold">Standard</strong> – Performs standard mathematic operations such as adding, subtracting, multiplying, dividing, integer-divide, modulo, percentage, and percentage of a value you enter against each data value in the column.</li>
				<li><strong class="bold">Scientific</strong> – Performs <a id="_idIndexMarker135"></a>scientific mathematic operations such as absolute value, power (square, cube, n), square root, exponent, log (base-10, natural), or factorial against each data value in the column.</li>
				<li><strong class="bold">Trigonometry</strong> – Calculates <a id="_idIndexMarker136"></a>trigonometric functions against each data value in the column. Functions include sine, cosine, tangent, arcsine, arccosine, and arctangent.</li>
				<li><strong class="bold">Rounding</strong> – Calculates the rounded value of each data value in the column. Specified as rounding up, down, or to a specified decimal place.</li>
				<li><strong class="bold">Information</strong> – Transforms a number into a true/false type based on whether the data value is odd or even. Can also change data values into 1 or -1 depending on the sign of the numeric value.</li>
			</ul>
			<h2 id="_idParaDest-67"><a id="_idTextAnchor069"></a>Transforming date and time columns</h2>
			<p>Lastly, these <a id="_idIndexMarker137"></a>are the date and time column transformations <a id="_idIndexMarker138"></a>available in Power Query:</p>
			<ul>
				<li><strong class="bold">Date</strong> – Changes the date values in the data to specific dates that relate to the date in the data or an age in days or finds the earliest or latest date in the data. It's also possible to change it to just the year, month, or day or day of the week, quarter, and so on using the <strong class="bold">Date</strong> transform.</li>
				<li><strong class="bold">Time</strong> – Changes, extracts, or aggregates the time values. This also works on columns with the date/time data type.</li>
				<li><strong class="bold">Duration</strong> – Extracts components (such as just the seconds or just the minutes) from a duration in the data. This also allows for the transformation into decimal forms of the duration <a id="_idIndexMarker139"></a>in years, days, hours, minutes, and seconds. You <a id="_idIndexMarker140"></a>can also multiply or divide each value in the data by a value entered or perform mathematical functions (sum, min, max, average, or median) against the values in the data.</li>
			</ul>
			<h2 id="_idParaDest-68"><a id="_idTextAnchor070"></a>Adding columns</h2>
			<p>There are multiple ways to add columns to a query using Power Query. New columns can be created using <a id="_idIndexMarker141"></a>typed-in examples in a low-code experience <a id="_idIndexMarker142"></a>or new columns can be created using Power Query M formula functions (<a href="https://docs.microsoft.com/powerquery-m/quick-tour-of-the-power-query-m-formula-language">https://docs.microsoft.com/powerquery-m/quick-tour-of-the-power-query-m-formula-language</a>) to derive <a id="_idIndexMarker143"></a>new columns from existing or generated data. These commands are available under the <strong class="bold">Add Column</strong> tab in the ribbon of Power Query:</p>
			<ul>
				<li><strong class="bold">Column From Example</strong> – This allows you to simply start typing the values you'd like to see in the new column, and from there Power Query will generate new column data using column operations in the examples you manually provide. This is useful if you're not aware of other column transform capabilities because it shows you the detected transform.</li>
				<li><strong class="bold">Custom Column</strong> – This is where you can specify the specific M formula to transform data from other columns into the new column. The full syntax reference for the Power Query M formula is available on the Microsoft documentation website (<a href="https://docs.microsoft.com/powerquery-m/power-query-m-function-reference">https://docs.microsoft.com/powerquery-m/power-query-m-function-reference</a>).</li>
				<li><strong class="bold">Invoke Custom Function</strong> – This is used when you've created custom functions either directly from M query code or by generating a function from a query that uses parameters. This provides reusability across custom functions for multiple queries and columns.</li>
				<li><strong class="bold">Conditional Column</strong> – This provides the ability to create a new column of data values based on values from another column using <strong class="source-inline">IF</strong>, <strong class="source-inline">ELSE IF</strong>, and <strong class="source-inline">ELSE</strong> logic to determine the values of the new column. For example, this would allow you to make a new column based on unique values in a column and do it using a low-code GUI interface to define the logic.</li>
				<li><strong class="bold">Index Column</strong> – Index columns are used when you need to generate a column of increasing numbers for each row. This is often used when generating surrogate keys for a table or query. Values can start at 0 or 1 or be custom-defined along with the incremental value for each row.</li>
				<li><strong class="bold">Duplicate Column</strong> – This simply duplicates the selected column.</li>
			</ul>
			<p>It is also <a id="_idIndexMarker144"></a>possible to add a new column using the same text, number, and data and time transforms discussed previously by invoking these under the <strong class="bold">Add Column</strong> tab in <a id="_idIndexMarker145"></a>the ribbon. Some column transformations are also accessible from the right-click menu when clicking on a column name.</p>
			<p>Next, we will discover row transformations. The ability to transform rows when needed is important as it helps ensure data quality and helps us build analytics that can be trustworthy.</p>
			<h1 id="_idParaDest-69"><a id="_idTextAnchor071"></a>Using row transformations</h1>
			<p>In addition to <a id="_idIndexMarker146"></a>the row transformations mentioned in the <em class="italic">Sorting and filtering</em> section, there are row transformations that can be helpful under the <strong class="bold">Transform</strong> tab of the ribbon:</p>
			<ul>
				<li><strong class="bold">Replace Values</strong> – This provides a user interface where you define the value being searched for and the value you want to replace. It works the same as Find and Replace works on most text editors, such as Notepad.</li>
				<li><strong class="bold">Replace Errors</strong> – This is similar to <strong class="bold">Replace Values</strong> where it provides an option for the replacement of rows that contain error values. The definition of an error will depend on the data type.</li>
				<li><strong class="bold">Reverse Rows</strong> – This is a way of sorting the rows such that the data is shown or stored in reverse order. The first row becomes the last, the last row becomes the first, and all order in between is preserved. </li>
				<li><strong class="bold">Transpose</strong> – Transpose functions as both a row and a column transformation as it turns each row into its own column and each column into a row. </li>
			</ul>
			<p>In addition to the data cleansing and transformation capabilities of Power Query, there is also the ability to <a id="_idIndexMarker147"></a>combine data from multiple queries or sources. In the next section, we'll see how we can combine data using Power Query.</p>
			<h1 id="_idParaDest-70"><a id="_idTextAnchor072"></a>Combining data</h1>
			<p>Data can be <a id="_idIndexMarker148"></a>combined from multiple queries or even multiple source files depending on the nature of the data connected in the data model.</p>
			<p>Power Query uses different terminology compared to technologies such as relational databases, so it's important to understand both the concepts as well as the terminology used for the PL-300 exam. </p>
			<h2 id="_idParaDest-71"><a id="_idTextAnchor073"></a>Using merge queries</h2>
			<p><strong class="bold">Merge queries</strong> are used <a id="_idIndexMarker149"></a>when we want to merge or combine <a id="_idIndexMarker150"></a>columns from multiple queries where some columns are different. This often <a id="_idIndexMarker151"></a>happens in <strong class="bold">data warehouse</strong> environments as data tends to be <strong class="bold">normalized</strong> or split across multiple tables (imported into a Power BI data model as a query). For more information on why data is normalized in a data warehouse, we recommend reading <em class="italic">The Data Warehouse Toolkit: The Definitive Guide to Dimensional Modeling</em> by Ralph Kimball. Tables contain key columns that allow individual records to be merged or joined together when needed. Normalizing data is standard practice for properly designed data warehouses. For <a id="_idIndexMarker152"></a>more information on <strong class="bold">data warehouse design</strong>, we recommend <a id="_idIndexMarker153"></a>looking at resources on <strong class="bold">dimensional modeling</strong>, such as <a href="https://wikipedia.org/wiki/Dimensional_modeling">https://wikipedia.org/wiki/Dimensional_modeling</a>.</p>
			<p>In order to use merge queries in Power Query, you need to have at least two queries that contain data that you'd like to merge into one query by bringing together columns from both queries. Ideally, these queries contain columns that allow the data to relate to each other, typically called <strong class="bold">key</strong> or <strong class="bold">join key</strong> columns. If the queries don't contain a key, then it may be possible to use other data transformation capabilities (as discussed earlier in the <em class="italic">Using column transformations</em> section) to create keys that would allow the data to be merged properly.</p>
			<p>Using merge queries requires one of the two queries to be selected from the <strong class="bold">Queries</strong> pane on the leftmost side of the Power Query Editor window. Then, you click the <strong class="bold">Merge Queries</strong> button under <strong class="bold">Combine</strong> on the <strong class="bold">Home</strong> tab of the ribbon. There is the option to just merge the queries or merge the queries as a new query. </p>
			<p>The selected table will show at the top of the merge user interface that is shown and the second query can be selected from the drop-down menu in the center. Now both queries are shown in the preview, and <a id="_idIndexMarker154"></a>you only need to select the key column or <a id="_idIndexMarker155"></a>join columns from both queries and then select <strong class="bold">Join Kind</strong>. There are six types of joins supported by merge:</p>
			<ul>
				<li><strong class="bold">Left Outer</strong> – Brings <a id="_idIndexMarker156"></a>all rows from the first query and only matching records from the second query.</li>
				<li><strong class="bold">Right Outer</strong> – Brings <a id="_idIndexMarker157"></a>all rows from the second query and only matching records from the first query.</li>
				<li><strong class="bold">Full Outer</strong> – Brings <a id="_idIndexMarker158"></a>all rows from both queries, no matter whether they are matching or not. If there are any rows that do not match, this will create null values for some columns.</li>
				<li><strong class="bold">Inner</strong> – Brings <a id="_idIndexMarker159"></a>only rows that match from both queries. </li>
				<li><strong class="bold">Left Anti</strong> – Brings only <a id="_idIndexMarker160"></a>rows from the first query that don't have matching rows in the second query.</li>
				<li><strong class="bold">Right Anti</strong> – Brings <a id="_idIndexMarker161"></a>only rows from the second query that don't have matching rows in the first query.</li>
			</ul>
			<p>Additionally, you <a id="_idIndexMarker162"></a>can use <strong class="bold">fuzzy matching</strong> for the join, which means the values in the key columns do not need to match exactly. Fuzzy matching can be configured <a id="_idIndexMarker163"></a>using these settings:</p>
			<ul>
				<li><strong class="bold">Similarity threshold</strong> – This setting needs to be a decimal value between 0.00 and 1.00. A value of 1.00 means every value needs to match exactly, while a value of 0.00 means any values will match.</li>
				<li><strong class="bold">Ignore case</strong> – Without this checkbox enabled, values will have to match exactly, while this checkbox will enable values to match even if the case in the text does not match.</li>
				<li><strong class="bold">Match by combining text parts</strong> – When this option is enabled, Power Query will try to match parts of the text to find matches. For example, if one column contains "wind" and another contains "mill," then Power Query will try to use these two parts to match against "windmill."</li>
				<li><strong class="bold">Maximum number of matches</strong> – This option can be used to enforce a limited number of matches to take place during the merge. For example, if you only want to return the <a id="_idIndexMarker164"></a>first match (not all matches), then using "1" in this option should be used.</li>
				<li><strong class="bold">Transformation table</strong> – This option will keep track of fuzzy matches and record instances where "wind" and "mill" match to "windmill." This table needs to contain <strong class="bold">To</strong> and <strong class="bold">From</strong> columns.</li>
			</ul>
			<h2 id="_idParaDest-72"><a id="_idTextAnchor074"></a>Append queries</h2>
			<p><strong class="bold">Append queries</strong> are used <a id="_idIndexMarker165"></a>when you want to combine rows from <a id="_idIndexMarker166"></a>multiple queries into a single query. For example, a point-of-sale database might keep track of sales for each store in unique tables. After connecting to the sales database and each table getting a unique query in the Power BI data model, an append query can be used to append or add the rows from one query to another. Append queries need at least two queries to combine; however, it is possible to select <em class="italic">three or more tables</em> and Power Query will combine them all.</p>
			<p>Append queries work best when the columns between all the queries match exactly. Differing column names will result in some rows having null values as they don't have a corresponding value for the column in the other table. Append queries can sometimes handle different data types in matching columns by allowing whole numbers and text to be presented in the append output. If this occurs, it is advised to manage the column and set a unified data type across all rows in the column. In the relational database world, we often call this type of query a <strong class="source-inline">UNION</strong> query, as it combines records from multiple tables into a single table.</p>
			<p>To use append queries, just click <strong class="bold">Append Queries</strong> under <strong class="bold">Combine</strong> on the <strong class="bold">Home</strong> tab of the ribbon. Then, you just need to select the queries you'd like to append and click <strong class="bold">OK</strong>.</p>
			<h2 id="_idParaDest-73"><a id="_idTextAnchor075"></a>Combine files</h2>
			<p>Sometimes, data is <a id="_idIndexMarker167"></a>stored as files in a filesystem. In cases like that, it may be ideal to <a id="_idIndexMarker168"></a>simply select an entire directory or folder of files as a data source, especially when all files have a similar layout or structure. For example, we may receive an extract of sales data from an external partner and that extract may come in CSV files partitioned by month. All the extracted files came from the same source system at the partner, so they all have the same structure. We can use the folder data source in Power BI to connect to the folder of files, which will set up a query in Power Query that lists each file, the extension of the file, and the folder path to each file, among other attributes.</p>
			<p>Once the query to the folder is in place, we can then use the <strong class="bold">combine files</strong> capability to bring the data from all these files together into one query in a manner like append queries (records from each file get combined into a single query with data in matching columns stored together).</p>
			<p>To use <a id="_idIndexMarker169"></a>combine files, just open a folder of files that can be read by Power BI (see <a href="B18086_02_epub.xhtml#_idTextAnchor025"><em class="italic">Chapter 2</em></a>, <em class="italic">Connecting to Data Sources</em>, for supported data file formats) and then click <strong class="bold">Combine Files</strong> under <strong class="bold">Combine</strong> on the <strong class="bold">Home</strong> tab of the ribbon. Power Query <a id="_idIndexMarker170"></a>will evaluate the files and start with showing a preview and the detected file attributes (<strong class="bold">File Origin</strong>, <strong class="bold">Delimiter</strong>, <strong class="bold">Data Type Detection</strong>, and so on). For CSV and Excel data types, each file found can be examined before the combine action executes to ensure proper configurations (delimiter, worksheet, and so on) are set. </p>
			<p class="callout-heading">Note</p>
			<p class="callout">Data files in the folder need to be of the same data type and the same structure for combine files to be most successful. Different data types will be met with an error, while differing file structures will result in null values where column names do not match.</p>
			<p>We've now explored many methods for combining or mashing up data, correcting errors in our data, and performing data analysis. The next section will uncover how we can use advanced AI tools available in Power BI and other services that unlock even more value from our data.</p>
			<h1 id="_idParaDest-74"><a id="_idTextAnchor076"></a>Enriching data with AI</h1>
			<p>Power Query <a id="_idIndexMarker171"></a>also includes ways to enhance data using AI <a id="_idIndexMarker172"></a>services from Microsoft. These features integrate <a id="_idIndexMarker173"></a>with <strong class="bold">Microsoft Azure</strong> <strong class="bold">Cognitive Services</strong> and <a id="_idIndexMarker174"></a>require a <strong class="bold">Power BI Premium</strong> capacity <a id="_idIndexMarker175"></a>or per-user license. The <a id="_idIndexMarker176"></a>options for <strong class="bold">AI Insights</strong> include the following:</p>
			<ul>
				<li><strong class="bold">Language detection</strong></li>
				<li><strong class="bold">Key phrase extraction</strong></li>
				<li><strong class="bold">Sentiment analysis</strong></li>
				<li><strong class="bold">Image tagging</strong></li>
			</ul>
			<p>Let's consider why each of these would be useful. </p>
			<h2 id="_idParaDest-75"><a id="_idTextAnchor077"></a>Language detection</h2>
			<p>When data <a id="_idIndexMarker177"></a>contains free-text fields, and we <a id="_idIndexMarker178"></a>want to use those in analysis, it's important to first ensure we know the language used in the text. The accuracy and usability of subsequent text analysis are enhanced when the language of a given text block is known. AI Insights provides capabilities to detect language and it is recommended to start with language detection before performing key phrase extraction or sentiment analysis. AI Insights can detect up to 120 languages and returns both the name of the language as well as the ISO code of the identified language. For example, the ISO code of the English language is "en."</p>
			<h2 id="_idParaDest-76"><a id="_idTextAnchor078"></a>Key phrase extraction</h2>
			<p>When <a id="_idIndexMarker179"></a>analyzing text, especially larger-sized <a id="_idIndexMarker180"></a>groupings of text, it's valuable to shorten or break down the key phrases from that text to better understand it. For example, if we have the sentence <em class="italic">"Well!" thought Alice to herself, "after such a fall as this, I shall think nothing of tumbling downstairs!"</em> from Lewis Carrol's <em class="italic">Alice's Adventures in Wonderland</em> we can <a id="_idIndexMarker181"></a>see that <a id="_idIndexMarker182"></a>the <strong class="bold">key phrases</strong> or <strong class="bold">keywords</strong> are <em class="italic">tumbling</em>, <em class="italic">stairs</em>, <em class="italic">Alice</em>, and <em class="italic">fall</em>.</p>
			<p><strong class="bold">Key phrase extraction</strong> is useful for categorizing text. For example, if there are multiple customer surveys <a id="_idIndexMarker183"></a>that contain the same key phrases or keywords, then it's possible that multiple customers are commenting on the same topic or idea. This makes it easier to identify the most important topics from a customer survey based on the contents of a free-text field in the data. This analysis can be reliably completed by the AI Insights capability without having to rely on a human to read each survey response and manually come up with the keywords.</p>
			<h2 id="_idParaDest-77"><a id="_idTextAnchor079"></a>Sentiment analysis</h2>
			<p>A sentiment is a <a id="_idIndexMarker184"></a>feeling or judgment of something and in the field of analytics, sentiment analysis is a type of language or <strong class="bold">text-processing algorithm</strong> that will <a id="_idIndexMarker185"></a>break down parts of a text grouping into at least three categories: <em class="italic">positive</em>, <em class="italic">neutral</em>, and <em class="italic">negative</em>. </p>
			<p>In Power <a id="_idIndexMarker186"></a>Query, the sentiment analysis capability will evaluate a text input and return a score. For example, if you have a query of customer survey results, there might be a free-text field where customers write down their thoughts about your retail organization. The survey takers will complete the survey and might respond with text such as "<em class="italic">This was a wonderful shopping experience</em>" or "<em class="italic">You didn't have the product I wanted</em>." When the survey results are compiled, these free-text values will be stored in a text field and the sentiment analysis feature can decide whether the sentiment of the text entered is positive, negative, or neutral. If there are 500 survey responses, then it's possible to use this capability combined with other aggregation and transformation capabilities to determine the sum of positive, negative, and neutral results based on the free-text field alone.</p>
			<p>The sentiment analysis capability takes the entire input field as input into the pretrained algorithm so, as with any text analytics process, it's important to understand how this works, as there may <a id="_idIndexMarker187"></a>be blocks of text such as "<em class="italic">At first, I didn't find the product I wanted but there was a very helpful associate who showed me where the product was and helped ensure I had everything I needed</em>." In this example, there are <a id="_idIndexMarker188"></a>parts that could be interpreted as negative and others that could be interpreted as positive; if analysis is performed on the entire block of text, then it's likely to have a positive sentiment. </p>
			<p>Sentiment scoring will return a decimal value between 0 and 1, where negative sentiment can be interpreted as being between 0 and 0.5 while positive sentiment is 0.5 and greater. When sentiment is detected as neutral, a value of 0.5 is returned.</p>
			<p>It's also important to note that support for this feature varies by language. Currently, English, German, Spanish, and French are supported, with others in preview.</p>
			<h2 id="_idParaDest-78"><a id="_idTextAnchor080"></a>Image tagging</h2>
			<p>Sometimes, data in a query contains an image (Base64 encoded) or a URL of an image. In those cases, we can <a id="_idIndexMarker189"></a>use the <strong class="bold">image tagging</strong> capability <a id="_idIndexMarker190"></a>of AI Insights. The image tagging capability uses a pretrained algorithm that is trained to identify over 2,000 objects for general object recognition. It is not trained to identify specialized objects or non-widely known objects. For example, the image in <em class="italic">Figure 4.2</em> of a bicycle returns the tags "grass," "outdoor," "bicycle," "tree," "red," "parked," "transport," "sidewalk," and "walkway":</p>
			<div>
				<div id="_idContainer026" class="IMG---Figure">
					<img src="image/B18086_04_002.jpg" alt="Figure 4.2 – Public domain image of a bicycle
" width="917" height="652"/>
				</div>
			</div>
			<p class="figure-caption">Figure 4.2 – Public domain image of a bicycle</p>
			<p class="figure-caption">Source: https://live.staticflickr.com/3954/15655615295_3a46e83728_b.jpg</p>
			<p>With these tags, we can draw conclusions that this is a photo of a red bicycle that is outdoors and parked near <a id="_idIndexMarker191"></a>trees, grass, and a sidewalk or walkway. If we remove all the words that <a id="_idIndexMarker192"></a>are not product descriptions, we can understand that this is a "red bicycle." The way this could be useful for our retail business example would be to enrich product information with additional metadata that can help categorize products.</p>
			<p>To use the AI Insights capabilities in Power Query, you simply need to click the <strong class="bold">Text Analytics</strong> button under <strong class="bold">AI Insights</strong> on the <strong class="bold">Home</strong> or <strong class="bold">Add Column</strong> tabs of the ribbon. You will then be asked to sign into your account used for Power BI. This will perform the checks to ensure you have access to Power BI Premium. Then, you'll see the three options for <strong class="bold">Text Analytics</strong>: <strong class="bold">Detect language</strong>, <strong class="bold">Extract key phrases</strong>, and <strong class="bold">Score sentiment</strong>. At the bottom, there is a drop-down menu to select which Premium capacity should be used to execute this AI process and on the right-hand side, there are options for each algorithm. For each algorithm, you just need to select the column that contains the text to be used as input for the selected algorithm. The ISO code for the language used in the text data is an optional parameter for <strong class="bold">Extract key phrases</strong> and <strong class="bold">Score sentiment</strong>. After clicking <strong class="bold">OK</strong>, new columns will be added to the query:</p>
			<div>
				<div id="_idContainer027" class="IMG---Figure">
					<img src="image/B18086_04_003.jpg" alt="Figure 4.3 – List of output columns from each AI Insights function
" width="1580" height="818"/>
				</div>
			</div>
			<p class="figure-caption">Figure 4.3 – List of output columns from each AI Insights function</p>
			<p>These built-in <a id="_idIndexMarker193"></a>AI capabilities make enriching data very <a id="_idIndexMarker194"></a>easy with minimal expertise needed. Now, we will look at how we can enrich data <a id="_idIndexMarker195"></a>further using advanced, integrated capabilities with the Azure <strong class="bold">Machine Learning</strong> (<strong class="bold">ML</strong>) service.</p>
			<h2 id="_idParaDest-79"><a id="_idTextAnchor081"></a>Azure ML</h2>
			<p>Like how AI Insights allows integration with the pretrained text analytics and computer vision models previously <a id="_idIndexMarker196"></a>described, it is also possible to use custom-trained models from Azure <a id="_idIndexMarker197"></a>ML within Power Query. Many organizations use the Azure ML cloud service to build custom ML models for scalable predictive analysis.</p>
			<p>To use the Azure ML capability, you must not only be a Power BI Premium user but also have a <strong class="bold">Reader role</strong> for deployed <a id="_idIndexMarker198"></a>models in the Azure ML service. The Azure ML integration <a id="_idIndexMarker199"></a>works like the <strong class="bold">Cognitive Services</strong> (text analytics, computer vision) integration we used for language detection, key phrase extraction, sentiment scoring, and image tagging, where a desired model or algorithm is selected along with an input column. Output columns will vary depending on the nature of the model used.</p>
			<p>The AI capabilities of Power Query can be useful and provide a unique set of capabilities not offered by other data transformation tools in Power Query. In the next section, we'll discuss advanced <a id="_idIndexMarker200"></a>operations that allow you to fine-tune your data <a id="_idIndexMarker201"></a>in Power BI using different programming languages.</p>
			<h1 id="_idParaDest-80"><a id="_idTextAnchor082"></a>Using advanced operations of Power Query</h1>
			<p>Power Query is <a id="_idIndexMarker202"></a>truly a powerful tool for data transformation that helps to enable capabilities that often meet all the needs for modern reporting, analytics, and visual storytelling. While this is true, there may be cases where advanced operations need to take place to meet the business needs. For these cases, Power BI provides additional capabilities that we'll discuss now.</p>
			<h2 id="_idParaDest-81"><a id="_idTextAnchor083"></a>Using the Advanced Editor</h2>
			<p>At the heart of Power Query is the data mashup engine. This engine uses the Power Query M language <a id="_idIndexMarker203"></a>for defining inputs, transformations, and <a id="_idIndexMarker204"></a>outputs. The M language is a case-sensitive and functional <a id="_idIndexMarker205"></a>language that is like <strong class="bold">F#</strong> (<a href="https://fsharp.org/">https://fsharp.org/</a>). The Power Query user interface provides a fast and efficient way of generating Power Query M code that allows developers <a id="_idIndexMarker206"></a>to be productive. At the same time, the <strong class="bold">Advanced Editor</strong> functionality also allows the generated M code to be viewed and edited if needed. It's also possible to create a Power BI dataset using Power Query and only write the M code manually, using the Advanced Editor.</p>
			<p>Microsoft provides a full reference of the Power Query M formula language at this website: <a href="https://docs.microsoft.com/powerquery-m/">https://docs.microsoft.com/powerquery-m/</a>. The PL-300 exam is not an exam on the Power Query M language, but it is advised to know the basic structure of a Power Query M formula. </p>
			<p>Power Query M formulas contain values made up of variables and expressions. These components are contained within a <strong class="source-inline">let</strong> expression that also uses <strong class="source-inline">in</strong>. For example, this is a basic method of manually entering three records of sales ID and sales date data into a query:</p>
			<pre class="source-code">let sales = Table.FromRecords({</pre>
			<pre class="source-code">    [SaleID = 1, SaleDate = "2021-10-16"],</pre>
			<pre class="source-code">    [SaleID = 2, SaleDate = "2021-10-16"],</pre>
			<pre class="source-code">    [SaleID = 3, SaleDate = "2021-10-17"]})</pre>
			<pre class="source-code">in  </pre>
			<pre class="source-code">    sales</pre>
			<p>Once the data is in the query, it's possible to transform it using the variety of available functions, such as transforming a text data type to a date data type for the <strong class="source-inline">SaleDate</strong> column in our data:</p>
			<pre class="source-code">let</pre>
			<pre class="source-code">    sales = Table.FromRecords({</pre>
			<pre class="source-code">    [SaleID = 1, SaleDate = "2021-10-16"],</pre>
			<pre class="source-code">    [SaleID = 2, SaleDate = "2021-10-16"],</pre>
			<pre class="source-code">    [SaleID = 3, SaleDate = "2021-10-17"]}),</pre>
			<pre class="source-code">    #"Changed Type" = Table.TransformColumnTypes(sales,{{"SaleDate", type date}})</pre>
			<pre class="source-code">in</pre>
			<pre class="source-code">    #"Changed Type"</pre>
			<p>By adding the line after our data, we can use the <strong class="source-inline">TransformColumnTypes</strong> function to transform the <strong class="source-inline">SaleDate</strong> column from a text type to a date type. The value after <strong class="source-inline">in</strong> also changes as <a id="_idIndexMarker207"></a>this defines where we are in the <a id="_idIndexMarker208"></a>stage of transformation. As more transformations get added to the code, <strong class="source-inline">in</strong> will typically define the latest changes to the data. This enables easy undoing and navigation of the list of transformations within the Power Query window.</p>
			<p>Microsoft provides a full reference of the Power Query M functions available here: <a href="https://docs.microsoft.com/powerquery-m/power-query-m-function-reference">https://docs.microsoft.com/powerquery-m/power-query-m-function-reference</a>.</p>
			<p>To access the Advanced Editor in Power Query, click <strong class="bold">Advanced Editor</strong> under the <strong class="bold">Advanced</strong> section on the <strong class="bold">View</strong> tab of the ribbon.</p>
			<h2 id="_idParaDest-82"><a id="_idTextAnchor084"></a>Using the Query Dependencies tool</h2>
			<p>For complex data models, it's very helpful to understand the relationship between different queries, staging <a id="_idIndexMarker209"></a>queries, and transformations. While the data model <a id="_idIndexMarker210"></a>view in the main Power BI window provides a nice relationship view of the different queries in a data model, it shows the end-product of the work completed in Power Query. To see the full picture of what is happening with Power Query, the <strong class="bold">Query Dependencies</strong> tool can be used. The <strong class="bold">Query Dependencies</strong> tool gives a graphical picture of all data sources, merge and append queries, AI functions, and other transformations that take place within a data model.</p>
			<div>
				<div id="_idContainer028" class="IMG---Figure">
					<img src="image/B18086_02_004.jpg" alt="Figure 4.4 – Query Dependencies tool
" width="600" height="586"/>
				</div>
			</div>
			<p class="figure-caption">Figure 4.4 – Query Dependencies tool</p>
			<p>To <a id="_idIndexMarker211"></a>access the <strong class="bold">Query Dependencies</strong> tool, click <strong class="bold">Query Dependencies</strong> under <a id="_idIndexMarker212"></a>the <strong class="bold">Dependencies</strong> section of the <strong class="bold">View</strong> tab on the Power Query ribbon, as shown in <em class="italic">Figure 4.4</em>.</p>
			<h2 id="_idParaDest-83"><a id="_idTextAnchor085"></a>R and Python scripts</h2>
			<p>In addition <a id="_idIndexMarker213"></a>to all the <a id="_idIndexMarker214"></a>capabilities <a id="_idIndexMarker215"></a>of Power <a id="_idIndexMarker216"></a>Query, there is also an option to utilize Python or R to help transform data in Power Query. <strong class="bold">Python</strong> (<a href="https://www.python.org/">https://www.python.org/</a>) is an <strong class="bold">open source</strong>, interpreted, and general-purpose programming <a id="_idIndexMarker217"></a>language that <a id="_idIndexMarker218"></a>is often used in <strong class="bold">data science</strong>, <strong class="bold">data visualization</strong>, and <strong class="bold">ML</strong> applications <a id="_idIndexMarker219"></a>today. <strong class="bold">R</strong> (<a href="https://www.r-project.org/">https://www.r-project.org/</a>) is an <strong class="bold">open source</strong> statistical <a id="_idIndexMarker220"></a>programming language that is also used <a id="_idIndexMarker221"></a>in data science and data visualization applications.</p>
			<p>This requires the computer running Power BI Desktop/Power Query to also have the R or Python execution environment installed. To execute Python scripts in Power BI, there are required libraries that <a id="_idIndexMarker222"></a>must be installed in our Python environment: <strong class="source-inline">pandas</strong> (<a href="https://pandas.pydata.org/">https://pandas.pydata.org/</a>) and <strong class="source-inline">matplotlib</strong> (<a href="https://matplotlib.org/">https://matplotlib.org/</a>). <strong class="source-inline">pandas</strong> is an open source <a id="_idIndexMarker223"></a>library for data transformation and analysis, while <strong class="source-inline">matplotlib</strong> is an open source library for data visualization. Installation of these libraries in your Python <a id="_idIndexMarker224"></a>environment may vary but is usually <a id="_idIndexMarker225"></a>accomplished by running the following commands:</p>
			<p class="source-code">python –m pip install pandas</p>
			<p class="source-code">python -m pip install matplotlib </p>
			<p>Or, run <a id="_idIndexMarker226"></a>the following commands:</p>
			<p class="source-code">pip3 install pandas</p>
			<p class="source-code">pip3 install matplotlib</p>
			<p>Once the <a id="_idIndexMarker227"></a>required environment and/or libraries are installed, you can configure Power BI to use these on the <strong class="bold">Options</strong> screen under <strong class="bold">Options and Settings</strong> on the <strong class="bold">File</strong> tab of the ribbon. Set the location of the R or Python environment you'd like to use with Power BI by selecting it in the drop-down menu under the appropriate setting.</p>
			<p>With the R and Python scripting capabilities, it's possible to use these additional data transformation and analysis languages to prepare data in Power Query for reporting and visualization with Power BI.</p>
			<h1 id="_idParaDest-84"><a id="_idTextAnchor086"></a>Summary</h1>
			<p>In this chapter, we learned about the vast array of data transformation and mashup capabilities that are provided by Power Query inside Power BI. We started with sorting and filtering, which allow data to be ordered and filtered as required. After that, we looked at managing columns and the transformations we can make to those columns to help shape the structure of the data in our data model. Row transformations also played a key role in our understanding of how data quality impacts the overall value of the data model, because if we have null or error values in our data, we won't be able to draw many conclusions from the data; row transformations in Power Query allow us to handle those cases.</p>
			<p>Then, we looked at how Power Query can be used to combine data. Data can be combined using merge queries and append queries. We also looked at how data can be enriched using pretrained AI capabilities as well as integration with the Azure ML service. </p>
			<p>Lastly, we looked at advanced data transformation capabilities using the Power Query M language, R, and Python scripting. These advanced capabilities make the data transformation possibilities endless.</p>
			<p>In the next chapter, we will look at designing a data model. A well-designed data model will help make creating dynamic and impactful reports and dashboards easy. A properly designed data model is also required to ensure reports and dashboards meet business requirements.</p>
			<h1 id="_idParaDest-85"><a id="_idTextAnchor087"></a>Questions </h1>
			<ol>
				<li>If you need to transform a column by adding a prefix to every record, which transform would you use?<ol><li>Format</li><li>Pivot</li><li>Replace Values</li><li>Parse</li></ol></li>
				<li>What is used to combine data from multiple queries or tables?<ol><li>Merge query</li><li>Join query</li><li>Append query</li><li>Left Outer query</li></ol></li>
				<li>What are some of the ways Power BI can be used to enrich data using AI?<ol><li>Linear regression, language detection, key phrase extraction, and sentiment analysis</li><li>Language detection, key phrase extraction, and sentiment analysis</li><li>Language detection and key phrase extraction</li><li>Image tagging, key phrase extraction, language detection, and sentiment analysis</li></ol></li>
			</ol>
		</div>
	</div>
</div>
</body>
</html>