<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough HTML, CSS and Layout to Be Dangerous: An Introduction to Modern Website Creation and Templating Systems</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137843053.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="chap-num" id="ch07"><span epub:type="pagebreak" id="page_157"></span>Chapter 7</h2>
<h2 class="chap-title">CSS Values: Color and Sizing</h2>
<p class="noindent">Now that we’ve learned how to make our site’s skeleton, it’s time to start fleshing it out with some more CSS values. In this chapter, we’ll learn about two of the most important kinds of values that CSS can apply to HTML elements: color and sizing. These will allow us to go from putting elements on a page (<a href="ch06.xhtml#ch06">Chapter 6</a>) to controlling the color of the elements and how big they are.</p>
<p class="indent">Values in a CSS declaration (<a href="ch05.xhtml#ch5fig9">Figure 5.9</a>) can take a lot of different forms, from numbers, to dimensions, to idiosyncratic options, to colors, etc. On top of all that, there are shorthand methods that let you write multiple style properties and values on a single line. Most CSS declarations are self-explanatory—not too many people are going to be confused by <span class="green-d"><code><strong>text-align: left</strong></code></span>—but there are quite a few that have extra complications, weird exceptions, or just odd ways of defining a value.</p>
<p class="indent">The next few sections are going to recap some style values that you might have seen before, but we’ll also dive into some of the less obvious use cases.</p>
<section>
<h3 class="h3" id="sec7_1">7.1 CSS Color</h3>
<p class="noindent">So far in this tutorial we’ve defined colors with descriptive words like <span class="green-d"><code><strong>red</strong></code></span>, <span class="green-d"><code><strong>green</strong></code></span>, and <span class="green-d"><code><strong>lightgray</strong></code></span>. CSS supports a large number of such <em>color names</em>, and there are online references that list all the color names supported by all browsers. It’s not the most flexible or even the most common system of defining CSS colors, though, and in this section we’ll discuss other, more powerful ways of applying colors in CSS.</p>
<section>
<h4 class="h4" id="sec7_1_1"><span epub:type="pagebreak" id="page_158"></span>7.1.1 Hexadecimal Colors</h4>
<p class="noindent">As discussed previously in <a href="ch04.xhtml#box4_2">Box 4.2</a>, one common method for defining colors is <em>hexadecimal RGB</em> (red-green-blue). While this name might sound complicated, in practice the concept is fairly simple.</p>
<p class="indent">A quick way to show how hexadecimal color works is to change the color of the red link text on our sample page to its equivalent hexadecimal RGB color. Change the word <span class="green-d"><code><strong>red</strong></code></span> in the <span class="green-d"><code><strong>color</strong></code></span> property to the one shown in <a href="ch07.xhtml#ch7list1">Listing 7.1</a>.</p>
<p class="listing" id="ch7list1"><strong>Listing 7.1:</strong> Switching from a color name to a specific color value.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_blue1"><em>/* GLOBAL STYLES */</em></span>
<span class="pd_green1"><strong>a</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>color</strong></span>: <span class="grey"><strong>#ff0000</strong></span>;</span>
}</pre>
<p class="noindent">Now when you save and refresh your browser, the link text will still be the same bright red (and if something is different, check your work!).</p>
<p class="indent">The reason the color system is called <em>hexadecimal</em> RGB is that it uses base-16 numbers instead of the usual base 10 (“hexadecimal” is a mishmash of Greek and Latin meaning “six” (hex) and “tenth” (decimal)). In hexadecimal, or <em>hex</em> for short, <span class="green-d"><code><strong>0</strong></code></span> is equal to 0 and <span class="green-d"><code><strong>f</strong></code></span> is equal to 15—letting you count 16 values in a single numeral (<a href="ch07.xhtml#ch7tab1">Table 7.1</a>).</p>
<figure class="table" id="ch7tab1">
<figcaption>
<p class="title-f"><strong>Table 7.1:</strong> Counting in hex.</p>
</figcaption>
<table class="all">
<tbody>
<tr>
<td class="border1"><p class="tab-para">0</p>
<p class="tab-para">0</p></td>
<td class="border1"><p class="tab-para">1</p>
<p class="tab-para">1</p></td>
<td class="border1"><p class="tab-para">2</p>
<p class="tab-para">2</p></td>
<td class="border1"><p class="tab-para">3</p>
<p class="tab-para">3</p></td>
<td class="border1"><p class="tab-para">4</p>
<p class="tab-para">4</p></td>
<td class="border1"><p class="tab-para">5</p>
<p class="tab-para">5</p></td>
<td class="border1"><p class="tab-para">6</p>
<p class="tab-para">6</p></td>
<td class="border1"><p class="tab-para">7</p>
<p class="tab-para">7</p></td>
<td class="border1"><p class="tab-para">8</p>
<p class="tab-para">8</p></td>
<td class="border1"><p class="tab-para">9</p>
<p class="tab-para">9</p></td>
<td class="border1"><p class="tab-para">10</p>
<p class="tab-para">a</p></td>
<td class="border1"><p class="tab-para">11</p>
<p class="tab-para">b</p></td>
<td class="border1"><p class="tab-para">12</p>
<p class="tab-para">c</p></td>
<td class="border1"><p class="tab-para">13</p>
<p class="tab-para">d</p></td>
<td class="border1"><p class="tab-para">14</p>
<p class="tab-para">e</p></td>
<td class="border1"><p class="tab-para">15</p>
<p class="tab-para">f</p></td>
</tr>
</tbody>
</table>
</figure>
<p class="indent">In base 10, we can count from 0 to 99 with two digits, where 99 = 10<sup>2</sup> − 1. Similarly, hex lets us count from 0 to <code>ff</code> = 16<sup>2</sup>−1 = 255. In other words, putting two hex numbers next to each other lets us count from 0 to 255 using just two characters, with <span class="green-d"><code><strong>00</strong></code></span> = 0 and <span class="green-d"><code><strong>FF</strong></code></span> or <span class="green-d"><code><strong>ff</strong></code></span> = 255. (CSS hex is case-insensitive, so it doesn’t matter if you use upper- or lowercase letters.)</p>
<p class="indent">A computer monitor consists of picture elements, or <em>pixels</em>, and displays colors by combining the light from red, green, and blue elements of a pixel (<a href="ch07.xhtml#ch7fig1">Figure 7.1</a>). Hexadecimal RGB puts three sets of two hex numbers next to each other to define <span epub:type="pagebreak" id="page_159"></span>the red, green, and blue values that make up a single color, so <span class="green-d"><code><strong>#ff0000</strong></code></span> can also be read as <span class="green-d"><code><strong>red=ff, green=00, blue=00</strong></code></span> or <span class="green-d"><code><strong>red=255, green=0, blue=0</strong></code></span>. As we mentioned in <a href="ch07.xhtml#ch7list1">Listing 7.1</a>, this is the same as the color word <span class="green-d"><code><strong>red</strong></code></span>.</p>
<figure class="figure" id="ch7fig1">
<img src="graphics/07fig01.jpg" alt="images" width="676" height="436"/>
<figcaption>
<p class="title-f"><strong>Figure 7.1:</strong> The elements in a single pixel of a computer screen’s display.</p>
</figcaption>
</figure>
<p class="indent">If all three colors are turned on (each is set to <span class="green-d"><code><strong>ff</strong></code></span>, or <span class="green-d"><code><strong>#ffffff</strong></code></span>), the pixel will look white; if they are all off (each is set to <span class="green-d"><code><strong>00</strong></code></span>, or <span class="green-d"><code><strong>#000000</strong></code></span>), it will look black. Combinations of the three colors can be used to create all the colors you see (<a href="ch07.xhtml#ch7fig2">Figure 7.2</a>).</p>
<figure class="figure" id="ch7fig2">
<img src="graphics/07fig02.jpg" alt="images" width="599" height="96"/>
<figcaption>
<p class="title-f"><strong>Figure 7.2:</strong> Some hexadecimal color examples.</p>
</figcaption>
</figure>
<p class="indent">CSS also supports a useful shorthand in the common case that some of the hex numerals are the same. If the digits are the same, as in <span class="green-d"><code><strong>#222222</strong></code></span>, <span class="green-d"><code><strong>#cccccc</strong></code></span>, or <span class="green-d"><code><strong>#aa22ff</strong></code></span>, we can shorten the whole number to just three digits, like this: <span class="green-d"><code><strong>#222</strong></code></span>, <span class="green-d"><code><strong>#ccc</strong></code></span>, or <span class="green-d"><code><strong>#a2f</strong></code></span>. When the browser sees only three digits, it fills in the missing ones.</p>
<p class="indent"><span epub:type="pagebreak" id="page_160"></span>Thus, using <span class="green-d"><code><strong>#f00</strong></code></span> in place of <span class="green-d"><code><strong>#ff0000</strong></code></span> (<a href="ch07.xhtml#ch7list1">Listing 7.1</a>) should lead to the same color red (<a href="ch07.xhtml#sec7_1_3">Section 7.1.3</a>). The result of making this change on our sample site is shown in <a href="ch07.xhtml#ch7list2">Listing 7.2</a>.</p>
<p class="listing" id="ch7list2"><strong>Listing 7.2:</strong> Using the more compact hex notation.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_blue1"><em>/* GLOBAL STYLES */</em></span>
<span class="pd_green1"><strong>a</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>color</strong></span>: <span class="grey"><strong>#f00</strong></span>;</span>
}</pre>
<p class="indent">The RGB color system might seem confusing at first, but with practice you’ll quickly come to understand how the three values work together to make different colors and different shades of those colors. For making more complicated colors, we suggest using a <em>color picker</em>, but there are some common cases that you should know off the top of your head.</p>
<p class="indent">For instance, the grayscale spectrum from black to white always has all three hex numbers the same: all <span class="green-d"><code><strong>00</strong></code></span> (or <span class="green-d"><code><strong>#000000</strong></code></span>) is black, all <span class="green-d"><code><strong>ff</strong></code></span> (or <span class="green-d"><code><strong>#ffffff</strong></code></span>) is white, and numbers in the middle, like <span class="green-d"><code><strong>#979797</strong></code></span>, are some shade of gray (<a href="ch07.xhtml#ch7fig3">Figure 7.3</a>).<sup><a id="fn7_1a" href="ch07.xhtml#fn7_1">1</a></sup></p>
<p class="footnote"><a id="fn7_1" href="ch07.xhtml#fn7_1a">1</a>. There are 255 colors that match the pattern <span class="green-d"><code><strong>#979797</strong></code></span>, but two of them are <span class="green-d"><code><strong>#000000</strong></code></span> (black) and <span class="green-d"><code><strong>#ffffff</strong></code></span> (white), leaving 253 shades of gray (which is way more than 50).</p>
<figure class="figure" id="ch7fig3">
<img src="graphics/07fig03.jpg" alt="images" width="521" height="119"/>
<figcaption>
<p class="title-f"><strong>Figure 7.3:</strong> Hexadecimal grayscale.</p>
</figcaption>
</figure>
<p class="indent">In practice, most web developers and designers use common hex values interchangeably with their color-word equivalents, so it’s important to know that <span class="green-d"><code><strong>#000</strong></code></span> and <span class="green-d"><code><strong>#000000</strong></code></span> are both <span class="green-d"><code><strong>black</strong></code></span>, <span class="green-d"><code><strong>#fff</strong></code></span> and <span class="green-d"><code><strong>#ffffff</strong></code></span> are both <span class="green-d"><code><strong>white</strong></code></span>, <span class="green-d"><code><strong>#00f</strong></code></span> and <span class="green-d"><code><strong>#0000ff</strong></code></span> are both <span class="green-d"><code><strong>blue</strong></code></span>, etc.</p>
</section>
<section>
<h4 class="h4" id="sec7_1_2"><span epub:type="pagebreak" id="page_161"></span>7.1.2 Setting Color and Transparency via <code><strong>rgb()</strong></code> and <code><strong>rgba()</strong></code></h4>
<p class="noindent">In addition to using RGB hex, you can also use RGB directly using <span class="green-d"><code><strong>rgb()</strong></code></span>, which allows you to use decimal numbers in place of hex. In other words, <span class="green-d"><code><strong>rgb(255, 255, 255)</strong></code></span> is the same as <span class="green-d"><code><strong>#ffffff</strong></code></span>, etc. But the main reason to use RGB directly is to set <em>transparency</em> via the <span class="green-d"><code><strong>rgba()</strong></code></span> command.</p>
<p class="indent">In <span class="green-d"><code><strong>rgba()</strong></code></span>, the <span class="green-d"><code><strong>a</strong></code></span> stands for <em>alpha</em>, because the conventional name for transparency level in image processing is the <em>alpha level</em>. The alpha level is indicated using a number between 0 and 1, where 0 is transparent, 1 is opaque, and decimals in between define all the levels of partial transparency (50% is 0.5, 25% is 0.25, etc.).</p>
<p class="indent">For example, let’s make the social link’s background a transparent gray using <span class="green-d"><code><strong>rgba()</strong></code></span>. We’ll select a fairly dark gray, corresponding to RGB values of 150 each (out of 255), and initially set an opacity of <span class="green-d"><code><strong>1</strong></code></span> (<a href="ch07.xhtml#ch7list3">Listing 7.3</a>).</p>
<p class="listing" id="ch7list3"><strong>Listing 7.3:</strong> Using the <span class="green-d"><code><strong>rgba()</strong></code></span> property to set an opaque background color.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list03a" id="p07list03">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>social-link</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>background</strong></span>: <span class="pd_green1"><strong>rgba</strong></span>(<span class="grey"><strong>150</strong></span>, <span class="grey"><strong>150</strong></span>, <span class="grey"><strong>150</strong></span>, <span class="grey"><strong>1</strong></span>);</span>
  <span class="pd_green1"><strong>color</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>blue</strong></span><span class="grey">;</span>
}</pre>
<p class="noindent">The result appears in <a href="ch07.xhtml#ch7fig4">Figure 7.4</a>.</p>
<figure class="figure" id="ch7fig4">
<img src="graphics/07fig04.jpg" alt="images" width="676" height="399"/>
<figcaption>
<p class="title-f"><span epub:type="pagebreak" id="page_162"></span><strong>Figure 7.4:</strong> Social links with an opaque gray background.</p>
</figcaption>
</figure>
<p class="indent">Now let’s switch to 50% opacity (which is the same as 50% transparency), as shown in <a href="ch07.xhtml#ch7list4">Listing 7.4</a>.</p>
<p class="listing" id="ch7list4"><strong>Listing 7.4:</strong> Using the <span class="green-d"><code><strong>rgba()</strong></code></span> property to set a partially transparent background color.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list04a" id="p07list04">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>social-link</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>background</strong></span>: <span class="pd_green1"><strong>rgba</strong></span>(<span class="grey"><strong>150</strong></span>, <span class="grey"><strong>150</strong></span>, <span class="grey"><strong>150</strong></span>, <span class="grey"><strong>0.5</strong></span>);</span>
  <span class="pd_green1"><strong>color</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>blue</strong></span><span class="grey">;</span>
}</pre>
<p class="noindent">As you can see by comparing <a href="ch07.xhtml#ch7fig4">Figure 7.4</a> with <a href="ch07.xhtml#ch7fig5">Figure 7.5</a>, the social links now have a partially transparent gray background. (We’ll see another, more practical example of transparency in <a href="ch09.xhtml#sec9_7_1">Section 9.7.1</a>.)</p>
<figure class="figure" id="ch7fig5">
<img src="graphics/07fig05.jpg" alt="images" width="676" height="401"/>
<figcaption>
<p class="title-f"><strong>Figure 7.5:</strong> Blue text and 50% transparent gray background.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_163"></span>Amazingly, there are still more ways to set colors in CSS (HSL and HSLa), but we aren’t going to go into them, as you are far less likely to encounter them in practice.</p>
</section>
<section>
<h4 class="h4" id="sec7_1_3">7.1.3 Exercises</h4>
<ol class="number">
<li><p class="number">Using a color picker, change the color of the links on the page (the <span class="green-d"><code><strong>a</strong></code></span> declaration) to a light purple color using a hex value.</p></li>
<li><p class="number">Convert the remaining color words to their hex equivalents, using the more compact notation if possible.</p></li>
<li><p class="number">Use the <span class="green-d"><code><strong>rgba</strong></code></span> color system to fade the links by making their opacity 20%.</p></li>
<li><p class="number">Set the links that are inside the <span class="green-d"><code><strong>li</strong></code></span>s at the top of the page to have a class of <span class="green-d"><code><strong>.social-link</strong></code></span>.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec7_2">7.2 Introduction to Sizing</h3>
<p class="noindent">In this tutorial, we frequently use <em>pixel</em> measurements to set the sizes of things like fonts, margins, and padding (<a href="ch08.xhtml#ch08">Chapter 8</a>), but there are actually a confusingly wide variety of different ways to define the size of elements. As a result of having to reliably display multiple generations of HTML across many different computers and devices, web browsers are an unimaginably complicated kluge of different standards. No one sat down and planned out how the Web would work in one go—features and support aggregated over time like a snowball rolling downhill, as various people suggested new methods of styling. Dimensional units are one area that has seen many such additions over time.</p>
<p class="indent">You might think it would be easiest for us to do what we’ve been doing and almost always specify sizes using pixels (<span class="green-d"><code><strong>px</strong></code></span>)—after all, isn’t a screen just a big grid of pixels?</p>
<p class="indent">Sizing an element this way would work great if everyone in the world had exactly the same screen size and resolution, but they don’t, and some screens combine many physical pixels into a smaller number of virtual pixels. That means that when you size something to look good on your screen, someone using a lower-resolution screen might find the element size to be unusably large, or if they are using a high-resolution screen (like a Retina display on an iPhone or iMac) it would look really small (<a href="ch07.xhtml#ch7fig6">Figure 7.6</a>).<sup><a id="fn7_2a" href="ch07.xhtml#fn7_2">2</a></sup></p>
<p class="footnote"><a id="fn7_2" href="ch07.xhtml#fn7_2a">2</a>. DPI stands for “dots per square inch”; in this context, “dot” is a synonym for pixel.</p>
<figure class="figure" id="ch7fig6">
<img src="graphics/07fig06.jpg" alt="images" width="673" height="273"/>
<figcaption>
<p class="title-f"><strong>Figure 7.6:</strong> Different-sized displays have wildly different pixel densities.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_164"></span>The good news is that modern browsers can zoom in and out to make things easier, but that can cause page layouts that use absolute sizes to break. Also, modern devices can scale their output to make something that has an incredibly high pixel density work as though it were a normal lower-density screen.</p>
<p class="indent">For most of the last few years, the agreed-upon modern best practice has been to mostly use <em>relative</em> sizes, which style element sizes based on the size of other elements, or even to the size of the screen. For example, for a header you might say (in CSSese), “I want my header text to be four times as big as the default text size,” and the browser would figure out the rest.</p>
<p class="indent">This type of relative sizing helps deal with the different screen scale issues, and also allows for easy resizing of the contents of a page. If you really want to, though, you can use absolute sizes pretty much anywhere, as a lot of issues with browsers have been worked out, but it’s still a lot easier to stick with the convention and use relative sizes in most cases.</p>
<p class="indent">The rest of this chapter takes a closer look at some of the most common units, their uses, and some of their caveats.</p>
</section>
<section>
<h3 class="h3" id="sec7_3">7.3 Pixels (and Their Less-Used Cousin, the Point)</h3>
<p class="noindent">The pixel (px) and point (pt) units in CSS are absolute measurements that are defined as 1/96 of an inch for a pixel and 1/72 of an inch for a point. From this point on we’re going to ignore the point because no one really uses it for web sizing (it’s a holdover <span epub:type="pagebreak" id="page_165"></span>from the world of print design), and because it work justs like the pixel (just with a different base size). Pixels, on the other hand, are most definitely useful (<a href="ch07.xhtml#box7_1">Box 7.1</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box7_1">
<p class="sb-title1"><strong>Box 7.1: Style Note: Anti-Pixel Fundamentalists</strong></p>
<p class="sb-noindent">As you keep progressing in your understanding of web development, you will inevitably come across people who are on an anti-pixel crusade. They believe that you should never use absolute sizes and should do everything relatively. The truth is that there is a time and a place for everything, even absolute units like the pixel.</p>
<p class="sb-indent">Some measurements just <em>feel</em> better or make more sense in pixels (hooray for subjectivity!), such as margins and padding (<a href="ch08.xhtml#ch08">Chapter 8</a>). Sure, you could define those using some of the relative measures we’ll learn about below, and define all padding and margins based on the size of the size around it, but sometimes it is nice to know that whatever zoom level a user goes to, there will be exactly 40 pixels of padding or margin around an element.</p>
<p class="sb-indent">The real determining factor is how what you are designing is going to be used. If that pixel unit makes your job easier, and it is used in a place where it will never cause the layout to break, then go ahead and use it. Just know that if you get complaints from users that the site is breaking, you’ll probably have to redo the sizing to be relative!</p>
</aside>
<p class="indent">Using an absolutely defined unit is great if you want to define the size of an element in a way that isn’t dependent on the size of the browser or screen resolution, or anything else on the page, but it can lead to situations where the size of elements is completely inappropriate for a user’s device. This type of unit isn’t an inherently good or bad thing; you just need to be aware that anything sized using an absolute measurement is not going to be resized relative to anything else on the page—many sites have a mix of absolutely sized and relatively sized elements. The trick comes in knowing when to use the different units.</p>
<p class="indent">For instance, if you have banner ad images on your site, you are selling that advertising space based on the size of the element (one of the most common ads is the <span epub:type="pagebreak" id="page_166"></span>728 × 90 leaderboard ad, as in <a href="ch07.xhtml#ch7fig7">Figure 7.7</a>). In that situation, you want the ads to be defined with absolute dimensions and not be relative (after all, when you think about it, you are selling screen real estate, and you want to make sure the size of the ad is what they paid for).</p>
<figure class="figure" id="ch7fig7">
<img src="graphics/07fig07.jpg" alt="images" width="526" height="66"/>
<figcaption>
<p class="title-f"><strong>Figure 7.7:</strong> You’ve seen this sort of ad in a million places.</p>
</figcaption>
</figure>
<p class="indent">Images are also always sized by the browser, so that 1 pixel of the image equals 1 pixel on the browser. It’s possible to have the browser resize images and use relative sizes, but the underlying default size of the image is 1 pixel to 1 pixel. This also is why you should never scale an image up from its default size in a browser—resizing should only be done to make an image smaller than it really is; otherwise, the browser has to spread pixels from the image over multiple pixels on the screen, and the image will look terrible (<a href="ch07.xhtml#ch7fig8">Figure 7.8</a>).</p>
<figure class="figure" id="ch7fig8">
<img src="graphics/07fig08.jpg" alt="images" width="574" height="231"/>
<figcaption>
<p class="title-f"><strong>Figure 7.8:</strong> You’ve seen this before... it was bad then and it still is bad!</p>
</figcaption>
</figure>
<p class="indent">So, that all still sounds reasonable, right? Why can’t we just use <span class="green-d"><code><strong>px</strong></code></span> measurements for everything if 96 pixels equals an inch? Well, not so fast. It turns out that a “screen inch” made up of 96 pixels isn’t actually always the same as a real-world inch—for that measurement to be accurate, every screen’s pixel density would have to be 96 pixels per inch.</p>
<p class="indent">Unfortunately, as mentioned at the beginning of this chapter, this is not the case. Modern smartphones and high-end displays have pixel densities of 400 pixels per inch and up, and the operating systems that run on them are often scalable, meaning that what you see on the screen can be resized in a way that isn’t dependent on the physical number of pixels in the display—a bunch of smaller physical pixels are packaged together into a bigger “virtual” pixel. The point is, pixels at the software level no longer are directly related to physical pixels. As a result, the exact length of a 96px line is difficult to guarantee in a way that is universal for all users and screens.</p>
<p class="indent"><span epub:type="pagebreak" id="page_167"></span>One place where you will often see pixel sizes used online is in the definition of <em>font sizes</em>, which determine the size of text on the page. (This is also a place where you will find the most-heated “pixel vs. non-pixel” holy wars.) Part of the reason for the prevalence of absolute sizing in fonts is that it’s a holdover from the days when pixel sizing was the only way to define font sizes on computers, and part of it is because there were people who were used to the conventions of print design where there were design requirements that said “this font should be exactly 24 pixels.” When transitioning from print to screen, people familiar with absolute print sizing just brought their habits over to the Web. So if a design in Photoshop had a font that was 24px, they’d make the design on the site 24px.</p>
<p class="indent">Absolute sizes were fine for the period when pretty much all screens had the same characteristics (and there were no other options), but over time screen sizes, resolution, and densities proliferated, and the inflexibility of absolute font sizes made relative sizing the preferred method.</p>
<p class="indent">There is another caveat that should make you not want to use pixels for fonts: If you set font sizes using pixels and then want to change some sizes later (either for a mobile-specific view or just because you didn’t like the way it looked), you will have to go through and change every place where you defined a font size. If you had used relative values for those fonts, you could make changes in only one place, and everything else would inherit the new styling while still displaying in proportion. Making all text on a page bigger, or smaller, could be as easy as changing a single value.</p>
<p class="indent">So, with all those warnings about how you shouldn’t use pixel sizes for fonts… let’s use pixel sizes for fonts, and for element sizing, in a quick little pixel exercise! We’ll make the <span class="green-d"><code><strong>.bio-box</strong></code></span>es have a width of <span class="green-d"><code><strong>200px</strong></code></span>, and set the font size of the <span class="green-d"><code><strong>h2</strong></code></span> element to be <span class="green-d"><code><strong>30px</strong></code></span>, as shown in <a href="ch07.xhtml#ch7list5">Listing 7.5</a>. (We’ll undo this font sizing in <a href="ch07.xhtml#sec7_6">Section 7.6</a>.)</p>
<p class="listing" id="ch7list5"><strong>Listing 7.5:</strong> Styling elements with pixel values.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list05a" id="p07list05">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_blue1"><em>/* GLOBAL STYLES */</em></span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="pd_green1"><strong>h2</strong></span> {
  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey">30</span><span class="pd_red"><strong>px</strong></span>;
}

<span class="pd_blue1"><em>/* BIO STYLES */</em></span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>bio-box</strong></span> {
  <span class="pd_green1"><strong>border</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid black</strong></span>;
  <span class="pd_green1"><strong>width</strong></span>: <span class="grey">200</span><span class="pd_red"><strong>px</strong></span>;
}</pre>
<p class="indent"><span epub:type="pagebreak" id="page_168"></span>After saving and refreshing, your page should look like <a href="ch07.xhtml#ch7fig9">Figure 7.9</a>.</p>
<figure class="figure" id="ch7fig9">
<img src="graphics/07fig09.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.9:</strong> Hey, look, resized elements. Woo.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec7_3_1">7.3.1 Exercise</h4>
<ol class="number">
<li><p class="number">You can (and should) use pixels to set the width of borders. Try changing the width of the <span class="green-d"><code><strong>.bio-box</strong></code></span> borders to <span class="green-d"><code><strong>10px</strong></code></span>.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec7_4"><span epub:type="pagebreak" id="page_169"></span>7.4 Percentages</h3>
<p class="noindent">We’ve already sized elements using percentages earlier in the tutorial (<a href="ch06.xhtml#sec6_3">Section 6.3</a>), and from that you might be able to guess how useful this measurement can be when you are trying to use relative sizes to force an element to fill a space. There are a few catches, though:</p>
<ul class="bullet">
<li><p class="bullet">Percentage sizing is based on the parent container that an element is wrapped by—it isn’t determined by the size of the browser or the page as a whole.</p></li>
<li><p class="bullet">Percentage heights are a little weird because they require a set height on the parent element—they can’t just assume a height the way that they assume a width.</p></li>
</ul>
<p class="indent">Let’s take a look at how percentages work, and you’ll see what we are talking about. Add a new <span class="green-d"><code><strong>div</strong></code></span> that wraps the four <span class="green-d"><code><strong>.bio-box</strong></code></span>es, and set the class of that <span class="green-d"><code><strong>div</strong></code></span> to <span class="green-d"><code><strong>bio-wrapper</strong></code></span> (<a href="ch07.xhtml#ch7list6">Listing 7.6</a>).</p>
<p class="listing" id="ch7list6"><strong>Listing 7.6:</strong> Adding a wrapper around the <span class="green-d"><code><strong>bio-box</strong></code></span>es and giving it a class.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list06a" id="p07list06">Click here to view code image</a></p>
<pre class="pre2"><span class="bg1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"bio-wrapper"</strong></span>&gt;</span>
  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"bio-box"</span>&gt;
    &lt;<span class="pd_green1"><strong>h3</strong></span>&gt;Michael Hartl&lt;/<span class="pd_green1"><strong>h3</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://twitter.com/mhartl"</span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"social-link"</span>&gt;
      here
    &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
.
.
.
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"bio-copy"</span>&gt;
      &lt;<span class="pd_green1"><strong>p</strong></span>&gt;
        The Future
      &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</pre>
<p class="indent">This wrapper is going to be the parent container that determines the size of the children <span class="green-d"><code><strong>.bio-box</strong></code></span>es for which we’ll set a percentage width. Add a style declaration that sets the width of this new class to be <span class="green-d"><code><strong>500px</strong></code></span>, and also change the width of the <span class="green-d"><code><strong>.bio-box</strong></code></span>es from the rather squished <span class="green-d"><code><strong>200px</strong></code></span> in <a href="ch07.xhtml#ch7list5">Listing 7.5</a> to <span class="green-d"><code><strong>50%</strong></code></span>, as seen in <a href="ch07.xhtml#ch7list7">Listing 7.7</a>.</p>
<p class="listing" id="ch7list7"><span epub:type="pagebreak" id="page_170"></span><strong>Listing 7.7:</strong> Changing the width of the parent element.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list07a" id="p07list07">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>bio-wrapper</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>width</strong></span>: <span class="grey"><strong>500</strong></span><span class="pd_red"><strong>px</strong></span>;</span>
}
.<span class="blue-v"><strong>bio-box</strong></span> {
  <span class="pd_green1"><strong>border</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid black</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>width</strong></span>: <span class="grey"><strong>50</strong></span><span class="pd_red"><strong>%</strong></span>;</span>
}</pre>
<p class="indent">Still pretty squished, right (<a href="ch07.xhtml#ch7fig10">Figure 7.10</a>)?</p>
<figure class="figure" id="ch7fig10">
<img src="graphics/07fig10.jpg" alt="images" width="667" height="462"/>
<figcaption>
<p class="title-f"><strong>Figure 7.10:</strong> Still not a lot of room for those boxes.</p>
</figcaption>
</figure>
<p class="indent">Those boxes are small because they are each taking their width setting as 250px (50% of the 500px-wide parent). In order to get them to stretch all the way across the page, we need to make their parent stretch all the way across the page too. One way to do that is to remove the width from <span class="green-d"><code><strong>.bio-wrapper</strong></code></span> and then save and refresh. Your <span epub:type="pagebreak" id="page_171"></span>browser will assume that the percentage width for the <span class="green-d"><code><strong>.bio-box</strong></code></span>es should be based on the width of the browser (<a href="ch07.xhtml#ch7list8">Listing 7.8</a>).</p>
<p class="listing" id="ch7list8"><strong>Listing 7.8:</strong> Style declarations can be empty.<br/><code><em>index.html</em></code></p>
<pre class="pre2">.<span class="blue-v"><strong>bio-wrapper</strong></span> {
}</pre>
<p class="indent">Now that the parent goes all the way across the window, the child boxes definitely look bigger (<a href="ch07.xhtml#ch7fig11">Figure 7.11</a>)!</p>
<p class="indent">Like we said above, percentage units work well for dimensions like width, but they behave a little strangely for height, and they don’t work at all for thickness— meaning you can’t use percentages for borders. In order for a percentage height to have an effect, the parent needs a set height (and even then things can get weird).</p>
<figure class="figure" id="ch7fig11">
<img src="graphics/07fig11.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.11:</strong> The boxes are now taking up 50% of the width of the browser window.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_172"></span>So, what if you wanted a box that was the height of the browser window? You’d think that setting a style to make it <span class="green-d"><code><strong>height: 100%</strong></code></span> would do the trick, but it won’t work. To see what we mean, add the code from <a href="ch07.xhtml#ch7list9">Listing 7.9</a> at the top of your page, above the <span class="green-d"><code><strong>h1</strong></code></span>.</p>
<p class="listing" id="ch7list9"><strong>Listing 7.9:</strong> Adding a test element for a quick and dirty example.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list09a" id="p07list09">Click here to view code image</a></p>
<pre class="pre2"><span class="bg1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>style</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"border:1px solid #000;width: 50%;height:100%;"</strong></span>&gt;I’m a percent test&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
&lt;<span class="pd_green1"><strong>h1</strong></span>&gt;I’m an h1&lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
.
.
.</pre>
<p class="indent">That will give you a box that is half the width of the page, but surprisingly only the height of the content that is inside the <span class="green-d"><code><strong>div</strong></code></span> (<a href="ch07.xhtml#ch7fig12">Figure 7.12</a>).</p>
<figure class="figure" id="ch7fig12">
<img src="graphics/07fig12.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.12:</strong> Not quite what you’d expect for <span class="green-d"><code><strong>height: 100%</strong></code></span>.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_173"></span>Let’s see what happens if instead we add a style that sets the height of the <span class="green-d"><code><strong>body</strong></code></span> element of the page, as shown in <a href="ch07.xhtml#ch7list10">Listing 7.10</a>. When you save and refresh, you’ll find that your “percent test” box has grown to be really tall (<a href="ch07.xhtml#ch7fig13">Figure 7.13</a>).</p>
<figure class="figure" id="ch7fig13">
<img src="graphics/07fig13.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.13:</strong> A more effective <span class="green-d"><code><strong>height: 100%</strong></code></span>.</p>
</figcaption>
</figure>
<p class="listing" id="ch7list10"><strong>Listing 7.10:</strong> Adding an absolute height to the parent.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_blue1"><em>/* GLOBAL STYLES */</em></span>
<span class="pd_green1"><strong>body</strong></span> {
  <span class="pd_green1"><strong>height</strong></span>: <span class="grey">800</span><span class="pd_red"><strong>px</strong></span>;
}</pre>
<p class="indent">What happened there? When you specify a height in percent, the parent container has to have some sort of defined height set in order for the child percent height to be applied. Otherwise, the browser just makes the element the height needed to contain the content within.</p>
<p class="indent">Even though we made the percent height work, at times it will act differently from how you expect, as it is dependent on the end height of the parent container. If the parent ends up being tall, you might end up with the percent height child displaying <span epub:type="pagebreak" id="page_174"></span>on-screen far larger than you wanted. Or, if you inadvertently add a style that removes the set height from the parent, the child element with a percent height would suddenly return to being the height only of the content it contains (like in <a href="ch07.xhtml#ch7fig12">Figure 7.12</a>).</p>
<p class="indent">Don’t worry if this sounds confusing—we’ll look at some other solutions for getting elements to take up a proportion of a space later in the tutorial, both when we cover ways to make elements the size of the browser with the <span class="green-d"><code><strong>vh</strong></code></span> and <span class="green-d"><code><strong>vw</strong></code></span> units in <a href="ch07.xhtml#sec7_7">Section 7.7</a>, and then when we arrange to take up the full height of arbitrarily sized parents using the <em>flexbox</em> method in <a href="ch11.xhtml#ch11">Chapter 11</a>.</p>
<p class="indent">In the meantime, you should delete the “percent test” <span class="green-d"><code><strong>div</strong></code></span> from <a href="ch07.xhtml#ch7list9">Listing 7.9</a>, and make sure also to delete the style from <a href="ch07.xhtml#ch7list10">Listing 7.10</a>.</p>
<section>
<h4 class="h4" id="sec7_4_1">7.4.1 Percentage Fonts</h4>
<p class="noindent">You <em>can</em> use percentages to set text sizes, but there is a consideration that you will have to keep in mind. If you use a percentage for a text size, the resulting size of the font is based not on the pixel dimensions of the container, but rather on whatever <span class="green-d"><code><strong>font-size</strong></code></span> style that container has inherited. So the box itself could be <span class="green-d"><code><strong>1000px</strong></code></span> tall, but if it inherited a font size of <span class="green-d"><code><strong>16px</strong></code></span>, and you set the font size of a child element to 50%, you are going to get only an <span class="green-d"><code><strong>8px</strong></code></span>-tall font (50% of <span class="green-d"><code><strong>16px</strong></code></span>), not a <span class="green-d"><code><strong>500px</strong></code></span>-tall font like you might think.</p>
<p class="indent">The fact that percentage sizing uses different sources for sizing the height and width of boxes (based on the actual pixel dimensions of an element) versus sizing text (based on inherited font size) is why it is only infrequently used for text sizing. Most people find it easier to think of percentages as a way of determining the size of box-shaped things, and use other relative sizing methods for fonts.</p>
<p class="indent">Once again, if that all sounds confusing, don’t worry—<a href="ch07.xhtml#sec7_5">Section 7.5</a> will explain it in greater detail using the <span class="green-d"><code><strong>em</strong></code></span> unit, whose behavior is similar to percentage. However, unlike percentage measurement, <span class="green-d"><code><strong>em</strong></code></span>s are regularly used for sizing text and less used for sizing boxes. (<em>Warning</em>: This is a potential holy-war statement to make.)</p>
</section>
<section>
<h4 class="h4" id="sec7_4_2">7.4.2 Exercises</h4>
<ol class="number">
<li><p class="number">Try setting a 10% margin on the <span class="green-d"><code><strong>.bio-box</strong></code></span>. This will push each box away from its neighbors by 10% of the width of the parent container, even the vertical margins. (Sharp-eyed readers might notice something weird with the vertical margins that we’ll discuss in <a href="ch08.xhtml#sec8_6">Section 8.6</a>.)</p></li>
<li><p class="number"><span epub:type="pagebreak" id="page_175"></span>To see the way that percentage font sizes can be cumulative, set the <span class="green-d"><code><strong>.bio-box</strong></code></span> font size to 150%, and then also set the <span class="green-d"><code><strong>.bio-copy</strong></code></span> font size to 150%. The end result will be 150% of 150% of 16px (the page base font size), or in pixels…</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec7_5">7.5 <span class="green-d"><code><strong>em</strong></code></span></h3>
<p class="noindent">The <span class="green-d"><code><strong>em</strong></code></span> unit is a relative size unit that is commonly used for sizing text (most would say it is the preferred method). The name comes from the approximate width of the letter m; in CSS, one em represents a number of pixels equal to the current font size of any given element’s parent container. If there is no font size that is inherited, then the default page font size is used.</p>
<p class="indent">For plain text (that is, not something like an <span class="green-d"><code><strong>h1</strong></code></span> header), the default size is <span class="green-d"><code><strong>16px</strong></code></span>, so the default size of an em is also <span class="green-d"><code><strong>16px</strong></code></span>. Fractions of an em then represent fractions of the full font size; for example, if the font size is <span class="green-d"><code><strong>16px</strong></code></span>, a unit of <span class="green-d"><code><strong>0.5em</strong></code></span> would be 50% of 16, or <span class="green-d"><code><strong>8px</strong></code></span>, and <span class="green-d"><code><strong>2.25em</strong></code></span> would be 225% of 16, or <span class="green-d"><code><strong>36px</strong></code></span>.</p>
<p class="indent">One of the things that makes ems useful, in comparison to something like pixel sizing, is that they automatically change value based on the font size that is inherited by the parent object that they are contained in. This means that if you used em sizing throughout your site, you can modify the entire site’s text simply by changing a single base font size, and all the fonts in all the child containers will resize in correct proportion based on this new declared font size. If you used pixels for everything, you’d have to change every declared font size by hand.</p>
<p class="indent">As an example, let’s say we set the font size of <span class="green-d"><code><strong>.bio-copy</strong></code></span> to <span class="green-d"><code><strong>0.5em</strong></code></span>, as shown in <a href="ch07.xhtml#ch7list11">Listing 7.11</a>. Because the default base font size of the entire page is <span class="green-d"><code><strong>16px</strong></code></span>, the result in the browser is tiny <span class="green-d"><code><strong>8px</strong></code></span> text, as shown in <a href="ch07.xhtml#ch7fig14">Figure 7.14</a>.</p>
<figure class="figure" id="ch7fig14">
<img src="graphics/07fig14.jpg" alt="images" width="676" height="338"/>
<figcaption>
<p class="title-f"><strong>Figure 7.14:</strong> The bio copy text after shrinking down to <span class="green-d"><code><strong>0.5em</strong></code></span>.</p>
</figcaption>
</figure>
<p class="listing" id="ch7list11"><strong>Listing 7.11:</strong> Changing the bio copy font size.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_blue1"><em>/* BIO STYLES*/</em></span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>bio-copy</strong></span> {
  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey">0.5</span><span class="pd_red"><strong>em</strong></span>;
}</pre>
<p class="indent"><span epub:type="pagebreak" id="page_176"></span>Now let’s see the effect of changing the font size of the parent element. In <a href="ch07.xhtml#ch7list6">Listing 7.6</a> we added a <span class="green-d"><code><strong>.bio-wrapper</strong></code></span> div to wrap the bio boxes, so we can redefine the base font size by adding a CSS rule as shown in <a href="ch07.xhtml#ch7list12">Listing 7.12</a>. The new rule in <a href="ch07.xhtml#ch7list12">Listing 7.12</a> changes the font size from the default <span class="green-d"><code><strong>16px</strong></code></span> to <span class="green-d"><code><strong>24px</strong></code></span>, so the <span class="green-d"><code><strong>.bio-box</strong></code></span> font size of <span class="green-d"><code><strong>0.5em</strong></code></span> is now 50% of 24, or <span class="green-d"><code><strong>12px</strong></code></span>.</p>
<p class="listing" id="ch7list12"><strong>Listing 7.12:</strong> Setting a new base font size.<br/><code><em>index.html</em></code></p>
<pre class="pre2">.<span class="blue-v"><strong>bio-wrapper</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>24</strong></span><span class="pd_red"><strong>px</strong></span>;</span>
}</pre>
<p class="indent">To determine what the actual font size should be, the browser crawls up the parent–child tree until it finds a parent with a font size set with an absolute value, and then it calculates back down the tree to set the font sizes. As noted above, if there is no such absolute value, the page default is <span class="green-d"><code><strong>16px</strong></code></span>, but by changing the parent div to <span class="green-d"><code><strong>24px</strong></code></span> we’ve managed to change the default for all child elements.</p>
<p class="indent">As a result, the font size of <span class="green-d"><code><strong>0.5em</strong></code></span> is no longer 50% of 16, but rather is 50% of 24, for a total of <span class="green-d"><code><strong>12px</strong></code></span>. The font size of the bio boxes automatically increases from the <span class="green-d"><code><strong>8px</strong></code></span> shown in <a href="ch07.xhtml#ch7fig14">Figure 7.14</a> to <span class="green-d"><code><strong>12px</strong></code></span>, as shown in <a href="ch07.xhtml#ch7fig15">Figure 7.15</a>.</p>
<figure class="figure" id="ch7fig15">
<img src="graphics/07fig15.jpg" alt="images" width="676" height="364"/>
<figcaption>
<p class="title-f"><strong>Figure 7.15:</strong> The bio copy in the <span class="green-d"><code><strong>.bio-box</strong></code></span>es has automatically increased.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_177"></span>One important property of <span class="green-d"><code><strong>em</strong></code></span> units is that they are <em>cumulative</em>: If an element that has its font size set to <span class="green-d"><code><strong>0.5em</strong></code></span> appears inside an element whose font size is also <span class="green-d"><code><strong>0.5em</strong></code></span>, then the resulting font size for that bottom child element is 0.5 × 0.5 = <span class="green-d"><code><strong>0.25em</strong></code></span>. In real numbers, if the base size is <span class="green-d"><code><strong>24px</strong></code></span>, this means that the most deeply nested element is 25% of 24, or <span class="green-d"><code><strong>6px</strong></code></span>. This cumulative effect can be helpful, or it can cause unintentional display errors—you just have to be careful.</p>
<p class="indent">Schematically, our current page consists of nested divs, with <span class="green-d"><code><strong>.bio-copy</strong></code></span> inside <span class="green-d"><code><strong>.bio-box</strong></code></span> inside <span class="green-d"><code><strong>.bio-wrapper</strong></code></span>. We already changed the font size of <span class="green-d"><code><strong>.bio-copy</strong></code></span> to <span class="green-d"><code><strong>0.5em</strong></code></span> (<a href="ch07.xhtml#ch7list11">Listing 7.11</a>); if we change the <span class="green-d"><code><strong>.bio-box</strong></code></span> font size to <span class="green-d"><code><strong>0.5em</strong></code></span> as well (<a href="ch07.xhtml#ch7list13">Listing 7.13</a>), the result will be 50% of 50% of 24, or <span class="green-d"><code><strong>6px</strong></code></span>.</p>
<p class="listing" id="ch7list13"><strong>Listing 7.13:</strong> Adding a relative font size to the <span class="green-d"><code><strong>.bio-box</strong></code></span>.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list13a" id="p07list13">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>bio-box</strong></span> {
  <span class="pd_green1"><strong>border</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid black</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>0.5</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
  <span class="pd_green1"><strong>width</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>50</strong></span><span class="grey">%;</span>
}
.<span class="blue-v"><strong>bio-copy</strong></span> {
  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey">0.5</span><span class="pd_red"><strong>em</strong></span>;
}</pre>
<p class="indent">Look at the resulting teeny tiny font (<a href="ch07.xhtml#ch7fig16">Figure 7.16</a>)!</p>
<figure class="figure" id="ch7fig16">
<img src="graphics/07fig16.jpg" alt="images" width="676" height="367"/>
<figcaption>
<p class="title-f"><span epub:type="pagebreak" id="page_178"></span><strong>Figure 7.16:</strong> Now the font size is unreadably tiny!</p>
</figcaption>
</figure>
<p class="indent">As outlined above, this happened because starting from the <span class="green-d"><code><strong>.bio-copy</strong></code></span>, the browser goes up one level to the parent and sees that there is a font size set, so it says, “OK, the font should be half the size of this parent size, but the <span class="green-d"><code><strong>.bio-box</strong></code></span> size is relative too, so let’s go up again until we find an absolute font size.” Going up one more level, the browser finds that the <span class="green-d"><code><strong>.bio-wrapper</strong></code></span> declaration sets the font to <span class="green-d"><code><strong>24px</strong></code></span>, so now it can work back down and set the <span class="green-d"><code><strong>.bio-box</strong></code></span> to <span class="green-d"><code><strong>12px</strong></code></span>, and then the content inside the <span class="green-d"><code><strong>.bio-copy</strong></code></span> to <span class="green-d"><code><strong>6px</strong></code></span>.</p>
<p class="indent">This works the other way too. If we set both the <span class="green-d"><code><strong>.bio-box</strong></code></span> and <span class="green-d"><code><strong>.bio-copy a</strong></code></span> font sizes to <span class="green-d"><code><strong>1.5em</strong></code></span> we’ll end up with a giant font that is the equivalent of <span class="green-d"><code><strong>54px</strong></code></span> (24 × 1.5 × 1.5 = <span class="green-d"><code><strong>54px</strong></code></span>), as shown in <a href="ch07.xhtml#ch7fig17">Figure 7.17</a>.</p>
<figure class="figure" id="ch7fig17">
<img src="graphics/07fig17.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.17:</strong> Now the font is just ridiculously huge.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_179"></span>Now that we’ve seen some really wacky values, let’s change the bio box to use a more sensible font size of <span class="green-d"><code><strong>1em</strong></code></span> (<a href="ch07.xhtml#ch7list14">Listing 7.14</a>).</p>
<p class="listing" id="ch7list14"><strong>Listing 7.14:</strong> A sensible font size for the bio box.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list14a" id="p07list14">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>bio-box</strong></span> {
  <span class="pd_green1"><strong>border</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid black</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
  <span class="pd_green1"><strong>width</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>50</strong></span><span class="grey">%;</span>
}
.<span class="blue-v"><strong>bio-copy</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
}</pre>
<p class="indent">So far we’ve used ems only for fonts, but the <span class="green-d"><code><strong>em</strong></code></span> unit <em>can</em> be used for things like margin, padding, and width (<a href="ch08.xhtml#ch08">Chapter 8</a>). In those cases, you have to remember that the size of an <span class="green-d"><code><strong>em</strong></code></span> is based on the local font size, so if you set a width for an object in <span epub:type="pagebreak" id="page_180"></span><span class="green-d"><code><strong>em</strong></code></span> it will size the object based on the font size inside that element. For example, if the calculated font size in an element ends up being <span class="green-d"><code><strong>16px</strong></code></span>, and you set the padding to <span class="green-d"><code><strong>1.5em</strong></code></span>, then the padding will end up getting set to 1.5 × 16 = <span class="green-d"><code><strong>24px</strong></code></span>.</p>
<p class="indent">Sound confusing? <a href="ch07.xhtml#ch7fig18">Figure 7.18</a> shows a quick diagram to explain.</p>
<figure class="figure" id="ch7fig18">
<img src="graphics/07fig18.jpg" alt="images" width="598" height="206"/>
<figcaption>
<p class="title-f"><strong>Figure 7.18:</strong> Dimensions inside the box get calculated based on the font size.</p>
</figcaption>
</figure>
<p class="indent">The argument for doing your sizing using ems is that all your elements, and their attributes like padding or margin, will be sized relative to the size of the text. But just because we want to increase the size of fonts on a page doesn’t necessarily mean that we also want to change something like margin or padding. Sometimes you want the boxes that hold the content to stay the same and only the stuff inside to change, so styling every dimension of a container based on the text it contains can be inconvenient. As a result, in this tutorial we’ll use the <span class="green-d"><code><strong>em</strong></code></span> unit primarily for fonts, but will also use it in margins or padding where it is helpful to have the sizing be responsive.</p>
<p class="indent"><em>Warning</em>: As is often the case with such subjective judgments, this is holy-war territory (<a href="ch07.xhtml#ch7fig19">Figure 7.19</a>).<sup><a id="fn7_3a" href="ch07.xhtml#fn7_3">3</a></sup></p>
<figure class="figure" id="ch7fig19">
<img src="graphics/07fig19.jpg" alt="images" width="609" height="406"/>
<figcaption>
<p class="title-f"><strong>Figure 7.19:</strong> Well… that’s just, like, your opinion, man.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn7_3" href="ch07.xhtml#fn7_3a">3</a>. Image courtesy of melnyk58/123RF.</p>
<section>
<h4 class="h4" id="sec7_5_1"><span epub:type="pagebreak" id="page_181"></span>7.5.1 Exercises</h4>
<ol class="number">
<li><p class="number">Give the <span class="green-d"><code><strong>.bio-box</strong></code></span> class a padding of <span class="green-d"><code><strong>2.5em</strong></code></span>, and see how at small sizes the padding seems reasonable.</p></li>
<li><p class="number">Set the <span class="green-d"><code><strong>.bio-box</strong></code></span> font size to <span class="green-d"><code><strong>48px</strong></code></span>, and see how now your boxes’ padding is a significant percentage of the entire browser width.</p></li>
<li><p class="number">Set the <span class="green-d"><code><strong>.bio-box</strong></code></span> padding to a pixel size of <span class="green-d"><code><strong>20px</strong></code></span> to see how that can make the space sizing independent from the content sizing.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec7_6">7.6 <span class="green-d"><code><strong>rem</strong></code></span> Isn’t Just for Dreaming</h3>
<p class="noindent">The cumulative effect of the <span class="green-d"><code><strong>em</strong></code></span> unit (<a href="ch07.xhtml#sec7_5">Section 7.5</a>) can at times make designing layouts difficult since it makes it harder to drop sections of a page into other sections and be confident that you aren’t going to end up with some weird cumulative sizing issue. (Recall the goal from <a href="ch06.xhtml#sec6_4">Section 6.4</a> to make our markup as modular and LEGO-like as possible.) In the years since the original release of CSS, browsers have implemented a new relative unit that allows for us to create modular sections that can be placed on the page without sizing uncertainties, the <em>root em</em>, or <span class="green-d"><code><strong>rem</strong></code></span>.</p>
<p class="indent"><span epub:type="pagebreak" id="page_182"></span>This <span class="green-d"><code><strong>rem</strong></code></span> unit works similarly to <span class="green-d"><code><strong>em</strong></code></span>, in that it is a percentage of an absolute font size, but instead of being cumulatively sized based on the whole parent–child tree, the <span class="green-d"><code><strong>rem</strong></code></span> unit <em>always</em> refers back to the font size of the <span class="green-d"><code><strong>html</strong></code></span> tag—in other words, it always refers to the most basic font size for the whole page. (As noted in <a href="ch07.xhtml#sec7_5">Section 7.5</a>, this default size is <span class="green-d"><code><strong>16px</strong></code></span>.)</p>
<p class="indent">In effect, the <span class="green-d"><code><strong>rem</strong></code></span> unit works like a document-wide setting, so you can set the size of elements like boxes, or font sizes, and have them all tie back to a single value: the font size of the <span class="green-d"><code><strong>html</strong></code></span> element. If you want to make everything a little bigger, or smaller, you can change just this one font size and everything on the page adapts in a controlled manner.</p>
<p class="indent"><span class="green-d"><code><strong>rem</strong></code></span> is especially useful in combination with <span class="green-d"><code><strong>em</strong></code></span> units in developing modules. The best practice is to set a font size for the module’s wrapper using a <span class="green-d"><code><strong>rem</strong></code></span> unit, and then style the fonts inside using <span class="green-d"><code><strong>em</strong></code></span> units. Because <span class="green-d"><code><strong>rem</strong></code></span> values are absolute (in relation to the page font size), you don’t need to worry that the cumulative nature of <span class="green-d"><code><strong>em</strong></code></span> will keep going up the parent tree and make everything in the box tiny or huge (<a href="ch07.xhtml#sec7_5">Section 7.5</a>). This kind of styling allows you to create modules that can be safely dropped into any part of a page, while keeping the advantages of using relative font sizes.</p>
<p class="indent">To see this in action, let’s set the size of the <span class="green-d"><code><strong>.bio-box</strong></code></span> to <span class="green-d"><code><strong>1rem</strong></code></span> and then add in a new declaration to set the header <span class="green-d"><code><strong>h3</strong></code></span>s to be <span class="green-d"><code><strong>1.5em</strong></code></span> and the <span class="green-d"><code><strong>.bio-copy</strong></code></span> to be <span class="green-d"><code><strong>1em</strong></code></span>.</p>
<p class="indent"><a href="ch07.xhtml#ch7list15">Listing 7.15</a> has the entire CSS block at this point—copy and paste if you aren’t synced up.<sup><a id="fn7_4a" href="ch07.xhtml#fn7_4">4</a></sup> (Note that <a href="ch07.xhtml#ch7list15">Listing 7.15</a> removes the <span class="green-d"><code><strong>h2</strong></code></span> rule from <a href="ch07.xhtml#ch7list5">Listing 7.5</a>.)</p>
<p class="footnote"><a id="fn7_4" href="ch07.xhtml#fn7_4a">4</a>. Recall that the code listings are available at <a href="https://github.com/learnenough/learn_enough_html_css_and_layout_code_listings">https://github.com/learnenough/learn_enough_html_css_and_layout_code_listings</a>.</p>
<p class="listing" id="ch7list15"><strong>Listing 7.15:</strong> The CSS section up to now, with new font sizes.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list15a" id="p07list15">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">&lt;</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span>
  <span class="pd_blue1"><em>/* GLOBAL STYLES */</em></span>
  <span class="pd_green1"><strong>a</strong></span> {
    <span class="pd_green1"><strong>color</strong></span>: <span class="grey">#f0</span>0;
  }

  <span class="pd_blue1"><em>/* SOCIAL STYLES */</em></span>
  .<span class="blue-v"><strong>social-link</strong></span> {
    <span class="pd_green1"><strong>background</strong></span>: <span class="pd_green1">rgba</span>(<span class="grey">150</span>, <span class="grey">150</span>, <span class="grey">150</span>, <span class="grey">0.5</span>);
    <span class="pd_green1"><strong>color</strong></span>: <span class="pd_green1"><strong>blue</strong></span>;
  }

  <span class="pd_blue1"><em>/* BIO STYLES */</em></span>
  .<span class="blue-v"><strong>bio-wrapper</strong></span> {
    <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey">24</span><span class="pd_red"><strong>px</strong></span>;
  }
  .<span class="blue-v"><strong>bio-box</strong></span> {
    <span class="pd_green1"><strong>border</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid black</strong></span>;
<span class="bg1">    <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>rem</strong></span>;</span>
    <span class="pd_green1"><strong>width</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>50</strong></span><span class="grey">%;</span>
  }
<span class="bg1">  .<span class="blue-v"><strong>bio-box</strong></span> <span class="pd_green1"><strong>h3</strong></span> {</span>
<span class="bg1">    <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>1.5</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>}</strong></span></span>
<span class="bg1">  .<span class="blue-v"><strong>bio-copy</strong></span> {</span>
<span class="bg1">    <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>}</strong></span></span>
<span class="bg1">  .<span class="blue-v"><strong>bio-copy</strong></span> <span class="pd_green1"><strong>a</strong></span> {</span>
<span class="bg1">    <span class="pd_green1"><strong>color</strong></span>: <span class="pd_green1"><strong>green</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>}</strong></span></span>
<span class="grey">&lt;/</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span></pre>
<p class="indent"><span epub:type="pagebreak" id="page_183"></span>Now the whole page will be set to be the same size as the <span class="green-d"><code><strong>html</strong></code></span> default font size of <span class="green-d"><code><strong>16px</strong></code></span>, and the header in the bio box will always be one and a half times that size even though the <span class="green-d"><code><strong>.bio-wrapper</strong></code></span> is set to a very large <span class="green-d"><code><strong>24px</strong></code></span>. Meanwhile, the bio copy will remain at the default size for the page. If we decide that all the copy on the site should be bigger, we can easily reset the default size with a rule like</p>
<pre class="pre1"><span class="pd_green1"><strong>html</strong></span> {
  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey">18</span><span class="pd_red"><strong>px</strong></span>;
}</pre>
<p class="indent">With the change in <a href="ch07.xhtml#ch7list15">Listing 7.15</a>, all the copy in the boxes will resize but will stay in proportion without any cumulative effects (<a href="ch07.xhtml#ch7fig20">Figure 7.20</a>). All of those benefits become important the moment you need to design a site that looks good on different devices, such as a desktop computer and a mobile phone. We’ll discuss this important issue further in <a href="ch13.xhtml#ch13">Chapter 13</a>. (If you added the 18px font size styling to the <span class="green-d"><code><strong>html</strong></code></span> element, go ahead and delete it now.)</p>
<figure class="figure" id="ch7fig20">
<img src="graphics/07fig20.jpg" alt="images" width="676" height="345"/>
<figcaption>
<p class="title-f"><strong>Figure 7.20:</strong> The 16px base font size is on the left; the 18px size is on the right, with everything scaled proportionally.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec7_6_1"><span epub:type="pagebreak" id="page_184"></span>7.6.1 Exercises</h4>
<ol class="number">
<li><p class="number">Copy the entire first <span class="green-d"><code><strong>.bio-box</strong></code></span> and paste it inside the <span class="green-d"><code><strong>h1</strong></code></span>. You should see that <span class="green-d"><code><strong>rem</strong></code></span> sizing allowed for the whole section to be modular and retain the set styling.</p></li>
<li><p class="number">In the CSS, change the font size for <span class="green-d"><code><strong>.bio-box</strong></code></span> from <span class="green-d"><code><strong>1rem</strong></code></span> to <span class="green-d"><code><strong>1em</strong></code></span> and notice the effect.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec7_7">7.7 <span class="green-d"><code><strong>vh</strong></code></span>, <span class="green-d"><code><strong>vw</strong></code></span>: The New(er) Kids on the Block</h3>
<p class="noindent">Speaking of mobile-friendly units, we arrive now at two newer dimensional units that are also incredibly useful for responsive (mobile) layouts: the viewport height, <span class="green-d"><code><strong>vh</strong></code></span>, and viewport width, <span class="green-d"><code><strong>vw</strong></code></span>. These units allow us to size elements on the page based on the actual size of the browser window or mobile device screen. Each <span class="green-d"><code><strong>vh</strong></code></span> or <span class="green-d"><code><strong>vw</strong></code></span> is 1% of the corresponding screen dimension, so <span class="green-d"><code><strong>3vh</strong></code></span> would equal 3% of the height of the screen and <span class="green-d"><code><strong>100vw</strong></code></span> would be 100% of the width.</p>
<p class="indent">Neither <span class="green-d"><code><strong>vh</strong></code></span> nor <span class="green-d"><code><strong>vw</strong></code></span> is affected by parent elements, and neither has any weird cumulative inheritance issues—everything is determined by the size of the browser window or device screen. Up until relatively recently these units weren’t reliably supported by all browers, but as long as a good percentage of your users aren’t using really old <span epub:type="pagebreak" id="page_185"></span>browsers you can safely use <span class="green-d"><code><strong>vh</strong></code></span> and <span class="green-d"><code><strong>vw</strong></code></span> to do some fun things, like design sections that fill the browser window no matter what the size of that window is.</p>
<p class="indent">We’ll apply the viewport units as part of adding a <em>hero section</em> to our site, a design pattern that involves having an attention-grabbing area at the top of the page containing a dramatic image, a call to action, etc. We’ll start by wrapping the top section of our test page in a new <span class="green-d"><code><strong>div</strong></code></span> with two classes, <span class="green-d"><code><strong>.full-hero</strong></code></span> and <span class="green-d"><code><strong>.hero-home</strong></code></span> (<a href="ch07.xhtml#ch7list16">Listing 7.16</a>). (We’ll use <span class="green-d"><code><strong>.full-hero</strong></code></span> starting in <a href="ch08.xhtml#sec8_3">Section 8.3</a> and <span class="green-d"><code><strong>.hero-home</strong></code></span> starting in <a href="ch10.xhtml#ch10">Chapter 10</a>.)</p>
<p class="listing" id="ch7list16"><strong>Listing 7.16:</strong> Adding a wrapper around the content, and giving it class names.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list16a" id="p07list16">Click here to view code image</a></p>
<pre class="pre2"><span class="bg1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"full-hero hero-home"</strong></span>&gt;</span>
  &lt;<span class="pd_green1"><strong>h1</strong></span>&gt;I’m an h1&lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"social-link"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
   &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
   &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"social-link"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
   &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
   &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
     &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"social-link"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
   &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
<span class="bg1">&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span></pre>
<p class="noindent">Note that <a href="ch07.xhtml#ch7list16">Listing 7.16</a> also includes the results of the exercise in <a href="ch07.xhtml#sec7_1_3">Section 7.1.3</a> that added the <span class="green-d"><code><strong>.social-link</strong></code></span> class to the link inside each <span class="green-d"><code><strong>li</strong></code></span>.</p>
<p class="indent">With the classes defined in <a href="ch07.xhtml#ch7list16">Listing 7.16</a>, we’re in a position to start giving the hero section some styles. We’ll start by adding a background color and a height equal to 50% of the viewport using <span class="green-d"><code><strong>50vh</strong></code></span>, as shown in <a href="ch07.xhtml#ch7list17">Listing 7.17</a>.</p>
<p class="listing" id="ch7list17"><strong>Listing 7.17:</strong> Adding a height based on browser size.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list17a" id="p07list17">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_blue1"><em>/* HERO STYLES */</em></span>
.<span class="blue-v"><strong>full-hero</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#c7dbf</span>c;
  <span class="pd_green1"><strong>height</strong></span>: <span class="grey">50</span><span class="pd_red"><strong>vh</strong></span>;
}</pre>
<p class="noindent"><span epub:type="pagebreak" id="page_186"></span>Note that the box isn’t all the way to the top, and that there’s extra space on the top, right, and left (<a href="ch07.xhtml#ch7fig21">Figure 7.21</a>).</p>
<figure class="figure" id="ch7fig21">
<img src="graphics/07fig21.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.21:</strong> The box is now 100% of the page width and 50% of the height.</p>
</figcaption>
</figure>
<p class="indent">The extra space in <a href="ch07.xhtml#ch7fig21">Figure 7.21</a> is due to the browser’s default <em>margin</em> on the <span class="green-d"><code><strong>html</strong></code></span> and <span class="green-d"><code><strong>body</strong></code></span> tags, a kind of spacing that we mentioned briefly in <a href="ch04.xhtml#sec4_3">Section 4.3</a> and will cover more in <a href="ch08.xhtml#ch08">Chapter 8</a>. There is also an issue with the spacing around the <span class="green-d"><code><strong>h1</strong></code></span>, whose separate default margin is bleeding through the boundaries of the <span class="green-d"><code><strong>.full-hero</strong></code></span> parent due to something called <em>margin collapsing</em> (to be further explained in <a href="ch08.xhtml#sec8_2_1">Section 8.2.1</a>).</p>
<p class="indent">The solution is to <em>reset</em> the default styles using CSS. We’ll implement a full CSS reset in <a href="ch09.xhtml#sec9_6">Section 9.6</a>, but for now let’s apply a quick fix by adding the styles in <a href="ch07.xhtml#ch7list18">Listing 7.18</a>.</p>
<p class="listing" id="ch7list18"><strong>Listing 7.18:</strong> Resetting the default margin and padding.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch07_images.xhtml#p07list18a" id="p07list18">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_blue1"><em>/* GLOBAL STYLES */</em></span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="pd_green1"><strong>html</strong></span><span class="grey">,</span> <span class="pd_green1"><strong>body</strong></span> {
  <span class="pd_green1"><strong>margin</strong></span>: <span class="grey">0</span>;
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">0</span>;
}
<span class="pd_green1"><strong>h1</strong></span> {
  <span class="pd_green1"><strong>margin-top</strong></span>: <span class="grey">0</span>;
}</pre>
<p class="indent"><span epub:type="pagebreak" id="page_187"></span>Now the hero area takes up the whole top section of the site (<a href="ch07.xhtml#ch7fig22">Figure 7.22</a>)!</p>
<figure class="figure" id="ch7fig22">
<img src="graphics/07fig22.jpg" alt="images" width="676" height="519"/>
<figcaption>
<p class="title-f"><strong>Figure 7.22:</strong> Everything looks a lot nicer without the margins around the page.</p>
</figcaption>
</figure>
<p class="indent">If you’ve ever been to a site that has a big image that fills the top of the page, this is likely how they did it.</p>
<p class="indent">As with all the other values, viewport dimensions work for fonts too. For example, we can arrange for the <span class="green-d"><code><strong>h1</strong></code></span> to have a font size equal to 7% of the width of the browser window using <span class="green-d"><code><strong>7vw</strong></code></span> (<a href="ch07.xhtml#ch7list19">Listing 7.19</a>).</p>
<p class="listing" id="ch7list19"><span epub:type="pagebreak" id="page_188"></span><strong>Listing 7.19:</strong> Defining a font size relative to the browser width.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_green1"><strong>h1</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>font-size</strong></span>: <span class="grey"><strong>7</strong></span><span class="pd_red"><strong>vw</strong></span>;</span>
  <span class="pd_green1"><strong>margin-top</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>0</strong></span><span class="grey">;</span>
}</pre>
<p class="noindent">One possible result appears in <a href="ch07.xhtml#ch7fig23">Figure 7.23</a>, but if you resize the browser you’ll notice that the font size changes.</p>
<figure class="figure" id="ch7fig23">
<img src="graphics/07fig23.jpg" alt="images" width="676" height="472"/>
<figcaption>
<p class="title-f"><strong>Figure 7.23:</strong> Nice to see no margin around the edges and some big type.</p>
</figcaption>
</figure>
<p class="indent">This sort of dynamically resizing font may seem simple, but it was practically impossible for most of the history of the Web, so in reality it’s pretty mind-blowing (<a href="ch07.xhtml#ch7fig24">Figure 7.24</a><sup><a id="fn7_5" href="ch07.xhtml#fn7_5a">5</a></sup>).</p>
<figure class="figure" id="ch7fig24">
<img src="graphics/07fig24.jpg" alt="images" width="676" height="451"/>
<figcaption>
<p class="title-f"><strong>Figure 7.24:</strong> Fonts that resize based on viewport size = MIND. BLOWN.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn7_5a" href="ch07.xhtml#fn7_5">5.</a> Image courtesy of photoschmidt/123RF.</p>
<p class="indent"><span epub:type="pagebreak" id="page_189"></span>As useful as the viewport dimensions are, if we used them for everything our site would look bad on either mobile or desktop (depending on which platform you were using when you designed the page). Desktop windows are just so much bigger than mobile that elements designed to fit a mobile screen would look giant, and elements designed for desktop would look impossibly tiny on mobile.</p>
<p class="indent">The solution is to use a <em>media query</em>, which allows us to set different styles for elements based on the size of the user’s browser window. We’ll cover this important technique in <a href="ch13.xhtml#ch13">Chapter 13</a>.</p>
<section>
<h4 class="h4" id="sec7_7_1">7.7.1 Exercises</h4>
<ol class="number">
<li><p class="number">We used the <span class="green-d"><code><strong>vw</strong></code></span> unit only on a font, but of course it works for element widths too. Using the <span class="green-d"><code><strong>vw</strong></code></span> unit, set the <span class="green-d"><code><strong>.full-hero</strong></code></span> class to take up 75% of the viewport width.</p></li>
<li><p class="number">Guess what? We’re going to blow your mind again… you can use <span class="green-d"><code><strong>vw</strong></code></span> to set a height, and <span class="green-d"><code><strong>vh</strong></code></span> to set a width! This is actually really useful when you want to make something responsively sized, but square in shape (so you need the height <span epub:type="pagebreak" id="page_190"></span>and width to be the same). To try it out, set both the height and the width of <span class="green-d"><code><strong>.full-hero</strong></code></span> to <span class="green-d"><code><strong>50vw</strong></code></span>.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec7_8">7.8 Just Make It Look Nice</h3>
<p class="noindent">We’ll end our discussion of CSS sizing with some notes on choosing good styles for text (e.g., font size).</p>
<p class="indent">When choosing font sizes, the goal should always be to have readable text on the page. Nicely laid-out copy should be the equivalent of somewhere between 14px and 18px in height.</p>
<p class="indent">The default size of 16px is right in the middle of this 14–18px range, but having a base unit of <span class="green-d"><code><strong>1em</strong></code></span> equaling <span class="green-d"><code><strong>16px</strong></code></span> can make the math a little difficult if you start using fractional sizes like <span class="green-d"><code><strong>1.33em</strong></code></span>. If for some reason you care about exact pixel sizes, there is a hack that you can use to combine em with pixel-precision—set a <span class="green-d"><code><strong>font-size</strong></code></span> on the <span class="green-d"><code><strong>body</strong></code></span> of <span class="green-d"><code><strong>62.5%</strong></code></span>, which makes <span class="green-d"><code><strong>1em</strong></code></span> elsewhere on the page equal <span class="green-d"><code><strong>10px</strong></code></span> (62.5% of 16). In web design circles, this is sometimes known as the “62.5% trick.”</p>
<p class="indent">Although you are welcome to use the 62.5% trick, we think it’s better to stop thinking in terms of absolute pixels when it comes to fonts—there’s just no reason that you need to be exact on the sizing since there can be differences between browsers when displaying the same element. Also, even though the 62.5% trick gives you exact em sizing, you are also setting the default size of everything to a really small font size—for most people, <span class="green-d"><code><strong>10px</strong></code></span> is basically unreadable.</p>
<p class="indent">To sum up our recommendations: Use relative units for text, don’t use the 62.5% trick, and simply pick random numbers that set the font sizes somewhat close to what your design calls for (seriously).</p>
<p class="indent">What matters ultimately is how the end product looks and the relationship between different elements. Trying to achieve pixel-perfection is simply not a reasonable goal on the Web, and pixel sizing is really just an artifact from the bad old days of doing designs in Photoshop where elements’ heights and widths were set in pixels.</p>
<p class="indent">Just embrace the imprecision (<a href="ch07.xhtml#ch7fig25">Figure 7.25</a>).</p>
<figure class="figure" id="ch7fig25">
<img src="graphics/07fig25.jpg" alt="images" width="523" height="246"/>
<figcaption>
<p class="title-f"><strong>Figure 7.25:</strong> Just make sure that your imprecision is at least consistently around the target.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec7_8_1"><span epub:type="pagebreak" id="page_191"></span>7.8.1 Exercises</h4>
<ol class="number">
<li><p class="number">Let’s try the 62.5% trick. Set the <span class="green-d"><code><strong>body</strong></code></span> of your test page to have a font size of <span class="green-d"><code><strong>62.5%</strong></code></span>. Notice that most of the text got smaller, with the exception of the <span class="green-d"><code><strong>.biobox</strong></code></span>es which are still being sized off of the <span class="green-d"><code><strong>html</strong></code></span> font size thanks to the <span class="green-d"><code><strong>rem</strong></code></span> unit.</p></li>
<li><p class="number">Change the font size of the <span class="green-d"><code><strong>h1</strong></code></span> to <span class="green-d"><code><strong>20px</strong></code></span>, and then, after seeing what it looks like, change it to <span class="green-d"><code><strong>2em</strong></code></span>. There should be no change.</p></li>
<li><p class="number">Delete the font size that is on the <span class="green-d"><code><strong>.bio-wrapper</strong></code></span> class, and then set the font size of the <span class="green-d"><code><strong>.bio-box</strong></code></span> to <span class="green-d"><code><strong>1em</strong></code></span> so that you can see what the new default size looks like.<span epub:type="pagebreak" id="page_192"></span></p></li>
</ol>
</section>
</section>
</section>
</div>
</div>
</body>
</html>