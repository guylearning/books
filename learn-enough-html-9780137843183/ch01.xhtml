<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough HTML, CSS and Layout to Be Dangerous: An Introduction to Modern Website Creation and Templating Systems</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137843053.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="chap-num" id="ch01"><span epub:type="pagebreak" id="page_3"></span>Chapter 1</h2>
<h2 class="chap-title">Basic HTML</h2>
<p class="noindent">Welcome to <em>Learn Enough HTML, CSS and Layout to Be Dangerous</em>! This tutorial teaches you how to design modern websites and deploy them to the live Web. It’s aimed at anyone who wants to know how to make websites, whether for fun, as a freelance web designer, or as a professional front-end designer and developer. Its only prerequisites are knowledge of the Unix command line, a text editor, and version control with Git, as covered by <em>Learn Enough Developer Tools to Be Dangerous</em>.<sup><a id="ch01fn1a" href="ch01.xhtml#ch01fn1">1</a></sup></p>
<p class="footnote"><a id="ch01fn1" href="ch01.xhtml#ch01fn1a">1</a>. The contents of <em>Learn Enough Developer Tools to Be Dangerous</em> are also available separately online as <em>Learn Enough Command Line to Be Dangerous</em> (<a href="https://www.learnenough.com/command-line">https://www.learnenough.com/command-line</a>), <em>Learn Enough Text Editor to Be Dangerous</em> (<a href="https://www.learnenough.com/text-editor">https://www.learnenough.com/text-editor</a>), and <em>Learn Enough Git to Be Dangerous</em> (<a href="https://www.learnenough.com/git">https://www.learnenough.com/git</a>). We will occasionally refer to these individual titles, but anything we mention can be found in <em>Learn Enough Developer Tools to Be Dangerous</em> as well.</p>
<p class="indent"><em>Learn Enough HTML, CSS and Layout to Be Dangerous</em> consists of three parts, each covering one imporant aspect of web development (and based on the corresponding online course from Learn Enough (<a href="https://www.learnenough.com/">https://www.learnenough.com/</a>)):</p>
<ul class="bullet">
<li><p class="bullet"><a href="part01.xhtml#part01">Part I</a>: <em>Learn Enough HTML to Be Dangerous</em> (<a href="https://www.learnenough.com/html">https://www.learnenough.com/html</a>) on HyperText Markup Language, the language of the World Wide Web</p></li>
<li><p class="bullet"><a href="part02.xhtml#part02">Part II</a>: <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> (<a href="https://www.learnenough.com/css-and-layout">https://www.learnenough.com/css-and-layout</a>) on Cascading Style Sheets (CSS), the design language of the Web, and page layout, including an introduction to <em>static site generators</em></p></li>
<li><p class="bullet"><a href="part03.xhtml#part03">Part III</a>: <em>Learn Enough Custom Domains to Be Dangerous</em> (<a href="https://www.learnenough.com/custom-domains">https://www.learnenough.com/custom-domains</a>) on registering and configuring custom domains<sup><a id="ch01fn2a" href="ch01.xhtml#ch01fn2">2</a></sup></p>
<p class="footnote"><a id="ch01fn2" href="ch01.xhtml#ch01fn2a">2</a>. Because <em>Learn Enough Custom Domains to Be Dangerous</em> is intended mainly for reference, it does not have a corresponding interactive course, nor does it have any exercises. Unlike the other tutorials, though, it is available in its entirety, both online and as a downloadable ebook, at <a href="https://www.learnenough.com/custom-domains">https://www.learnenough.com/custom-domains</a>.</p></li>
</ul>
<p class="noindent"><span epub:type="pagebreak" id="page_4"></span>Because of the close association between the parts and the standalone courses, <em>Learn Enough HTML, CSS, and Layout to Be Dangerous</em> will use terms like “<a href="part01.xhtml#part01">Part I</a>” and “<em>Learn Enough HTML to Be Dangerous</em>” interchangeably.</p>
<p class="indent">In this first part of the tutorial, we’ll focus on HyperText Markup Language, or <em>HTML</em>, which is the universal language of the World Wide Web. Every time you visit a website, the site’s web server sends HTML to your browser, which then renders it as the web page you see on your screen. Because this process is universal, anyone who works with web technologies—which these days means virtually all developers, designers, and even many managers—can benefit from knowing the basics of what HTML is and how it works. <em>Learn Enough HTML to Be Dangerous</em> is designed to give you this foundation in basic HTML. (If you’re already familiar with HTML, you can skip right to <a href="part02.xhtml#part02">Part II</a> and refer back to <a href="part01.xhtml#part01">Part I</a> as necessary.)</p>
<p class="indent">Appropriately enough, there are lots of HTML tutorials on the Web, but most of them use toy examples, focusing on HTML syntax in isolation, without showing how HTML is written and deployed in real life. In contrast, <em>Learn Enough HTML to Be Dangerous</em> not only shows you how to make real HTML pages; it shows you how to deploy an actual site to the live Web. If you have previously attempted or completed an HTML tutorial, it’s likely that <em>Learn Enough HTML to Be Dangerous</em> will help you “put everything together” in a way you haven’t seen before, including an emphasis on expanding your skillset with <em>technical sophistication</em> (<a href="ch01.xhtml#box1_1">Box 1.1</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box1_1">
<p class="sb-title1"><strong>Box 1.1: Technical Sophistication</strong></p>
<p class="sb-noindent">If tech is the new literacy, technical sophistication is like being able to read and write, and HTML is like the alphabet of the Web. This includes being able to figure things out on your own (like sounding out words while reading) and look things up when you need them (like consulting a dictionary or thesaurus while writing).</p>
<p class="sb-indent"><span epub:type="pagebreak" id="page_5"></span>In <em>Learn Enough HTML to Be Dangerous</em>, we’ll constantly be on the lookout for chances to improve our technical sophistication. We’ll deploy our website immediately to production (<a href="ch01.xhtml#sec1_3">Section 1.3</a>), getting over any bumps along the way. We’ll push ourselves to read HTML we don’t quite understand, content to get the gist at first before deepening our mastery later. And we’ll put all our tools to use, combining the command line, a text editor, and version control to learn how to make HTML websites the Right Way™—professional-grade from the start.</p>
</aside>
<p class="indent">Because of our pragmatic approach, the tools we’ll be using are all professional-grade (<a href="ch01.xhtml#ch1fig1">Figure 1.1</a><sup><a id="ch01fn3a" href="ch01.xhtml#ch01fn3">3</a></sup>). They are the same tools covered in <em>Learn Enough Developer Tools to Be Dangerous</em> and in the corresponding Learn Enough online courses:</p>
<figure class="figure" id="ch1fig1">
<img src="graphics/01fig01.jpg" alt="images" width="676" height="380"/>
<figcaption>
<p class="title-f"><strong>Figure 1.1:</strong> The tools of the trade (kitten not included).</p>
</figcaption>
</figure>
<p class="footnote"><a id="ch01fn3" href="ch01.xhtml#ch01fn3a">3</a>. Kitten image courtesy of halfmax.ru/Shutterstock.</p>
<ol class="number">
<li><p class="number"><em>Learn Enough Command Line to Be Dangerous</em> on the Unix command line</p></li>
<li><p class="number"><em>Learn Enough Text Editor to Be Dangerous</em> on text editors</p></li>
<li><p class="number"><em>Learn Enough Git to Be Dangerous</em> on version control with Git</p></li>
</ol>
<p class="noindent">To get even more out of the sequence, you can join the Learn Enough All Access subscription service (<a href="https://www.learnenough.com/all-access">https://www.learnenough.com/all-access</a>), which <span epub:type="pagebreak" id="page_6"></span>includes streaming videos and special enhanced versions of the online tutorials, among other benefits.</p>
<p class="indent">If you’re just getting started with HTML, the Developer Tools sequence represents a little bit of overhead, but the benefits are enormous. To our knowledge, this combination of software development best practices and deploying to a live website is unique among introductory HTML and CSS tutorials, and gives you a tremendous advantage both when collaborating with others and when taking your skills to the next level by learning to build more complicated sites.</p>
<p class="indent"><em>Learn Enough HTML to Be Dangerous</em> focuses on core HTML, starting with a “Hello, world!” page that we’ll deploy to production (!) right here in <a href="ch01.xhtml#ch01">Chapter 1</a>. We’ll then fill in the <em>index page</em> with formatted text, links, and images in <a href="ch02.xhtml#ch02">Chapter 2</a>, expanding it into a multiple-page site with more advanced features like tables and lists in <a href="ch03.xhtml#ch03">Chapter 3</a>. Finally, we’ll add some inline styling in <a href="ch04.xhtml#ch04">Chapter 4</a>, which will allow us to see the effect of simple style rules on plain HTML elements.</p>
<p class="indent">The resulting site will be functional, but we’ll run into several important limitations imposed by working with raw HTML. This will set the stage for <a href="part02.xhtml#part02">Part II</a>, which creates a fully modern website using <em>Cascading Style Sheets</em> (CSS) to separate the design of the site from its HTML structure, while covering site layouts and advanced styling as well.</p>
<p class="indent">For the best learning experience, it is generally recommended that you type the code listings in by hand. In case you ever want to copy and paste something, though, all the listings are available online at the following URL:</p>
<p class="codelink"><a href="ch01_images.xhtml#p006pro01a" id="p006pro01">Click here to view code image</a></p>
<pre class="pre1">https://github.com/learnenough/learn_enough_html_css_and_layout_code_listings</pre>
<section>
<h3 class="h3" id="sec1_1">1.1 Introduction</h3>
<p class="noindent">Underneath every website, no matter how simple or complex, you will find HTML. In <a href="part01.xhtml#part01">Part I</a>, by creating and deploying a simple but real website, we’ll gain an understanding of the underlying structure that every site uses to organize and display content online.</p>
<p class="indent">As a technology standard, HTML has been constantly evolving ever since its introduction in 1993 by Tim Berners-Lee, the original “web developer” (<a href="ch01.xhtml#ch1fig2">Figure 1.2</a>).<sup><a id="ch01fn4a" href="ch01.xhtml#ch01fn4">4</a></sup></p>
<p class="footnote"><a id="ch01fn4" href="ch01.xhtml#ch01fn4a">4</a>. Image courtesy of dpa picture alliance/Alamy Stock Photo.</p>
<figure class="figure" id="ch1fig2">
<img src="graphics/01fig02.jpg" alt="images" width="601" height="462"/>
<figcaption>
<p class="title-f"><strong>Figure 1.2:</strong> Sir Tim Berners-Lee, the original web developer.</p>
</figcaption>
</figure>
<p class="noindent"><span epub:type="pagebreak" id="page_7"></span>Nowadays, the specification of what’s in HTML and what isn’t is managed by the World Wide Web Consortium (W3C). The latest public release, which is what we will be using in this tutorial, is HTML5 (that is, version 5 of HTML). The companies that create web browsers take the specs from the W3C and implement the behaviors that are expected when the browser comes across any of the allowed formatting, such as <strong>making text bold</strong> or <span class="red">changing its color</span> (or even <span class="red"><strong>doing both</strong></span> at the same time).</p>
<p class="indent">Fortunately, we won’t need to get into a lot of specifics or worry about what has changed from version to version. Just know that new features are being added regularly to expand browser functionality and modernize the technology. Common elements, including the ones we’ll be covering in this tutorial, haven’t changed much since the beginning, but that doesn’t mean that they will always be safe—the HTML spec is a constantly evolving creature being assembled by a committee (<a href="ch01.xhtml#ch1fig3">Figure 1.3</a>).<sup><a id="ch01fn5a" href="ch01.xhtml#ch01fn5">5</a></sup> We’ll discuss some practical effects of this in <a href="ch01.xhtml#sec1_2">Section 1.2</a>.</p>
<p class="footnote"><a id="ch01fn5" href="ch01.xhtml#ch01fn5a">5</a>. Image courtesy of Aleksandr Frolov/123RF.</p>
<figure class="figure" id="ch1fig3">
<img src="graphics/01fig03.jpg" alt="images" width="676" height="491"/>
<figcaption>
<p class="title-f"><strong>Figure 1.3:</strong> HTML in animal form.</p>
</figcaption>
</figure>
</section>
<section>
<h3 class="h3" id="sec1_2"><span epub:type="pagebreak" id="page_8"></span>1.2 HTML Tags</h3>
<p class="noindent">As the name <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage indicates, HTML is a <em>markup</em> language, which allows a web author to organize and define how content should be displayed. This means HTML can do things like add text formatting; make headings, lists, and tables; and include images and links. You can think of an HTML file as an ordinary written document that has been carefully annotated by the author with instructions on how to display it. Some of these annotations might highlight parts of the text, some might include an image that has been added to the document, and others might tell you where to find additional information.</p>
<p class="indent">The “HyperText” part of the HTML initialism refers to the way links on the Web allow you to move from one document to another in a non-linear fashion. For example, if you are reading the Wikipedia article on HTML and see a highlighted link to a related topic like CSS, you can click on that link and be taken immediately to the other article. It also allows a document like this one to link to Wikipedia. (You might <span epub:type="pagebreak" id="page_9"></span>notice that external links in this document open in a new browser tab. We’ll learn how to do this ourselves in <a href="ch03.xhtml#sec3_3">Section 3.3</a>.)</p>
<p class="indent">Technologically, hypertext is a great improvement over non-linked documents, as it eliminates the need to flip or scroll through pages of content to find what you are looking for. These days, the ability to link between documents is something that we all take for granted, but when the HTML specification was created it was an innovation important enough to be included in the name of the technology.</p>
<p class="indent">HTML source is <em>plain text</em>, which makes it ideal for editing with a text editor (as discussed in <em>Learn Enough Text Editor to Be Dangerous</em>). Instead of using the convenient but inflexible What You See Is What You Get (WYSIWYG) approach of word processors, HTML indicates formatting using special <em>tags</em> which are the text annotations alluded to above.</p>
<p class="indent">As we’ll see, HTML supports more than one kind of tags, but the most common kind consist of strings (sequences of characters) enclosed in <em>beginning</em> and <em>ending</em> tags, like this:</p>
<p class="codelink"><a href="ch01_images.xhtml#p009pro01a" id="p009pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>strong</strong></span>&gt;make them strong&lt;/<span class="pd_green1"><strong>strong</strong></span>&gt;</pre>
<p class="noindent"><a href="ch01.xhtml#ch1fig4">Figure 1.4</a> illustrates the detailed anatomy of this typical tag, including the name of the tag (<span class="green-d"><code><strong>strong</strong></code></span>, in this case), angle brackets, and a forward slash (<span class="green-d"><code><strong>/</strong></code></span>).</p>
<figure class="figure" id="ch1fig4">
<img src="graphics/01fig04.jpg" alt="images" width="596" height="321"/>
<figcaption>
<p class="title-f"><strong>Figure 1.4:</strong> The anatomy of a typical HTML tag.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_10"></span>Although HTML tags are not visible to the end-user (i.e., the person viewing your website), they do give the web browser suggestions about how to format the content and how it should be displayed on the page. A simple example using the <span class="green-d"><code><strong>strong</strong></code></span> tag appears in <a href="ch01.xhtml#ch1list1">Listing 1.1</a>.</p>
<p class="listing" id="ch1list1"><strong>Listing 1.1:</strong> A string with HTML tags in the text.</p>
<p class="codelink"><a href="ch01_images.xhtml#p01list01a" id="p01list01">Click here to view code image</a></p>
<pre class="pre2">I am a string about things. Some of those things are more important than others, so I
will &lt;<span class="pd_green1"><strong>strong</strong></span>&gt;make them strong&lt;/<span class="pd_green1"><strong>strong</strong></span>&gt; to stand out among less spectacular neighbors.</pre>
<p class="noindent">Most browsers render the <span class="green-d"><code><strong>strong</strong></code></span> tag as <strong>boldface text</strong>, so in a typical browser <a href="ch01.xhtml#ch1list1">Listing 1.1</a> would appear something like this:</p>
<p class="blockquote">I am a string about things. Some of those things are more important than others, so I will <strong>make them strong</strong> to stand out among less spectacular neighbors.</p>
<p class="noindent">If we were to split the contents of the <span class="green-d"><code><strong>strong</strong></code></span> tag in <a href="ch01.xhtml#ch1list1">Listing 1.1</a> onto two lines by hitting return after “them”, the browser would ignore the extra space and format the string as a continuous line of text.</p>
<p class="indent">By the way, HTML does support a <span class="green-d"><code><strong>b</strong></code></span> (bold) tag in addition to <span class="green-d"><code><strong>strong</strong></code></span>, but over the years HTML has moved away from tag names that specify formatting (i.e., “make the text <strong>bold</strong>”) and toward names that focus on <em>meaning</em>—or, in fancier terms, <em>semantics</em>—leading to an emphasis on so-called <em>semantic tags</em> (<a href="ch01.xhtml#box1_2">Box 1.2</a>). For example, the semantic tag <span class="green-d"><code><strong>strong</strong></code></span> indicates that the enclosed text should be made to look “strong” somehow, letting the browser decide exactly how to do it.</p>
<aside epub:type="sidebar" class="sidebar1" id="box1_2">
<p class="sb-title1"><strong>Box 1.2: The Cautionary (Semantic) Tale of</strong> <code><strong>&lt;b&gt; and &lt;i&gt;</strong></code></p>
<p class="sb-noindent">When HTML was first created, the Internet made funny noises when you connected to it, and you paid for the connection in time or by amount of data sent. Those limitations meant that brevity was an important consideration when deciding on tags, and the whole endeavor was so new that there wasn’t as much thought about the meaning the tags conveyed. So short tags were popular, and getting everything to display correctly to people was the end-goal.</p>
<p class="sb-indent">As a result of this focus on concision, the original way to make text bold was to use the <code>b</code> tag (<code>&lt;b&gt;...&lt;/b&gt;</code>), and to make text italic it was the <code>i</code> tag (<code>&lt;i&gt;...&lt;/i&gt;</code>). This worked just fine (in fact, it still works even today), and no one was confused.</p>
<p class="sb-indent"><span epub:type="pagebreak" id="page_11"></span>What some developers began to notice was that HTML tags were being defined only by how the content inside should be displayed in a browser, rather than by the meaning of the content. That’s fine for people looking at content with good ol’ eyeballs, but not so good for automated systems that might be rapidly scanning web pages and need to infer what the content wrapped in different HTML tags actually means.</p>
<p class="sb-indent">To address this issue, a movement started that pushed for new tags based on semantic meaning instead of on appearance, thereby giving rise to the current preferred method for indicating bold or italicized text with <code>strong</code> (<code>&lt;strong&gt;...&lt;/strong&gt;</code>) and <code>em</code> (<code>&lt;em&gt;...&lt;/em&gt;</code>, for “emphasized”), respectively. The idea here is that the intent behind making text bold is to make it strongly <strong>stand out</strong> from the rest of the content, and the intent behind italicizing text is to <em>show emphasis</em>.</p>
<p class="sb-indent">This might seem like a subtle difference, but semantic tags are used for a lot more than just defining strong or emphasized text. Semantic HTML tags will be further discussed in <a href="part02.xhtml#part02">Part II</a>, where we will cover tag conventions and page layout in greater depth.</p>
</aside>
<p class="indent">At this point, we’ve covered the conceptual core of HTML: HTML consists of text content wrapped in tags, which organize or indicate a change in the display of that content.</p>
<p class="indent">But the Devil, as they say, is in the details… and HTML has a whole lot of details.</p>
<section>
<h4 class="h4" id="sec1_2_1">1.2.1 Exercises</h4>
<p class="noindent"><em>Note</em>: Unlike most other Learn Enough tutorials, the results of some exercises will appear in future screenshots.</p>
<ol class="number">
<li><p class="number">Identify all the tags in <a href="ch01.xhtml#ch1list2">Listing 1.2</a>. Notice that you don’t have to know what a tag does to be able to identify it correctly. (This is a good example of technical sophistication (<a href="ch01.xhtml#box1_1">Box 1.1</a>).)</p></li>
<li><p class="number">Some HTML tags don’t contain any content, and instead are known as <em>void elements</em>, also called <em>self-closing tags</em>. Which tag in <a href="ch01.xhtml#ch1list2">Listing 1.2</a> is a void element?</p></li>
<li><p class="number">HTML tags can be <em>nested</em>, which means that one tag can be put inside another. Which tags in <a href="ch01.xhtml#ch1list2">Listing 1.2</a> are nested? Don’t include any self-closing tags.</p></li>
</ol>
<p class="listing" id="ch1list2"><strong>Listing 1.2:</strong> Shall I compare thee to a summer’s day?</p>
<p class="codelink"><a href="ch01_images.xhtml#p01list02a" id="p01list02">Click here to view code image</a></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>p</strong></span>&gt;
  William Shakespeare's &lt;<span class="pd_green1"><strong>em</strong></span>&gt;Sonnets&lt;/<span class="pd_green1"><strong>em</strong></span>&gt; consists of 154 poems, each fourteen
  lines long (three
  &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://en.wikipedia.org/wiki/Quatrain"</span>&gt;quatrains&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
  followed by a rhyming
  &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://en.wikipedia.org/wiki/Couplet"</span>&gt;couplet&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;).
  &lt;<span class="pd_green1"><strong>strong</strong></span>&gt;Sonnet 18&lt;/<span class="pd_green1"><strong>strong</strong></span>&gt; is perhaps the most famous, and begins like this:
&lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
&lt;<span class="pd_green1"><strong>blockquote</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>p</strong></span>&gt;
    Shall I compare thee to a summer's day?&lt;<span class="pd_green1"><strong>br</strong></span>&gt;
    Thou art more lovely and more temperate.
  &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>blockquote</strong></span>&gt;</pre>
</section>
</section>
<section>
<h3 class="h3" id="sec1_3"><span epub:type="pagebreak" id="page_12"></span>1.3 Starting the Project</h3>
<p class="noindent">Now that we know the basic structure of markup and tags, it’s time to get started with the project that will serve as our sample website for learning HTML. The sample project is a mock informational website, whose main page talks a little about this tutorial, the company behind it, and HTML itself. As we develop the homepage and two ancillary pages, we’ll see how to use a wide variety of HTML tags, while also showing you how to make the kind of public-facing site that you could use for your own work or as a service to other people. Although some of the information on the site is about Learn Enough to Be Dangerous, ultimately it is about <em>you</em>.</p>
<p class="indent">We’ll begin by following the same steps used in <em>Learn Enough Git to Be Dangerous</em>, so this section will also serve as a review of how to use Git. (If you don’t have Git proficiency at the level of <em>Learn Enough Git to Be Dangerous</em>, we recommend you read that tutorial at this time.) As in the Git tutorial, the result here will be that we can deploy our sample HTML site to the live Web using GitHub Pages (<a href="ch01.xhtml#box1_3">Box 1.3</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box1_3">
<p class="sb-title1"><strong>Box 1.3: GitHub Pages</strong></p>
<p class="sb-noindent">Once you have an account at GitHub (and have verified your email address), you can use a free feature called <em>GitHub Pages</em> that allows you to host simple HTML sites for free on GitHub’s infrastructure.</p>
<p class="sb-indent"><span epub:type="pagebreak" id="page_13"></span>This is a major advance compared to the bad old days of the early Web. For example, if this were 1999, you’d not only have to pay money for the hosting, but you’d also be on the hook for the cost of transferring the data to the people visiting your site. For sites with even moderate traffic, the bills could add up fast.</p>
<p class="sb-indent">Nowadays, we have many better options, GitHub Pages among them. Not only is GitHub Pages free, but it is incredibly easy to use. By updating a single configuration setting (described below), we can arrange for GitHub Pages to serve our website right from the <code>main</code> branch. As described in <a href="part03.xhtml#part03">Part III</a>, you can even set up your GitHub Pages site to use a custom domain (like <a href="http://www.example.com">www.example.com</a>). The result is an industrial-grade web presence with built-in Git backups, high performance, and zero cost.</p>
<p class="sb-indent">That’s a combination that’s hard to beat!</p>
</aside>
<p class="indent">We’ll get started by making a directory and an initial repository for our sample website. First, open a terminal window<sup><a id="ch01fn6a" href="ch01.xhtml#ch01fn6">6</a></sup> and make a directory called <span class="green-d"><code><strong>sample_website</strong></code></span><sup><a id="ch01fn7a" href="ch01.xhtml#ch01fn7">7</a></sup>:</p>
<p class="footnote"><a id="ch01fn6" href="ch01.xhtml#ch01fn6a">6</a>. <em>Note for Mac users</em>: Although it shouldn’t matter in <em>Learn Enough HTML to Be Dangerous</em>, it is recommended that you use the Bourne-again shell (Bash) to complete this tutorial. To switch your shell to Bash, run <span class="green-d"><code><strong>chsh -s /bin/bash</strong></code></span> at the command line, enter your password, and restart your terminal program. Any resulting alert messages are safe to ignore. See the Learn Enough blog post “Using Z Shell on Macs with the Learn Enough Tutorials” (<a href="https://news.learnenough.com/macos-bash-zshell">https://news.learnenough.com/macos-bash-zshell</a>) for more information.</p>
<p class="footnote"><a id="ch01fn7" href="ch01.xhtml#ch01fn7a">7</a>. The command <span class="green-d"><code><strong>mkdir -p</strong></code></span> is covered in <a href="ch08.xhtml#sec8_2">Section 8.2</a> of <em>Learn Enough Developer Tools to Be Dangerous</em>. Unless otherwise indicated, every command we use in <em>Learn Enough HTML to Be Dangerous</em> is covered somewhere in <em>Learn Enough Developer Tools to Be Dangerous</em>, so we recommend you look there if you run across any commands that don’t look familiar.</p>
<p class="codelink"><a href="ch01_images.xhtml#p013pro01a" id="p013pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> mkdir -p repos/sample_website</pre>
<p class="noindent">Next, <span class="green-d"><code><strong>cd</strong></code></span> into the directory and <span class="green-d"><code><strong>touch</strong></code></span> the file for the main page of the site, which should be called <span class="green-d"><code><strong>index.html</strong></code></span>:</p>
<p class="codelink"><a href="ch01_images.xhtml#p013pro02a" id="p013pro02">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> <span class="pd_green1">cd</span> repos/sample_website
<span class="b-nilam"><strong>$</strong></span> touch index.html</pre>
<p class="noindent">Then initialize the repository:</p>
<p class="codelink"><a href="ch01_images.xhtml#p013pro03a" id="p013pro03">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> git init
<span class="b-nilam"><strong>$</strong></span> git add -A
<span class="b-nilam"><strong>$</strong></span> git commit -m <span class="pd_red">"Initialize repository"</span></pre>
<p class="indent"><span epub:type="pagebreak" id="page_14"></span>The reason we created a file using <span class="green-d"><code><strong>touch</strong></code></span> is because Git won’t let you make a commit in an empty repository.<sup><a id="ch01fn8a" href="ch01.xhtml#ch01fn8">8</a></sup> The reason we’ve called it <span class="green-d"><code><strong>index.html</strong></code></span> is because that’s the default filename for “home” pages on the Web, and most sites will automatically serve up <span class="green-d"><code><strong>index.html</strong></code></span> when you hit the bare domain. In other words, when you point a browser at <a href="http://example.com">example.com</a>, the server will automatically show you <a href="http://exam-ple.com/index.html">exam-ple.com/index.html</a>. (Those links work, by the way; amazingly, the HTML standard specifically reserves the site <a href="http://example.com">example.com</a> for examples just like this one!)</p>
<p class="footnote"><a id="ch01fn8" href="ch01.xhtml#ch01fn8a">8</a>. As mentioned in <a href="ch02.xhtml#ch02">Chapter 2</a> of <em>Learn Enough Developer Tools to Be Dangerous</em>, the <span class="green-d"><code><strong>touch</strong></code></span> technique is a personal favorite, but the file doesn’t have to be empty; for example, <span class="green-d"><code><strong>echo hello &gt; index.html</strong></code></span> would also have worked.</p>
<p class="indent">With the repo initialized, we’re now ready to push our (nearly) empty repo up to GitHub. As in <em>Learn Enough Git to Be Dangerous</em>, you should go to <a href="http://github.com">github.com</a> (<a href="https://github.com/">https://github.com/</a>), log in if necessary, and then create a new repository using the name <span class="green-d"><code><strong>sample_website</strong></code></span> and the description “A sample website for Learn Enough HTML to Be Dangerous”, as shown in <a href="ch01.xhtml#ch1fig5">Figure 1.5</a>.<sup><a id="ch01fn9a" href="ch01.xhtml#ch01fn9">9</a></sup></p>
<p class="footnote"><a id="ch01fn9" href="ch01.xhtml#ch01fn9">9</a>. GitHub is constantly updating its user interface (UI), so in these and other figures you may notice slight differences compared to what you see in your browser. Use your technical sophistication (<a href="ch05.xhtml#box5_1">Box 5.1</a>) to resolve any discrepancies.</p>
<figure class="figure" id="ch1fig5">
<img src="graphics/01fig05.jpg" alt="images" width="671" height="519"/>
<figcaption>
<p class="title-f"><strong>Figure 1.5:</strong> Creating a new GitHub repo for our website.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_15"></span>After creating the remote repo, you should set the <em>remote origin</em> as the URL for the repo, which you can find as shown in <a href="ch01.xhtml#ch1fig6">Figure 1.6</a> (or just copy from the section “…or push an existing repository from the command line” on the GitHub setup page). This involves using <span class="green-d"><code><strong>git remote</strong></code></span> to set the origin URL and then pushing the <span class="green-d"><code><strong>main</strong></code></span> branch “upstream” using <span class="green-d"><code><strong>git push -u</strong></code></span>:<sup><a id="ch01fn10a" href="ch01.xhtml#ch01fn10">10</a></sup></p>
<p class="footnote"><a id="ch01fn10" href="ch01.xhtml#ch01fn10">10</a>. The screencasts that are available to accompany this book refer to the <span class="green-d"><code><strong>master</strong></code></span> branch, which was the default branch name for the first 15+ years of Git’s existence, but the text has been updated to use <span class="green-d"><code><strong>main</strong></code></span>, which is the current preferred default. See the Learn Enough blog post “Default Git Branch Name with Learn Enough and the Rails Tutorial” (<a href="https://news.learnenough.com/default-git-branch-name-with-learn-enough-and-the-rails-tutorial">https://news.learnenough.com/default-git-branch-name-with-learn-enough-and-the-rails-tutorial</a>) for more information.</p>
<figure class="figure" id="ch1fig6">
<img src="graphics/01fig06.jpg" alt="images" width="635" height="289"/>
<figcaption>
<p class="title-f"><strong>Figure 1.6:</strong> Finding the repo URL.</p>
</figcaption>
</figure>
<p class="codelink"><a href="ch01_images.xhtml#p015pro01a" id="p015pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> git remote add origin &lt;repo url&gt;
<span class="b-nilam"><strong>$</strong></span> git push -u origin main</pre>
<p class="noindent">At this point, you will be prompted for your password, which (as noted in <em>Learn Enough Git to Be Dangerous</em>) must be a <em>personal access token</em> rather than your GitHub password. See the GitHub article “Creating a personal access token” (<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a>) for more information.<sup><a id="ch01fn11a" href="ch01.xhtml#ch01fn11">11</a></sup></p>
<p class="footnote"><a id="ch01fn11" href="ch01.xhtml#ch01fn11a">11</a>. As of this writing, the article is at <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a>, but Googling “github creating personal access token” is also a good bet.</p>
<p class="indent"><span epub:type="pagebreak" id="page_16"></span>At this point, you should click on the Settings tab for your new repository and follow the instructions for serving your website from the <span class="green-d"><code><strong>main</strong></code></span> branch using GitHub Pages, as discussed in <a href="ch11.xhtml#sec11_4">Section 11.4</a> of <em>Learn Enough Developer Tools to Be Dangerous</em> and reviewed in <a href="ch01.xhtml#ch1fig7">Figure 1.7</a>.</p>
<figure class="figure" id="ch1fig7">
<img src="graphics/01fig07.jpg" alt="images" width="673" height="256"/>
<figcaption>
<p class="title-f"><strong>Figure 1.7:</strong> Serving our website from the <span class="green-d"><code><strong>main</strong></code></span> branch.</p>
</figcaption>
</figure>
<p class="indent">As soon as you click the Save button, the sample website will be live on the Web via GitHub Pages! Its location is given by a github.io URL based on the username and repo name (<a href="ch01.xhtml#ch1list3">Listing 1.3</a>).</p>
<p class="listing" id="ch1list3"><strong>Listing 1.3:</strong> The template for a GitHub Pages URL.</p>
<p class="codelink"><a href="ch01_images.xhtml#p01list03a" id="p01list03">Click here to view code image</a></p>
<pre class="pre2">https://&lt;username&gt;.github.io/&lt;repo_name&gt;</pre>
<p class="noindent">For example, the Learn Enough version of the sample website lives at the URL</p>
<p class="blockquote"><a href="https://learnenough.github.io/sample_website_reference_implementation">https://learnenough.github.io/sample_website_reference_implementation</a></p>
<p class="noindent">Incidentally, that means it can be cloned from here for future reference:<sup><a id="ch01fn12a" href="ch01.xhtml#ch01fn12">12</a></sup></p>
<p class="footnote"><a id="ch01fn12" href="ch01.xhtml#ch01fn12a">12</a>. Keeping the reference website in sync with the main tutorial is a challenging task, so reports of any discrepancies are gratefully received. You can send such reports to <a href="http://support@learnenough.com">support@learnenough.com</a>.</p>
<p class="blockquote"><a href="https://github.com/learnenough/sample_website_reference_implementation">https://github.com/learnenough/sample_website_reference_implementation</a></p>
<p class="indent"><span epub:type="pagebreak" id="page_17"></span>If you visit your version of this site, it should resolve properly, and it should even automatically serve up the contents of <span class="green-d"><code><strong>index.html</strong></code></span>. Because those contents are empty, though, all you’ll see is a blank white screen. We’ll take our first steps toward changing this sad state of affairs in <a href="ch01.xhtml#sec1_4">Section 1.4</a>, and then we’ll knock it up a notch starting in <a href="ch02.xhtml#ch02">Chapter 2</a>.</p>
<section>
<h4 class="h4" id="sec1_3_1">1.3.1 Exercises</h4>
<ol class="number">
<li><p class="number">Add and commit a file called <span class="green-d"><code><strong>README.md</strong></code></span>, taking care to use at least a few Mark-down (<a href="https://daringfireball.net/projects/markdown/">https://daringfireball.net/projects/markdown/</a>) tags. What is the result at GitHub?</p></li>
<li><p class="number">What happens if you visit <span class="green-d"><code><strong>&lt;username&gt;.github.io/&lt;repo_name&gt;/README.md</strong></code></span> in a browser? What does this imply about including sensitive information in a public website repo?</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec1_4">1.4 The First Tag</h3>
<p class="noindent">In order to initialize the Git repository in <a href="ch01.xhtml#sec1_3">Section 1.3</a>, we needed only an empty <span class="green-d"><code><strong>index.html</strong></code></span> file, but of course our sample site will eventually have much more than that. In this section, we’ll begin by adding some content in a single tag—just enough to give us a site to view, commit, and deploy. That’s a huge accomplishment, though, and will serve as an essential foundation for what follows.</p>
<p class="indent">Now that an empty index page has been created, you should open <span class="green-d"><code><strong>index.html</strong></code></span> using your favorite editor, which for the purposes of this tutorial we’ll assume is Atom. It’s possible to open the file directly using <span class="green-d"><code><strong>File &gt; Open</strong></code></span>, but (as noted in <a href="ch07.xhtml#sec7_4">Section 7.4</a> of <em>Learn Enough Developer Tools to Be Dangerous</em>) these days all the cool kids open the full HTML project directly at the command line:</p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> atom .</pre>
<p class="noindent">(As noted in <a href="ch04.xhtml#sec4_3">Section 4.3</a> of <em>Learn Enough Developer Tools to Be Dangerous</em>, the <span class="green-d"><code><strong>.</strong></code></span> (“dot”) refers to the current directory.)</p>
<p class="indent">Even though we have only one file for now (and possibly a README (<a href="ch01.xhtml#sec1_3_1">Section 1.3.1</a>)), opening the full project is a good habit to cultivate, since it allows us to easily open and edit multiple files in the same project. We’ll put this technique to good use when we start making additional pages in <a href="ch03.xhtml#sec3_1">Section 3.1</a>.</p>
<p class="indent"><span epub:type="pagebreak" id="page_18"></span>At this point, we’re ready to fill the index file with some content, which should consist of the phrase “Hello, world!” (<a href="ch01.xhtml#ch1list4">Listing 1.4</a>) enclosed in the <em>paragraph tag</em> <span class="green-d"><code><strong>p</strong></code></span>. Note that the <span class="green-d"><code><strong>p</strong></code></span> tag has exactly the same form as the <span class="green-d"><code><strong>strong</strong></code></span> tag (<a href="ch01.xhtml#ch1fig4">Figure 1.4</a>).</p>
<p class="listing" id="ch1list4"><strong>Listing 1.4:</strong> A short paragraph with the contents “Hello, world!”.<br/><code><em>index.html</em></code></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>p</strong></span>&gt;Hello, world!&lt;/<span class="pd_green1"><strong>p</strong></span>&gt;</pre>
<p class="indent">We see in <a href="ch01.xhtml#ch1fig8">Figure 1.8</a> that Atom automatically highlights the HTML source, which it knows to do because of the <span class="green-d"><code><strong>.html</strong></code></span> extension on the filename. This <em>syntax highlighting</em> is irrelevant to the computer—in fact, it takes place purely in the editor and doesn’t have anything to do with <span class="green-d"><code><strong>index.html</strong></code></span> itself—but it makes it easier for humans to distinguish the difference between tags and content. (This is also why we use syntax highlighting in this tutorial’s code listings.)</p>
<figure class="figure" id="ch1fig8">
<img src="graphics/01fig08.jpg" alt="images" width="662" height="305"/>
<figcaption>
<p class="title-f"><strong>Figure 1.8:</strong> “Hello, world!” in a text editor.</p>
</figcaption>
</figure>
<p class="indent">Having made a change to add content to <span class="green-d"><code><strong>index.html</strong></code></span>, let’s view the result in a browser. On macOS, you can do this using the <span class="green-d"><code><strong>open</strong></code></span> command:</p>
<p class="codelink"><a href="ch01_images.xhtml#p018pro01a" id="p018pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> open index.html   <span class="pd_blue1"><em># macOS only</em></span></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_19"></span>On many Linux systems, you can use the similar <span class="green-d"><code><strong>xdg-open</strong></code></span> command:</p>
<p class="codelink"><a href="ch01_images.xhtml#p019pro01a" id="p019pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> xdg-open index.html   <span class="pd_blue1"><em># Linux only</em></span></pre>
<p class="noindent">A technique that works on almost any system is to view the <span class="green-d"><code><strong>sample_website</strong></code></span> directory in a graphical file browser and double-click the filename. No matter how you do it, the result should be to open <span class="green-d"><code><strong>index.html</strong></code></span> in the default browser on your system, which should appear something like <a href="ch01.xhtml#ch1fig9">Figure 1.9</a>.</p>
<figure class="figure" id="ch1fig9">
<img src="graphics/01fig09.jpg" alt="images" width="666" height="207"/>
<figcaption>
<p class="title-f"><strong>Figure 1.9:</strong> The local index page in a browser.</p>
</figcaption>
</figure>
<p class="indent">Note that the “URL” in <a href="ch01.xhtml#ch1fig9">Figure 1.9</a> will be a <em>local</em> file, like this:</p>
<p class="codelink"><a href="ch01_images.xhtml#p019pro02a" id="p019pro02">Click here to view code image</a></p>
<pre class="pre1">file:///Users/mhartl/repos/sample_website/index.html</pre>
<p class="noindent">This is because the index page is on our local system and hasn’t yet been deployed to the live Web.</p>
<p class="indent">We know how to remedy this, though—commit our changes to the local Git repository and push up to GitHub Pages:</p>
<p class="codelink"><a href="ch01_images.xhtml#p019pro03a" id="p019pro03">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> git commit -am <span class="pd_red">"Add a short paragraph"</span>
<span class="b-nilam"><strong>$</strong></span> git push</pre>
<p class="noindent">Upon refreshing the browser pointed at the sample website’s GitHub Pages URL (<a href="ch01.xhtml#ch1list3">Listing 1.3</a>), we will see “Hello, world!”. (You may have to wait a few moments for GitHub Pages to load your site. This happens only the first time, and on subsequent requests the response will be lightning-fast.)</p>
<p class="indent">Although the appearance is identical to the local version in <a href="ch01.xhtml#ch1fig9">Figure 1.9</a>, by inspecting the address bar you should be able to confirm that the URL is at github.io, which means that the page is now available on the live Web.</p>
<p class="indent"><span epub:type="pagebreak" id="page_20"></span>Congratulations! You’ve just published a production website.</p>
<section>
<h4 class="h4" id="sec1_4_1">1.4.1 Exercises</h4>
<ol class="number">
<li><p class="number">Replace the contents of <span class="green-d"><code><strong>index.html</strong></code></span> with the markup from <a href="ch01.xhtml#ch1list2">Listing 1.2</a>. Can you guess what the <span class="green-d"><code><strong>a</strong></code></span> tag does?</p></li>
<li><p class="number">Use your browser’s <em>web inspector</em> to inspect the source from the previous exercise. (Google for “browser web inspector” to learn how to use your browser’s web inspector. Or just right-click on the page.) Does it differ in any way from <a href="ch01.xhtml#ch1list2">Listing 1.2</a>?</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec1_5">1.5 An HTML Skeleton</h3>
<p class="noindent">Although modern web browsers are highly fault-tolerant and will render simple HTML like <a href="ch01.xhtml#ch1list4">Listing 1.4</a> just fine, it’s dangerous to rely on this behavior. Indeed, we saw in <em>Learn Enough Git to Be Dangerous</em> that omitting a single tag resulted in the trademark character<sup>™</sup> not rendering properly (<a href="ch01.xhtml#ch1fig10">Figure 1.10</a>). This is exactly the sort of thing that <span epub:type="pagebreak" id="page_21"></span>can go wrong when you don’t use a fully valid HTML page. To avoid these sorts of problems, from now on all of our sample web pages will use valid HTML to ensure that they will render properly in the broadest possible range of browsers.</p>
<figure class="figure" id="ch1fig10">
<img src="graphics/01fig10.jpg" alt="images" width="666" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 1.10:</strong> The broken About page from <em>Learn Enough Git to Be Dangerous</em>.</p>
</figcaption>
</figure>
<p class="indent">The prototypical HTML skeleton begins with an <span class="green-d"><code><strong>html</strong></code></span> tag containing two elements, a <span class="green-d"><code><strong>head</strong></code></span> and a <span class="green-d"><code><strong>body</strong></code></span>. These latter tags are <em>nested</em> inside the <span class="green-d"><code><strong>html</strong></code></span> tag, as follows:</p>
<p class="codelink"><a href="ch01_images.xhtml#p021pro01a" id="p021pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>html</strong></span>&gt;&lt;<span class="pd_green1"><strong>head</strong></span>&gt;&lt;/<span class="pd_green1"><strong>head</strong></span>&gt;&lt;<span class="pd_green1"><strong>body</strong></span>&gt;&lt;/<span class="pd_green1"><strong>body</strong></span>&gt;&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="noindent">Because this is hard to read, it’s conventional to format the tags using spaces and newlines to make the structure more apparent at a glance:</p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent">Because HTML generally ignores extra space, it makes no difference in the appearance of the page, but this formatting makes it easier for us to understand the source of the document (<a href="ch01.xhtml#box1_4">Box 1.4</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box1_4">
<p class="sb-title1"><strong>Box 1.4: Formatting HTML</strong></p>
<p class="sb-noindent">In order to make HTML easier to read, it’s conventional to add extra spaces and newlines to make the document’s structure clear at a glance. It might look a little strange at first, but it’s a style convention in the development world that helps keep source code readable (and coders sane).</p>
<p class="sb-indent">Generally speaking, HTML ignores extra space when displaying in a browser, so</p>
<pre class="prei">&lt;p&gt;Hello, world!&lt;/p&gt;</pre>
<p class="sb-noindent">will look the same as</p>
<pre class="prei">&lt;p&gt;Hello,
             world!

             &lt;/p&gt;</pre>
<p class="sb-noindent"><span epub:type="pagebreak" id="page_22"></span>It’s a good practice to keep your HTML formatting tidy, and it’s clear that the former is easier to read.</p>
<p class="sb-indent">The readability of the markup can change with time, though, especially after the text grows to more than a couple of sentences, or when there are additional HTML elements nested inside. To keep our content straight and not lose track of tags, in these cases we’ll need to format the code more rigorously.</p>
<p class="sb-indent">There are no universal rules for formatting markup, but a good rule of thumb is to put new tags on their own line unless they fit easily on one, with lines inside those tags indented one level:</p>
<p class="codelink"><a href="ch01_images.xhtml#p022pro01a" id="p022pro01">Click here to view code image</a></p>
<pre class="prei">&lt;p&gt;Hello, world!&lt;/p&gt;

&lt;p&gt;
  Lorem ipsum dolor sit amet, consectetur
  adipisicing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua.
  Ut enim ad minim veniam
&lt;/p&gt;</pre>
<p class="sb-indent">The main exception to the new-line rule involves tags that modify text in a paragraph. For instance, most people do not add line breaks or indentation for elements that are inside lines of text (referred to as <em>inline elements</em>) like the <code>&lt;strong&gt;make them strong&lt;/strong&gt;</code> example from <a href="ch01.xhtml#ch1list1">Listing 1.1</a>. We’ll talk more about these types of inline elements, and how they differ from so-called <em>block elements</em>, in <a href="ch03.xhtml#sec3_2">Section 3.2</a>.</p>
<p class="sb-indent">What constitutes an indentation “level” varies by developer, but we prefer the two-space convention shown above. Four spaces are also common, but in our experience this sends the content running off the right side of the page a little too fast. Some developers use tabs instead of spaces, but (at the risk of starting a holy war) we think this should be strenuously avoided. The main issue is that the display of tab characters is device-dependent, so markup that looks great in a text editor could look terrible using <code>less</code> at the command line.</p>
<p class="sb-indent">It’s important to make sure your editor is configured properly to use spaces (sometimes confusingly called <em>emulated tabs</em>) instead of genuine tabs. Refer to <em>Learn Enough Text Editor to Be Dangerous</em> or use your technical sophistication (<a href="ch01.xhtml#box1_1">Box 1.1</a>) to figure out how.</p>
<p class="sb-indent">Finally, it’s worth noting that many modern text editors include a way to format HTML automatically. For example, in Atom it’s <code>Edit &gt; Lines &gt; Auto Indent</code>. This can be a big help when indenting larger HTML files, especially if they come from an outside source and aren’t already nicely formatted.</p>
</aside>
<p class="indent"><span epub:type="pagebreak" id="page_23"></span>The section of the HTML that is wrapped by <span class="green-d"><code><strong>&lt;head&gt;</strong></code></span> and <span class="green-d"><code><strong>&lt;/head&gt;</strong></code></span> is a header container that defines <em>metadata</em>, a fancy word that just means data about data. This <span class="green-d"><code><strong>&lt;head&gt;</strong></code></span> section is not displayed to users in their browser window, and therefore gives developers the ability to tell the browser where to find other files (such as CSS and JavaScript) that will be used to properly display the page’s content, <em>without</em> having that information show up in the actual content of the web page. (We’ll cover more things that can be added to the HTML header starting in <a href="part02.xhtml#part02">Part II</a>.)</p>
<p class="indent">Meanwhile, the content inside <span class="green-d"><code><strong>&lt;body&gt;</strong></code></span> and <span class="green-d"><code><strong>&lt;/body&gt;</strong></code></span> is what gets displayed to the browser. Every website you’ve ever seen consists of content inside an HTML <span class="green-d"><code><strong>body</strong></code></span> tag. Once we’ve defined the contents of the <span class="green-d"><code><strong>head</strong></code></span> tag, most of the modifications we’ll make to the site will be inside the <span class="green-d"><code><strong>body</strong></code></span> tag.</p>
<p class="indent">To complete the skeleton, there are only two more elements: one required and one optional but strongly recommended. First, we need to tell browsers what the <em>document type</em> is, and inside the <span class="green-d"><code><strong>head</strong></code></span> tag we need to define a nonempty <span class="green-d"><code><strong>title</strong></code></span>, as seen in <a href="ch01.xhtml#ch1list5">Listing 1.5</a>.</p>
<p class="listing" id="ch1list5"><strong>Listing 1.5:</strong> A nearly complete HTML skeleton.</p>
<pre class="pre2"><span class="bg1"><span class="pd_red"><strong>&lt;!DOCTYPE html&gt;</strong></span></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>title</strong></span>&gt;Page Title&lt;/<span class="pd_green2"><strong>title</strong></span>&gt;</span>
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="noindent">Here the <span class="green-d"><code><strong>DOCTYPE</strong></code></span> is an irregular tag, and you should not spend even a millisecond worrying about its exact form. (Why is there an exclamation point before <span class="green-d"><code><strong>DOCTYPE</strong></code></span>? We have no idea.) Meanwhile, the <span class="green-d"><code><strong>title</strong></code></span> tag has exactly the same form as the <span class="green-d"><code><strong>p</strong></code></span> tag we saw in <a href="ch01.xhtml#sec1_4">Section 1.4</a> (and the <span class="green-d"><code><strong>strong</strong></code></span> tag before that (<a href="ch01.xhtml#ch1fig4">Figure 1.4</a>)).</p>
<p class="indent">As you can verify by using the W3C HTML validator (<a href="https://validator.w3.org/">https://validator.w3.org/</a>), the page in <a href="ch01.xhtml#ch1list5">Listing 1.5</a> validates as HTML5 (<a href="ch01.xhtml#ch1fig11">Figure 1.11</a>). (An empty <span class="green-d"><code><strong>title</strong></code></span> would be invalid, but an empty <span class="green-d"><code><strong>body</strong></code></span> is fine. Also note that, although there are no <em>errors</em> on the page, there is a <em>warning</em> regarding the absence of a <span class="green-d"><code><strong>lang</strong></code></span> (language) attribute; we’ll address this detail in <a href="ch03.xhtml#sec3_3_1">Section 3.3.1</a>.)</p>
<figure class="figure" id="ch1fig11">
<img src="graphics/01fig11.jpg" alt="images" width="667" height="281"/>
<figcaption>
<p class="title-f"><strong>Figure 1.11:</strong> The HTML in <a href="ch01.xhtml#ch1list5">Listing 1.5</a> is valid but incomplete.</p>
</figcaption>
</figure>
<p class="indent">On the other hand, we learned in <em>Learn Enough Git to Be Dangerous</em> (<a href="ch01.xhtml#ch1fig10">Figure 1.10</a>) that we need one more thing: We need to tell the browser which <em>character set</em> to use so <span epub:type="pagebreak" id="page_24"></span>that it can handle the expanded range of characters (called Unicode), which includes symbols like ™ and ©, accented characters (as in <em>voilà</em>), etc. We can do this by adding the <span class="green-d"><code><strong>meta</strong></code></span> tag to the <span class="green-d"><code><strong>head</strong></code></span>, as shown in <a href="ch01.xhtml#ch1list6">Listing 1.6</a>.</p>
<p class="listing" id="ch1list6"><strong>Listing 1.6:</strong> Adding a <span class="green-d"><code><strong>meta</strong></code></span> tag to define the character set.</p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>title</strong></span>&gt;Page Title&lt;/<span class="pd_green1"><strong>title</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>meta</strong></span> <span class="light-green"><strong>charset</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"utf-8"</strong></span>&gt;</span>
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="noindent">By the way, the <span class="green-d"><code><strong>meta</strong></code></span> tag is a special kind of tag called a <em>void element</em>, and doesn’t have a closing tag. Because of this, void elements are also called <em>self-closing tags</em>.</p>
<p class="indent">With that, the skeleton is complete!</p>
<p class="noindent">Because of the importance of this HTML skeleton, let’s review its elements line by line:</p>
<ol class="number">
<li><p class="number">The doctype declaration</p></li>
<li><p class="number">Opening <span class="green-d"><code><strong>html</strong></code></span> tag</p></li>
<li><p class="number"><span epub:type="pagebreak" id="page_25"></span>Opening <span class="green-d"><code><strong>head</strong></code></span> tag</p></li>
<li><p class="number">Opening and closing <span class="green-d"><code><strong>title</strong></code></span> tags (with the content of the page title)</p></li>
<li><p class="number">The <span class="green-d"><code><strong>meta</strong></code></span> tag defining the character set</p></li>
<li><p class="number">Closing <span class="green-d"><code><strong>head</strong></code></span> tag</p></li>
<li><p class="number">Opening <span class="green-d"><code><strong>body</strong></code></span> tag</p></li>
<li><p class="number">Closing <span class="green-d"><code><strong>body</strong></code></span> tag</p></li>
<li><p class="number">Closing <span class="green-d"><code><strong>html</strong></code></span> tag</p></li>
</ol>
<p class="indent">Combining the original paragraph from <a href="ch01.xhtml#ch1list4">Listing 1.4</a> with the skeleton in <a href="ch01.xhtml#ch1list6">Listing 1.6</a> gives us the code for the first valid HTML page in our sample website, as shown in <a href="ch01.xhtml#ch1list7">Listing 1.7</a>.</p>
<p class="listing" id="ch1list7"><strong>Listing 1.7:</strong> A valid “Hello, world!” page.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>title</strong></span>&gt;Page Title&lt;/<span class="pd_green1"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>p</strong></span>&gt;Hello, world!&lt;/<span class="pd_green2"><strong>p</strong></span>&gt;</span>
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="noindent">Note in <a href="ch01.xhtml#ch1list7">Listing 1.7</a> that we’ve placed the paragraph from <a href="ch01.xhtml#ch1list4">Listing 1.4</a> inside the <span class="green-d"><code><strong>body</strong></code></span> tag, as required by the HTML standard.</p>
<p class="indent">After refreshing the browser, the result of <a href="ch01.xhtml#ch1list7">Listing 1.7</a> is virtually the same as we saw in <a href="ch01.xhtml#ch1fig9">Figure 1.9</a>. The only visible difference in the body of the page is a small amount of additional space around the paragraph.</p>
<p class="indent">A second, browser-dependent difference involves the page title, which some browsers display in the default tab, and others don’t show unless you have a second tab in addition to the first (<a href="ch01.xhtml#ch1fig12">Figure 1.12</a>). In any case, the page title is needed even if it’s not displayed, as it’s required by the HTML standard, and is important for screen readers and the web spiders used by search engines to index the Web.</p>
<figure class="figure" id="ch1fig12">
<img src="graphics/01fig12.jpg" alt="images" width="666" height="343"/>
<figcaption>
<p class="title-f"><strong>Figure 1.12:</strong> The page title in Safari.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_26"></span>With that, we’re ready to commit our changes and push the results to GitHub Pages:</p>
<p class="codelink"><a href="ch01_images.xhtml#p026pro01a" id="p026pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> git commit -am <span class="pd_red">"Convert index page to fully valid HTML"</span>
<span class="b-nilam"><strong>$</strong></span> git push</pre>
<p class="noindent">The result appears in <a href="ch01.xhtml#ch1fig13">Figure 1.13</a>.</p>
<figure class="figure" id="ch1fig13">
<img src="graphics/01fig13.jpg" alt="images" width="666" height="211"/>
<figcaption>
<p class="title-f"><strong>Figure 1.13:</strong> The valid “Hello, world!” page in production.</p>
</figcaption>
</figure>
<section>
<h4 class="h4" id="sec1_5_1"><span epub:type="pagebreak" id="page_27"></span>1.5.1 Exercises</h4>
<ol class="number">
<li><p class="number">Using the HTML validator, confirm that <a href="ch01.xhtml#ch1list6">Listing 1.6</a> is valid HTML.</p></li>
<li><p class="number">Remove <span class="green-d"><code><strong>&lt;/title&gt;</strong></code></span> from <span class="green-d"><code><strong>index.html</strong></code></span> as shown in <a href="ch01.xhtml#ch1list8">Listing 1.8</a> and verify that it breaks the page and that all you see is a blank screen. This underscores the importance of closing your tags! Confirm using the HTML validator that the resulting code fails validation.</p></li>
<li><p class="number">By pasting the contents of <a href="ch01.xhtml#ch1list9">Listing 1.9</a> into <span class="green-d"><code><strong>index.html</strong></code></span>, confirm that the browser ignores the extra whitespace (including newlines) in the mailing address.</p></li>
<li><p class="number">By adding the break tag <span class="green-d"><code><strong>&lt;br&gt;</strong></code></span> to the end of each of the first two lines of the address, you can obtain a nicely formatted address.</p></li>
</ol>
<p class="listing" id="ch1list8"><strong>Listing 1.8:</strong> The index page with a missing closing tag.<br/><code><em>index.html</em></code></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>title</strong></span>&gt;Page Title</span>
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="listing" id="ch1list9"><strong>Listing 1.9:</strong> An unformatted address.</p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>title</strong></span>&gt;Who am I?&lt;/<span class="pd_green2"><strong>title</strong></span>&gt;</span>
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
<span class="bg1">    Jean Valjean</span>
<span class="bg1">    55 Rue Plumet</span>
<span class="bg1">    Amonate, VA 24601</span>
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;<span epub:type="pagebreak" id="page_28"></span></pre>
</section>
</section>
</section>
</div>
</div>
</body>
</html>