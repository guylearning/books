<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough HTML, CSS and Layout to Be Dangerous: An Introduction to Modern Website Creation and Templating Systems</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137843053.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="chap-num" id="ch15"><span epub:type="pagebreak" id="page_499"></span>Chapter 15</h2>
<h2 class="chap-title">CSS Grid</h2>
<p class="noindent">So far in this tutorial, we’ve looked at creating page layouts using traditional CSS techniques and the newer flexbox method (<a href="ch11.xhtml#ch11">Chapter 11</a>). As mentioned in <a href="ch05.xhtml#sec5_2">Section 5.2</a>, though, CSS is constantly evolving and adding more features (<a href="ch15.xhtml#ch15fig1">Figure 15.1</a>).<sup><a id="fn15_1" href="ch15.xhtml#fn15_1a">1</a></sup> Over the past few years, a relatively new CSS feature has worked its way through the maze of the approval process and has been adopted by all the modern web browsers… as you’ve probably guessed from the title of this chapter, this feature is called “CSS grid”. <span epub:type="pagebreak" id="page_500"></span>Although it’s still early in its adoption curve, we expect grid to become increasingly important in the coming years, so we have included an introduction to this important subject as the final chapter of <a href="part02.xhtml#part02">Part II</a>.</p>
<figure class="figure" id="ch15fig1">
<img src="graphics/15fig01.jpg" alt="images" width="601" height="401"/>
<figcaption>
<p class="title-f"><strong>Figure 15.1:</strong> Once again… CSS… uh, finds a way.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn15_1a" href="ch15.xhtml#fn15_1">1</a>. Image courtesy of metha1819/Shutterstock.</p>
<p class="indent">As of even a few years ago, CSS grid wasn’t yet supported by all browsers, at least not without cumbersome vendor prefixes (<a href="ch05.xhtml#box5_3">Box 5.3</a>). Even after all browsers supported it, there were still enough proposed changes for how grid should work, and for how the CSS grid declarations should be written, that we didn’t think that it was a great idea to include it in a tutorial aimed more at people who are learning CSS for the first time. Recently, though, things have settled down in the implementation of the spec, so we decided the time had come to add some material on CSS grid.</p>
<p class="indent">It was difficult to decide how to cover this subject because CSS grid is pretty complicated—it would be really easy to get lost in the weeds describing every little function. A big reason why it is so complex is that CSS grid is a fantastic tool for doing something complicated like creating the entire layout of a site in addition to something simpler like the obvious use for arranging elements into a grid (and it is really great at doing what it says on the tin! (<a href="ch15.xhtml#ch15fig2">Figure 15.2</a>)).<sup><a id="fn15_2" href="ch15.xhtml#fn15_2a">2</a></sup></p>
<p class="footnote"><a id="fn15_2a" href="ch15.xhtml#fn15_2">2</a>. Copyright © 2021 by Lee Donahoe and hereby released under the Creative Commons Attribution 2.0 Generic license.</p>
<p class="footnote"><a id="fn15_3a" href="ch15.xhtml#fn15_3">3</a>. Image courtesy of Phil Darby/Shutterstock.</p>
<figure class="figure" id="ch15fig2">
<img src="graphics/15fig02.jpg" alt="images" width="511" height="452"/>
<figcaption>
<p class="title-f"><strong>Figure 15.2:</strong> Truth in advertising.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_501"></span>We could have torn apart the existing site and redone everything with grid, but that would have made for a <em>very</em> long and convoluted chapter. Or we could have tried to shoehorn grid into the existing site, which would make the aspects of CSS grid that work well for the layout of an entire site a bit difficult to appreciate because we’d be putting a layout inside the existing layout. Instead, we are going to create a single self-contained page that will let us cover the main facets of this powerful new tool without getting overwhelmed.</p>
<section>
<h3 class="h3" id="sec15_1">15.1 CSS Grid at a High Level</h3>
<p class="noindent">Now that that’s all out of the way, you are probably asking, “What is CSS grid, and why should I be interested in using it when all the old techniques still work?” That’s a good question, and it is true that you can just ignore grid if you want to, but the short answer to the latter part of the question is that it makes a lot of front-end development a whole lot easier, and we promise, it isn’t just because it is a shiny new toy (<a href="ch15.xhtml#ch15fig3">Figure 15.3</a>).<sup><a id="fn15_3" href="ch15.xhtml#fn15_3a">3</a></sup></p>
<figure class="figure" id="ch15fig3">
<img src="graphics/15fig03.jpg" alt="images" width="301" height="410"/>
<figcaption>
<p class="title-f"><strong>Figure 15.3:</strong> This robot wants to bring you the joy of new CSS techniques!</p>
</figcaption>
</figure>
<p class="indent">Let’s dig into the first part of the question above: “What is CSS grid?” The easiest way to appreciate grid is by comparing it with flexbox (<a href="ch11.xhtml#ch11">Chapter 11</a>).</p>
<p class="indent"><span epub:type="pagebreak" id="page_502"></span>The big difference between flexbox and CSS grid is that in flexbox you are arranging items along a single dimension (either a row or a column), whereas CSS grid involves arranging things in both directions simultaneously. Yes, it is possible to use flexbox to arrange elements into something that looks like a grid, but all of those elements are positioned and defined as if they are in reality on a single dimension that has just wrapped onto a new line (<a href="ch15.xhtml#ch15fig4">Figure 15.4</a>).</p>
<figure class="figure" id="ch15fig4">
<img src="graphics/15fig04.jpg" alt="images" width="674" height="735"/>
<figcaption>
<p class="title-f"><strong>Figure 15.4:</strong> The one-dimensional nature of flexbox, with and without <span class="green-d"><code><strong>flex-wrap</strong></code></span>.</p>
</figcaption>
</figure>
<p class="indent">The flexbox system has no way to define how columns <em>and</em> rows should look in an automated way. In contrast, CSS grid allows you to lay out elements in two dimensions by defining the properties of the columns and rows that create grid cells where new HTML elements are automatically added (<a href="ch15.xhtml#ch15fig5">Figure 15.5</a>).</p>
<figure class="figure" id="ch15fig5">
<img src="graphics/15fig05.jpg" alt="images" width="676" height="462"/>
<figcaption>
<p class="title-f"><span epub:type="pagebreak" id="page_503"></span><strong>Figure 15.5:</strong> CSS grid allows for elements to build onto the page within a defined structure.</p>
</figcaption>
</figure>
<p class="indent">New elements still are added from left to right like they are in flexbox (though you can change that to right to left, or even vertical), and as the cells fill in a row, new elements move down to the next row and continue filling cells there. Each row and column can be targeted separately with styles to change display properties. You can also set CSS grid to automatically size rows or columns to fit as much content as possible within constraints that you supply for maximum or minimum dimensions.</p>
<p class="indent">All this makes grid an incredibly powerful system for doing layouts where an arbitrary number of elements can fill the screen according to rules you set (like content boxes, thumbnail images, product tiles, etc.), as seen in <a href="ch15.xhtml#ch15fig5">Figure 15.5</a>. <a href="ch15.xhtml#sec15_2">Section 15.2</a> covers a simple and flexible content grid where the grid exists outside the sections. <a href="ch15.xhtml#sec15_4">Section 15.4</a> covers more complex aspects of CSS grid to create pages for organizing content with a grid inside each section (<a href="ch15.xhtml#ch15fig6">Figure 15.6</a>).</p>
<figure class="figure" id="ch15fig6">
<img src="graphics/15fig06.jpg" alt="images" width="675" height="340"/>
<figcaption>
<p class="title-f"><strong>Figure 15.6:</strong> The two types of grid layout we’ll be building.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_504"></span>A layout made with CSS grid isn’t a static structure—it’s not like an HTML table (<a href="ch03.xhtml#sec3_2">Section 3.2</a>), where once things are in rows and cells that’s pretty much where they will stay. With grid, you can do all sorts of manipulation to the elements in the container, like reorder them however you like, overlap parts, or easily apply different layouts for different size screens with media queries. Before we get to that, though, let’s take a look at a simple grid of content to get our feet wet and learn the basics of CSS grid.</p>
</section>
<section>
<h3 class="h3" id="sec15_2">15.2 A Simple Grid of Content</h3>
<p class="noindent">The first thing that you are going to need to do is to create a new HTML file in your project for our CSS grid experimentation. Let’s call it <span class="green-d"><code><strong>grid.html</strong></code></span> and place it at the root of the site directory so that we can get to it just by navigating to localhost:4000/grid.html (<a href="ch09.xhtml#sec9_2">Section 9.2</a>):</p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> touch grid.html</pre>
<p class="indent">Inside <span class="green-d"><code><strong>grid.html</strong></code></span>, we are going to add in the basic HTML framework, and then inside the body of the page we’ll add the first content elements. For this initial section, <span epub:type="pagebreak" id="page_505"></span>that will be a <span class="green-d"><code><strong>div</strong></code></span> with the class <span class="green-d"><code><strong>grid</strong></code></span>. Then, inside that <span class="green-d"><code><strong>div</strong></code></span>, we’ll add eight more <span class="green-d"><code><strong>div</strong></code></span>s without classes and containing the numbers 1–8. The result appears as in <a href="ch15.xhtml#ch15list1">Listing 15.1</a>.<sup><a id="fn15_4" href="ch15.xhtml#fn15_4a">4</a></sup></p>
<p class="footnote"><a id="fn15_4a" href="ch15.xhtml#fn15_4">4</a>. Recall that the code listings are available at <a href="https://github.com/learnenough/learn_enough_css_code_listings">https://github.com/learnenough/learn_enough_css_code_listings</a>.</p>
<p class="listing" id="ch15list1"><strong>Listing 15.1:</strong> The initial HTML for our page.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list01a" id="p15list01">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!doctype html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green1"><strong>style</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>style</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid"</span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        1
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        2
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        3
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        4
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        5
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        6
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        7
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        8
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_506"></span>Since initially we are just experimenting to learn the basics, we’ll be adding styles directly into the <span class="green-d"><code><strong>&lt;style&gt;</strong></code></span> section in the HTML’s <span class="green-d"><code><strong>&lt;head&gt;</strong></code></span> instead of adding a link to the site CSS and inheriting all the existing site styling. This will allow us to see how CSS grid works on a completely blank slate.</p>
<p class="indent">Just as when using flexbox, when you use grid you need to have a container element with CSS to tell the browser that it needs to do something other than the default when rendering the contents. For this example, that container will be the <span class="green-d"><code><strong>div</strong></code></span> with <span class="green-d"><code><strong>class="grid"</strong></code></span> on it. Add the declaration as seen in <a href="ch15.xhtml#ch15list2">Listing 15.2</a> and refresh your page. Perhaps surprisingly, it will look exactly the same as if you hadn’t added <span class="green-d"><code><strong>display: grid</strong></code></span>. Why?</p>
<p class="listing" id="ch15list2"><strong>Listing 15.2:</strong> Adding our first <span class="green-d"><code><strong>display: grid</strong></code></span>.<br/><code><em>grid.html</em></code></p>
<pre class="pre2"><span class="grey">&lt;</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span>
<span class="bg1">  .<span class="blue-v"><strong>grid</strong></span> {</span>
    <span class="bg1"><span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;</span>
<span class="bg1">  }</span>
<span class="grey">&lt;/</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span></pre>
<p class="indent">If you had added <span class="green-d"><code><strong>display: flex</strong></code></span>, all the elements would have instantly been fit into the container. The browser already knows the two-dimensional nature of flexbox at a basic level and will fit all the elements into the horizontal space provided by the wrapper (<a href="ch15.xhtml#ch15fig7">Figure 15.7</a>).</p>
<figure class="figure" id="ch15fig7">
<img src="graphics/15fig07.jpg" alt="images" width="676" height="163"/>
<figcaption>
<p class="title-f"><strong>Figure 15.7:</strong> Flex makes it go squish.</p>
</figcaption>
</figure>
<p class="indent">With CSS grid, however, we need to first define how rows and columns should be constructed before anything happens. Until then, we won’t see any real changes because to the browser, those <span class="green-d"><code><strong>div</strong></code></span>s are just a bunch of regular block elements inside another box.</p>
<p class="indent"><span epub:type="pagebreak" id="page_507"></span>To get things going, we will first define our column structure, and we’ll also add borders to the elements so that we can more easily see what is happening (<a href="ch15.xhtml#ch15list3">Listing 15.3</a>). Now when you refresh your page you should see something that looks similar to <a href="ch15.xhtml#ch15fig8">Figure 15.8</a>.</p>
<figure class="figure" id="ch15fig8">
<img src="graphics/15fig08.jpg" alt="images" width="676" height="187"/>
<figcaption>
<p class="title-f"><strong>Figure 15.8:</strong> Hooray! We have rows and columns.</p>
</figcaption>
</figure>
<p class="listing" id="ch15list3"><strong>Listing 15.3:</strong> Adding the first column template.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list03a" id="p15list03">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">&lt;</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span>
  .<span class="blue-v"><strong>grid</strong></span> {
    <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1">    <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="grey"><strong>1</strong></span>fr <span class="grey"><strong>1</strong></span>fr <span class="grey"><strong>1</strong></span>fr;</span>
}
<span class="bg1">  .<span class="blue-v"><strong>grid</strong></span> <span class="grey"><strong>&gt;</strong></span> <span class="pd_green1"><strong>div</strong></span> {</span>
<span class="bg1">    <span class="pd_green1"><strong>border</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid</strong></span> <span class="grey"><strong>#000</strong></span>;</span>
<span class="bg1">  }</span>
<span class="grey">&lt;/</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span></pre>
<p class="indent">Well, at least <a href="ch15.xhtml#ch15fig8">Figure 15.8</a> looks like a grid now, but we’re guessing at this point you are probably looking at the CSS in <a href="ch15.xhtml#ch15list3">Listing 15.3</a> and thinking, “What the heck is a <span class="green-d"><code><strong>1fr</strong></code></span> and why does it scare me?”</p>
<section>
<h4 class="h4" id="sec15_2_1">15.2.1 Grid Columns and the Grid <span class="green-d"><code><strong>fr</strong></code></span> Unit</h4>
<p class="noindent">First, there’s no reason to be scared—just look at this picture of a cat and all your fears will disappear (<a href="ch15.xhtml#ch15fig9">Figure 15.9</a>).<sup><a id="fn15_5" href="ch15.xhtml#fn15_5a">5</a></sup></p>
<figure class="figure" id="ch15fig9">
<img src="graphics/15fig09.jpg" alt="images" width="338" height="422"/>
<figcaption>
<p class="title-f"><strong>Figure 15.9:</strong> And you know he’ll do it again.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn15_5a" href="ch15.xhtml#fn15_5">5</a>. Copyright © 2021 by Lee Donahoe.</p>
<p class="indent"><span epub:type="pagebreak" id="page_508"></span>Second, guess what?! There is a whole new CSS unit of measurement introduced with CSS grid… hooray for more units! In practice, though, this new unit isn’t all that bad and is pretty easy to understand. The <span class="green-d"><code><strong>fr</strong></code></span> is short for <em>fractional unit</em>, and the style declaration that we just added in <a href="ch15.xhtml#ch15list3">Listing 15.3</a> simply tells the browser to arrange any elements that are in the container into three columns, with each column taking up an equal proportion of the space.</p>
<p class="indent">Right now, the parent container takes up <span class="green-d"><code><strong>100%</strong></code></span> of the available page width, so each column gets approximately <span class="green-d"><code><strong>33%</strong></code></span> of the space. If you wanted one of the columns to be twice the size of the other two, you could do that by using <span class="green-d"><code><strong>2fr</strong></code></span>. Let’s try changing the CSS to look like this:</p>
<p class="codelink"><a href="ch15_images.xhtml#p508pro01a" id="p508pro01">Click here to view code image</a></p>
<pre class="pre1">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1"> <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="grey"><strong>1</strong></span>fr <span class="grey"><strong>2</strong></span>fr <span class="grey"><strong>1</strong></span>fr;</span>
}</pre>
<p class="noindent">The result should look like <a href="ch15.xhtml#ch15fig10">Figure 15.10</a>.</p>
<figure class="figure" id="ch15fig10">
<img src="graphics/15fig10.jpg" alt="images" width="676" height="185"/>
<figcaption>
<p class="title-f"><strong>Figure 15.10:</strong> The big column in the middle is twice the size of the columns on the side.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_509"></span>An important thing to note is that all the elements that are sized using the <span class="green-d"><code><strong>fr</strong></code></span> unit have their size calculated from the available free space in the parent container <em>after</em> any elements with different units are assigned their space. If you set one of the columns using a non-fractional unit, the amount of free space available for the remaining <span class="green-d"><code><strong>fr</strong></code></span> elements is reduced. To see what we mean, try setting the third column to have a static width of <span class="green-d"><code><strong>450px</strong></code></span>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p509pro01a" id="p509pro01">Click here to view code image</a></p>
<pre class="pre1">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1"> <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="grey"><strong>1</strong></span>fr <span class="grey"><strong>2</strong></span>fr <span class="grey"><strong>45</strong></span><span class="pd_red"><strong>0px</strong></span>;</span>
}</pre>
<p class="noindent">When you refresh the page and play with the window width, you’ll see that the third column is now exactly <span class="green-d"><code><strong>450px</strong></code></span> wide, and the first two columns have to split the rest of the available space (with the first column half the size of the second).</p>
<p class="indent">Let’s get back to how the column template style works. Each individual value separated by a space in the <span class="green-d"><code><strong>grid-template-columns</strong></code></span> declaration corresponds to a column on the page. So if you want to make a grid with four columns you would write <span class="green-d"><code><strong>grid-template-columns: 1fr 1fr 1fr 1fr;</strong></code></span>. Eight columns would be <span class="green-d"><code><strong>grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;</strong></code></span>. You can add as many values as you’d like to define, but it does start to look a little ugly if you need to have a lot of columns on the page.</p>
<p class="indent">Thankfully, there is a way to simplify the values so that you don’t need to explicitly declare each column, and we think that you’ll find it refreshingly simple. Change your CSS so that it looks like <a href="ch15.xhtml#ch15list4">Listing 15.4</a>.</p>
<p class="indent"><span epub:type="pagebreak" id="page_510"></span>Everything should be back to three columns of the same width when you refresh the page, but if you change the value to <span class="green-d"><code><strong>repeat(4, 1fr)</strong></code></span> in your web inspector panel, you will now have four evenly sized columns (<a href="ch15.xhtml#ch15fig11">Figure 15.11</a>).</p>
<figure class="figure" id="ch15fig11">
<img src="graphics/15fig11.jpg" alt="images" width="666" height="266"/>
<figcaption>
<p class="title-f"><strong>Figure 15.11:</strong> Three columns have now become four columns.</p>
</figcaption>
</figure>
<p class="listing" id="ch15list4"><strong>Listing 15.4:</strong> Repeating three <span class="green-d"><code><strong>1fr</strong></code></span> columns.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list04a" id="p15list04">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v"><strong>repeat</strong></span>(<span class="grey"><strong>3</strong></span>, <span class="grey"><strong>1</strong></span>fr);</span>
}</pre>
<p class="indent">You can even mix and match. For example, <span class="green-d"><code><strong>grid-template-columns: 5em repeat(2, 1fr) repeat(3, 2fr);</strong></code></span> would give you a single <span class="green-d"><code><strong>5em</strong></code></span> column, followed by two <span class="green-d"><code><strong>1fr</strong></code></span> columns, and ending with three <span class="green-d"><code><strong>2fr</strong></code></span> columns. It’s a powerful and flexible technique for defining columns on the page.</p>
</section>
<section>
<h4 class="h4" id="sec15_2_2">15.2.2 Grid Rows and Gaps</h4>
<p class="noindent">Now that we’ve covered how the fractional unit works and learned how to use <span class="green-d"><code><strong>repeat</strong></code></span> in CSS grid, let’s set the <span class="green-d"><code><strong>grid-template-columns</strong></code></span> back to three <span class="green-d"><code><strong>1fr</strong></code></span>s (in case you tried the four-column layout in the code instead of the inspector) and add some styles to define rows. To start, we are just going to add a single row definition. Add the code found below:</p>
<p class="codelink"><a href="ch15_images.xhtml#p510pro01a" id="p510pro01">Click here to view code image</a></p>
<pre class="pre1">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">repea</span>t<span class="grey">(</span>3, <span class="grey">1</span>fr);
<span class="bg1"> <span class="pd_green1"><strong>grid-template-rows</strong></span>: <span class="grey"><strong>1</strong></span>fr;</span>
}</pre>
<p class="indent"><span epub:type="pagebreak" id="page_511"></span>When you refresh the page, you’ll find that nothing happened. You might find that surprising, but you have to remember that deep down at the base level these are still just block elements. Recall from our discussion of the box model in <a href="ch08.xhtml#ch08">Chapter 8</a> that a block element will expand to fill all available horizontal space, but vertically it will only be the height of the content in the element. Let’s change the row sizing to have an explicit height:</p>
<p class="codelink"><a href="ch15_images.xhtml#p511pro01a" id="p511pro01">Click here to view code image</a></p>
<pre class="pre1">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">repea</span>t<span class="grey">(</span>3, <span class="grey">1</span>fr);
<span class="bg1"> <span class="pd_green1"><strong>grid-template-rows</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>5em</strong></span>;</span>
}</pre>
<p class="noindent">Now when you refresh the page, you’ll see that the first row is in fact set to be <span class="green-d"><code><strong>15em</strong></code></span> in height, but all the other rows are still the equivalent of <span class="green-d"><code><strong>1fr</strong></code></span> (<a href="ch15.xhtml#ch15fig12">Figure 15.12</a>).</p>
<figure class="figure" id="ch15fig12">
<img src="graphics/15fig12.jpg" alt="images" width="676" height="276"/>
<figcaption>
<p class="title-f"><strong>Figure 15.12:</strong> Now we have a single row that is sized, but the rest are obstinate.</p>
</figcaption>
</figure>
<p class="indent">That happens because the <span class="green-d"><code><strong>grid-template-rows</strong></code></span> property is an <em>explicit</em> style— meaning that only rows that have a corresponding value will be styled—one <span class="green-d"><code><strong>1fr</strong></code></span> gets you only one styled row and <span class="green-d"><code><strong>repeat(8,1fr)</strong></code></span> will get you eight styled rows, but that’s where styling ends. If there are more rows than values, the browser will render the additional rows using <em>implicit</em> auto-sizing that works as if you had set them all to be <span class="green-d"><code><strong>1fr</strong></code></span>.</p>
<p class="indent">You can test this by adding the style <span class="green-d"><code><strong>min-height: 500px;</strong></code></span> to the <span class="green-d"><code><strong>grid</strong></code></span> class in your web inspector. You’ll see that the undefined rows behave like they are set to <span class="green-d"><code><strong>1fr</strong></code></span> and expand to fill the space (<a href="ch15.xhtml#ch15fig13">Figure 15.13</a>).</p>
<figure class="figure" id="ch15fig13">
<img src="graphics/15fig13.jpg" alt="images" width="675" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.13:</strong> All the non-sized rows are now clearly the equivalent of <span class="green-d"><code><strong>1fr</strong></code></span>.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_512"></span>Using the <span class="green-d"><code><strong>repeat</strong></code></span> technique discussed in <a href="ch15.xhtml#sec15_2_1">Section 15.2.1</a>, you could use <span class="green-d"><code><strong>repeat([insert number], 15em)</strong></code></span> to define all the rows, but we’re guessing at this point you’ve probably asked yourself, “Do I really need to define every single row? What if I don’t know how many there will be?”</p>
<p class="indent">Well, my friend, you are in luck because it is also possible to change the implicit size, and in making this change we’ll also add a grid gap style. Edit your CSS so that it looks like <a href="ch15.xhtml#ch15list5">Listing 15.5</a> and then refresh the page.</p>
<p class="listing" id="ch15list5"><span epub:type="pagebreak" id="page_513"></span><strong>Listing 15.5:</strong> Changing the implicit row size for all rows.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list05a" id="p15list05">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">repea</span>t<span class="grey">(</span>3, <span class="grey">1</span>fr);
<span class="bg1">  <span class="pd_green1"><strong>grid-auto-rows</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>5em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-gap</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
}</pre>
<p class="indent">As you can see in <a href="ch15.xhtml#ch15fig14">Figure 15.14</a>, now the browser knows that every new row in your grid should automatically be set to <span class="green-d"><code><strong>15em</strong></code></span> no matter how many elements you end up adding to the HTML, and now each element in the grid is separated from its neighbors by <span class="green-d"><code><strong>1em</strong></code></span>.</p>
<figure class="figure" id="ch15fig14">
<img src="graphics/15fig14.jpg" alt="images" width="668" height="512"/>
<figcaption>
<p class="title-f"><strong>Figure 15.14:</strong> Now all the rows are the same size, and all the cells are separated by <span class="green-d"><code><strong>1em</strong></code></span>.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_514"></span>The <span class="green-d"><code><strong>grid-gap</strong></code></span> property above is actually a shorthand for <span class="green-d"><code><strong>grid-gap: 1em 1em</strong></code></span>, where the first value is the row gap and the second is the column gap. If you had set it to <span class="green-d"><code><strong>grid-gap: 1em 2em</strong></code></span>, your page would look like <a href="ch15.xhtml#ch15fig15">Figure 15.15</a>.</p>
<figure class="figure" id="ch15fig15">
<img src="graphics/15fig15.jpg" alt="images" width="676" height="278"/>
<figcaption>
<p class="title-f"><strong>Figure 15.15:</strong> Now the column gaps are double the size of those old puny gaps.</p>
</figcaption>
</figure>
<p class="indent">The really cool (well, cool if you get excited about CSS) thing about the way that CSS grid handles the gap is that it automatically removes that space from the available space in the container before calculating how wide to make each column and row. It’s practically a miracle compared to how this used to work in the bad old days where you had to carefully calculate everything yourself and use margins that caused all sorts of other headaches.</p>
<p class="indent">The other really nice thing about how gaps are handled is that you’ll notice that they aren’t applied at the edges of the container (the slight bit of padding that you see is from the browser default styles for the <span class="green-d"><code><strong>body</strong></code></span> element). This allows you to have a lot more control of how the grid fits in with other content on the page—it can be flush around the edges with other elements, or you can add padding to the container equivalent to the row or column gap. Both of these could cause problems if you were using margins to separate elements since margins can bleed outside containers (<a href="ch08.xhtml#sec8_2">Section 8.2</a>), but with <span class="green-d"><code><strong>grid-gap</strong></code></span> everything is self-contained (<a href="ch15.xhtml#ch15fig16">Figure 15.16</a>).</p>
<figure class="figure" id="ch15fig16">
<img src="graphics/15fig16.jpg" alt="images" width="674" height="250"/>
<figcaption>
<p class="title-f"><strong>Figure 15.16:</strong> A grid with content flush to edges, and one with padding.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_515"></span>We hope that even at this very primitive stage you can see some of the power that CSS grid brings to front-end development. With just a few declarations, we’ve styled the page so that an arbitrary number of elements can be cleanly arranged into a grid, and unlike older methods for achieving this sort of layout, there’s no need to worry about calculating a bunch of different things to make sure that everything fits.</p>
<p class="indent">We aren’t stopping here, though—we’ve barely scratched the surface!</p>
</section>
<section>
<h4 class="h4" id="sec15_2_3">15.2.3 Exercises</h4>
<ol class="number">
<li><p class="number">Try clearing all the styles you added to <span class="green-d"><code><strong>.grid</strong></code></span>, and then add <span class="green-d"><code><strong>grid-auto-columns: 15em;</strong></code></span>. You might think that this would just make a bunch of <span class="green-d"><code><strong>15em</strong></code></span> columns, but without a quantity or <span class="green-d"><code><strong>repeat</strong></code></span> you should only get a single column.</p></li>
<li><p class="number">Experiment with other combinations of sizing for the grid’s columns, such as <span class="green-d"><code><strong>grid-template-columns: 5em repeat(2, 1fr) repeat(3, 2fr);</strong></code></span>.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec15_3">15.3 <span class="green-d"><code><strong>minmax</strong></code></span><strong>,</strong> <span class="green-d"><code><strong>auto-fit</strong></code></span><strong>, and</strong> <span class="green-d"><code><strong>auto-fill</strong></code></span></h3>
<p class="noindent">So far, everything that we’ve done really only works for situations where you know ahead of time what size the content is going to be and how many items you will ideally have on the page. However, in real-world usage you are always going to be uncertain about what size screen will be displaying your site, and you often won’t know how many elements will be on the page or (perhaps most importantly) how much content each element will contain.</p>
<p class="indent"><span epub:type="pagebreak" id="page_516"></span>If you explicitly declare your <span class="green-d"><code><strong>grid-template-columns</strong></code></span> to have three columns, as we’ve done up to this point, it will always have three columns. On a small screen those columns will be tiny, and on a large screen they will look comically large. Then on the vertical axis, depending on the amount of content in each of those elements… things could end up looking very strange (<a href="ch15.xhtml#ch15fig17">Figure 15.17</a>).</p>
<figure class="figure" id="ch15fig17">
<img src="graphics/15fig17.jpg" alt="images" width="673" height="253"/>
<figcaption>
<p class="title-f"><strong>Figure 15.17:</strong> A grid on a mobile screen and a large screen.</p>
</figcaption>
</figure>
<p class="indent">Ideally, you’d want something like one column for a small screen, and for large screens you’d want to fill the width of the browser with as many content boxes as will fit, but also keep them from getting so stretched out that the content inside looks weird.</p>
<p class="indent">To solve these issues you could use media queries (<a href="ch13.xhtml#ch13">Chapter 13</a>) and redefine the grid for different screen size breakpoints… but that’s a lot of work. Fortunately, CSS grid allows you to tell the browser how to handle filling the space in the grid container, and also to set <span class="green-d"><code><strong>min</strong></code></span> and <span class="green-d"><code><strong>max</strong></code></span> values for how big or small each column or row should be. This way, there’s no need to add in media queries—you can do everything in a single statement!</p>
<section>
<h4 class="h4" id="sec15_3_1">15.3.1 Using Grid <span class="green-d"><code><strong>auto-fit</strong></code></span></h4>
<p class="noindent">First, let’s add some additional content in front of the numbered <span class="green-d"><code><strong>div</strong></code></span>s, as shown in <a href="ch15.xhtml#ch15list6">Listing 15.6</a>.<sup><a id="fn15_6" href="ch15.xhtml#fn15_6a">6</a></sup></p>
<p class="footnote"><a id="fn15_6a" href="ch15.xhtml#fn15_6">6</a>. The code listings at <a href="https://github.com/learnenough/learn_enough_css_code_listings">https://github.com/learnenough/learn_enough_css_code_listings</a> are designed to make it more convenient to copy and paste markup like this.</p>
<p class="listing" id="ch15list6"><span epub:type="pagebreak" id="page_517"></span><strong>Listing 15.6:</strong> Adding more content in the HTML.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list06a" id="p15list06">Click here to view code image</a></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid"</span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Big news today&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    Quick sync win-win-win or workflow ecosystem.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;We are really excited to announce that we will soon have an exciting
    announcement!&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    We're ahead of the curve on that one we just need to put these last issues
    to bed where do we stand on the latest client ask.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Currying favor performance review bench mark&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    No need to talk to users, just base it on the space calculator lift and
    shift.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Level the playing field&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    Take five, punch the tree, and come back in here with a clear head. We need
    to follow protocol obviously, rock Star/Ninja encourage <span class="grey"><strong>&amp;amp;</strong></span> support business
    growth yet curate.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Usability closing these latest prospects &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    Customer centric where do we stand on the latest client ask back of the net
    4-blocker fast track make it look like digital, like putting socks on an
    octopus.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    1
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
    2
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
.
.
.</pre>
<p class="indent">Next, change the CSS to remove our auto row height by setting it to <span class="green-d"><code><strong>auto</strong></code></span>. Then change the <span class="green-d"><code><strong>grid-template-columns</strong></code></span> to <span class="green-d"><code><strong>repeat(auto-fit, 275px)</strong></code></span>, as seen in <a href="ch15.xhtml#ch15list7">Listing 15.7</a>.</p>
<p class="listing" id="ch15list7"><span epub:type="pagebreak" id="page_518"></span><strong>Listing 15.7:</strong> Adding styles to explore auto-fit.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list07a" id="p15list07">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v"><strong>repeat</strong></span>(<span class="pd_green1"><strong>auto</strong></span>-<span class="blue-v"><strong>fit</strong></span>, <span class="grey"><strong>27</strong></span><span class="pd_red"><strong>5px</strong></span>);</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-auto-rows</strong></span>: <span class="pd_green1"><strong>auto</strong></span>;</span>
  <span class="pd_green1"><strong>grid-gap</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;
}</pre>
<p class="indent">When you refresh the page, you’ll see that the browser has automatically arranged the content into columns and rows. If you play around with the width of your browser, you’ll see that the browser window will adapt to the available space and resize the columns to try and fit as many in the space as it can (<a href="ch15.xhtml#ch15fig18">Figure 15.18</a>).</p>
<figure class="figure" id="ch15fig18">
<img src="graphics/15fig18.jpg" alt="images" width="675" height="249"/>
<figcaption>
<p class="title-f"><strong>Figure 15.18:</strong> How our bold new adventure looks on mobile and a large screen.</p>
</figcaption>
</figure>
<p class="indent">The <span class="green-d"><code><strong>auto-fit</strong></code></span> part of the value you added in <a href="ch15.xhtml#ch15list7">Listing 15.7</a> seems pretty self-explanatory (though in reality… it’s not—more on that in <a href="ch15.xhtml#sec15_3_3">Section 15.3.3</a>). As you change the width of the window, the browser keeps checking to see if there is enough room to fit another column of <span class="green-d"><code><strong>275px</strong></code></span> onto the page, but you’ll notice that this leaves a gap whenever there isn’t enough room to fit an entire column.</p>
<p class="indent">If your desired layout calls for elements that are exactly <span class="green-d"><code><strong>275px</strong></code></span> in width, this might be perfect (such as for a product category page where you don’t want them dynamically resizing). You can even position the content the way we did with flexbox in <a href="ch11.xhtml#sec11_2">Section 11.2</a> by using container-level styles for aligning elements both as <span epub:type="pagebreak" id="page_519"></span>a group within the container and for all the elements inside their spaces, as seen in <a href="ch15.xhtml#ch15fig19">Figure 15.19</a>.<sup><a id="fn15_7" href="ch15.xhtml#fn15_7a">7</a></sup></p>
<p class="footnote"><a id="fn15_7a" href="ch15.xhtml#fn15_7">7</a>. See the <span class="green-d"><code><strong>justify-items</strong></code></span> section at <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">https://css-tricks.com/snippets/css/complete-guide-grid/</a> for more information.</p>
<figure class="figure" id="ch15fig19">
<img src="graphics/15fig19.jpg" alt="images" width="676" height="335"/>
<figcaption>
<p class="title-f"><strong>Figure 15.19:</strong> Grid alignment options for child elements.</p>
</figcaption>
</figure>
<p class="indent">Also, as with flexbox, you can set the alignment of individual elements inside the space they are assigned, regardless of the alignment or justification of the parent grid, by using <span class="green-d"><code><strong>align-self</strong></code></span> and <span class="green-d"><code><strong>justify-self</strong></code></span>.<sup><a id="fn15_8" href="ch15.xhtml#fn15_8a">8</a></sup></p>
<p class="footnote"><a id="fn15_8a" href="ch15.xhtml#fn15_8">8</a>. See the <span class="green-d"><code><strong>align-self</strong></code></span> section at <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">https://css-tricks.com/snippets/css/complete-guide-grid/</a> for more information.</p>
<p class="indent">For example, you can try adding <span class="green-d"><code><strong>justify-content: center</strong></code></span> to the grid container using your browser inspector. This rule causes all the content to be aligned in the center of the parent element. The result is that your content arranges itself into as many <span class="green-d"><code><strong>275px</strong></code></span> columns as will fit the window while keeping everything nicely centered on the page (<a href="ch15.xhtml#ch15fig20">Figure 15.20</a>).</p>
<figure class="figure" id="ch15fig20">
<img src="graphics/15fig20.jpg" alt="images" width="676" height="284"/>
<figcaption>
<p class="title-f"><strong>Figure 15.20:</strong> Center justified on both mobile and desktop.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_520"></span>But what if you don’t want any space on the sides and want the elements to fill the space so long as they are at minimum <span class="green-d"><code><strong>275px</strong></code></span>? In that case, you can use CSS’s <span class="green-d"><code><strong>minmax()</strong></code></span> modifier for the size. To use it you need to give a minimum value and a maximum value separated by a comma, something like <span class="green-d"><code><strong>minmax(275px, 1fr)</strong></code></span>. Let’s try that now in the code, as seen in <a href="ch15.xhtml#ch15list8">Listing 15.8</a>.</p>
<p class="listing" id="ch15list8"><strong>Listing 15.8:</strong> Exploring how <span class="green-d"><code><strong>minmax</strong></code></span> affects <span class="green-d"><code><strong>auto-fit</strong></code></span>.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list08a" id="p15list08">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v"><strong>repeat</strong></span>(<span class="pd_green1"><strong>auto</strong></span><span class="pd_blue1"><strong>-fit</strong></span>, <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>275</strong></span><span class="pd_red"><strong>px</strong></span>, <span class="grey"><strong>1</strong></span>fr));</span>
  <span class="pd_green1"><strong>grid-auto-rows</strong></span>: <span class="pd_green1"><strong>auto</strong></span>;
  <span class="pd_green1"><strong>grid-gap</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;
}</pre>
<p class="indent">This new value lets the browser know that you want each column to be <span class="green-d"><code><strong>275px</strong></code></span> at a minimum, but if the window isn’t wide enough to add another <span class="green-d"><code><strong>275px</strong></code></span> column, then it should make the elements take up all the space equally. If you play around with the window, you’ll see that at small sizes the elements form a single column that expands to take up the entire space. As the window widens past the point where a new <span class="green-d"><code><strong>275px</strong></code></span> column can be added, the browser pops in another column. If there isn’t room for another column, the browser will keep increasing each column’s width to fill the space (<a href="ch15.xhtml#ch15fig21">Figure 15.21</a>).</p>
<figure class="figure" id="ch15fig21">
<img src="graphics/15fig21.jpg" alt="images" width="668" height="252"/>
<figcaption>
<p class="title-f"><strong>Figure 15.21:</strong> Columns spreading out on mobile and a large screen.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_521"></span>Now that we’ve got our columns set up to fill the page, let’s use <span class="green-d"><code><strong>minmax</strong></code></span> to also make all of our rows the same height so that they look a little more uniform. Change the <span class="green-d"><code><strong>grid-auto-rows</strong></code></span> to match the code in <a href="ch15.xhtml#ch15list9">Listing 15.9</a>.</p>
<p class="listing" id="ch15list9"><strong>Listing 15.9:</strong> Applying <span class="green-d"><code><strong>minmax</strong></code></span> to <span class="green-d"><code><strong>grid-auto-rows</strong></code></span>.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list09a" id="p15list09">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">repea</span>t(<span class="pd_green1"><strong>auto</strong></span><span class="blue-dd">-fit</span>, <span class="blue-v">minma</span>x<span class="grey">(275</span><span class="pd_red"><strong>px</strong></span>, <span class="grey">1</span>fr));
<span class="bg1">  <span class="pd_green1"><strong>grid-auto-rows</strong></span>: <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>10</strong></span><span class="pd_red"><strong>em</strong></span>,<span class="grey"><strong>1</strong></span>fr);</span>
  <span class="pd_green1"><strong>grid-gap</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;
}</pre>
<p class="indent">After you refresh the page, you’ll see that all of the rows are the same height now, with a minimum height of <span class="green-d"><code><strong>10em</strong></code></span> and a maximum height of <span class="green-d"><code><strong>1fr</strong></code></span>, which in this case ends up being the height of the content element with the longest text.</p>
<p class="indent">Now that we have a nice uniform grid set up (<a href="ch15.xhtml#ch15fig22">Figure 15.22</a>), we are going to take a moment to look at what to do when you want one of the elements to take up more space in the grid.</p>
<figure class="figure" id="ch15fig22">
<img src="graphics/15fig22.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.22:</strong> Our grid definitely looks like a grid!</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_3_2"><span epub:type="pagebreak" id="page_522"></span>15.3.2 Relative Spanning Columns</h4>
<p class="noindent">With CSS grid, it is really easy to allow some elements to take up more space in the grid, and in fact we can do this a couple of different ways. In <a href="ch15.xhtml#sec15_4">Section 15.4</a>, we will use explicit positioning to make an element stretch across <em>specific</em> columns. Right now, we’ll look at a relative method where it doesn’t matter where in the grid the element is positioned—it will always span two columns. Create a new style with a class of <span class="green-d"><code><strong>grid-feature</strong></code></span>, as shown in <a href="ch15.xhtml#ch15list10">Listing 15.10</a>.</p>
<p class="listing" id="ch15list10"><span epub:type="pagebreak" id="page_523"></span><strong>Listing 15.10:</strong> Making an element cover two columns with CSS.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list10a" id="p15list10">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="bg1">  .<span class="blue-v"><strong>grid-feature</strong></span> {</span>
<span class="bg1">    <span class="pd_green1"><strong>grid-column</strong></span>: span <span class="grey"><strong>2</strong></span>;</span>
}
<span class="grey">&lt;/</span><span class="pd_green1"><strong>style</strong></span><span class="grey">&gt;</span></pre>
<p class="indent">And then add the class onto an HTML element:</p>
<p class="codelink"><a href="ch15_images.xhtml#p523pro01a" id="p523pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="bg1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"grid-feature"</strong></span>&gt;</span>

  &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;We are really excited to announce that we will soon have an exciting
  announcement!&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
  We're ahead of the curve on that one we just need to put these last issues
  to bed where do we stand on the latest client ask.
&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</pre>
<p class="indent">When you refresh your browser, you’ll see that the element now covers two columns as well as the gap between the columns, as seen in <a href="ch15.xhtml#ch15fig23">Figure 15.23</a>.</p>
<figure class="figure" id="ch15fig23">
<img src="graphics/15fig23.jpg" alt="images" width="676" height="381"/>
<figcaption>
<p class="title-f"><strong>Figure 15.23:</strong> The element will now span two columns wherever it is.</p>
</figcaption>
</figure>
<p class="indent">There is a caveat to watch out for, though. If the element is in the last column on a page, it will get bumped down to the next line (<a href="ch15.xhtml#ch15fig24">Figure 15.24</a>).</p>
<figure class="figure" id="ch15fig24">
<img src="graphics/15fig24.jpg" alt="images" width="676" height="346"/>
<figcaption>
<p class="title-f"><strong>Figure 15.24:</strong> Elements on the end of a row that span multiple columns bump down.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_524"></span>To force the grid to reflow the rest of the content and prevent gaps from appearing, there is a simple solution: Just add <span class="green-d"><code><strong>grid-auto-flow: dense</strong></code></span> to the parent <span class="green-d"><code><strong>grid</strong></code></span> element’s styles and everything (should) magically work!</p>
<p class="indent">Understanding why that gap appears in the first place is going to be the subject of the next section.</p>
</section>
<section>
<h4 class="h4" id="sec15_3_3">15.3.3 Leveling Up CSS Grid Understanding</h4>
<p class="noindent">So, why doesn’t the browser fill that space with one of the elements after… and what does that <span class="green-d"><code><strong>auto-fit</strong></code></span> value, which we haven’t talked about in detail, do?</p>
<p class="indent">The answers to this question involve a little change in perspective, and this new understanding of how the browser actually sees the grid will allow us to manipulate the grid to create layouts in <a href="ch15.xhtml#sec15_4">Section 15.4</a>.</p>
<p class="indent">As an introduction, let’s look at how <span class="green-d"><code><strong>auto-fit</strong></code></span> and its partner, <span class="green-d"><code><strong>auto-fill</strong></code></span>, work (<a href="ch15.xhtml#ch15fig25">Figure 15.25</a>).</p>
<figure class="figure" id="ch15fig25">
<img src="graphics/15fig25.jpg" alt="images" width="676" height="330"/>
<figcaption>
<p class="title-f"><strong>Figure 15.25:</strong> The difference in behavior is easier to see in diagram form.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_525"></span><span class="green-d"><code><strong>auto-fit</strong></code></span> will try to fill the container with as many columns as it can, with each one being the minimum width that you defined. If there are fewer child elements than columns, the extra columns are collapsed to zero width and the content can stretch out to the max width value that you specified.</p>
<p class="indent"><span class="green-d"><code><strong>auto-fill</strong></code></span>, like <span class="green-d"><code><strong>auto-fit</strong></code></span>, first fills the space with as many of the minimum-width columns as it can fit, but when it runs out of content it leaves the columns in place.</p>
<p class="indent">Both sound pretty similar, right? Depending on the number of elements on your page and the settings that you use, both <span class="green-d"><code><strong>auto-fit</strong></code></span> and <span class="green-d"><code><strong>auto-fill</strong></code></span> can end up looking exactly the same. The difference comes in the edge cases—like if your minimum width is really small, or you have only a couple of child elements in the grid container.</p>
<p class="indent">If you comment out everything except the first two items in our container (and delete the <span class="green-d"><code><strong>grid-feature</strong></code></span> class from the <span class="green-d"><code><strong>div</strong></code></span> that you added it to), you can play around with switching between <span class="green-d"><code><strong>auto-fit</strong></code></span> and <span class="green-d"><code><strong>auto-fill</strong></code></span> to see how the browser handles sizing the columns to the available space (<a href="ch15.xhtml#ch15fig26">Figure 15.26</a> and <a href="ch15.xhtml#ch15fig27">Figure 15.27</a>). Unlike <span class="green-d"><code><strong>auto-fill</strong></code></span>, <span class="green-d"><code><strong>auto-fit</strong></code></span> always tries to make content cover the entire space without leaving empty columns at the end of a row.</p>
<figure class="figure" id="ch15fig26">
<img src="graphics/15fig26.jpg" alt="images" width="676" height="227"/>
<figcaption>
<p class="title-f"><strong>Figure 15.26:</strong> <span class="green-d"><code><strong>auto-fit</strong></code></span> with only two items.</p>
</figcaption>
</figure>
<figure class="figure" id="ch15fig27">
<img src="graphics/15fig27.jpg" alt="images" width="676" height="273"/>
<figcaption>
<p class="title-f"><strong>Figure 15.27:</strong> <span class="green-d"><code><strong>auto-fill</strong></code></span> with only two items.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_526"></span>Why does any of this matter?</p>
<p class="indent">The important takeaway is the first action that the browser takes in <a href="ch15.xhtml#ch15fig25">Figure 15.25</a>— in both cases, the very first thing that happens is that the browser fills the grid container with lines.</p>
<p class="indent">Up to this point, we’ve kind of used “column” interchangeably with “content item” because at the surface level that does seem to be what is being arranged on the page. You have X number of elements and Y amount of space. So that must mean that the browser is building the page by looking at the content itself, right? In reality, under the hood CSS grid really only cares about the grid lines <em>between</em> columns and rows (<a href="ch15.xhtml#ch15fig28">Figure 15.28</a>).</p>
<figure class="figure" id="ch15fig28">
<img src="graphics/15fig28.jpg" alt="images" width="676" height="307"/>
<figcaption>
<p class="title-f"><strong>Figure 15.28:</strong> The browser cares about the lines, not the cells.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_527"></span>When the browser is rendering the page, it first looks at rules that you set and uses those rules to draw the grid lines; only then does the browser look at the content and fit it into the lines it has drawn. It is this next level of understanding that will unlock the more advanced aspects of CSS grid. Let’s explore what this means for how we use CSS grid.</p>
</section>
<section>
<h4 class="h4" id="sec15_3_4">15.3.4 Exercises</h4>
<ol class="number">
<li><p class="number">Use the different align and justify styles found in <a href="ch15.xhtml#ch15fig19">Figure 15.19</a> to play with changing the positioning of all the child elements of the grid container to see how they adjust based on the content.</p></li>
<li><p class="number">Now pick a single element in the grid and use <span class="green-d"><code><strong>align-self</strong></code></span> and <span class="green-d"><code><strong>justify-self</strong></code></span> to position just that one element within its grid cell.</p></li>
<li><p class="number">We applied <span class="green-d"><code><strong>grid-column: span 2</strong></code></span> to our feature element… Do you suppose that <span class="green-d"><code><strong>grid-row: span 2</strong></code></span> might also be a valid style?</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec15_4">15.4 Grid Lines, Areas, and Layouts</h3>
<p class="noindent">So far in this chapter, we’ve held off on covering the more complicated underlying parts of how CSS grid works to avoid overwhelming you with details. The simple grid styling we’ve covered up to this point can be dropped into any project where you need <span epub:type="pagebreak" id="page_528"></span>to arrange a bunch of items in a two-dimensional grid. The details of how browsers build the grid are important to understanding how to use CSS grid for layouts, and in this section we’ll show you some of the more complicated things grid can do.</p>
<p class="indent">As preparation for this, we first want to show you how to toggle your browser inspector to display a <em>grid overlay</em> to help you visualize how CSS grid is being rendered. The screenshots in <a href="ch15.xhtml#ch15fig29">Figure 15.29</a> show you how to turn on the grid overlay in Safari and Chrome, but all modern browsers should have this ability.</p>
<figure class="figure" id="ch15fig29">
<img src="graphics/15fig29.jpg" alt="images" width="676" height="308"/>
<figcaption>
<p class="title-f"><strong>Figure 15.29:</strong> The grid overlay toggle in Safari and Chrome, respectively.</p>
</figcaption>
</figure>
<p class="indent">After clicking on the Layout tab, you should be able to click on the checkbox to enable the browser to show you the grid overlay. When enabled, the grid overlay lets you see your grid the way the browser sees it (<a href="ch15.xhtml#ch15fig30">Figure 15.30</a>).</p>
<figure class="figure" id="ch15fig30">
<img src="graphics/15fig30.jpg" alt="images" width="666" height="405"/>
<figcaption>
<p class="title-f"><strong>Figure 15.30:</strong> My god, it’s full of grids (and gaps).</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_529"></span>The important thing to understand from this overlay is that the browser is labeling and numbering not the content elements, but rather the grid lines at the beginning and end of each element. In other words, the <span class="green-d"><code><strong>div</strong></code></span> that has the headline “Big news today” isn’t “element 1,” but rather “the element that goes from grid line 1 to grid line 2.” It’s a small difference, but an important one.</p>
<p class="indent">What can we do with this newfound understanding?</p>
<section>
<h4 class="h4" id="sec15_4_1">15.4.1 Getting Started with Grid Lines</h4>
<p class="noindent">In this part of the tutorial, we are going to create two layout structures, each using a different way to arrange the page. The first one is a simpler layout that could be used for displaying content like documentation, and the second one is a more complex use of CSS grid to create a layout that could be used for a homepage or an informational landing page. (To do this we will have to work around an annoying browser limitation… but more on that in <a href="ch15.xhtml#sec15_5">Section 15.5</a>.)</p>
<p class="indent">Let’s get started playing around with the grid lines and see how they can be used to build the first layout. In <a href="ch15.xhtml#ch15list11">Listing 15.11</a>, you’ll notice that we’ve added styles to remove the default margin and padding on the document (so that our elements can <span epub:type="pagebreak" id="page_530"></span>fill the screen). We’ve also added grid settings and a minimum height to the new <span class="green-d"><code><strong>grid-container</strong></code></span> class, and added backgrounds to some of our elements. Finally, the HTML we’ve created up to this point has been moved to the end of the document and commented out. <a href="ch15.xhtml#ch15list11">Listing 15.11</a> shows the full result, which you can use as the content for your own <span class="green-d"><code><strong>grid.html</strong></code></span>.</p>
<p class="listing" id="ch15list11"><strong>Listing 15.11:</strong> Simplified HTML with old content commented out at the bottom.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list11a" id="p15list11">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!doctype html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green1"><strong>style</strong></span>&gt;
      <span class="pd_green1"><strong>html</strong></span><span class="grey">,</span>
      <span class="pd_green1"><strong>body</strong></span> {
        <span class="pd_green1"><strong>border</strong></span>: <span class="grey">0</span>;
        <span class="pd_green1"><strong>margin</strong></span>: <span class="grey">0</span>;
      }
      .<span class="blue-v"><strong>grid-container</strong></span> {
        <span class="pd_green1"><strong>display</strong></span>:  <span class="pd_green1"><strong>grid</strong></span>;
        <span class="pd_green1"><strong>grid-auto-flow</strong></span>: dense;
        <span epub:type="pagebreak" id="page_531"></span><span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">repea</span>t<span class="grey">(</span>3, <span class="grey">1</span>fr);
        <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey">100</span><span class="pd_red"><strong>vh</strong></span>;
      }
      .<span class="blue-v"><strong>grid-container</strong></span> <span class="grey">&gt;</span> <span class="pd_green1"><strong>div</strong></span> {
        <span class="pd_green1"><strong>box-sizing</strong></span>: <span class="pd_green1"><strong>border-box</strong></span>;
        <span class="pd_green1"><strong>position</strong></span>: <span class="pd_green1"><strong>relative</strong></span>;
      }
      .<span class="blue-v"><strong>grid-header</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#cc</span>c;
      }
      .<span class="blue-v"><strong>grid-menu</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#c0c0c</span>0;
      }
      .<span class="blue-v"><strong>grid-content</strong></span> {

      }
      .<span class="blue-v"><strong>grid-panel</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#ee</span>e;
      }
      .<span class="blue-v"><strong>grid-footer</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
      }
      .<span class="blue-v"><strong>grid</strong></span> {
        <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
        <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">repea</span>t(<span class="pd_green1"><strong>auto</strong></span><span class="blue-dd">-fit</span>, <span class="blue-v">minma</span>x<span class="grey">(275</span><span class="pd_red"><strong>px</strong></span>, <span class="grey">1</span>fr));
        <span class="pd_green1"><strong>grid-auto-rows</strong></span>: <span class="blue-v">minma</span>x<span class="grey">(10</span><span class="pd_red"><strong>em</strong></span>,<span class="grey">1</span>fr);
        <span class="pd_green1"><strong>grid-gap</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
      }
      .<span class="blue-v"><strong>grid</strong></span> <span class="grey">&gt;</span> <span class="pd_green1"><strong>div</strong></span> {
        <span class="pd_green1"><strong>border</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid</strong></span> <span class="grey">#00</span>0;
      }
      .<span class="blue-v"><strong>grid-feature</strong></span> {
        <span class="pd_green1"><strong>grid-column</strong></span>: span <span class="grey">2</span>;
      }
    &lt;/<span class="pd_green1"><strong>style</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-container"</span>&gt;
      &lt;<span class="pd_green1"><strong>header</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-header"</span>&gt;
        I am a Header
      &lt;/<span class="pd_green1"><strong>header</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>nav</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-menu"</span>&gt;
        I am a Menu
      &lt;/<span class="pd_green1"><strong>nav</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>article</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-content"</span>&gt;
        I am Content
      &lt;/<span class="pd_green1"><strong>article</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>aside</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-panel"</span>&gt;
        I am Info
      &lt;/<span class="pd_green1"><strong>aside</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>footer</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-footer"</span>&gt;
        I am a Footer
      &lt;/<span class="pd_green1"><strong>footer</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
 &lt;/<span class="pd_green1"><strong>html</strong></span>&gt;

 <span class="pd_blue1"><em>&lt;!--
 &lt;div class="grid"&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1"><em>&lt;h2&gt;Big news today&lt;/h2&gt;</em></span>
    <span class="pd_blue1"><em>Quick sync win-win-win or workflow ecosystem.</em></span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div class="grid-feature"&gt;</em></span>
    <span class="pd_blue1"><em>&lt;h2&gt;We are really excited to announce that we will soon have an exciting</em></span>
    <span class="pd_blue1"><em>announcement!&lt;/h2&gt;</em></span>
    <span class="pd_blue1"><em>We're ahead of the curve on that one we just need to put these last issues</em></span>
    <span class="pd_blue1"><em>to bed where do we stand on the latest client ask.</em></span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1"><em>&lt;h2&gt;Currying favor performance review bench mark&lt;/h2&gt;</em></span>
    <span class="pd_blue1"><em>No need to talk to users, just base it on the space calculator lift and</em></span>
    <span class="pd_blue1"><em>shift.</em></span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span epub:type="pagebreak" id="page_532"></span><span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1"><em>&lt;h2&gt;Level the playing field&lt;/h2&gt;</em></span>
    <span class="pd_blue1"><em>Take five, punch the tree, and come back in here with a clear head. We need</em></span>
    <span class="pd_blue1"><em>to follow protocol obviously, rock Star/Ninja encourage &amp;amp; support business</em></span>
    <span class="pd_blue1"><em>growth yet curate.</em></span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1"><em>&lt;h2&gt;Usability closing these latest prospects &lt;/h2&gt;</em></span>
    <span class="pd_blue1"><em>Customer centric where do we stand on the latest client ask back of the net</em></span>
    <span class="pd_blue1"><em>4-blocker fast track make it look like digital, like putting socks on an</em></span>
    <span class="pd_blue1"><em>octopus.</em></span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
  <span class="pd_blue1"><em>&lt;div&gt;</em></span>
    <span class="pd_blue1">.</span>
  <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
 <span class="pd_blue1"><em>&lt;/div&gt;</em></span>
<span class="pd_blue1"><em>--&gt;</em></span></pre>
<p class="indent"><span epub:type="pagebreak" id="page_533"></span>At this point, you should follow the step shown in <a href="ch15.xhtml#ch15fig29">Figure 15.29</a> again with <span class="green-d"><code><strong>div.grid-container</strong></code></span> in place of <span class="green-d"><code><strong>div.grid</strong></code></span>. The resulting grid-overlay display is browser-dependent but should look something like <a href="ch15.xhtml#ch15fig31">Figure 15.31</a>. Depending on your browser, you might need to re-enable the grid overlay in the inspector every time you refresh if you want to keep it visible. We’re going to keep doing it for screenshots, but it isn’t necessarily something that you need to keep on all the time.</p>
<figure class="figure" id="ch15fig31">
<img src="graphics/15fig31.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.31:</strong> A “beautiful” new beginning.</p>
</figcaption>
</figure>
<p class="indent">For the code examples going forward, we’re not going to show the code that has been commented out, but just know that it is still there… lurking (<a href="ch15.xhtml#ch15fig32">Figure 15.32</a>).<sup><a id="fn15_9" href="ch15.xhtml#fn15_9a">9</a></sup></p>
<figure class="figure" id="ch15fig32">
<img src="graphics/15fig32.jpg" alt="images" width="676" height="451"/>
<figcaption>
<p class="title-f"><strong>Figure 15.32:</strong> Your old code is hiding… Waiting…</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn15_9a" href="ch15.xhtml#fn15_9">9</a>. Image courtesy of dejavudesigns/123RF.</p>
</section>
<section>
<h4 class="h4" id="sec15_4_2"><span epub:type="pagebreak" id="page_534"></span>15.4.2 The Simple Grid Layout</h4>
<p class="noindent">Let’s start adding some styling to see what CSS grid can offer for making layouts. In the <span class="green-d"><code><strong>style</strong></code></span> section in <span class="green-d"><code><strong>grid.html</strong></code></span>, we are first going to add <span class="green-d"><code><strong>grid-column-start: 2</strong></code></span> to the <span class="green-d"><code><strong>grid-content</strong></code></span> class, as shown in <a href="ch15.xhtml#ch15list12">Listing 15.12</a>.</p>
<p class="listing" id="ch15list12"><strong>Listing 15.12:</strong> Setting <span class="green-d"><code><strong>.grid-content</strong></code></span> to start at column 2.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list12a" id="p15list12">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>grid-menu</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#c0c0c</span>0;
}
.<span class="blue-v"><strong>grid-content</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>grid-column-start</strong></span>: <span class="grey"><strong>2</strong></span>;</span>
}
<span epub:type="pagebreak" id="page_535"></span>.<span class="blue-v"><strong>grid-panel</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#ee</span>e;
}
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span></pre>
<p class="indent">The new style in <a href="ch15.xhtml#ch15list12">Listing 15.12</a> allows us to define which line of the grid an element with class <span class="green-d"><code><strong>grid-content</strong></code></span> should start at. Currently, that element (“I am Content”) is in the third column (<a href="ch15.xhtml#ch15fig31">Figure 15.31</a>), so you might think that this would just move the element to the left by one column. However, after refreshing your browser, you should instead see something that looks like <a href="ch15.xhtml#ch15fig33">Figure 15.33</a>.</p>
<figure class="figure" id="ch15fig33">
<img src="graphics/15fig33.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.33:</strong> Interesting. The element in the third column moved down onto a new row.</p>
</figcaption>
</figure>
<p class="indent">The empty cells in <a href="ch15.xhtml#ch15fig33">Figure 15.33</a>, and the element moving to the second line, probably aren’t what you expected to happen as the result of the new CSS rule in <a href="ch15.xhtml#ch15list12">Listing 15.12</a>. The reason the “I am Content” element moved down is that we only <span epub:type="pagebreak" id="page_536"></span>told the browser that the element should start at grid line 2, but we didn’t change anything about which <em>row</em> it should start on. Since there was already an object on the page between lines 2 and 3 (i.e., column 2) in row 1, the browser bounced the <span class="green-d"><code><strong>grid-content</strong></code></span> element down to a new row and kept flowing the rest of the elements in after.</p>
<p class="indent">If we also specify a row start for the element, the browser will move that <span class="green-d"><code><strong>div</strong></code></span> to the defined space, and then flow all of the content to fill the rest of the columns with the available elements:</p>
<pre class="pre1">.<span class="blue-v"><strong>grid-content</strong></span> {
  <span class="pd_green1"><strong>grid-column-start</strong></span>: <span class="grey">2</span>;
<span class="bg1"> <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="grey"><strong>1</strong></span>;</span>
}</pre>
<p class="noindent">As seen in <a href="ch15.xhtml#ch15fig34">Figure 15.34</a>, the result is the placement of the “I am Content” <span class="green-d"><code><strong>div</strong></code></span> in the second column on the first row, as desired.</p>
<figure class="figure" id="ch15fig34">
<img src="graphics/15fig34.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.34:</strong> Now this seems like what you might have expected to happen.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_537"></span>Of course, if there is a <span class="green-d"><code><strong>grid-column-start</strong></code></span> there should be a <span class="green-d"><code><strong>grid-column-end</strong></code></span> too, right? There is! To get our <span class="green-d"><code><strong>grid-content</strong></code></span> element to stretch over two columns (ending at the fourth grid line), we could add <span class="green-d"><code><strong>grid-column-end: 4</strong></code></span> to the CSS:</p>
<pre class="pre1">.<span class="blue-v"><strong>grid-content</strong></span> {
  <span class="pd_green1"><strong>grid-column-start</strong></span>: <span class="grey">2</span>;
<span class="bg1"> <span class="pd_green1"><strong>grid-column-end</strong></span>: <span class="grey"><strong>4</strong></span>;</span>
 <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="grey"><strong>1</strong></span>;
}</pre>
<p class="noindent">Equivalently, we could use a shorthand declaration that combines <span class="green-d"><code><strong>grid-column-start</strong></code></span> and <span class="green-d"><code><strong>grid-column-end</strong></code></span>:</p>
<pre class="pre1">.<span class="blue-v"><strong>grid-content</strong></span> {
<span class="bg1"> <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>2 / 4</strong></span>;</span>
 <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="grey"><strong>1</strong></span>;
}</pre>
<p class="noindent">In this new CSS declaration, the number before the forward slash is the line number for <span class="green-d"><code><strong>grid-column-start</strong></code></span>, and the number after the slash is the line number for <span class="green-d"><code><strong>grid-column-end</strong></code></span>. In other words,</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-column-start</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>2</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-column-end</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>4</strong></span><span class="grey">;</span></pre>
<p class="noindent">and</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-column</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>2</strong></span> <span class="grey">/</span> <span class="pd_green1"><strong>4</strong></span><span class="grey">;</span></pre>
<p class="noindent">are equivalent.</p>
<p class="indent">Adding the more compact <span class="green-d"><code><strong>grid-column</strong></code></span> rule to the <span class="green-d"><code><strong>style</strong></code></span> section of <span class="green-d"><code><strong>grid.html</strong></code></span> gives us the CSS shown in <a href="ch15.xhtml#ch15list13">Listing 15.13</a>. The result is a content element that is double the width of all the rest, as shown in <a href="ch15.xhtml#ch15fig35">Figure 15.35</a>.</p>
<figure class="figure" id="ch15fig35">
<img src="graphics/15fig35.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.35:</strong> We have now achieved explicitly defined column spanning.</p>
</figcaption>
</figure>
<p class="listing" id="ch15list13"><span epub:type="pagebreak" id="page_538"></span><strong>Listing 15.13:</strong> Setting <span class="green-d"><code><strong>.grid-content</strong></code></span> to start at column 2.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list13a" id="p15list13">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>grid-menu</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#c0c0c</span>0;
}
.<span class="blue-v"><strong>grid-content</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>2 / 4</strong></span>;</span>
  <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="grey"><strong>1</strong></span>;
}
.<span class="blue-v"><strong>grid-panel</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#ee</span>e;
}
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span></pre>
<p class="indent"><span epub:type="pagebreak" id="page_539"></span>As you might guess, there is a similar shorthand for defining row starts and ends, so that we can replace something like</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-row-start</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>1</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row-end</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>3</strong></span><span class="grey">;</span></pre>
<p class="noindent">with</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-row</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>1</strong></span> <span class="grey">/</span> <span class="pd_green1"><strong>3</strong></span><span class="grey">;</span></pre>
<p class="noindent">If you were to change <span class="green-d"><code><strong>grid-row-start: 1</strong></code></span> in <a href="ch15.xhtml#ch15list13">Listing 15.13</a> to <span class="green-d"><code><strong>grid-row: 1 / 3</strong></code></span>, you would have a monster content cell that is double the width and double the height of all the others (<a href="ch15.xhtml#ch15fig36">Figure 15.36</a>).</p>
<figure class="figure" id="ch15fig36">
<img src="graphics/15fig36.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.36:</strong> Our element is now the largest, and the others should worry that it might eat them.</p>
</figcaption>
</figure>
<p class="indent">One thing to note here is that once again we have defined the styling using explicit values (specifically, the starting column 2 and starting row 3). No matter what happens <span epub:type="pagebreak" id="page_540"></span>with the content, the <span class="green-d"><code><strong>grid-content</strong></code></span> element will always be in row 1 and stretch from column line 2 to 4. If you wish to move it to a different position, it is as simple as altering a couple of values.</p>
<p class="indent">This sort of positioning flexibility allows you to position an element in the browser independent of its location in the HTML source (as long as it is a first-level child of the grid container—it can’t go <em>anywhere</em>, anywhere). This flexibility makes grid a fantastic tool for doing things like rearranging content to create a better mobile experience without needing to actually move the item in the HTML. You can simply tell the browser exactly where you want a specific element to be and all the other content will flow around it. You can even define the location of every single element if that’s what you need to make your layout work for a specific use case.</p>
<p class="indent">We’re betting that, with the elements we’ve added, you can already see where this is heading, but before we position all these elements into a functional layout we first want to introduce named grid lines and areas.</p>
</section>
<section>
<h4 class="h4" id="sec15_4_3">15.4.3 Named Lines and Areas</h4>
<p class="noindent">One really nice feature about CSS grid is that it allows developers the ability to name different parts of the grid so that there’s no need to try and remember whether or not “line 3” is the beginning of the content or the beginning of a sidebar. Even more than that, it also lets you easily define combinations of column and row lines into named areas, and then use those names to tell the browser where to render elements on the page.</p>
<p class="indent">Our example layout (<a href="ch15.xhtml#ch15fig6">Figure 15.6</a>) is going to have a header at the top that stretches across the page in the top row. Below that will be three content sections, with a menu on the left side of the row, a main content area in the middle, and a panel for extra information about the content on the right. Then the bottom row will be a footer that stretches across the page like the header.</p>
<p class="indent">In the CSS, let’s change the grid properties on the <span class="green-d"><code><strong>grid-container</strong></code></span> class, and also delete the changes that we added on the <span class="green-d"><code><strong>grid-content</strong></code></span> class so that the source looks like <a href="ch15.xhtml#ch15list14">Listing 15.14</a>.</p>
<p class="listing" id="ch15list14"><span epub:type="pagebreak" id="page_541"></span><strong>Listing 15.14:</strong> Setting the HTML for named lines and areas.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list14a" id="p15list14">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid-container</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>0em</strong></span> <span class="grey"><strong>1</strong></span>fr <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>5em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-template-rows</strong></span>: <span class="pd_green1"><strong>auto</strong></span> <span class="grey"><strong>1</strong></span>fr <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>10</strong></span><span class="pd_red"><strong>em</strong></span>, <span class="pd_green1"><strong>auto</strong></span>);</span>
  <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey"><strong>10</strong></span><span class="pd_red"><strong>0vh</strong></span>;
}
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>grid-content</strong></span> {

}</pre>
<p class="noindent">At this point, the CSS changes that we made should be familiar, and when you refresh your browser you should see something that looks like the mess in <a href="ch15.xhtml#ch15fig37">Figure 15.37</a>.</p>
<figure class="figure" id="ch15fig37">
<img src="graphics/15fig37.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.37:</strong> Well this is a beginning… we guess.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_542"></span>Using CSS grid to get this to look like an actual page layout is almost shockingly simple once you see how the named areas work, but we’ll do this in a couple of steps so that you can see how things fit together. The first step is to add a <span class="green-d"><code><strong>grid-template-areas</strong></code></span> declaration to the <span class="green-d"><code><strong>grid-container</strong></code></span> to define the areas page, as in <a href="ch15.xhtml#ch15list15">Listing 15.15</a>.</p>
<p class="listing" id="ch15list15"><strong>Listing 15.15:</strong> Creating our first named areas.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list15a" id="p15list15">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid-container</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-template-areas</strong></span>: <span class="pd_red"><strong>"header header header" "menu content panel"</strong></span></span>
<span class="bg1">                       <span class="pd_red"><strong>"footer footer footer"</strong></span>;</span>
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="grey"><strong>10</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>1</strong></span>fr <span class="grey"><strong>15</strong></span><span class="pd_red"><strong>em</strong></span>;
  <span class="pd_green1"><strong>grid-template-rows</strong></span>: <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span>, <span class="pd_green1"><strong>auto</strong></span>) <span class="grey"><strong>1</strong></span>fr <span class="pd_green1"><strong>auto</strong></span>;
  <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey"><strong>100</strong></span><span class="pd_red"><strong>vh</strong></span>;
}</pre>
<p class="indent">Let’s break down that declaration. The way that this works is that each of the sections in double quotes, like <span class="green-d"><code><strong>"header header header"</strong></code></span>, represents a row, and within the double-quoted sections each name represents a column. The new grid that we defined at the beginning of this section has three columns and three rows:</p>
<p class="codelink"><a href="ch15_images.xhtml#p542pro01a" id="p542pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_green1"><strong>grid-template-columns</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>10em 1fr 15em</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-template-rows</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>minmax</strong></span><span class="grey">(</span><span class="pd_green1"><strong>4em</strong></span><span class="grey">,</span> <span class="pd_green1"><strong>auto</strong></span><span class="grey">)</span> <span class="pd_green1"><strong>1fr auto</strong></span><span class="grey">;</span></pre>
<p class="indent">In the new <span class="green-d"><code><strong>grid-template-areas</strong></code></span> declaration, the <span class="green-d"><code><strong>"header header header"</strong></code></span> value is telling the browser that there should be a single grid area called <span class="green-d"><code><strong>header</strong></code></span> that in row 1 (row line 1 to line 2) covers all three columns (column line 1 to line 4).</p>
<p class="indent">The <span class="green-d"><code><strong>"menu content panel"</strong></code></span> value sets row 2 (row line 2 to line 3) to have an area called <span class="green-d"><code><strong>menu</strong></code></span> that is in the first column (column line 1 to line 2), then an area called <span class="green-d"><code><strong>content</strong></code></span> in the second column (column line 2 to line 3), and an area called <span class="green-d"><code><strong>panel</strong></code></span> in the last column (column line 3 to line 4).</p>
<p class="indent">Lastly, <span class="green-d"><code><strong>"footer footer footer"</strong></code></span> works like the <span class="green-d"><code><strong>header</strong></code></span> area but creates an area called <span class="green-d"><code><strong>footer</strong></code></span> in the last row.</p>
<p class="indent">In case you thought reminding you about the different grid lines might have just been us writing that all out in a needlessly descriptive way, fear not! There is a method to the madness.</p>
<p class="indent"><span epub:type="pagebreak" id="page_543"></span>A really convenient feature of how CSS grid works is that by naming grid areas, we also name the grid lines. That means that for the header, instead of using a style like this:</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-column-start</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>1</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-column-end</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>4</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row-start</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>1</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row-end</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>2</strong></span><span class="grey">;</span></pre>
<p class="noindent">or in the shorthand:</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-column</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>1</strong></span> <span class="grey">/</span> <span class="pd_green1"><strong>4</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>1</strong></span> <span class="grey">/</span> <span class="pd_green1"><strong>2</strong></span><span class="grey">;</span></pre>
<p class="noindent">we can use the much more readable:</p>
<p class="codelink"><a href="ch15_images.xhtml#p543pro03a" id="p543pro03">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_green1"><strong>grid-column-start</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header-start</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-column-end</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header-end</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row-start</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header-start</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row-end</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header-end</strong></span><span class="grey">;</span></pre>
<p class="noindent">This works in the shorthand as well (with even less typing needed):</p>
<pre class="pre1"><span class="pd_green1"><strong>grid-column</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header</strong></span><span class="grey">;</span>
<span class="pd_green1"><strong>grid-row</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header</strong></span><span class="grey">;</span></pre>
<p class="noindent">And excitingly, there’s an even simpler shorthand:</p>
<pre class="pre1"><span epub:type="pagebreak" id="page_544"></span><span class="pd_green1"><strong>grid-area</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>header</strong></span><span class="grey">;</span></pre>
<p class="noindent">All of those statements are equivalent and can be used interchangeably, depending on how much control you want for positioning a given element on the grid. We’ll play around with this more in <a href="ch15.xhtml#sec15_4_4">Section 15.4.4</a>, but in the meantime, let’s go ahead and add <span class="green-d"><code><strong>grid-area</strong></code></span> styles for all of our elements (<a href="ch15.xhtml#ch15list16">Listing 15.16</a>).</p>
<p class="listing" id="ch15list16"><strong>Listing 15.16:</strong> Adding <span class="green-d"><code><strong>grid-area</strong></code></span> definitions to content elements.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list16a" id="p15list16">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid-header</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#cc</span>c;
<span class="bg1">  <span class="pd_green1"><strong>grid-area</strong></span>: header;</span>
}
.<span class="blue-v"><strong>grid-menu</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#c0c0c</span>0;
<span class="bg1">  <span class="pd_green1"><strong>grid-area</strong></span>: menu;</span>
}
.<span class="blue-v"><strong>grid-content</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>grid-area</strong></span>: content;</span>
}
.<span class="blue-v"><strong>grid-panel</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#ee</span>e;
<span class="bg1">  <span class="pd_green1"><strong>grid-area</strong></span>: panel;</span>
}
.<span class="blue-v"><strong>grid-footer</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
<span class="bg1">  <span class="pd_green1"><strong>grid-area</strong></span>: footer;</span>
}</pre>
<p class="noindent">When you refresh your browser, you should see something that looks like the glorious layout in <a href="ch15.xhtml#ch15fig38">Figure 15.38</a>.</p>
<figure class="figure" id="ch15fig38">
<img src="graphics/15fig38.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.38:</strong> All in one go, things are starting to seem arranged.</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_4_4"><span epub:type="pagebreak" id="page_545"></span>15.4.4 Overlapping Using Grid</h4>
<p class="noindent">Before we made the last change to the code, we mentioned that even though we can use the <span class="green-d"><code><strong>grid-area</strong></code></span> shorthand, the underlying styles like <span class="green-d"><code><strong>grid-column</strong></code></span> and <span class="green-d"><code><strong>grid-row</strong></code></span> are still useful to keep in mind since you can use them to selectively change area properties.</p>
<p class="indent">Let’s pretend that for some reason you wanted to have the ability to let people visiting your site expand the content area to the full height and width of the page, overlapping both the header and the footer. With grid area naming it is really easy. Add a new class called <span class="green-d"><code><strong>.grid-expand</strong></code></span> in the CSS section, add the following CSS grid changes, and also throw in a couple of extra styles to make it possible to see the changes (<a href="ch15.xhtml#ch15list17">Listing 15.17</a>).</p>
<p class="listing" id="ch15list17"><strong>Listing 15.17:</strong> An example of overlapping grid elements.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list17a" id="p15list17">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid-footer</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
  <span class="pd_green1"><strong>grid-area</strong></span>: footer;
}
<span class="bg1">.<span class="blue-v"><strong>grid-expand</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>background-color</strong></span>: <span class="pd_green1"><strong>rgba</strong></span>(<span class="grey"><strong>255</strong></span>,<span class="grey"><strong>255</strong></span>,<span class="grey"><strong>255</strong></span>,<span class="grey"><strong>0.8</strong></span>);</span>
<span class="bg1">  <span class="pd_green1"><strong>box-shadow</strong></span>: <span class="grey"><strong>0 0 2</strong></span><span class="pd_red"><strong>0px</strong></span> <span class="grey"><strong>0</strong></span> <span class="pd_green1"><strong>rgba</strong></span>(<span class="grey"><strong>0</strong></span>,<span class="grey"><strong>0</strong></span>,<span class="grey"><strong>0</strong></span>,<span class="grey"><strong>0.3</strong></span>);</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="pd_green1"><strong>content</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-row</strong></span>: header-start / footer-end;</span>
<span class="bg1">  <span class="pd_green1"><strong>z-index</strong></span>: <span class="grey"><strong>2</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="noindent">Then add the <span class="green-d"><code><strong>grid-expand</strong></code></span> class to the HTML <span class="green-d"><code><strong>article</strong></code></span> element with class <span class="green-d"><code><strong>grid-content</strong></code></span>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p545pro01a" id="p545pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>article</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-content grid-expand"</span>&gt;</pre>
<p class="indent">Now when you refresh the page, the content area should have expanded to cover both the header and the footer (<a href="ch15.xhtml#ch15fig39">Figure 15.39</a>). Since we made the background a slightly transparent white using an opacity of <span class="green-d"><code><strong>0.8</strong></code></span> in <a href="ch15.xhtml#ch15list17">Listing 15.17</a>, we can also see that the element actually <em>is</em> overlapping the other elements. This is indicated by the light gray color of the “I am Content” area in <a href="ch15.xhtml#ch15fig39">Figure 15.39</a>, which comes from the darker gray of the “I am a Header” area showing through.</p>
<figure class="figure" id="ch15fig39">
<img src="graphics/15fig39.jpg" alt="images" width="675" height="498"/>
<figcaption>
<p class="title-f"><span epub:type="pagebreak" id="page_546"></span><strong>Figure 15.39:</strong> Overlapping content, and with no crazy negative margins or absolute positioning.</p>
</figcaption>
</figure>
<p class="indent">If you remove the <span class="green-d"><code><strong>grid-expand</strong></code></span> class in your browser’s web inspector, you’ll see that the element jumps right back into its normal spot. And once you complete <em>Learn Enough JavaScript to Be Dangerous</em> (<a href="https://www.learnenough.com/javascript">https://www.learnenough.com/javascript</a>), you’ll have learned techniques that will let you add and remove an element based on user clicks!</p>
</section>
<section>
<h4 class="h4" id="sec15_4_5">15.4.5 Source-Independent Positioning</h4>
<p class="noindent">Toward the end of <a href="ch15.xhtml#sec15_4_2">Section 15.4.2</a>, we mentioned that CSS grid gives you the ability to use explicit grid positioning to allow elements to be positioned on the page no matter where they are in the first level of the grid container. To see how this works, let’s add in a little banner that will display over the top of the “content” and “panel” areas.</p>
<p class="indent">In the first step, we are going to remove the <span class="green-d"><code><strong>grid-expand</strong></code></span> from the content element. We’ll next add the new <span class="green-d"><code><strong>grid-banner</strong></code></span> class and styles to the CSS area (<a href="ch15.xhtml#ch15list18">Listing 15.18</a>).</p>
<p class="listing" id="ch15list18"><span epub:type="pagebreak" id="page_547"></span><strong>Listing 15.18:</strong> Adding the banner CSS into the page.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list18a" id="p15list18">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid-expand</strong></span> {
.
.
.
}
<span class="bg1">.<span class="blue-v"><strong>grid-banner</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>align-self</strong></span>: <span class="pd_green1"><strong>start</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>background-color</strong></span>: <span class="pd_green1"><strong>rgba</strong></span>(<span class="grey"><strong>168</strong></span>,<span class="grey"><strong>214</strong></span>,<span class="grey"><strong>247</strong></span>,<span class="grey"><strong>0.9</strong></span>);</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="pd_green1"><strong>content-start</strong></span> <span class="grey"><strong>/</strong></span> panel-end;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="pd_green1"><strong>content-start</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>z-index</strong></span>: <span class="grey"><strong>10</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="indent">Then we’ll finish by placing the <span class="green-d"><code><strong>div</strong></code></span> with the <span class="green-d"><code><strong>grid-banner</strong></code></span> class anywhere in the grid container (<a href="ch15.xhtml#ch15list19">Listing 15.19</a>). (Note that the <span class="green-d"><code><strong>div</strong></code></span> has to be a first-level child of the container—you can’t put it inside another child like the <span class="green-d"><code><strong>grid-content</strong></code></span> element.)</p>
<p class="listing" id="ch15list19"><strong>Listing 15.19:</strong> Adding the banner element into the page.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list19a" id="p15list19">Click here to view code image</a></p>
<pre class="pre2">.
.
.
      &lt;<span class="pd_green1"><strong>nav</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-menu"</span>&gt;
        I am a Menu
      &lt;/<span class="pd_green1"><strong>nav</strong></span>&gt;
<span class="bg1">      &lt;<span class="pd_green1"><strong>article</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"grid-content"</strong></span>&gt;</span>
        I am Content
      &lt;/<span class="pd_green1"><strong>article</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>aside</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-panel"</span>&gt;
        I am Info
      &lt;/<span class="pd_green1"><strong>aside</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>footer</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-footer"</span>&gt;
        I am a Footer
      &lt;/<span class="pd_green1"><strong>footer</strong></span>&gt;
<span class="bg1">      &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"grid-banner"</strong></span>&gt;</span>
<span class="bg1">        I am a banner</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="noindent"><span epub:type="pagebreak" id="page_548"></span>Refresh the page and you’ll find a nice blue banner (<a href="ch15.xhtml#ch15fig40">Figure 15.40</a>).</p>
<figure class="figure" id="ch15fig40">
<img src="graphics/15fig40.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.40:</strong> A fresh blue banner appears!</p>
</figcaption>
</figure>
<p class="indent">In the CSS that was added in <a href="ch15.xhtml#ch15list18">Listing 15.18</a>, you can see that we are telling the browser to have any element with the <span class="green-d"><code><strong>grid-banner</strong></code></span> class span over the “content” and “panel” areas. We are also telling it that we want the element to start at the <span class="green-d"><code><strong>content-start</strong></code></span> row, but you’ll notice that we aren’t specifying a row end. Instead, we are using one of the alignment styles from <a href="ch15.xhtml#sec15_3_1">Section 15.3.1</a> to make this element not stretch to fill the space.</p>
<p class="indent">The <span class="green-d"><code><strong>align-self: start</strong></code></span> style has the browser start the element where it has been defined to start, but instead of the default value of <span class="green-d"><code><strong>stretch</strong></code></span>, which would cover the entire area, the <span class="green-d"><code><strong>start</strong></code></span> value makes it behave like a regular block element and only be as tall as the content inside. If we had set it to <span class="green-d"><code><strong>center</strong></code></span> or <span class="green-d"><code><strong>end</strong></code></span>, the banner would appear as in <a href="ch15.xhtml#ch15fig41">Figure 15.41</a>. Or we could have used any of the <span class="green-d"><code><strong>justify-self</strong></code></span> styles to also position it and have it take up only as much width as is needed to fit the content, as in <a href="ch15.xhtml#ch15fig42">Figure 15.42</a>. Or any combination of the above!</p>
<figure class="figure" id="ch15fig41">
<img src="graphics/15fig41.jpg" alt="images" width="675" height="248"/>
<figcaption>
<p class="title-f"><span epub:type="pagebreak" id="page_549"></span><strong>Figure 15.41:</strong> You can easily move the element to the center or end with <span class="green-d"><code><strong>align-self</strong></code></span>.</p>
</figcaption>
</figure>
<figure class="figure" id="ch15fig42">
<img src="graphics/15fig42.jpg" alt="images" width="676" height="461"/>
<figcaption>
<p class="title-f"><strong>Figure 15.42:</strong> Moving the banner around with <span class="green-d"><code><strong>justify-self</strong></code></span>.</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_4_6"><span epub:type="pagebreak" id="page_550"></span>15.4.6 Finishing the Layout</h4>
<p class="noindent">To finish this example off, let’s add in some extra styles for things like padding to make everything a little more neatly arranged (<a href="ch15.xhtml#ch15list20">Listing 15.20</a>).</p>
<p class="listing" id="ch15list20"><strong>Listing 15.20:</strong> Cleaning up our first grid layout.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list20a" id="p15list20">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>grid-header</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#cc</span>c;
  <span class="pd_green1"><strong>grid-area</strong></span>: header;
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;</span>
}
.<span class="blue-v"><strong>grid-menu</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#c0c0c</span>0;
  <span class="pd_green1"><strong>grid-area</strong></span>: menu;
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
}
<span class="bg1">.<span class="blue-v"><strong>grid-menu</strong></span> <span class="pd_green1"><strong>ul</strong></span>,</span>
<span class="bg1">.<span class="blue-v"><strong>grid-panel</strong></span> <span class="pd_green1"><strong>ul</strong></span>,</span>
<span class="bg1">.<span class="blue-v"><strong>grid-footer</strong></span> <span class="pd_green1"><strong>ul</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>list-style</strong></span>: <span class="pd_green1"><strong>none</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>margin</strong></span>: <span class="grey"><strong>0</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>0</strong></span>;</span>
}
.<span class="blue-v"><strong>grid-content</strong></span> {
  <span class="pd_green1"><strong>grid-area</strong></span>: <span class="pd_green1"><strong>content</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>3</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>3</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
}
.<span class="blue-v"><strong>grid-panel</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>border-left</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid rgba</strong></span>(<span class="grey"><strong>0</strong></span>,<span class="grey"><strong>0</strong></span>,<span class="grey"><strong>0</strong></span>,<span class="grey"><strong>0.1</strong></span>);</span>
  <span class="pd_green1"><strong>grid-area</strong></span><span class="grey">:</span> <span class="pd_green1"><strong>panel</strong></span><span class="grey">;</span>
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>3</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
}
.<span class="blue-v"><strong>grid-footer</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
  <span class="pd_green1"><strong>grid-area</strong></span>: footer;
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;</span>
}
<span class="bg1">.<span class="blue-v"><strong>grid-footer</strong></span> <span class="pd_green1"><strong>li</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>inline-block</strong></span>;</span>
<span class="bg1">}</span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>grid-banner</strong></span> {
  <span class="pd_green1"><strong>align-self</strong></span>: <span class="pd_green1"><strong>start</strong></span>;
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="pd_green1">rgb</span>a<span class="grey">(16</span>8<span class="grey">,21</span>4<span class="grey">,24</span>7<span class="grey">,0.</span>9);
  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="pd_green1"><strong>content</strong></span><span class="grey">-</span><span class="pd_green1"><strong>start</strong></span> <span class="grey">/</span> panel-end;
  <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="pd_green1"><strong>content</strong></span><span class="grey">-</span><span class="pd_green1"><strong>start</strong></span>;
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>position</strong></span>: <span class="pd_green1"><strong>sticky</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>top</strong></span>: <span class="grey"><strong>0</strong></span>;</span>
  <span class="pd_green1"><strong>z-index</strong></span>: <span class="grey"><strong>10</strong></span>;
}
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span></pre>
<p class="indent"><span epub:type="pagebreak" id="page_551"></span>We’ll also add our original grid test into the content area, and some links in lists for the menu, the panel content, and the footer. Rather than highlighting essentially everything in <a href="ch15.xhtml#ch15list21">Listing 15.21</a>, we’ve added highlighted comments to show you what parts of the HTML have changes.</p>
<p class="listing" id="ch15list21"><strong>Listing 15.21:</strong> Adding content to the layout.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list21a" id="p15list21">Click here to view code image</a></p>
<pre class="pre2">.
.
.
&lt;<span class="pd_green1"><strong>nav</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-menu"</span>&gt;
  I am a Menu
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>from here</em></span> <span class="pd_blue1">--&gt;</span></span>
  &lt;<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Menu item
      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Menu item
      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Menu item
     <span epub:type="pagebreak" id="page_552"></span>&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>to here</em></span> <span class="pd_blue1">--&gt;</span></span>
&lt;/<span class="pd_green1"><strong>nav</strong></span>&gt;
&lt;<span class="pd_green1"><strong>article</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-content"</span>&gt;
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>from here</em></span> <span class="pd_blue1">--&gt;</span></span>
  &lt;<span class="pd_green1"><strong>h1</strong></span>&gt;
    I am Content
  &lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid"</span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Big news today&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
      Quick sync win-win-win or workflow ecosystem.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-feature"</span>&gt;
      &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;We are really excited to announce that we will soon have an exciting
      announcement!&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
      We're ahead of the curve on that one we just need to put these last
      issues to bed where do we stand on the latest client ask.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Currying favor performance review bench mark&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
      No need to talk to users, just base it on the space calculator lift and
      shift.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Level the playing field&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
      Take five, punch the tree, and come back in here with a clear head. We
      need to follow protocol obviously, rock Star/Ninja encourage <span class="grey"><strong>&amp;amp;</strong></span> support
      business growth yet curate.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;Usability closing these latest prospects &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
      Customer centric where do we stand on the latest client ask back of the net
      4-blocker fast track make it look like digital, like putting socks
      on an octopus.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      1
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      2
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      3
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      4
    <span epub:type="pagebreak" id="page_553"></span>&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      5
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      6
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      7
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
      8
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>to here</em></span> <span class="pd_blue1">--&gt;</span></span>
&lt;/<span class="pd_green1"><strong>article</strong></span>&gt;
&lt;<span class="pd_green1"><strong>aside</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-panel"</span>&gt;
  I am Info
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>from here</em></span> <span class="pd_blue1">--&gt;</span></span>
  &lt;<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Panel link
      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Panel link
      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
          Panel link
        &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>p</strong></span>&gt;
      Call me Ishmael. Some years ago–never mind how long
      precisely–having little or no money in my purse, and nothing
      particular to interest me on shore, I thought I would sail about a
      little and see the watery part of the world. It is a way I have of
      driving off the spleen and regulating the circulation.
    &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>to here</em></span> <span class="pd_blue1">--&gt;</span></span>
&lt;/<span class="pd_green1"><strong>aside</strong></span>&gt;
&lt;<span class="pd_green1"><strong>footer</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"grid-footer"</span>&gt;
  I am a Footer
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>from here</em></span> <span class="pd_blue1">--&gt;</span></span>
 <span epub:type="pagebreak" id="page_554"></span> &lt;<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Footer link
      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;
        Footer link
      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
<span class="bg1">  <span class="pd_blue1">&lt;!--</span> <span class="pd_blue1"><em>to here</em></span> <span class="pd_blue1">--&gt;</span></span>
&lt;/<span class="pd_green1"><strong>footer</strong></span>&gt;
.
.
.</pre>
<p class="indent"><span epub:type="pagebreak" id="page_555"></span>Well look at that! <a href="ch15.xhtml#ch15fig43">Figure 15.43</a> sure does look a lot more like a functional page, and that sticky banner that attaches to the top of the screen as you scroll past… perfect (<a href="ch15.xhtml#ch15fig44">Figure 15.44</a>)!</p>
<figure class="figure" id="ch15fig43">
<img src="graphics/15fig43.jpg" alt="images" width="676" height="498"/>
<figcaption>
<p class="title-f"><strong>Figure 15.43:</strong> We might have made a page!</p>
</figcaption>
</figure>
<figure class="figure" id="ch15fig44">
<img src="graphics/15fig44.jpg" alt="images" width="301" height="244"/>
<figcaption>
<p class="title-f"><strong>Figure 15.44:</strong> It’s perfect!</p>
</figcaption>
</figure>
<p class="indent">Next up, in <a href="ch15.xhtml#sec15_5">Section 15.5</a> we’ll reverse the grid (and move it from outside to inside) to explore a different way to arrange content and utilize CSS grid. Don’t worry—that sounds more complicated than it really is!</p>
</section>
<section>
<h4 class="h4" id="sec15_4_7">15.4.7 Exercises</h4>
<ol class="number">
<li><p class="number">See if you can use your newfound grid-lines knowledge to get the banner that we added to start below the header and stretch all the way across the page, including overlapping the menu.</p></li>
<li><p class="number">What if you wanted to make the banner be its own area and not have it overlap the content, while making sure that the menu starts at the bottom of the header? <em>Hint</em>: You’ll need to add a new line for the banner to the <span class="green-d"><code><strong>.grid-container</strong></code></span>’s <span class="green-d"><code><strong>grid-template-areas</strong></code></span>, and a new row to the <span class="green-d"><code><strong>grid-template-rows</strong></code></span>. You’ll also need to set the banner to use the new area instead of the explicit <span class="green-d"><code><strong>grid-column</strong></code></span> and <span class="green-d"><code><strong>grid-row-start</strong></code></span> we added in this section. If you need a little help making this work, the answer appears in <a href="ch15.xhtml#ch15list22">Listing 15.22</a>.</p></li>
</ol>
<p class="listing" id="ch15list22"><span epub:type="pagebreak" id="page_556"></span><strong>Listing 15.22:</strong> Making the banner be its own area.<br/><code><em>grid.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list22a" id="p15list22">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid-container</strong></span> {
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
  <span class="pd_green1"><strong>grid-template-areas</strong></span>: <span class="pd_red">"header header header" "menu banner banner"</span>
                       <span class="pd_red">"menu content panel" "footer footer footer"</span>;
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="grey">10</span><span class="pd_red"><strong>em</strong></span> <span class="grey">1</span>fr <span class="grey">15</span><span class="pd_red"><strong>em</strong></span>;
  <span class="pd_green1"><strong>grid-template-rows</strong></span>: <span class="blue-v">minma</span>x<span class="grey">(4</span><span class="pd_red"><strong>em</strong></span>, <span class="pd_green1"><strong>auto</strong></span>) <span class="pd_green1"><strong>auto</strong></span> <span class="grey">1</span>fr <span class="pd_green1"><strong>auto</strong></span>;
  <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey">100</span><span class="pd_red"><strong>vh</strong></span>;
}

.<span class="blue-v"><strong>grid-banner</strong></span> {
  <span class="pd_green1"><strong>align-self</strong></span>: <span class="pd_green1"><strong>start</strong></span>;
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="pd_green1">rgb</span>a<span class="grey">(16</span>8<span class="grey">,21</span>4<span class="grey">,24</span>7<span class="grey">,0.</span>9);
  <span class="pd_green1"><strong>grid-area</strong></span>: banner;
  <span class="pd_blue1"><em>/* grid-column: content-start / panel-end; */</em></span>
  <span class="pd_blue1"><em>/* grid-row-start: content-start; */</em></span>
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
  <span class="pd_green1"><strong>z-index</strong></span>: <span class="grey">1</span>0;
}</pre>
</section>
</section>
<section>
<h3 class="h3" id="sec15_5">15.5 Grid on the Inside</h3>
<p class="noindent">In the example layout that we just finished, we used a single grid on the outside of our page that provided structure to allow us to position elements. This layout didn’t really provide much in the way of a structure for the content <em>inside</em> all the elements, though. One of the things that is great about grids is that if you have regularly spaced columns, then you can use those to arrange the placement of everything on the page so that it looks professionally designed (<a href="ch15.xhtml#ch15fig45">Figure 15.45</a>). You can use a grid to align all the content on a page in a very strict manner, or you can use that grid as a guide and allow some elements not to be rigidly aligned to the grid as a way to give your layout a certain <em>je ne sais quoi</em>.<sup><a id="fn15_10" href="ch15.xhtml#fn15_10a">10</a></sup></p>
<figure class="figure" id="ch15fig45">
<img src="graphics/15fig45.jpg" alt="images" width="526" height="547"/>
<figcaption>
<p class="title-f"><strong>Figure 15.45:</strong> Arranging content according to a global grid.</p>
</figcaption>
</figure>
<p class="footnote"><a id="fn15_10a" href="ch15.xhtml#fn15_10">10</a>. A quality that cannot be described or named easily… like using French quotes in a tech tutorial to make the writing seem fancy.</p>
<p class="indent">For this final section of the tutorial, we are going to use CSS grid to set up a less than strict content layout like the one shown in <a href="ch15.xhtml#ch15fig45">Figure 15.45</a>. And just as a heads-up, we will be moving faster with examples since all of the basic styles should now be familiar. The only new material pertains to the philosophy of how we use CSS grid.</p>
<p class="indent"><span epub:type="pagebreak" id="page_557"></span>Screenshots in this section will at times show the grid lines, and also at times add borders around elements to help you see them. Don’t panic and think you missed something because there aren’t borders on your page!</p>
<p class="indent">What we will be doing in this section would also be a lot easier to accomplish if CSS grid had full browser support for a feature called “subgrid” (<a href="ch15.xhtml#box15_1">Box 15.1</a>). But it’s OK! We can work around that limitation. Let’s get started.</p>
<aside epub:type="sidebar" class="sidebar1" id="box15_1">
<p class="sb-title1"><strong>Box 15.1: About Subgrid</strong></p>
<p class="sb-noindent">The specification for CSS grid was originally supposed to include this really great feature that would allow child elements of grid objects to inherit grid settings from the parent grid. Unfortunately, as of this writing Firefox is the only major browser that supports subgrid (<a href="ch15.xhtml#ch15fig46">Figure 15.46</a>).</p>
<figure class="figure" id="ch15fig46">
<img src="graphics/15fig46.jpg" alt="images" width="676" height="270"/>
<figcaption>
<p class="title-f"><strong>Figure 15.46:</strong> If you see a sea of red at <a href="http://caniuse.com">caniuse.com</a>, run away!</p>
</figcaption>
</figure>
<p class="sb-indent"><span epub:type="pagebreak" id="page_558"></span>Universal subgrid support would have allowed developers to easily pass things like column or row layouts into child elements so that everything on the page could be arranged according to a single grid, as seen in <a href="ch15.xhtml#ch15fig47">Figure 15.47</a>. As we mentioned in the main text, though, it is possible to work around this with a little careful effort, but support for subgrid is definitely one of those things that you should keep an eye on if you find yourself regularly doing front-end development. It’s likely that browser support for subgrid will (perhaps too slowly) improve over time.</p>
<figure class="figure" id="ch15fig47">
<img src="graphics/15fig47.jpg" alt="images" width="600" height="329"/>
<figcaption>
<p class="title-f"><strong>Figure 15.47:</strong> How the subgrid would work if we could use it, but alas, it was not to be…</p>
</figcaption>
</figure>
</aside>
<section>
<h4 class="h4" id="sec15_5_1">15.5.1 Setting Up the Page</h4>
<p class="noindent"><span epub:type="pagebreak" id="page_559"></span>The first step for our new page is to create a new blank HTML file in the site directory, which we’ll call <span class="green-d"><code><strong>grid-landing.html</strong></code></span>. Into that file, paste in the site skeleton shown in <a href="ch15.xhtml#ch15list23">Listing 15.23</a>.<sup><a id="fn15_11" href="ch15.xhtml#fn15_11a">11</a></sup> (We weren’t kidding about moving faster.)</p>
<p class="footnote"><a id="fn15_11a" href="ch15.xhtml#fn15_11">11</a>. Like all the code listings, <a href="ch15.xhtml#ch15list23">Listing 15.23</a> is available at <a href="https://github.com/learnenough/learn_enough_css_code_listings">https://github.com/learnenough/learn_enough_css_code_listings</a>.</p>
<p class="listing" id="ch15list23"><strong>Listing 15.23:</strong> Our next grid layout HTML skeleton.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list23a" id="p15list23">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!doctype html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green1"><strong>style</strong></span>&gt;
      <span class="pd_green1"><strong>html</strong></span><span class="grey">,</span>
      <span class="pd_green1"><strong>body</strong></span> {
        <span class="pd_green1"><strong>margin</strong></span>: <span class="grey">0</span>;
        <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">0</span>;
      }
      <span class="pd_green1"><strong>h1</strong></span><span class="grey">,</span> <span class="pd_green1"><strong>h2</strong></span><span class="grey">,</span> <span class="pd_green1"><strong>h3</strong></span> {
        <span class="pd_green1"><strong>margin-top</strong></span>: <span class="grey">0</span>;
        <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
      }
      .<span class="blue-v"><strong>subtitle</strong></span> {
        <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
      }
      .<span class="blue-v"><strong>menulist</strong></span> {
        <span class="pd_green1"><strong>margin</strong></span>: <span class="grey">0</span>;
        <span class="pd_green1"><strong>list-style</strong></span>: <span class="pd_green1"><strong>none</strong></span>;
        <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">0</span>;
      }
      .<span class="blue-v"><strong>landing_cta</strong></span> {
        <span class="pd_green1"><strong>margin-top</strong></span>: <span class="grey">1.5</span><span class="pd_red"><strong>em</strong></span>;
        <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
      }

      .<span class="blue-v"><strong>header</strong></span> {
        <span epub:type="pagebreak" id="page_560"></span><span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#00</span>0;
        <span class="pd_green1"><strong>color</strong></span>: <span class="grey">#fff</span>;
        <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
        <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
      }

      .<span class="blue-v"><strong>hero</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#a8d6f</span>7;
        <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey">50</span><span class="pd_red"><strong>vh</strong></span>;
        <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
      }

      .<span class="blue-v"><strong>options</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#4a769</span>6;
        <span class="pd_green1"><strong>color</strong></span>: <span class="grey">#fff</span>;
        <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">4</span><span class="pd_red"><strong>em</strong></span> <span class="grey">0</span>;
      }
      .<span class="blue-v"><strong>options_item-img</strong></span> {
          <span class="pd_green1"><strong>width</strong></span>: <span class="grey">100</span><span class="pd_red"><strong>%</strong></span>;
      }

      .<span class="blue-v"><strong>info</strong></span> {
        <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">8</span><span class="pd_red"><strong>em</strong></span> <span class="grey">0</span>;
      }

      .<span class="blue-v"><strong>feature</strong></span> {
        <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey">70</span><span class="pd_red"><strong>vh</strong></span>;
      }

      .<span class="blue-v"><strong>footer</strong></span> {
        <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
        <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">4</span><span class="pd_red"><strong>em</strong></span> <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
      }
    &lt;/<span class="pd_green1"><strong>style</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>header</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"header"</span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"header_content"</span>&gt;
        I am a Header
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>header</strong></span>&gt;

    &lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero"</span>&gt;
      &lt;<span class="pd_green1"><strong>h1</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero_title"</span>&gt;
        I am an Important Message
      &lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero_content"</span>&gt;
        And I am a less important, but still a very important
        thing to consider.
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>section</strong></span>&gt;

  &lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options"</span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options_title"</span>&gt;
      Here are Some Choices
    &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options_content"</span>&gt;
      <span epub:type="pagebreak" id="page_561"></span>&lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        Stuff
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        Different Stuff
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
        All the Stuff
      &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>section</strong></span>&gt;

  &lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"info"</span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"info_title"</span>&gt;
      I am Some More info
    &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"subtitle"</span>&gt;
      Say you are in the country.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"info_content"</span>&gt;
      &lt;<span class="pd_green1"><strong>p</strong></span>&gt;
        In some high land of lakes. Take almost any path you
        please, and ten to one it carries you down in a dale,
        and leaves you there by a pool in the stream. There
        is magic in it. But here is an artist. He desires to
        paint you the dreamiest, shadiest, quietest, most
        enchanting bit of romantic landscape in all the
        valley of the Saco.
      &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>section</strong></span>&gt;

  &lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"feature"</span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"feature_img"</span>&gt;&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"feature_content feature_content-1"</span>&gt;
      Let the most absent-minded of men be plunged in his
      deepest reveries—stand that man on his legs, set his
      feet a-going, and he will infallibly lead you to water,
      if water there be in all that region.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"feature_content feature_content-2"</span>&gt;
      Take almost any path you please, and ten to one it
      carries you down in a dale, and leaves you there by a
      pool in the stream. There is magic in it.
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>section</strong></span>&gt;

  &lt;<span class="pd_green1"><strong>footer</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"footer"</span>&gt;
    &lt;<span class="pd_green1"><strong>h3</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"footer_title"</span>&gt;
      I am a Footer
    <span epub:type="pagebreak" id="page_562"></span>&lt;/<span class="pd_green1"><strong>h3</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>ul</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"menulist footer_menu-first"</span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        Products
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>ul</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"menulist"</span>&gt;
        &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
          About
        &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
          &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
        &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
          &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>ul</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"menulist"</span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        Links
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>ul</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"menulist"</span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        Account
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">""</span>&gt;Footer link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>footer</strong></span>&gt;

 &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_563"></span>Let’s get oriented with what we have here on the page and then we’ll explain what we’ll be doing. In the HTML in <a href="ch15.xhtml#ch15list23">Listing 15.23</a>, you can see that there is a series of containers for site content (all with some stubbed-out content), and they are all direct children of the HTML’s <span class="green-d"><code><strong>&lt;body&gt;</strong></code></span> tag. The CSS at the top of the <span class="green-d"><code><strong>&lt;style&gt;</strong></code></span> section includes a minimal CSS reset (<a href="ch09.xhtml#sec9_5">Section 9.5</a>), and adds some basic styling for backgrounds, padding, etc. on each of the page’s elements.</p>
</section>
<section>
<h4 class="h4" id="sec15_5_2">15.5.2 Adding a Global Grid and Header Positioning</h4>
<p class="noindent">If you need to refresh your memory on what we’ll be making, <a href="ch15.xhtml#ch15fig45">Figure 15.45</a> from the beginning of the chapter is going to be our blueprint for the new layout. Before, we had one layout grid on the outside; now we’ll have many containers, each with the same grid inside. To accomplish this, we’ll add in a new CSS declaration, and then we’ll add that class onto every element as we style each one. Let’s add the declaration now (<a href="ch15.xhtml#ch15list24">Listing 15.24</a>).</p>
<p class="listing" id="ch15list24"><strong>Listing 15.24:</strong> Creating our global grid class.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list24a" id="p15list24">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>landing_cta</strong></span> {
  <span class="pd_green1"><strong>margin-top</strong></span>: <span class="grey">1.5</span><span class="pd_red"><strong>em</strong></span>;
  <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
}

<span class="bg1">.<span class="blue-v"><strong>grid</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>box-sizing</strong></span>: <span class="pd_green1"><strong>border-box</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span>,<span class="grey"><strong>1</strong></span>fr) <span class="blue-v"><strong>repeat</strong></span>(<span class="grey"><strong>6</strong></span>,<span class="blue-v"><strong>minmax</strong></span>(<span class="pd_green1"><strong>auto</strong></span>,<span class="grey"><strong>10</strong></span><span class="pd_red"><strong>em</strong></span>))</span>
<span class="bg1">                         <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span>,<span class="grey"><strong>1</strong></span>fr);</span>
<span class="bg1">}</span></pre>
<p class="noindent">And then add the <span class="green-d"><code><strong>grid</strong></code></span> class onto the element with the <span class="green-d"><code><strong>header</strong></code></span> class:</p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>header</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"header grid"</span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_564"></span>All that CSS we added should look familiar, but we should explain the thinking behind this <span class="green-d"><code><strong>grid-template-columns</strong></code></span> style:</p>
<p class="codelink"><a href="ch15_images.xhtml#p564pro01a" id="p564pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="pd_green1"><strong>minmax</strong></span><span class="grey">(</span><span class="pd_green1"><strong>2em</strong></span><span class="grey">,</span><span class="pd_green1"><strong>1fr</strong></span><span class="grey">)</span> <span class="pd_green1"><strong>repeat</strong></span><span class="grey">(</span><span class="pd_green1"><strong>6</strong></span><span class="grey">,</span><span class="pd_green1"><strong>minmax</strong></span><span class="grey">(</span><span class="pd_green1"><strong>auto</strong></span><span class="grey">,</span><span class="pd_green1"><strong>10em</strong></span><span class="grey">))</span> <span class="pd_green1"><strong>minmax</strong></span><span class="grey">(</span><span class="pd_green1"><strong>2em</strong></span><span class="grey">,</span><span class="pd_green1"><strong>1fr</strong></span><span class="grey">)</span></pre>
<p class="noindent">This column layout creates a series of <span class="green-d"><code><strong>6</strong></code></span> content columns that will have a max size of <span class="green-d"><code><strong>10em</strong></code></span> each, for a total content area of <span class="green-d"><code><strong>60em</strong></code></span>. These columns are what we’ll be arranging elements to line up with. Then, on either side of the content area, we have two columns that have a minimum size of <span class="green-d"><code><strong>2em</strong></code></span> so that on a small screen there is some padding, and a maximum size of <span class="green-d"><code><strong>1fr</strong></code></span> so that the columns expand to keep the content area in the center (<a href="ch15.xhtml#ch15fig48">Figure 15.48</a>). Note that the columns in the main content area start with grid line 2 and end at grid line 8.</p>
<figure class="figure" id="ch15fig48">
<img src="graphics/15fig48.jpg" alt="images" width="676" height="308"/>
<figcaption>
<p class="title-f"><strong>Figure 15.48:</strong> The basic column structure on a big screen and on a smaller screen.</p>
</figcaption>
</figure>
<p class="indent">Starting with a small example first, let’s assume that we want the content in the header for the site to be constrained only to the top of the main content columns, as seen in <a href="ch15.xhtml#ch15fig49">Figure 15.49</a>.</p>
<figure class="figure" id="ch15fig49">
<img src="graphics/15fig49.jpg" alt="images" width="676" height="513"/>
<figcaption>
<p class="title-f"><strong>Figure 15.49:</strong> It would be nice if the header, on the top left, went where the arrow is pointing.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_565"></span>One way to do that would be to add in a style like this:</p>
<pre class="pre1">.<span class="blue-v"><strong>header_content</strong></span> {
  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey">2 /</span> 8;
}</pre>
<p class="noindent">That would work, but adding the style in that way would mean we’d be adding the same sort of thing throughout the page—a blatant violation of the DRY principle (<a href="ch05.xhtml#box5_2">Box 5.2</a>).</p>
<p class="indent">Instead, we can create a new class called <span class="green-d"><code><strong>grid_2-8</strong></code></span> (it will be starting at line 2 and ending at line 8) that we can reuse elsewhere on the page. Since the goal of this whole exercise is to get all of the page content organized using grid columns, it will definitely be reused. Add the new declaration in now, as shown in <a href="ch15.xhtml#ch15list25">Listing 15.25</a>.</p>
<p class="listing" id="ch15list25"><span epub:type="pagebreak" id="page_566"></span><strong>Listing 15.25:</strong> Adding the <span class="green-d"><code><strong>.grid_2-8</strong></code></span> class.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list25a" id="p15list25">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid</strong></span> {
  <span class="pd_green1"><strong>box-sizing</strong></span>: <span class="pd_green1"><strong>border-box</strong></span>;
  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>grid</strong></span>;
  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v">minma</span>x<span class="grey">(2</span><span class="pd_red"><strong>em</strong></span>,<span class="grey">1</span>fr) <span class="blue-v">repea</span>t<span class="grey">(</span>6<span class="blue-v">,minma</span>x(<span class="pd_green1"><strong>auto</strong></span>,<span class="grey">10</span><span class="pd_red"><strong>em</strong></span>))
                         <span class="blue-v">minmax</span>(<span class="grey">2</span><span class="pd_red"><strong>em</strong></span>,<span class="grey">1</span>fr);
}
<span class="bg1">.<span class="blue-v"><strong>grid_2-8</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>2 / 8</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="noindent">Also add the <span class="green-d"><code><strong>grid_2-8</strong></code></span> class to the <span class="green-d"><code><strong>header_content</strong></code></span> element:</p>
<p class="codelink"><a href="ch15_images.xhtml#p566pro01a" id="p566pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"header_content grid_2-8"</span>&gt;</pre>
<p class="noindent">Now when you refresh the page you’ll see that the <span class="green-d"><code><strong>header_content</strong></code></span> element is fixed in place to only those grid lines (<a href="ch15.xhtml#ch15fig50">Figure 15.50</a>).</p>
<figure class="figure" id="ch15fig50">
<img src="graphics/15fig50.jpg" alt="images" width="675" height="507"/>
<figcaption>
<p class="title-f"><strong>Figure 15.50:</strong> We’ve managed to move things!</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_567"></span>Before we apply this newfound alignment power to other elements on the page, let’s add some more content in the header, a new positioning class that constrains elements to just lines 3–7, and some more styles for the header (<a href="ch15.xhtml#ch15list26">Listing 15.26</a>).</p>
<p class="listing" id="ch15list26"><strong>Listing 15.26:</strong> Finishing off the new header styling.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list26a" id="p15list26">Click here to view code image</a></p>
<pre class="pre2"><span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span>
.<span class="blue-v"><strong>grid_2-8</strong></span> {
  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey">2 /</span> 8;
}
<span class="bg1">.<span class="blue-v"><strong>grid_3-7</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>3 / 7</strong></span>;</span>
}
.<span class="blue-v"><strong>header</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#00</span>0;
  <span class="pd_green1"><strong>color</strong></span>: <span class="grey">#fff</span>;
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>position</strong></span>: <span class="pd_green1"><strong>sticky</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>top</strong></span>: <span class="grey"><strong>0</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>z-index</strong></span>: <span class="grey"><strong>10</strong></span>;</span>
}
<span class="bg1">.<span class="blue-v"><strong>header_menu</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>column-gap</strong></span>: <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>display</strong></span>: <span class="pd_green1"><strong>flex</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>justify-content</strong></span>: <span class="pd_green1"><strong>center</strong></span>;</span>
<span class="bg1">}</span>
<span class="bg1">.<span class="blue-v"><strong>header_menu-link</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>color</strong></span>: <span class="grey"><strong>#a8d6f7</strong></span>;</span>
<span class="bg1">}</span>
<span class="grey">.</span>
<span class="grey">.</span>
<span class="grey">.</span></pre>
<p class="indent">Then, in the HTML, we’ll add in a new <span class="green-d"><code><strong>nav</strong></code></span> element to the header with the new class already applied (<a href="ch15.xhtml#ch15list27">Listing 15.27</a>). Refreshing the page should give us something like <a href="ch15.xhtml#ch15fig51">Figure 15.51</a>.</p>
<figure class="figure" id="ch15fig51">
<img src="graphics/15fig51.jpg" alt="images" width="676" height="508"/>
<figcaption>
<p class="title-f"><strong>Figure 15.51:</strong> That looks like a header now.</p>
</figcaption>
</figure>
<p class="listing" id="ch15list27"><span epub:type="pagebreak" id="page_568"></span><strong>Listing 15.27:</strong> Adding some extra HTML to the header.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list27a" id="p15list27">Click here to view code image</a></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>header</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"header grid"</span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"header_content grid_2-8"</span>&gt;
    I am a Header
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">  &lt;<span class="pd_green1"><strong>nav</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"grid_3-7"</strong></span>&gt;</span>
<span class="bg1">    &lt;<span class="pd_green1"><strong>ul</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"header_menu menulist"</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;</span>
<span class="bg1">        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>""</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"header_menu-link"</strong></span>&gt;</span>
<span class="bg1">          Header link</span>
<span class="bg1">        &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;</span>
<span class="bg1">        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>""</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"header_menu-link"</strong></span>&gt;</span>
<span class="bg1">          Header link</span>
<span class="bg1">        &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;</span>
<span class="bg1">    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;</span>
<span class="bg1">  &lt;/<span class="pd_green1"><strong>nav</strong></span>&gt;</span>
&lt;/<span class="pd_green1"><strong>header</strong></span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_569"></span>As you can see in <a href="ch15.xhtml#ch15fig51">Figure 15.51</a>, we now have a menu in our header. In addition, as the outlines show, the elements are locked into place according to the grid lines that we specified. We hope that you can start to see how we are creating CSS LEG— <em>(lawyer’s note: LEGO and LEGO brand blocks are the exclusive trademark of the LEGO GROUP)</em>—umm… <em>building blocks</em> that we can snap together!</p>
<p class="indent">Before we go further down the rabbit hole, we want to point something out that might have slipped by. In the <span class="green-d"><code><strong>header_menu</strong></code></span> styles that we added, you might have noticed that the element has <span class="green-d"><code><strong>display: flex</strong></code></span> applied, and there’s also a <span class="green-d"><code><strong>column-gap</strong></code></span> set… but isn’t that just a grid thing? Nope! You can use column and row gaps on flexbox elements too (<a href="ch15.xhtml#ch15fig52">Figure 15.52</a>)!<sup><a id="fn15_12" href="ch15.xhtml#fn15_12a">12</a></sup></p>
<p class="footnote"><a id="fn15_12a" href="ch15.xhtml#fn15_12">12</a>. Image courtesy of altanaka/Shutterstock.</p>
<figure class="figure" id="ch15fig52">
<img src="graphics/15fig52.jpg" alt="images" width="608" height="405"/>
<figcaption>
<p class="title-f"><strong>Figure 15.52:</strong> Celebrating that we can apply <span class="green-d"><code><strong>gap</strong></code></span> to flexbox elements instead of needing <span class="green-d"><code><strong>flex-gap</strong></code></span>!</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_5_3"><span epub:type="pagebreak" id="page_570"></span>15.5.3 Using Building Blocks and Justifying</h4>
<p class="noindent">All right, let’s start adding our grid to the rest of the page by turning our attention to that <span class="green-d"><code><strong>hero</strong></code></span> section. The first step is to add the <span class="green-d"><code><strong>grid</strong></code></span> class to the <span class="green-d"><code><strong>section</strong></code></span> with class <span class="green-d"><code><strong>hero</strong></code></span>:</p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero grid"</span>&gt;</pre>
<p class="noindent">If you were to just leave things there and add no new CSS styles, you’d get something that looks like <a href="ch15.xhtml#ch15fig53">Figure 15.53</a>.</p>
<figure class="figure" id="ch15fig53">
<img src="graphics/15fig53.jpg" alt="images" width="676" height="512"/>
<figcaption>
<p class="title-f"><strong>Figure 15.53:</strong> Sure it’s using grid, but it doesn’t look good.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_571"></span>But with our new CSS building-block power, we can make this look better. Let’s create a new, more constrained class called <span class="green-d"><code><strong>.grid_4-6</strong></code></span> for the content area (<a href="ch15.xhtml#ch15list28">Listing 15.28</a>).</p>
<p class="listing" id="ch15list28"><strong>Listing 15.28:</strong> A new, smaller <span class="green-d"><code><strong>.grid_4-6</strong></code></span> class.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list28a" id="p15list28">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid_3-7</strong></span> {
  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey">3 /</span> 7;
}
<span class="bg1">.<span class="blue-v"><strong>grid_4-6</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>4 / 6</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="noindent">Let’s make the <span class="green-d"><code><strong>h1</strong></code></span> be able to stretch across the entire content section by adding the <span class="green-d"><code><strong>grid_2-8</strong></code></span> class, and then add the new <span class="green-d"><code><strong>grid_4-6</strong></code></span> class from <a href="ch15.xhtml#ch15list28">Listing 15.28</a> to the hero-content <span class="green-d"><code><strong>div</strong></code></span>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p571pro01a" id="p571pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero grid"</span>&gt;
<span class="bg1">  &lt;<span class="pd_green1"><strong>h1</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"hero_title grid_2-8"</strong></span>&gt;</span>

    I am an Important Message
  &lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
<span class="bg1">  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero_content grid_4-6"</span>&gt;</span>

    And I am a less important, but still a very important
    thing to consider.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>section</strong></span>&gt;</pre>
<p class="noindent">The result appears in <a href="ch15.xhtml#ch15fig54">Figure 15.54</a>. It still doesn’t look great—we probably want to move the content as indicated by the arrows.</p>
<figure class="figure" id="ch15fig54">
<img src="graphics/15fig54.jpg" alt="images" width="676" height="513"/>
<figcaption>
<p class="title-f"><strong>Figure 15.54:</strong> These things should probably be in that area.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_572"></span>So, why is there all that space between the elements? Well, if you remember back to <a href="ch15.xhtml#sec15_2_2">Section 15.2.2</a>, the browser will just treat new rows like they are all <span class="green-d"><code><strong>1fr</strong></code></span> when there are no grid row settings (and there are none). Since we explicitly defined the column start and end for the two elements in the hero, and because they can’t both fit on the same row, the browser popped the <span class="green-d"><code><strong>hero_content</strong></code></span> down to a new row and then applied <span class="green-d"><code><strong>1fr</strong></code></span> sizing to both. You wouldn’t have noticed this in the header, even though the same thing happened there too, because we didn’t set a height for the header. That means the block elements were sized to just fit the content, and we were none the wiser.</p>
<p class="indent">So how can we get the elements in the hero to be only the size of their content, and also position them? If you thought, “Use one of the <span class="green-d"><code><strong>align</strong></code></span> or <span class="green-d"><code><strong>justify</strong></code></span> styles,” you’re correct! In particular, we can add an <span class="green-d"><code><strong>align-content</strong></code></span> rule to the <span class="green-d"><code><strong>.hero</strong></code></span> class (<a href="ch15.xhtml#ch15list29">Listing 15.29</a>).</p>
<p class="listing" id="ch15list29"><span epub:type="pagebreak" id="page_573"></span><strong>Listing 15.29:</strong> Aligning the <span class="green-d"><code><strong>hero</strong></code></span> content.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list29a" id="p15list29">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>hero</strong></span> {
<span class="bg1">  <span class="pd_green1"><strong>align-content</strong></span>: <span class="pd_green1"><strong>center</strong></span>;</span>
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey"><strong>#a8d6f7</strong></span>;
  <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey"><strong>5</strong></span><span class="pd_red"><strong>0vh</strong></span>;
  <span class="pd_green1"><strong>text-align</strong></span>: <span class="pd_green1"><strong>center</strong></span>;
}</pre>
<p class="noindent">And then, just for fun, let’s add a little more content into that <span class="green-d"><code><strong>hero_content</strong></code></span> element (<a href="ch15.xhtml#ch15list30">Listing 15.30</a>).</p>
<p class="listing" id="ch15list30"><strong>Listing 15.30:</strong> Adding some extra hero content.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list30a" id="p15list30">Click here to view code image</a></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero grid"</span>&gt;
  &lt;<span class="pd_green1"><strong>h1</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero_title grid_2-8"</span>&gt;
    I am an Important Message
  &lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"hero_content grid_4-6"</span>&gt;
    And I am a less important, but still a very important
    thing to consider.
<span class="bg1">    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"landing_cta"</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>""</strong></span>&gt;</span>
<span class="bg1">        Click me!</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>a</strong></span>&gt;</span>
<span class="bg1">    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>section</strong></span>&gt;</pre>
<p class="noindent">When you refresh the page, you’ll now have content that is constrained by the global grid and is also positioned in the center of the <span class="green-d"><code><strong>hero</strong></code></span> section (<a href="ch15.xhtml#ch15fig55">Figure 15.55</a>).</p>
<figure class="figure" id="ch15fig55">
<img src="graphics/15fig55.jpg" alt="images" width="676" height="512"/>
<figcaption>
<p class="title-f"><strong>Figure 15.55:</strong> Ahhhh, that’s a lot better!</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_5_4">15.5.4 More Column Positioning</h4>
<p class="noindent"><span epub:type="pagebreak" id="page_574"></span>Now that we’ve styled the <span class="green-d"><code><strong>hero</strong></code></span> section, let’s take a look at the rest of the page. The next element in the HTML is the <span class="green-d"><code><strong>options</strong></code></span> section, but let’s skip that for a second (we are going to do something a little more complex there in <a href="ch15.xhtml#sec15_5_7">Section 15.5.7</a>) and instead focus on the element with the <span class="green-d"><code><strong>info</strong></code></span> class. In this element, we’ll apply the global grid, make the title cover the entire content area, make the subtitle go from lines 4 to 6, and have the block of text go from lines 3 to 7 on the grid (<a href="ch15.xhtml#ch15list31">Listing 15.31</a>).</p>
<p class="listing" id="ch15list31"><strong>Listing 15.31:</strong> Using our building block in the “info” section.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list31a" id="p15list31">Click here to view code image</a></p>
<pre class="pre2">.
.
.
<span class="bg1">&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"info grid"</strong></span>&gt;</span>
<span class="bg1">  &lt;<span class="pd_green1"><strong>h2</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"info_title grid_2-8"</strong></span>&gt;</span>
    I am Some More info
  &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
<span class="bg1">  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"subtitle grid_4-6"</strong></span>&gt;</span>
    Say you are in the country.
  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"info_content grid_3-7"</strong></span>&gt;</span>
    &lt;<span class="pd_green1"><strong>p</strong></span>&gt;
      In some high land of lakes. Take almost any path you
.
.
.</pre>
<p class="noindent"><span epub:type="pagebreak" id="page_575"></span>If your page looks like <a href="ch15.xhtml#ch15fig56">Figure 15.56</a> in your browser, we think you are getting the hang of this!</p>
<figure class="figure" id="ch15fig56">
<img src="graphics/15fig56.jpg" alt="images" width="675" height="354"/>
<figcaption>
<p class="title-f"><strong>Figure 15.56:</strong> It’s a fully functional “info” section.</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_5_5">15.5.5 Using Overlapping in a Feature Section</h4>
<p class="noindent">Let’s now move to the element with the <span class="green-d"><code><strong>feature</strong></code></span> class and get a little fancier. The goal is to make some sort of featured section with text overlaid on top of an image— something like <a href="ch15.xhtml#ch15fig57">Figure 15.57</a>. How would you do that with our grid?</p>
<figure class="figure" id="ch15fig57">
<img src="graphics/15fig57.jpg" alt="images" width="676" height="515"/>
<figcaption>
<p class="title-f"><strong>Figure 15.57:</strong> This is what we are going to be making.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_576"></span>We’re also going to throw in a wrinkle where instead of setting the image to be the background of the entire element, it needs to be the background of that <span class="green-d"><code><strong>feature_img</strong></code></span> element. The reason is that we might want to have the flexibility to move it around in the future and still keep it positioned using our global grid. This is a chance to use the overlapping ability of CSS grid that we covered in <a href="ch15.xhtml#sec15_4_4">Section 15.4.4</a>.</p>
<p class="indent">The zeroth step is going to be adding <span class="green-d"><code><strong>grid</strong></code></span> to the <span class="green-d"><code><strong>feature</strong></code></span> element (since without that, nothing interesting will happen):</p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"feature grid"</span>&gt;</pre>
<p class="noindent">Then we are going to add some new style declarations so that we can see what we are working with (<a href="ch15.xhtml#ch15list32">Listing 15.32</a>). (Be sure you’re viewing the page using Jekyll through localhost:4000 instead of just looking at the raw HTML file in your browser. Otherwise, the file path for the background image in <a href="ch15.xhtml#ch15list32">Listing 15.32</a> won’t be resolved properly and the image won’t display.)</p>
<p class="listing" id="ch15list32"><span epub:type="pagebreak" id="page_577"></span><strong>Listing 15.32:</strong> Adding styles to make the feature section elements visible.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list32a" id="p15list32">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>feature</strong></span> {
  <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey">70</span><span class="pd_red"><strong>vh</strong></span>;
}
<span class="bg1">.<span class="blue-v"><strong>feature_img</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>background-image</strong></span>: <span class="pd_green1"><strong>url</strong></span>(<span class="pd_red"><strong>'/images/shark.jpg'</strong></span>);</span>
<span class="bg1">  <span class="pd_green1"><strong>background-size</strong></span>: <span class="pd_green1"><strong>cover</strong></span>;</span>
<span class="bg1">}</span>
<span class="bg1">.<span class="blue-v"><strong>feature_content</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey"><strong>#183a53</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>color</strong></span>: <span class="grey"><strong>#fff</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="indent">When you refresh your browser you’ll see… something ugly (<a href="ch15.xhtml#ch15fig58">Figure 15.58</a>)!</p>
<figure class="figure" id="ch15fig58">
<img src="graphics/15fig58.jpg" alt="images" width="666" height="503"/>
<figcaption>
<p class="title-f"><strong>Figure 15.58:</strong> First steps are always a little rough.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_578"></span>Next, we know that we are going to want the <span class="green-d"><code><strong>feature_img</strong></code></span> element to go from column 1 to column 9, and from row 1 to 2. As an example of how you could handle a one-off situation where you don’t need the code to be reusable, we’re going to treat this section differently and not create <span class="green-d"><code><strong>grid_X-Y</strong></code></span> classes for these elements.</p>
<p class="indent">You might remember from <a href="ch15.xhtml#sec15_4_4">Section 15.4.4</a> that, if we are going to be using the overlapping technique, we will need to have all the elements explicitly positioned on the grid, with start and end definitions for both rows and columns. As a first step, try out the code in <a href="ch15.xhtml#ch15list33">Listing 15.33</a>.</p>
<p class="listing" id="ch15list33"><strong>Listing 15.33:</strong> Adding explicit positioning for feature section elements.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list33a" id="p15list33">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>feature</strong></span> {
  <span class="pd_green1"><strong>min-height</strong></span>: <span class="grey">70</span><span class="pd_red"><strong>vh</strong></span>;
}
.<span class="blue-v"><strong>feature_img</strong></span> {
  <span class="pd_green1"><strong>background-image</strong></span>: <span class="pd_green1">ur</span>l<span class="pd_red">('/images/shark.jpg</span>');
  <span class="pd_green1"><strong>background-size</strong></span>: <span class="pd_green1"><strong>cover</strong></span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>1 / 9</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-row</strong></span>: <span class="grey"><strong>1 / 2</strong></span>;</span>
}
.<span class="blue-v"><strong>feature_content</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#183a5</span>3;
  <span class="pd_green1"><strong>color</strong></span>: <span class="grey">#fff</span>;
<span class="bg1">  <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="grey"><strong>1</strong></span>;</span>
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span>;
}</pre>
<p class="noindent">You’ll end up with something (<a href="ch15.xhtml#ch15fig59">Figure 15.59</a>) that looks a little closer to the end goal in the original example image (<a href="ch15.xhtml#ch15fig57">Figure 15.57</a>).</p>
<figure class="figure" id="ch15fig59">
<img src="graphics/15fig59.jpg" alt="images" width="676" height="513"/>
<figcaption>
<p class="title-f"><strong>Figure 15.59:</strong> Starting to get a little warmer.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_579"></span>Next, let’s tackle getting those two content areas where we want them by adding <span class="green-d"><code><strong>grid-column</strong></code></span> styling on the <span class="green-d"><code><strong>.feature_content-1</strong></code></span> and <span class="green-d"><code><strong>.feature_content-2</strong></code></span> classes. We’ll also add a dash of <span class="green-d"><code><strong>self-alignment</strong></code></span> since in the example image (<a href="ch15.xhtml#ch15fig57">Figure 15.57</a>) the elements weren’t stretched and instead were positioned at the top and bottom.</p>
<p class="indent">Finally, we’ll top it off with a delicious hint of <span class="green-d"><code><strong>margin</strong></code></span> on the <span class="green-d"><code><strong>.feature_content</strong></code></span> class to move the boxes away from the edge. The result appears in <a href="ch15.xhtml#ch15list34">Listing 15.34</a>.</p>
<p class="listing" id="ch15list34"><strong>Listing 15.34:</strong> Finishing off the feature section.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list34a" id="p15list34">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>feature_content</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#183a5</span>3;
  <span class="pd_green1"><strong>color</strong></span>: <span class="grey">#fff</span>;
  <span class="pd_green1"><strong>grid-row-start</strong></span>: <span class="grey">1</span>;
<span class="bg1">  <span class="pd_green1"><strong>margin</strong></span>: <span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>0</strong></span>;</span>
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>2</strong></span><span class="pd_red"><strong>em</strong></span>;
}
<span class="bg1">.<span class="blue-v"><strong>feature_content-1</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>align-self</strong></span>: <span class="pd_green1"><strong>start</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>2 / 6</strong></span>;</span>
<span class="bg1">}</span>
<span class="bg1">.<span class="blue-v"><strong>feature_content-2</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>align-self</strong></span>: <span class="pd_green1"><strong>end</strong></span>;</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey"><strong>5 / 8</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_580"></span>Refresh, and there ya have it (<a href="ch15.xhtml#ch15fig60">Figure 15.60</a>)!</p>
<figure class="figure" id="ch15fig60">
<img src="graphics/15fig60.jpg" alt="images" width="676" height="515"/>
<figcaption>
<p class="title-f"><strong>Figure 15.60:</strong> A couple of lines of CSS and we have a fairly complex layout.</p>
</figcaption>
</figure>
<p class="indent">By the way, what we just did is an effective method for getting the alignment and spacing we wanted, but it’s not the only one. As is so often the case with CSS, there is more than one way to do it (<a href="ch15.xhtml#box15_2">Box 15.2</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box15_2">
<p class="sb-title1"><span epub:type="pagebreak" id="page_581"></span><strong>Box 15.2: There’s More Than One Way to Do It</strong></p>
<p class="sb-noindent">As we’ve said a number of times, including waaaay back in the introduction to CSS (<a href="ch05.xhtml#sec5_2_3">Section 5.2.3</a>), there are a million different ways to do most things in CSS. Let’s take a look at a second solution that achieves the same basic look for the <span class="green-d"><code><strong>feature</strong></code></span> selection.</p>
<p class="sb-indent">Our new goal is to get the content boxes away from the edges of the section without using a margin (maybe because the margins on the elements don’t play nice with other elements on the page). One way to do this is to use extra grid rows on the parent element and use the top and bottom rows like margin or padding. To try this, add a <code>grid-template-rows</code> style on <code>.feature</code>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p581pro01a" id="p581pro01">Click here to view code image</a></p>
<pre class="pre">.feature {
  grid-template-rows: 4em 1fr 4em;
  min-height: 70vh;
}</pre>
<p class="sb-noindent">Then change the <code>grid-row</code> rule for the <code>feature_img</code> row start and end styles to go from 1 to 4 (instead of from 1 to 2):</p>
<p class="codelink"><a href="ch15_images.xhtml#p581pro02a" id="p581pro02">Click here to view code image</a></p>
<pre class="pre">.feature_img {
  background-image: url('/images/shark.jpg');
  background-size: cover;
  grid-column: 1 / 9;
  grid-row: 1 / 4;
}</pre>
<p class="sb-noindent">And on the <code>feature_content</code> class, change <code>grid-row-start</code> to 2 while also removing the <code>margin</code>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p581pro03a" id="p581pro03">Click here to view code image</a></p>
<pre class="pre">.feature_content {
  background-color: #183a53;
  color: #fff;
  grid-row-start: 2;
  padding: 2em 2em;
}</pre>
<p class="sb-indent">The result is the same appearance as in <a href="ch15.xhtml#ch15fig60">Figure 15.60</a>, but with this design you wouldn’t need to worry about adding margins on the child elements. That lets each child be more self-contained and leaves the positioning and alignment entirely on the parent element.</p>
</aside>
</section>
<section>
<h4 class="h4" id="sec15_5_6"><span epub:type="pagebreak" id="page_582"></span>15.5.6 Starting at a Specific Column and Self-Aligning</h4>
<p class="noindent">Before moving to the more complicated <span class="green-d"><code><strong>options</strong></code></span> section, let’s clean up the footer. We’ve got four columns of links, and it would be nice to have them centered under the header in that section. You might think that you would need to define the position of each column, but we actually only need to tell the browser where to render the first one. After that, all the elements after the first will render according to the grid. (You might remember this from when we first started changing column positions of elements in <a href="ch15.xhtml#sec15_2">Section 15.2</a>.)</p>
<p class="indent">So first, add the <span class="green-d"><code><strong>grid</strong></code></span> class to the <span class="green-d"><code><strong>footer</strong></code></span>, and let’s also make the title span the content columns by adding <span class="green-d"><code><strong>grid_2-8</strong></code></span>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p582pro01a" id="p582pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="bg1">&lt;<span class="pd_green1"><strong>footer</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"footer grid"</strong></span>&gt;</span>
  <span class="bg1">&lt;<span class="pd_green1"><strong>h3</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"footer_title grid_2-8"</strong></span>&gt;</span>

    I am a Footer
  &lt;/<span class="pd_green1"><strong>h3</strong></span>&gt;</pre>
<p class="noindent">We already added a class to the first menu item in the stubbed-out version of the page at the beginning of this section (<a href="ch15.xhtml#ch15list23">Listing 15.23</a>), so let’s make it functional by adding a <span class="green-d"><code><strong>grid-column-start</strong></code></span> style to the <span class="green-d"><code><strong>.footer_menu-first</strong></code></span> class, as seen in <a href="ch15.xhtml#ch15list35">Listing 15.35</a>.</p>
<p class="listing" id="ch15list35"><strong>Listing 15.35:</strong> Moving the first footer list to a specific column.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list35a" id="p15list35">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>footer</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey">4</span><span class="pd_red"><strong>em</strong></span> <span class="grey">1</span><span class="pd_red"><strong>em</strong></span>;
}
<span class="bg1">.<span class="blue-v"><strong>footer_menu-first</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-column-start</strong></span>: <span class="grey"><strong>3</strong></span>;</span>
}</pre>
<p class="indent">When you refresh your browser, you’ll see that things look kind of OK, but maybe it would look a little cleaner if the individual lists were centered within their columns (<a href="ch15.xhtml#ch15fig61">Figure 15.61</a>).</p>
<figure class="figure" id="ch15fig61">
<img src="graphics/15fig61.jpg" alt="images" width="675" height="281"/>
<figcaption>
<p class="title-f"><strong>Figure 15.61:</strong> This would be a cleaner look.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_583"></span>It’s an easy fix with a little justifying (<a href="ch15.xhtml#ch15list36">Listing 15.36</a>)! When you refresh the page, everything should be much more aligned now, like in <a href="ch15.xhtml#ch15fig62">Figure 15.62</a>.</p>
<figure class="figure" id="ch15fig62">
<img src="graphics/15fig62.jpg" alt="images" width="676" height="301"/>
<figcaption>
<p class="title-f"><strong>Figure 15.62:</strong> Ahhhh, that’s better.</p>
</figcaption>
</figure>
<p class="listing" id="ch15list36"><strong>Listing 15.36:</strong> Centering all the lists in the footer within their columns.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list36a" id="p15list36">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>footer</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="grey">#dd</span>d;
<span class="bg1">  <span class="pd_green1"><strong>justify-items</strong></span>: <span class="pd_green1"><strong>center</strong></span>;</span>
  <span class="pd_green1"><strong>padding</strong></span>: <span class="grey"><strong>4</strong></span><span class="pd_red"><strong>em</strong></span> <span class="grey"><strong>1</strong></span><span class="pd_red"><strong>em</strong></span>;
}</pre>
</section>
<section>
<h4 class="h4" id="sec15_5_7"><span epub:type="pagebreak" id="page_584"></span>15.5.7 Grid Inside a Grid Inside a Page</h4>
<p class="noindent">Let’s head back up the page to the <span class="green-d"><code><strong>options</strong></code></span> section and finish this example off with something a little more complex.</p>
<p class="indent">One route to achieving the result shown in <a href="ch15.xhtml#ch15fig63">Figure 15.63</a> would be to create a bunch of classes that have explicit column assignments for each element, and that would work, but what if there might be a varying number of these content items? Sometimes there might be two items, and sometimes there might be five, but either way it would be nice to have the section fit the content to the space, while also capping the number of items at three per row.</p>
<figure class="figure" id="ch15fig63">
<img src="graphics/15fig63.jpg" alt="images" width="666" height="503"/>
<figcaption>
<p class="title-f"><strong>Figure 15.63:</strong> We are going to eventually make this.</p>
</figcaption>
</figure>
<p class="indent">This is the perfect place to use the <span class="green-d"><code><strong>auto-fit</strong></code></span> feature that we discussed in <a href="ch15.xhtml#sec15_3">Section 15.3</a>! To make the layout work, we are going to have to add yet another grid inside the <span class="green-d"><code><strong>options</strong></code></span> wrapper.</p>
<p class="indent"><span epub:type="pagebreak" id="page_585"></span>The first step is to add the <span class="green-d"><code><strong>grid</strong></code></span> class on the element with the <span class="green-d"><code><strong>options</strong></code></span> class and also to <span class="green-d"><code><strong>options_content</strong></code></span>, and then add <span class="green-d"><code><strong>grid_2-8</strong></code></span> to the title and to <span class="green-d"><code><strong>options_content</strong></code></span>:</p>
<p class="codelink"><a href="ch15_images.xhtml#p585pro01a" id="p585pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="bg1">&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options grid"</strong></span>&gt;</span>
<span class="bg1">  &lt;<span class="pd_green1"><strong>h2</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_title grid_2-8"</strong></span>&gt;</span>

    Here are Some Choices
  &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
<span class="bg1">  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_content grid grid_2-8"</strong></span>&gt;</span>
.
.
.</pre>
<p class="noindent">(Note that <span class="green-d"><code><strong>options_content</strong></code></span> has no CSS rules associated with it; we added a class name just so we’d have a convenient way to refer to the element.) Now, if we were to only add <span class="green-d"><code><strong>grid</strong></code></span> to <span class="green-d"><code><strong>options_content</strong></code></span> (with no other changes) and then take a look at the grid lines in the browser inspector, we’d get the mess shown in <a href="ch15.xhtml#ch15fig64">Figure 15.64</a>.</p>
<figure class="figure" id="ch15fig64">
<img src="graphics/15fig64.jpg" alt="images" width="676" height="513"/>
<figcaption>
<p class="title-f"><strong>Figure 15.64:</strong> There are lines everywhere.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_586"></span>The red lines in <a href="ch15.xhtml#ch15fig64">Figure 15.64</a> are the global grid, and the blue lines are the columns inside the <span class="green-d"><code><strong>options_content</strong></code></span> element… Clearly, nothing lines up! To fix this, we need to set up a new class for this new content area that will have a max of three columns. In the CSS, add the styles found in <a href="ch15.xhtml#ch15list37">Listing 15.37</a>.</p>
<p class="listing" id="ch15list37"><strong>Listing 15.37:</strong> Creating the column template for the grid within the grid.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list37a" id="p15list37">Click here to view code image</a></p>
<pre class="pre2">.<span class="blue-v"><strong>grid_4-6</strong></span> {
  <span class="pd_green1"><strong>grid-column</strong></span>: <span class="grey">4 /</span> 6;
}
<span class="bg1">.<span class="blue-v"><strong>grid_cols-3max</strong></span> {</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-template-columns</strong></span>: <span class="blue-v"><strong>repeat</strong></span>(<span class="pd_green1"><strong>auto</strong></span><span class="pd_blue1"><strong>-fit</strong></span>, <span class="blue-v"><strong>minmax</strong></span>(<span class="grey"><strong>18</strong></span><span class="pd_red"><strong>em</strong></span>, <span class="grey"><strong>1</strong></span>fr));</span>
<span class="bg1">  <span class="pd_green1"><strong>grid-gap</strong></span>: <span class="grey"><strong>3</strong></span><span class="pd_red"><strong>em</strong></span>;</span>
<span class="bg1">}</span></pre>
<p class="indent">Looking at <a href="ch15.xhtml#ch15list37">Listing 15.37</a>, you might wonder, “Why <span class="green-d"><code><strong>18em</strong></code></span> for the minimum part of the <span class="green-d"><code><strong>minmax</strong></code></span>?” Our global grid columns are <span class="green-d"><code><strong>10em</strong></code></span> wide, so to fit three of these content areas each is going to be <span class="green-d"><code><strong>20em</strong></code></span>, but we also added a gap of <span class="green-d"><code><strong>3em</strong></code></span>. Since we have explicit widths involved here, we can’t just ignore the gap the way that we could have if all the elements just had a width of <span class="green-d"><code><strong>1fr</strong></code></span> (<a href="ch15.xhtml#sec15_2_2">Section 15.2.2</a>). Having three content columns means there will be two <span class="green-d"><code><strong>3em</strong></code></span> gaps—a <span class="green-d"><code><strong>6em</strong></code></span> total of gap space that needs to be subtracted from each column. If you don’t want to actually have to do the math, check out <a href="ch15.xhtml#box15_3">Box 15.3</a>.</p>
<aside epub:type="sidebar" class="sidebar1" id="box15_3">
<p class="sb-title1"><strong>Box 15.3: Advanced CSS:</strong> <span class="green-d"><code><strong>calc( )</strong></code></span></p>
<p class="sb-noindent">You can actually do math in CSS now. To replace the value in <a href="ch15.xhtml#ch15list37">Listing 15.37</a> with an automated calculation, you could use this:</p>
<p class="codelink"><a href="ch15_images.xhtml#p586pro01a" id="p586pro01">Click here to view code image</a></p>
<pre class="pre">repeat(auto-fit, minmax(calc(20em - (6em/3)),1fr))</pre>
<p class="sb-indent">In the <code>calc()</code> function, <code>20em</code> is the total width that we want each of these content boxes to be. From that, we are subtracting the <code>6em</code> of total gap space, but first we are dividing that by the <code>3</code> columns.</p>
</aside>
<p class="indent"><span epub:type="pagebreak" id="page_587"></span>Now, if you haven’t already done so, add the new <span class="green-d"><code><strong>grid_cols-3max</strong></code></span> class to the container:</p>
<p class="codelink"><a href="ch15_images.xhtml#p587pro01a" id="p587pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options_content grid grid_2-8 grid_cols-3max"</span>&gt;</pre>
<p class="noindent">If you refresh and turn the grid lines on in your web inspector, the layout should look like the screenshot on the left in <a href="ch15.xhtml#ch15fig65">Figure 15.65</a>, and if you set one of the <span class="green-d"><code><strong>div</strong></code></span>s to <span class="green-d"><code><strong>display: none</strong></code></span>, you’ll see how the columns adapt to fill the space like the screenshot on the right.</p>
<figure class="figure" id="ch15fig65">
<img src="graphics/15fig65.jpg" alt="images" width="676" height="257"/>
<figcaption>
<p class="title-f"><strong>Figure 15.65:</strong> The rough options section with three columns, and only two columns.</p>
</figcaption>
</figure>
<p class="indent">To finish this whole thing off, let’s fill those <span class="green-d"><code><strong>div</strong></code></span>s with a little more content, and add some styles to make them more interesting (<a href="ch15.xhtml#ch15list38">Listing 15.38</a>).</p>
<p class="listing" id="ch15list38"><strong>Listing 15.38:</strong> Filling out the options section with more content.<br/><code><em>grid-landing.html</em></code></p>
<p class="codelink"><a href="ch15_images.xhtml#p15list38a" id="p15list38">Click here to view code image</a></p>
<pre class="pre2">.
.
.
&lt;<span class="pd_green1"><strong>section</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options grid"</span>&gt;
  &lt;<span class="pd_green1"><strong>h2</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options_title grid_2-8"</span>&gt;
    Here are Some Choices
  &lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"options_content grid grid_2-8 grid_cols-3max"</span>&gt;
<span class="bg1">    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>img</strong></span> <span class="light-green"><strong>src</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"/images/small/slide1.jpg"</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_item-img"</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_item-title"</strong></span>&gt;Stuff&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>p</strong></span>&gt;</span>
<span epub:type="pagebreak" id="page_588"></span><span class="bg1">        In some high land of lakes. Take almost any path</span>
<span class="bg1">        you please, and ten to one it carries you down in a dale.</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;</span>
<span class="bg1">    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>img</strong></span> <span class="light-green"><strong>src</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"/images/small/slide1.jpg"</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_item-img"</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_item-title"</strong></span>&gt;Different Stuff&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>p</strong></span>&gt;</span>
<span class="bg1">        Leaves you there by a pool in the stream. There is</span>
<span class="bg1">        magic in it.</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;</span>
<span class="bg1">    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>img</strong></span> <span class="light-green"><strong>src</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"/images/small/slide1.jpg"</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_item-img"</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"options_item-title"</strong></span>&gt;All the Stuff&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">      &lt;<span class="pd_green1"><strong>p</strong></span>&gt;</span>
<span class="bg1">        Set his feet a-going, and he will infallibly lead</span>
<span class="bg1">        you to water, if water there be in all that region.</span>
<span class="bg1">      &lt;/<span class="pd_green1"><strong>p</strong></span>&gt;</span>
<span class="bg1">    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
<span class="bg1">  &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</span>
&lt;/<span class="pd_green1"><strong>section</strong></span>&gt;
.
.
.</pre>
<p class="noindent">You can play around now with removing or adding items, and your page should look and respond like the examples in <a href="ch15.xhtml#ch15fig66">Figure 15.66</a>.</p>
<figure class="figure" id="ch15fig66">
<img src="graphics/15fig66.jpg" alt="images" width="676" height="255"/>
<figcaption>
<p class="title-f"><strong>Figure 15.66:</strong> The options section with three columns, and stretching two columns to fit.</p>
</figcaption>
</figure>
</section>
<section>
<h4 class="h4" id="sec15_5_8"><span epub:type="pagebreak" id="page_589"></span>15.5.8 Exercises</h4>
<ol class="number">
<li><p class="number">See if you can make the margin-less solution mentioned in <a href="ch15.xhtml#box15_2">Box 15.2</a> work for the <span class="green-d"><code><strong>.feature</strong></code></span> section of the example page… but see if you can add a third content box that is centered vertically and stretches from grid line 4 to 6.</p></li>
<li><p class="number">Copy and paste one of the child elements in the <span class="green-d"><code><strong>.options_content</strong></code></span> section and then use the CSS <span class="green-d"><code><strong>calc()</strong></code></span> feature (<a href="ch15.xhtml#box15_3">Box 15.3</a>) to change that section to support four columns with the same gap in between.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec15_6">15.6 Conclusion</h3>
<p class="noindent">This brings us to the end of <a href="part02.xhtml#part02">Part II</a>. By design, the grid pages developed in this chapter aren’t part of our main website, but it’s still nice to have the option to show them to the world (as well as to have a remote backup), so let’s make one final deployment to production:</p>
<p class="codelink"><a href="ch15_images.xhtml#p589pro01a" id="p589pro01">Click here to view code image</a></p>
<pre class="pre1"><span class="b-nilam"><strong>$</strong></span> git add -A
<span class="b-nilam"><strong>$</strong></span> git commit -m <span class="pd_red">"Add sample grid pages"</span>
<span class="b-nilam"><strong>$</strong></span> git push</pre>
<p class="indent">At this point, you’ve got a beautiful site on the live Web, together with an amount of CSS knowledge that is truly getting <em>dangerous</em>. The only thing left is to serve the site, not from &lt;username&gt;.github.io, but from a custom domain you own. In other words, it’s time for <a href="part03.xhtml#part03">Part III</a>! We especially recommend reading the concluding thoughts in <a href="ch17.xhtml#sec17_4">Section 17.4</a>, which include some suggestions for next steps that are useful even if you decide not to use a custom domain after all.<span epub:type="pagebreak" id="page_590"></span></p>
</section>
</section>
</div>
</div>
</body>
</html>