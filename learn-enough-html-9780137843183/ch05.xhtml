<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
lang="en"
xmlns="http://www.w3.org/1999/xhtml"
xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Learn Enough HTML, CSS and Layout to Be Dangerous: An Introduction to Modern Website Creation and Templating Systems</title>
<link rel="stylesheet" type="text/css" href="override_v1.css"/>
<link rel="stylesheet" type="text/css" href="9780137843053.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content"><section epub:type="chapter">
<h2 class="chap-num" id="ch05"><span epub:type="pagebreak" id="page_103"></span>Chapter 5</h2>
<h2 class="chap-title">Introduction to CSS</h2>
<p class="noindent">In <a href="part01.xhtml#part01">Part I</a>, we learned how to make a simple website using HTML. In <a href="part02.xhtml#part02">Part II</a>, also known as <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> (<a href="https://www.learnenough.com/css-and-layout">https://www.learnenough.com/css-and-layout</a>), we’ll learn how to build a more complex website and style it using CSS.</p>
<p class="indent">CSS—short for <em>Cascading Style Sheets</em>—is the design language of the World Wide Web. CSS lets developers and designers define what a web page looks like and how it behaves, including how elements are positioned in the browser. Every website that you visit (with some incredibly rare exceptions) uses CSS to make the user experience and interface look inviting, which means that learning the basics of CSS is an essential part of becoming a web developer or designer. It’s also useful for anyone who <em>interacts</em> with developers and designers, which these days seems like practically everyone.</p>
<p class="indent">Most CSS tutorials teach the subject in isolation, showing you how to make individual changes to things like text color or font size, without showing you how to put everything together as an integrated whole. This approach is a lot like trying to teach a foreign language by having students read the dictionary. You might learn lots of words, but you would end up with little to no context or ability to have a real conversation (<a href="ch05.xhtml#ch5fig1">Figure 5.1</a>).<sup><a id="ch05fn1a" href="ch05.xhtml#ch05fn1">1</a></sup></p>
<p class="footnote"><a id="ch05fn1" href="ch05.xhtml#ch05fn1a">1</a>. Image courtesy of irantzuarbaizagoitia/123RF.</p>
<figure class="figure" id="ch5fig1">
<img src="graphics/05fig01.jpg" alt="images" width="601" height="399"/>
<figcaption>
<p class="title-f"><strong>Figure 5.1:</strong> You’re not going to learn Spanish from the dictionary alone.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_104"></span>In contrast, <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> is specifically designed to show you how CSS works in the context of a real website.</p>
<p class="indent">It’s especially hard to find tutorials that cover how to develop the <em>layout</em> of the page—that is, how one positions elements on the page and determines what content goes where. It’s because this subject is so important—and yet so neglected—that we called this tutorial <em>Learn Enough CSS &amp; Layout to Be Dangerous</em>, rather than simply <em>Learn Enough CSS to Be Dangerous</em>.</p>
<p class="indent">Why is layout so often ignored? It’s partially because the layout aspects of CSS can be rather complicated, but it’s also because doing layout well calls for more than plain HTML and CSS. Making a real, industrial-grade website requires using a <em>templating system</em> to assemble the various parts—there are simply too many repeated and custom elements (such as headers, footers, dynamically generated names and dates, etc.) to build such sites by hand (<a href="ch05.xhtml#ch5fig2">Figure 5.2</a>).</p>
<figure class="figure" id="ch5fig2">
<img src="graphics/05fig02.jpg" alt="images" width="598" height="673"/>
<figcaption>
<p class="title-f"><strong>Figure 5.2:</strong> Most modern websites have many repeated and custom elements.</p>
</figcaption>
</figure>
<p class="indent">As a result, even learning enough CSS to be <em>dangerous</em>—that is, enough to accomplish your goals without taking the time to become a complete expert—is far more extensive than most people realize. You need to learn not only the basic CSS rules, but also more advanced rules governing page layout, together with a tool to assemble all the parts into a combined whole.</p>
<p class="indent"><span epub:type="pagebreak" id="page_105"></span><em>Learn Enough CSS &amp; Layout to Be Dangerous</em> is designed to fill this need. It fits into the Learn Enough introductory sequence (<a href="https://www.learnenough.com/">https://www.learnenough.com/</a>) immediately after <em>Learn Enough HTML to Be Dangerous</em> (<a href="https://www.learnenough.com/html">https://www.learnenough.com/html</a>) (equivalent to <a href="part01.xhtml#part01">Part I</a> of this tutorial), but it’s also suitable for more experienced developers who want to strengthen their knowledge of web design.<sup><a id="ch05fn2a" href="ch05.xhtml#ch05fn2">2</a></sup> Among other things, this means that <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> is both a possible prerequisite and also an excellent follow-on to the <em>Ruby on Rails Tutorial</em> (<a href="https://www.railstutorial.org/book">https://www.railstutorial.org/book</a>).</p>
<p class="footnote"><a id="ch05fn2" href="ch05.xhtml#ch05fn2a">2</a>. Such as, for example, this guy (<a href="https://www.michaelhartl.com/">https://www.michaelhartl.com/</a>).</p>
<p class="indent"><span epub:type="pagebreak" id="page_106"></span>Because <a href="part02.xhtml#part02">Part II</a> builds on <a href="part01.xhtml#part01">Part I</a> and the material covered in <em>Learn Enough Developer Tools to Be Dangerous</em>, this tutorial is also unusual in that it allows you to deploy the main sample website to the live Web right from the start while following professional-grade development practices throughout. Because of this integrated approach, <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> puts everything together in a way you probably haven’t seen before, even if you’ve previously studied CSS.</p>
<section>
<h3 class="h3" id="sec5_1">5.1 You’re a Front-End Developer</h3>
<p class="noindent">CSS isn’t the kind of language that’s useful to learn in little half-steps—the part that people find difficult is dealing with handling styling when they are deep into creating an honest-to-goodness website with many levels of complexity. The real skill comes in knowing how to plan for a multipage site that uses a bunch of different snippets of code<sup><a id="ch05fn3a" href="ch05.xhtml#ch05fn3">3</a></sup> placed into a flexible layout that organizes content and data in a useful way.</p>
<p class="footnote"><a id="ch05fn3" href="ch05.xhtml#ch05fn3">3</a>. Technically, HTML and CSS are <em>markup</em> and not <em>code</em>, but we’ll sometimes use the latter term as a catchall, especially when discussing principles from coding (such as avoiding repetition) that apply as much to HTML and CSS as they do to programming languages like JavaScript or Ruby.</p>
<p class="indent">There are already many sites (like the Mozilla Developer Network CSS Reference) that exhaustively document every CSS property, so going over each and every option from the specification would just be a duplication of effort. Instead, <em>Learn Enough CSS &amp; Layout to Be Dangerous</em> is designed to complement such reference works by showing you how CSS applies to the design of a real website. The resulting narrative explanation gives you the context necessary to understand and apply CSS documentation—especially when combined with a little technical sophistication (<a href="ch05.xhtml#box5_1">Box 5.1</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box5_1">
<p class="sb-title1"><strong>Box 5.1: Technical Sophistication</strong></p>
<p class="sb-noindent">As noted in <a href="part01.xhtml#part01">Part I</a>, one of the principal themes of the Learn Enough tutorials is the development of <em>technical sophistication</em> (<a href="ch01.xhtml#box1_1">Box 1.1</a>), which is the ability to figure out and solve technical problems.</p>
<p class="sb-indent">Because of the relative complexity of CSS compared to HTML, <a href="part02.xhtml#part02">Part II</a> includes even more opportunities than <a href="part01.xhtml#part01">Part I</a> to learn and apply technical sophistication. For example, many of the code listings require you to orient yourself in a CSS file and figure out where to put the new style rules introduced by the listing. Another important technique is learning to <em>comment out</em> CSS rules and then refreshing the <span epub:type="pagebreak" id="page_107"></span>browser to see what they do. We’ll also occasionally add CSS rules that are purely for demonstration purposes; technical sophistication is the skill you need to figure out that such demo code can safely be deleted, especially if a future listing omits it.</p>
<p class="sb-indent">Later chapters, particularly after <a href="ch09.xhtml#ch09">Chapter 9</a>, also require that you successfully configure a <em>development environment</em> and run a templating system to build a professional-grade website. A huge number of things can go wrong when getting these to work; if you get stuck, there’s no substitute for Googling around and determination—both of which are key aspects of technical sophistication.</p>
</aside>
<p class="indent">The important thing at this point in your progress as a developer is to start learning how styling and layout concepts work together, how HTML and CSS combine to make a layout that is actually useful, and how to use some sort of system that allows you to avoid repeating sections of the site or styling on multiple pages (<a href="ch05.xhtml#box5_2">Box 5.2</a>). Doing otherwise would make you an expert at changing text color and size, but you’d have no chance of applying the knowledge you’ve gained to a real-world scenario. In fact, by learning CSS in a holistic way, you’ll not just be getting an introduction to styling—this tutorial is also going to be your first introduction to the world of front-end development.</p>
<aside epub:type="sidebar" class="sidebar1" id="box5_2">
<p class="sb-title1"><strong>Box 5.2: Staying DRY</strong></p>
<p class="sb-noindent">If you’ve been poking around the Internet in places where developers talk shop, you might have noticed someone mention staying <em>DRY</em>, with “dry” in all caps. They aren’t talking about relative moisture levels. What they are talking about is a core principle in programming: <em>Don’t Repeat Yourself</em>.</p>
<p class="sb-indent">The idea behind DRY is that good coding should include as few instances of unnecessary repetition as humanly possible, simply because if you have the same code in a bunch of places, then every time you want to make a change you’ll have to update all the different spots in the application where that code is repeated. For example, if you wanted to change a link to the navigation bar of a hand-built site, you’d have to make the same change on <em>every</em> page. On a two-page site this wouldn’t be a big deal, but for a bigger website it would be a nightmare.</p>
<p class="sb-indent">Programmers are a special sort of lazy—especially when it comes to doing something repetitive that could be done more efficiently with a little bit of extra programming. To make it easier to be lazy, enterprising programmers spend countless hours creating systems that allow other developers not to have to repeat themselves. We all benefit from developers who at some point decided they were going to work really hard <em>now</em> so they could work less hard in the future.</p>
<p class="sb-indent"><span epub:type="pagebreak" id="page_108"></span><em>Templating software</em>, like the system we will be using starting in <a href="ch09.xhtml#ch09">Chapter 9</a>, allows us not to repeat ourselves by collecting repeated code into individual files, and then including these code snippets on any page where they’re needed.</p>
<p class="sb-indent">The result is that we can write something like the navigation menu for a site <em>once</em>, put it in its own little file, and then include that file every place where the navigation needs to appear. If we want to change the navigation later on, we need to edit only that single file, and the changes will automatically be applied to every page that includes it. We’ll learn how to do this in <a href="ch09.xhtml#sec9_6">Section 9.6</a>.</p>
</aside>
<section>
<h4 class="h4" id="sec5_1_1">5.1.1 So, What Is Front-End Development?</h4>
<p class="noindent">When someone says that they are a front-end developer, that means that they work on the parts of a site that people see and interact with. That includes things like HTML, CSS, and JavaScript. You’ll also hear people talk about user interface (UI) design (the way things look) and user experience (UX) design (the way that the interface and different pages function to move users through the site to a goal).</p>
<p class="indent">The complement to front-end development is back-end development, which involves the architecture of data, how it is stored, and how it is delivered. Later Learn Enough tutorials (starting with <em>Learn Enough Ruby to Be Dangerous</em> (<a href="https://www.learnenough.com/ruby">https://www.learnenough.com/ruby</a>)) cover the basics of back-end development, culminating in the <em>Ruby on Rails Tutorial</em> (<a href="https://www.railstutorial.org/">https://www.railstutorial.org/</a>), which teaches how to develop a full web application with a database, users, login and authentication, and more.</p>
<p class="indent">So, how do we turn an HTML caterpillar into a front-end developer butterfly?</p>
<p class="indentt"><strong>The Plan</strong></p>
<p class="indent">We’ll start by building on the styling introduced in <a href="ch04.xhtml#ch04">Chapter 4</a>. In the final sections of that tutorial, we showed how to add styling directly to elements on a page, while also briefly covering how to factor that styling into a stylesheet. In this tutorial, we’ll expand greatly on this theme.</p>
<p class="indent">Throughout the rest of this chapter, we’ll learn the basics of CSS declarations and values by starting with a few super-simple elements on a sample page, with a particular focus on applying the DRY principle (<a href="ch05.xhtml#box5_2">Box 5.2</a>). We’ll end with a first introduction to the essential technique of <em>CSS selectors</em> to target particular page elements for styling.</p>
<p class="indent">In <a href="ch06.xhtml#ch06">Chapter 6</a>, we’ll discuss aspects of selectors that are important to get right at the beginning of a project, with a focus on managing complexity and maintaining <span epub:type="pagebreak" id="page_109"></span>flexibility by choosing good names for things (including an introduction to CSS color conventions).</p>
<p class="indent"><a href="ch07.xhtml#ch07">Chapter 7</a> introduces two of the most important kinds of CSS values: colors and sizes. These lay an essential foundation for <a href="ch08.xhtml#ch08">Chapter 8</a> on the <em>box model</em>, which determines how different elements fit together on the page.</p>
<p class="indent">In <a href="ch09.xhtml#ch09">Chapter 9</a> and <a href="ch10.xhtml#ch10">Chapter 10</a>, we’ll take the page that we’ve been working on and factor it into a layout using a <em>static site generator</em> (which includes a templating system) called <em>Jekyll</em> to build professional-grade websites that are easy to maintain and update.</p>
<p class="indent">In <a href="ch11.xhtml#ch11">Chapter 11</a>, we’ll learn how to make flexible page layouts using <em>flexbox</em>, adding layouts for a photo gallery page (to be filled in in <em>Learn Enough JavaScript to Be Dangerous</em> (<a href="https://www.learnenough.com/javascript">https://www.learnenough.com/javascript</a>)) and a blog with posts. In <a href="ch12.xhtml#ch12">Chapter 12</a>, we’ll add the blog itself, showing how to use Jekyll to make a professional-grade blog without black-box solutions like WordPress or Tumblr.</p>
<p class="indent">Because a large and growing amount of web traffic comes from mobile devices, in <a href="ch13.xhtml#ch13">Chapter 13</a> we’ll cover the basics of using CSS and <em>media queries</em> to make mobile-friendly sites without violating the DRY principle (<a href="ch05.xhtml#box5_2">Box 5.2</a>).</p>
<p class="indent">As a concluding step in developing the main sample application, in <a href="ch14.xhtml#ch14">Chapter 14</a> we’ll add the kinds of little details (like custom fonts and <span class="green-d"><code><strong>meta</strong></code></span> tags) that make a site feel complete. The result will be an industrial-strength, nicely styled site deployed to the live Web.</p>
<p class="indent">Finally, as a special bonus, we’ll introduce a more recent and advanced layout technique known as <em>CSS grid</em> in <a href="ch16.xhtml#ch16">Chapter 16</a>. The result is a largely self-contained discussion of how to use grid to accomplish some of the same effects mentioned in previous chapters, as well as some effects specific to grid.</p>
<p class="indent">Let’s go!</p>
</section>
</section>
<section>
<h3 class="h3" id="sec5_2">5.2 CSS Overview and History</h3>
<p class="noindent">CSS takes the form of plain-text declarations inserted into an HTML or CSS file using a text editor (<a href="https://www.learnenough.com/text-editor">https://www.learnenough.com/text-editor</a>). A typical series of CSS declarations might look like <a href="ch05.xhtml#ch5list1">Listing 5.1</a>. (You are not expected to understand these styles at this point.)</p>
<p class="listing" id="ch5list1"><span epub:type="pagebreak" id="page_110"></span><strong>Listing 5.1:</strong> Typical CSS declarations.</p>
<p class="codelink"><a href="ch05_images.xhtml#p05list01a" id="p05list01">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_green1"><strong>body</strong></span> {
  <span class="pd_green1"><strong>color</strong></span>: <span class="pd_green1"><strong>black</strong></span>;
}

<span class="pd_green1"><strong>p</strong></span> {
<span class="pd_green1"><strong>font-size</strong></span>: <span class="gray1">1</span><span class="pd_red"><strong>em</strong></span>;
}

<span class="pd_green1"><strong>p</strong></span>.<span class="blue-v"><strong>highlighted</strong></span> {
  <span class="pd_green1"><strong>font-size</strong></span>: <span class="gray1">1.5</span><span class="pd_red"><strong>em</strong></span>;
  <span class="pd_green1"><strong>background</strong></span>: <span class="pd_green1"><strong>yellow</strong></span>;
}</pre>
<p class="indent">The “Cascading” part of Cascading Style Sheets refers to the way the defined styles flow, or “cascade”, down from element to element on a page based on a few factors like which declaration came first, whether an element is the child of a parent element that has styles applied to it, or the strength of the declaration (more on this in <a href="ch06.xhtml#sec6_3">Section 6.3</a>). This inheritance of style (from the top levels to elements below) happens so that we as developers can avoid having to define how every single element should look. For example, if we changed the <span class="green-d"><code><strong>color</strong></code></span> in the <span class="green-d"><code><strong>body</strong></code></span> tag in <a href="ch05.xhtml#ch5list1">Listing 5.1</a>, that change would cascade down and change the <span class="green-d"><code><strong>color</strong></code></span> attribute on every interior element as well.</p>
<p class="indent">The “Style Sheet” part of the name (sometimes written as the single word <em>stylesheet</em>) refers to how CSS allows developers to collect all the style declarations in a separate section of the page (called an <em>internal stylesheet</em>), or place them into an external file (called, you guessed it, an <em>external stylesheet</em>). External stylesheets are loaded onto the page as a link in the <span class="green-d"><code><strong>head</strong></code></span> section of the HTML. (We’ll learn how to do this ourselves in <a href="ch09.xhtml#ch09">Chapter 9</a>.) The result is that we end up separating the code that defines how something looks (or is positioned) from the actual content—all of which makes for simpler and more maintainable code.</p>
<section>
<h4 class="h4" id="sec5_2_1">5.2.1 CSS Is Always Changing</h4>
<p class="noindent">One important thing to note about CSS is that, like HTML, it’s constantly evolving to better serve the needs of web designers and developers. In fact, in many ways CSS is evolving even faster than HTML.</p>
<p class="indent">Even though future additions are added to the official CSS specification all the time, they aren’t evenly distributed—when new additions to CSS are proposed, the <span epub:type="pagebreak" id="page_111"></span>adoption of those new concepts happens on a browser-by-browser basis. A style that might work in Google Chrome might be totally unsupported by Mozilla Firefox or Microsoft Internet Explorer (or IE’s latest incarnation, Microsoft Edge). Or it’s possible that a given style might be supported, but only if you use a special temporary name to declare the style, a feature that lets developers target only the browsers that support the style they want to use (<a href="ch05.xhtml#box5_3">Box 5.3</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box5_3">
<p class="sb-title1"><strong>Box 5.3: Vendor Prefixing</strong></p>
<p class="sb-noindent">Because it takes a while for an addition to the language to go from a suggested new specification (or <em>spec</em>) to an officially included part of CSS, new features aren’t accepted by all browsers at the same time. Most browser makers aren’t interested in waiting around for the spec to be officially updated, though—they want their software to push the envelope and do really cool stuff. So vendors take these CSS spec proposals and implement their own versions of the spec.</p>
<p class="sb-indent">To get around the potential confusion that could happen if things work differently from browser to browser, the browser vendors typically add a prefix to the experimental styles, such as <code>-webkit-</code>, <code>-moz-</code>, and <code>-ms-</code> (respectively for WebKit, Mozilla, and Microsoft browsers). This allows the applied style to target specific browsers in case the support differs.</p>
<p class="sb-indent">For instance, the CSS <code>transition</code> declaration (covered in <a href="ch11.xhtml#sec11_4">Section 11.4</a>) was implemented in most browsers before it was a part of the official spec, and to use it you would have needed to declare the styling like the following examples with vendor prefixes:</p>
<p class="codelink"><a href="ch05_images.xhtml#p111pro01a" id="p111pro01">Click here to view code image</a></p>
<pre class="pre1">-webkit-transition: all 0.1s linear;
-moz-transition: all 0.1s linear;
-ms-transition: all 0.1s linear;
transition: all 0.1s linear;</pre>
<p class="sb-indent">The first rule here specifically targets browsers that use the WebKit layout engine (which includes Safari and Chrome), while the second targets browsers using Mozilla’s Gecko engine (principally Firefox), and the third targets Microsoft browsers (Internet Explorer and Edge). Finally, the fourth rule is an unprefixed declaration—in this case, just <code>transition</code> by itself—which is included so that when support becomes official we won’t have to go back into our code and add it in. (The <code>transition</code> style is supported by all major browsers today, so if you see the prefixed versions in code that you are working on, you can safely delete them.)</p>
</aside>
<p class="indent"><span epub:type="pagebreak" id="page_112"></span>Luckily, at this point the most common styling definitions are essentially the same across different browsers,<sup><a id="ch05fn4a" href="ch05.xhtml#ch05fn4">4</a></sup> and we aren’t going to cover anything in this tutorial that has questionable browser support. At some point, though, you’ll probably find yourself wanting to use a more cutting-edge style, and when that happens we recommend using a tool like CanIUse to figure out how well-supported the style is. Don’t ever feel self-conscious about using reference sites like that—the fast-changing nature of the language and the spotty browser support make it a necessary tool even for people who have been doing this for years.</p>
<p class="footnote"><a id="ch05fn4" href="ch05.xhtml#ch05fn4a">4</a>. Anyone who’s spent much time in the world of front-end development can tell you horror stories about when that wasn’t the case (<em>cough</em> IE6 <em>cough</em>).</p>
</section>
<section>
<h4 class="h4" id="sec5_2_2">5.2.2 How Did CSS Develop?</h4>
<p class="noindent">In the beginning, content on the Internet was simply plain text. Then, as methods for organizing content started to come into existence (such as HTML around 1990), a number of methods sprang up to affect the appearance and layout of the data.</p>
<p class="indent">At first, many styling solutions that affected how the page looked would be set by individual users’ browser preferences rather than by the creator of the page. As the complexity of the web increased, it became increasingly obvious that there should be a way for the <em>owner</em> of a site to at least suggest how a page should look, rather than leaving the appearance up to each individual browser.</p>
<p class="indent">Lots of interesting suggestions were put forward that never got widely adopted, usually because the proposed styling was overly complicated or used a totally nonintuitive structure:</p>
<ul class="bullet">
<li><p class="bullet">Robert Raisch developed RRP, which used arcane two-character style declarations and was fairly unreadable.</p></li>
<li><p class="bullet">Pei-Yuan Wei created the ViolaWWW browser and a styling system called PWP, which introduced nesting styles and external stylesheets, but it was only released for Unix operating systems and never really caught on.</p></li>
<li><p class="bullet">FOSI was created for an HTML precursor called SGML, and it worked by adding complicated tags on the page around content (not good).</p></li>
<li><p class="bullet"><span epub:type="pagebreak" id="page_113"></span>DSSSL allowed for complex declarations and was more of a programming language with styling attached, but it had a complicated syntax that made it overly complex for styling.</p></li>
</ul>
<p class="indent">In short, there was a real Cambrian explosion of proposed standards to make the web pretty, and while some of these systems ended up contributing elements to what became CSS, none of them are direct ancestors (<a href="ch05.xhtml#ch5fig3">Figure 5.3</a>).<sup><a id="ch05fn5a" href="ch05.xhtml#ch05fn5">5</a></sup></p>
<figure class="figure" id="ch5fig3">
<img src="graphics/05fig03.jpg" alt="images" width="601" height="405"/>
<figcaption>
<p class="title-f"><strong>Figure 5.3:</strong> There were a lot of precursors to CSS… not all of them successful.</p>
</figcaption>
</figure>
<p class="footnote"><a id="ch05fn5" href="ch05.xhtml#ch05fn5a">5</a>. Image courtesy of Liliya Butenko/Shutterstock.</p>
<p class="indent">About five years after the introduction of HTML, Håkon Lie (working with Bert Bos) put forward a styling system proposal in December of 1996 called CHSS (Cascading HTML Style Sheets). As you might expect, the original proposal has some details that are no longer present in the language, but in his doctoral thesis Håkon Lie simplified the specification into something that more closely resembles modern CSS. Eventually, the concept was adopted by the World Wide Web Consortium (W3C) as the system for styling web content.</p>
<p class="indent">Although it represented a big step forward, creating a specification is only half the battle—browsers have to support the standard for it to be of any use to the end-user.</p>
<p class="indent"><span epub:type="pagebreak" id="page_114"></span>No browser even partially supported CSS until 1997, and there wasn’t full support of the standard in any one browser until March of 2000—partially because browser makers still had their own ideas for how to accomplish styling, and partially because many browsers supported non-standard HTML tags (we’re looking at you, Internet Explorer…).</p>
<p class="indent">Each browser handled CSS in its own idiosyncratic way for a long time, and anyone who has been working in front-end development for a while can tell you how maddeningly difficult it was to style a website so that it looked the same across browsers. Microsoft’s Internet Explorer was <em>by far</em> the biggest problem (<a href="ch05.xhtml#ch5fig4">Figure 5.4</a>), and we can only imagine the number of people who gave up on the world of web design and development thanks to horrific CSS support in early versions of IE.<sup><a id="ch05fn6a" href="ch05.xhtml#ch05fn6">6</a></sup></p>
<p class="footnote"><a id="ch05fn6" href="ch05.xhtml#ch05fn6a">6</a>. If you are ever asked to develop something that can work in Internet Explorer 6 or 7, just laugh and walk away. Trying to make a site work on those browsers just isn’t worth it, and thankfully they are finally disappearing from the world.</p>
<figure class="figure" id="ch5fig4">
<img src="graphics/05fig04.jpg" alt="images" width="676" height="427"/>
<figcaption>
<p class="title-f"><strong>Figure 5.4:</strong> You can’t fully understand hate until you try to design for IE6.</p>
</figcaption>
</figure>
<p class="indent">The differences between implementations of CSS in different browsers remained significant until just a few years ago, with the rise to dominance of the WebKit browsers (Google Chrome and Apple Safari) and Gecko-powered Mozilla Firefox.</p>
<p class="indent"><span epub:type="pagebreak" id="page_115"></span>So when reading this tutorial, just keep in mind that styling the Web was a complete and utter mess until <em>very</em> recently—about 15 years after the initial release of the CSS spec in 1997.</p>
</section>
<section>
<h4 class="h4" id="sec5_2_3">5.2.3 The Bog of Eternal Subjectivity</h4>
<p class="noindent">One last bit of meta-information before we jump in and start styling: deciding how to actually implement CSS on a given page can be a confusing mess. Whereas <a href="part01.xhtml#part01">Part I</a> was a little more prescriptive in nature, with many cases where there was only one right way to do things, we are now going to be venturing into places where there is often no right answer. When designing websites with CSS, many solutions to a problem typically exist, which means subjective judgment is the rule rather than the exception (<a href="ch05.xhtml#ch5fig5">Figure 5.5</a>).<sup><a id="ch05fn7a" href="ch05.xhtml#ch05fn7">7</a></sup></p>
<p class="footnote"><a id="ch05fn7" href="ch05.xhtml#ch05fn7a">7</a>. Image courtesy of Historic Collection/Alamy Stock Photo.</p>
<figure class="figure" id="ch5fig5">
<img src="graphics/05fig05.jpg" alt="images" width="601" height="481"/>
<figcaption>
<p class="title-f"><strong>Figure 5.5:</strong> Smell baaaad!</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_116"></span>Helping you navigate this mess is where we come in.</p>
<p class="indent">Oh, and to make this all a little more fun, you may recall from <a href="ch05.xhtml#box5_3">Box 5.3</a> that every browser implements some parts of the CSS standard in its own slightly different manner, so you can never be absolutely certain that something will look the same to different users if they are using different browsers… to say nothing of how something will look on different screen sizes and resolutions for different operating systems (<a href="ch13.xhtml#ch13">Chapter 13</a>).</p>
<p class="indent">You have to get used to the idea that no site is going to be exactly the same when viewed by different people. You’ll learn to design (or implement other people’s designs) in a way that allows room for CSS’s inherent ambiguity. Unlike the tightly constrained world of print design, getting things to look exactly the same in every browser and on every operating system is just something you have to give up worrying about.</p>
<p class="indent">Additionally, when talking about which CSS rules to use when styling a site or creating a layout, best practices tend to move in fads, or are influenced by the subjective opinion of the developers who worked on a project before you. For example, as discussed in <a href="ch05.xhtml#sec5_5">Section 5.5</a>, elements on the page frequently need to be assigned classes or ids, and the way that names are picked is entirely up to the person writing the code. As you might guess (if you know many developers or designers), people have <em>lots</em> of strong opinions on how you should be naming things—a classic holy war situation.<sup><a id="ch05fn8a" href="ch05.xhtml#ch05fn8">8</a></sup></p>
<p class="footnote"><a id="ch05fn8" href="ch05.xhtml#ch05fn8a">8</a>. The notion of a technological “holy war” is discussed in <a href="ch05.xhtml#box5_4">Box 5.4</a> of <em>Learn Enough Developer Tools to Be Dangerous</em>.</p>
<p class="indent">The most important thing is to be <em>consistent</em>. If you start a project and do things one way, make sure to keep following the same conventions for the life of the project. Or, if you decide to make a drastic change, spend the next couple of days updating all your old code, for the sake of future developers (including yourself). Keep an eye out in this tutorial for “Style Note” boxes that have tips on what the current best practices are for different uses of CSS.</p>
</section>
</section>
<section>
<h3 class="h3" id="sec5_3">5.3 Sample Site Setup</h3>
<p class="noindent">Now that we’ve got an overview of the purpose and origins of CSS, it’s time to start looking at some concrete examples. The initial styling rules will necessarily be simple, so it’s important to have patience while we lay this crucial foundation for the working website (with layout) that we’ll be developing starting in <a href="ch09.xhtml#ch09">Chapter 9</a>.</p>
<p class="indent"><span epub:type="pagebreak" id="page_117"></span>We’ll start by creating a new project in the <span class="green-d"><code><strong>repos</strong></code></span> folder using the same basic <span class="green-d"><code><strong>mkdir</strong></code></span> command covered in <a href="ch01.xhtml#sec1_3">Section 1.3</a> (<a href="ch05.xhtml#ch5list2">Listing 5.2</a>).<sup><a id="ch05fn9a" href="ch05.xhtml#ch05fn9">9</a></sup></p>
<p class="footnote"><a id="ch05fn9" href="ch05.xhtml#ch05fn9a">9</a>. <em>Note for Mac users</em>: Although it shouldn’t matter in <em>Learn Enough CSS &amp; Layout to Be Dangerous</em>, it is recommended that you use the Bourne-again shell (Bash) rather than the default Z shell to complete this tutorial. To switch your shell to Bash, run <span class="green-d"><code><strong>chsh -s /bin/bash</strong></code></span> at the command line, enter your password, and restart your terminal program. Any resulting alert messages are safe to ignore. See the Learn Enough blog post “Using Z Shell on Macs with the Learn Enough Tutorials” (<a href="https://news.learnenough.com/macos-bash-zshell">https://news.learnenough.com/macos-bash-zshell</a>) for more information.</p>
<p class="listing" id="ch5list2"><strong>Listing 5.2:</strong> Adding the folder for our sample project.</p>
<p class="codelink"><a href="ch05_images.xhtml#p05list02a" id="p05list02">Click here to view code image</a></p>
<pre class="pre2"><span class="b-nilam"><strong>$</strong></span> <span class="pd_green1">cd</span>                                    <span class="pd_blue1"><em># cd to the home directory</em></span>
<span class="b-nilam"><strong>$</strong></span> mkdir -p repos/&lt;username&gt;.github.io   <span class="pd_blue1"><em># Make site directory</em></span>
<span class="b-nilam"><strong>$</strong></span> <span class="pd_green1">cd</span> repos/&lt;username&gt;.github.io         <span class="pd_blue1"><em># cd into new directory</em></span></pre>
<p class="noindent">Note that we’ve used a special directory name that corresponds to the main GitHub Pages site for your account:</p>
<pre class="pre1"><span class="green-d">&lt;username&gt;.github.io</span></pre>
<p class="noindent">In <a href="ch05.xhtml#ch5list2">Listing 5.2</a>, <span class="green-d"><code><strong>&lt;username&gt;</strong></code></span> should be replaced with your GitHub username, so the full URL should look something like <span class="green-d"><code><strong>learnenough.github.io</strong></code></span>.</p>
<p class="indent">GitHub Pages actually supports serving sites out of subdirectories, like <span class="green-d"><code><strong>learnenough.github.io/sample_css</strong></code></span>, but unfortunately this solution fails if you have additional subdirectories in your site, such as <span class="green-d"><code><strong>learnenough.github.io/sample_css/gallery</strong></code></span>. The reason is that if you include files and images in one subdirectory (e.g., <span class="green-d"><code><strong>sample_css</strong></code></span>), there’s no natural way to include the same files and images in further subdirectories (e.g., <span class="green-d"><code><strong>sample_css/gallery</strong></code></span>). Since our sample site will eventually have exactly this kind of structure (<a href="ch10.xhtml#sec10_4">Section 10.4</a>), we’ve opted to use the root Pages domain. An even better solution is to use a <em>custom domain</em>, which lets you host your GitHub Pages site at a URL like <a href="http://www.example.com">www.example.com</a>; this is the subject of <a href="part03.xhtml#part03">Part III</a>.</p>
<p class="indent">To get our site started, we’ll also create an <span class="green-d"><code><strong>index.html</strong></code></span> file using the <span class="green-d"><code><strong>touch</strong></code></span> command (as discussed in <a href="ch01.xhtml#sec1_3">Section 1.3</a>), as shown in <a href="ch05.xhtml#ch5list3">Listing 5.3</a>.</p>
<p class="listing" id="ch5list3"><strong>Listing 5.3:</strong> Adding a blank <span class="green-d"><code><strong>index.html</strong></code></span>.</p>
<p class="codelink"><a href="ch05_images.xhtml#p05list03a" id="p05list03">Click here to view code image</a></p>
<pre class="pre2"><span class="b-nilam"><strong>$</strong></span> touch index.html    <span class="pd_blue1"><em># Create an empty index file</em></span></pre>
<p class="indent"><span epub:type="pagebreak" id="page_118"></span>Inside the new folder, use your favorite text editor to open the newly created <span class="green-d"><code><strong>index.html</strong></code></span> file and paste in the markup shown in <a href="ch05.xhtml#ch5list4">Listing 5.4</a>. For convenience, the contents of <a href="ch05.xhtml#ch5list4">Listing 5.4</a> and all other code listings in this tutorial are available online at the following URL:</p>
<p class="codelink"><a href="ch05_images.xhtml#p118pro01a" id="p118pro01">Click here to view code image</a></p>
<pre class="pre1">https://github.com/learnenough/learn_enough_html_css_and_layout_code_listings</pre>
<p class="listing" id="ch5list4"><strong>Listing 5.4:</strong> The initial HTML for our site.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list04a" id="p05list04">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>title</strong></span>&gt;Test Page: Don't Panic&lt;/<span class="pd_green1"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="grey">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green1"><strong>style</strong></span>&gt;

    &lt;/<span class="pd_green1"><strong>style</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h1</strong></span>&gt;I'm an h1&lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>ul</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: red;"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: red;"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: red;"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;I'm an h2&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_119"></span>When you open that HTML document in your browser (if you aren’t sure how to do that, refer back to <a href="ch01.xhtml#sec1_4">Section 1.4</a>), you’ll see a series of three red links, some headers, and a series of green links in boxes (<a href="ch05.xhtml#ch5fig6">Figure 5.6</a>). This will be our initial test page.</p>
<figure class="figure" id="ch5fig6">
<img src="graphics/05fig06.jpg" alt="images" width="676" height="300"/>
<figcaption>
<p class="title-f"><strong>Figure 5.6:</strong> This is the beginning of something great, unassuming though it may seem.</p>
</figcaption>
</figure>
<p class="indent"><em>Note</em>: Due to various slight differences between browsers, browser window sizes, etc., your results may not always match the screenshots exactly, so small discrepancies are not a cause for concern. As we’ll emphasize throughout this tutorial, it’s important to focus on achieving good-enough results without chasing the unreachable goal of pixel-perfection.</p>
<p class="indent">As in <a href="ch01.xhtml#ch01">Chapter 1</a>, we’ll deploy our new website immediately to production, which is a good habit to cultivate. First, you’ll need to create a new project at GitHub, using the steps shown in <a href="ch01.xhtml#sec1_3">Section 1.3</a>, which in this case looks like <a href="ch05.xhtml#ch5fig7">Figure 5.7</a>.</p>
<figure class="figure" id="ch5fig7">
<img src="graphics/05fig07.jpg" alt="images" width="666" height="512"/>
<figcaption>
<p class="title-f"><strong>Figure 5.7:</strong> Creating a new GitHub repo.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_120"></span>Once you’ve finished the steps needed to create the repository, initialize and deploy it using the commands shown in <a href="ch05.xhtml#ch5list5">Listing 5.5</a>.</p>
<p class="listing" id="ch5list5"><strong>Listing 5.5:</strong> Deploying the initial site to GitHub Pages.</p>
<p class="codelink"><a href="ch05_images.xhtml#p05list05a" id="p05list05">Click here to view code image</a></p>
<pre class="pre2"><span class="b-nilam"><strong>$</strong></span> git init
<span class="b-nilam"><strong>$</strong></span> git add -A
<span class="b-nilam"><strong>$</strong></span> git commit -m <span class="pd_red">"Initialize repo"</span>
<span class="b-nilam"><strong>$</strong></span> git remote add origin &lt;repo url&gt;
<span class="b-nilam"><strong>$</strong></span> git push -u origin main</pre>
<p class="noindent">If you find the sequence of commands in <a href="ch05.xhtml#ch5list5">Listing 5.5</a> challenging instead of familiar, it’s probably a good idea to review <em>Learn Enough Git to Be Dangerous</em> (<a href="https://www.learnenough.com/git">https://www.learnenough.com/git</a>) and <a href="ch01.xhtml#sec1_3">Section 1.3</a>. (Confirming that the deployment succeeded is left as an exercise (<a href="ch05.xhtml#sec5_3_1">Section 5.3.1</a>).) Finally, although we’ll add in the occasional Git commit/deployment in this tutorial, ultimately these will be up to you, and now is a good time to practice making such decisions on your own (<a href="ch05.xhtml#box5_1">Box 5.1</a>).</p>
<section>
<h4 class="h4" id="sec5_3_1"><span epub:type="pagebreak" id="page_121"></span>5.3.1 Exercise</h4>
<ol class="number">
<li><p class="number">By visiting the URL &lt;username&gt;.github.io/index.html, confirm that the deployment to GitHub Pages succeeded. Is it necessary to include index.html in the URL?</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec5_4">5.4 Start Stylin’</h3>
<p class="noindent">As discussed in <a href="ch05.xhtml#sec5_2">Section 5.2</a>, CSS is a way of defining how elements on an HTML page look and are positioned, with styling that flows (“cascades”) down from element to element based on factors like which declaration came first, whether an element is the child of a parent element that has styles applied to it, or the specificity of the declaration.</p>
<p class="indent">So what do “parent”, “children”, and “specificity” mean in the context of a web page and how it gets styled? The idea is that every element on the page is contained inside another element, which in turn can contain other elements—like Russian nesting dolls.</p>
<p class="indent">We can visualize the parent and child structure of the elements on a typical page using the diagram in <a href="ch05.xhtml#ch5fig8">Figure 5.8</a>.</p>
<figure class="figure" id="ch5fig8">
<img src="graphics/05fig08.jpg" alt="images" width="674" height="410"/>
<figcaption>
<p class="title-f"><strong>Figure 5.8:</strong> Relationships always cascade down.</p>
</figcaption>
</figure>
<p class="indent"><span epub:type="pagebreak" id="page_122"></span>The hierarchical tag structure shown in <a href="ch05.xhtml#ch5fig8">Figure 5.8</a> is known as the <em>Document Object Model</em>, or DOM for short.<sup><a id="ch05fn10a" href="ch05.xhtml#ch05fn10">10</a></sup> Each new level in the DOM is a child of the level above it. In other words, the <span class="green-d"><code><strong>html</strong></code></span> tag is the parent of the entire page, the <span class="green-d"><code><strong>body</strong></code></span> tag is a child of the <span class="green-d"><code><strong>html</strong></code></span> tag, and so on. The <span class="green-d"><code><strong>body</strong></code></span> tag then has its own children, which are the <span class="green-d"><code><strong>h1</strong></code></span> and <span class="green-d"><code><strong>h2</strong></code></span> elements, the unordered list <span class="green-d"><code><strong>ul</strong></code></span>, and the <span class="green-d"><code><strong>div</strong></code></span> elements. In CSS, styling rules flow down from parents to children unless another style interrupts and takes priority.</p>
<p class="footnote"><a id="ch05fn10" href="ch05.xhtml#ch05fn10a">10</a>. “DOM” is usually pronounced as a word, so “DOM” rhymes with “Mom”.</p>
<p class="indent">Our first application of these ideas will be to the repetitive inline styles that exist in our current example page. Now that you know about the DRY principle (<a href="ch05.xhtml#box5_2">Box 5.2</a>), all that redundant styling should be causing a mild case of programmer’s itch, and the only cure is to eliminate the duplication.</p>
<p class="indent">If you are reading this after recently finishing <a href="ch04.xhtml#sec4_7">Section 4.7</a>, this sort of <em>refactoring</em> should be familiar, though this time through we are going to go a little more into details that weren’t covered before. If literally none of this is familiar, please refer back to <a href="ch04.xhtml#sec4_7_1">Section 4.7.1</a> and then come back.</p>
<p class="indent">Let’s first look at cleaning up the <span class="green-d"><code><strong>div</strong></code></span> elements that share identical inline border styling, as seen in <a href="ch05.xhtml#ch5list6">Listing 5.6</a>.</p>
<p class="listing" id="ch5list6"><strong>Listing 5.6:</strong> Repeated inline styles violate the DRY principle.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list06a" id="p05list06">Click here to view code image</a></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;
&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;
&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"border: 1px solid black;"</span>&gt;</pre>
<p class="noindent">To make the example code cleaner, we are going to use the <span class="green-d"><code><strong>style</strong></code></span> block that has already been added to our new initial HTML in <a href="ch05.xhtml#ch5list4">Listing 5.4</a> (the best practice is actually to put the CSS rules in a separate file, a task we’ll undertake in <a href="ch09.xhtml#sec9_6">Section 9.6</a>).</p>
<p class="indent">Now let’s get rid of the repetition in <a href="ch05.xhtml#ch5list6">Listing 5.6</a> by adding in our first CSS declaration, as shown in <a href="ch05.xhtml#ch5list7">Listing 5.7</a>.<sup><a id="ch05fn11a" href="ch05.xhtml#ch05fn11">11</a></sup></p>
<p class="footnote"><a id="ch05fn11" href="ch05.xhtml#ch05fn11a">11</a>. For simplicity, partial code listings like <a href="ch05.xhtml#ch5list7">Listing 5.7</a> won’t necessarily show the full indentation level, but (as discussed in <a href="ch01.xhtml#box1_4">Box 1.4</a>) you should strive to use the proper indentation level in order to keep your markup tidy.</p>
<p class="listing" id="ch5list7"><span epub:type="pagebreak" id="page_123"></span><strong>Listing 5.7:</strong> Adding our first CSS style.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list07a" id="p05list07">Click here to view code image</a></p>
<pre class="pre2">  &lt;<span class="pd_green1"><strong>style</strong></span>&gt;
<span class="bg1">    <span class="pd_green2"><strong>div</strong></span> {</span>
<span class="bg1">      <span class="pd_green2"><strong>border</strong></span>: <strong><span class="gray1">1</span><span class="pd_red">px</span></strong> <span class="pd_green2"><strong>solid black</strong></span>;</span>
<span class="bg1">    }</span>
  &lt;/<span class="pd_green1"><strong>style</strong></span>&gt;</pre>
<p class="indent"><a href="ch05.xhtml#ch5fig9">Figure 5.9</a> shows the anatomy of the CSS rule from <a href="ch05.xhtml#ch5list7">Listing 5.7</a>: the <span class="green-d"><code><strong>div</strong></code></span> part of the statement, which is outside the curly braces, is called the CSS <em>selector</em> (in this case targeting only <span class="green-d"><code><strong>div</strong></code></span> HTML elements). Then there is a <em>declaration</em> made up of a property (<span class="green-d"><code><strong>border</strong></code></span>) and a <em>value</em> (<span class="green-d"><code><strong>1px solid black</strong></code></span>) separated from the property by a colon. Finally, there is a semicolon at the end of the line that ends the style. (Just a warning: a lot of these terms get mixed up in regular usage. For example, people will sometimes refer to the whole thing, including the selector, as the declaration.)</p>
<figure class="figure" id="ch5fig9">
<img src="graphics/05fig09.jpg" alt="images" width="521" height="255"/>
<figcaption>
<p class="title-f"><strong>Figure 5.9:</strong> What’s in a name?</p>
</figcaption>
</figure>
<p class="indent">Although the spacing shown in <a href="ch05.xhtml#ch5list7">Listing 5.7</a> is typical, CSS is similar to HTML in that whitespace is ignored by the browser. For the sake of any humans viewing your markup, though, it’s a good idea to follow certain formatting conventions (<a href="ch05.xhtml#box5_4">Box 5.4</a>).</p>
<aside epub:type="sidebar" class="sidebar1" id="box5_4">
<p class="sb-title1"><span epub:type="pagebreak" id="page_124"></span><strong>Box 5.4: Style Note: Formatting Styles</strong></p>
<p class="sb-noindent">The styling statement from <a href="ch05.xhtml#ch5list7">Listing 5.7</a> can also be written with everything on one line, like this:</p>
<pre class="pre1">div {border: 1px solid black}</pre>
<p class="sb-indent">While that might look nice and tidy at first, you should probably avoid writing CSS that way, as it would make for unreadable code as you start to add more styles. It is far easier to read a list of style declarations like this:</p>
<p class="codelink"><a href="ch05_images.xhtml#p124pro01a" id="p124pro01">Click here to view code image</a></p>
<pre class="pre1">button {
  background-color: gray;
  border: 1px solid black;
  color: white;
  cursor: pointer;
  display: inline-block;
  font-family: "proxima-nova", "Proxima Nova",
               sans-serif;
  font-size: 12px;
  font-weight: bold;
  letter-spacing: 0.15em;
  padding: 10px 15px;
  text-decoration: none;
  text-transform: uppercase;
  transition: all 0.1s linear;
}</pre>
<p class="sb-noindent">than it is to read this:</p>
<p class="codelink"><a href="ch05_images.xhtml#p124pro02a" id="p124pro02">Click here to view code image</a></p>
<pre class="pre1">button { background-color: gray; border: 1px solid
black; color: white; cursor: pointer; display:
inline-block; font-family: "proxima-nova",
"Proxima Nova",
sans-serif; font-size: 12px; font-weight: bold;
letter-spacing: 0.15em; padding: 10px 15px;
text-decoration: none; text-transform: uppercase;
transition: all 0.1s linear}</pre>
<p class="sb-indent">Now just imagine trying to find specific properties on a page with hundreds of styles where every declaration looks like that… “Nightmare” wouldn’t even begin to describe your development experience.</p>
<p class="sb-indent">A second point about formatting is that you’ll notice that the style properties are all in alphabetical order. It might seem annoying to keep your properties alphabetized, but if you do you’ll find that over time you will find things much faster than if the ordering is haphazard. Fortunately, your text editor of choice likely has an alphabetize feature. For example, in Sublime Text you can select multiple lines and hit a function key (F5 on Mac, F9 on Windows) to automatically rearrange things in alphabetical order! Other editors frequently have packages that do the same.</p>
</aside>
<p class="indent"><span epub:type="pagebreak" id="page_125"></span>After adding the CSS in <a href="ch05.xhtml#ch5list7">Listing 5.7</a>, delete all the <span class="green-d"><code><strong>style=”border: 1px solid black;”</strong></code></span> attributes from the four <span class="green-d"><code><strong>div</strong></code></span> tags (<a href="ch05.xhtml#ch5list8">Listing 5.8</a>).</p>
<p class="listing" id="ch5list8"><strong>Listing 5.8:</strong> How the entire page should now look.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list08a" id="p05list08">Click here to view code image</a></p>
<pre class="pre2">    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;I'm an h2&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span> <span class="light-green1">style</span><span class="grey">=</span><span class="pd_red">"color: green;"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent">Save the changes, refresh the page in your browser… and BAM! Everything should look the same. (If not, double-check your work to see if you can get your results to match.)</p>
<p class="indent">So what happened here? The declaration that we added in <a href="ch05.xhtml#ch5list7">Listing 5.7</a> is a CSS statement that tells the browser it needs to apply a 1-pixel wide solid black border to all of the <span class="green-d"><code><strong>div</strong></code></span>s in the <span class="green-d"><code><strong>body</strong></code></span> of the <span class="green-d"><code><strong>html</strong></code></span>. (We’ll learn more about pixels in <a href="ch07.xhtml#sec7_3">Section 7.3</a>.) The result is a simplification of the code without any change in the page’s appearance.</p>
<p class="indent">Now that we’ve seen how to consolidate a bunch of inline styles into a single CSS declaration, let’s do the same thing for the links that are colored red via inline styles inside the <span class="green-d"><code><strong>li</strong></code></span>s. First add the new style, as shown in <a href="ch05.xhtml#ch5list9">Listing 5.9</a>.</p>
<p class="listing" id="ch5list9"><strong>Listing 5.9:</strong> Add the new CSS.<br/><code><em>index.html</em></code></p>
<pre class="pre2">&lt;<span class="pd_green1"><strong>style</strong></span>&gt;
<span class="bg1">  <span class="pd_green2"><strong>a</strong></span> {</span>
<span class="bg1">    color: red;</span>
<span class="bg1">  }</span></pre>
<p class="noindent"><span epub:type="pagebreak" id="page_126"></span>And then remove the inline styles from the links:</p>
<p class="codelink"><a href="ch05_images.xhtml#p126pro01a" id="p126pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>li</strong></span>&gt;
<span class="bg1"> &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;Link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
&lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
&lt;<span class="pd_green1"><strong>li</strong></span>&gt;
<span class="bg1"> &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;Link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
&lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
&lt;<span class="pd_green1"><strong>li</strong></span>&gt;
<span class="bg1"> &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;Link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
&lt;/<span class="pd_green1"><strong>li</strong></span>&gt;</pre>
<p class="noindent">As before, the appearance shouldn’t change after refreshing the browser.</p>
<p class="indent">At this point, we’ve definitely made progress in the fight against inline style redundancy, but what about those links that are colored green at the bottom using inline styling? One way to clean up the inline styles would be to use <em>CSS classes</em>, which we’ll start covering in <a href="ch05.xhtml#sec5_5">Section 5.5</a>, but for now let’s see if we can do it with just generic CSS selectors.</p>
<p class="indent">Because the links in question are contained inside <span class="green-d"><code><strong>div</strong></code></span>s, and the other links on the page are not, we can use the nesting inheritance of CSS to define a style that changes <em>only</em> the color of links inside <span class="green-d"><code><strong>div</strong></code></span>s. We can accomplish this by adding a declaration to the style block, and then removing the inline styles from the links on the page. Your entire test page should now look like <a href="ch05.xhtml#ch5list10">Listing 5.10</a>.</p>
<p class="listing" id="ch5list10"><strong>Listing 5.10:</strong> Whole page with new styling to target links inside <span class="green-d"><code><strong>div</strong></code></span>s.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list10a" id="p05list10">Click here to view code image</a></p>
<pre class="pre2"><span class="pd_orange"><em>&lt;!DOCTYPE html&gt;</em></span>
&lt;<span class="pd_green1"><strong>html</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>head</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>title</strong></span>&gt;Test Page: Don't Panic&lt;/<span class="pd_green1"><strong>title</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>meta</strong></span> <span class="light-green1">charset</span><span class="gray1">=</span><span class="pd_red">"utf-8"</span>&gt;
    &lt;<span class="pd_green1"><strong>style</strong></span>&gt;
      <span class="pd_green1"><strong>a</strong></span> {
        color: red;
      }
      div {
        border: 1px solid black;
      }
<span class="bg1">      <span class="pd_green2"><strong>div a</strong></span> {</span>
<span class="bg1">        <span class="pd_green2"><strong>color</strong></span>: <span class="pd_green2"><strong>green</strong></span>;</span>
<span class="bg1">      }</span>
    &lt;/<span class="pd_green1"><strong>style</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>head</strong></span>&gt;
  &lt;<span class="pd_green1"><strong>body</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h1</strong></span>&gt;I'm an h1&lt;/<span class="pd_green1"><strong>h1</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>ul</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="gray1">=</span><span class="pd_red">"https://example.com/"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="gray1">=</span><span class="pd_red">"https://example.com/"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
      &lt;<span class="pd_green1"><strong>li</strong></span>&gt;
        &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="gray1">=</span><span class="pd_red">"https://example.com/"</span>&gt;Link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
      &lt;/<span class="pd_green1"><strong>li</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>ul</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;I'm an h2&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">      &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="gray1"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;I'm a link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">      &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="gray1"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;I'm a link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">      &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="gray1"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;I'm a link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
    &lt;<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">      &lt;<span class="pd_green2"><strong>a</strong></span> <span class="light-green"><strong>href</strong></span><span class="gray1"><strong>=</strong></span><span class="pd_red"><strong>"https://example.com/"</strong></span>&gt;I'm a link&lt;/<span class="pd_green2"><strong>a</strong></span>&gt;</span>
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="indent"><span epub:type="pagebreak" id="page_127"></span>The page is a lot cleaner now, isn’t it? Separating the styling from the content makes the page’s code much easier to read, but maybe you can already see the problem with the way that we’ve targeted the styles…</p>
<p class="indent">The problem is: if we were to add new <span class="green-d"><code><strong>div</strong></code></span>s anywhere on the page, and they happened to have links inside them, those links would be green even if that isn’t what we want. The reason why is that the selector we used in that declaration is way too generic. In <a href="ch05.xhtml#sec5_5">Section 5.5</a>, we’ll take a look at how to add styling with far greater specificity using CSS ids and classes.</p>
<section>
<h4 class="h4" id="sec5_4_1"><span epub:type="pagebreak" id="page_128"></span>5.4.1 Exercises</h4>
<ol class="number">
<li><p class="number">Using what we learned about targeting links inside other objects, change the color of the links inside the <span class="green-d"><code><strong>li</strong></code></span>s.</p></li>
<li><p class="number">Add a border around the <span class="green-d"><code><strong>li</strong></code></span>s using the same styling as we used to add the borders around the <span class="green-d"><code><strong>div</strong></code></span>s.</p></li>
</ol>
</section>
</section>
<section>
<h3 class="h3" id="sec5_5">5.5 CSS Selectors</h3>
<p class="noindent">Between <a href="part01.xhtml#part01">Part I</a> and the beginning of <a href="part02.xhtml#part02">Part II</a>, we have so far used only rudimentary targeting techniques for styles. In <a href="part01.xhtml#part01">Part I</a>, we learned how to add styles directly to elements, but this approach is brittle and inefficient. In this tutorial, so far we’ve used CSS that is separated from the content, but we have used only generic selectors like <span class="green-d"><code><strong>div</strong></code></span> or <span class="green-d"><code><strong>a</strong></code></span>. The problem with generic element selectors is that they apply to <em>all</em> the elements on the page. So, how can we apply styling to <em>specific</em> elements rather than to every single one?</p>
<p class="indent">There are two methods, one that targets only one element per page—the <em>id</em> (or “identification”) selector<sup><a id="ch05fn12a" href="ch05.xhtml#ch05fn12">12</a></sup>—and one able to target multiple elements—the <em>class</em> selector. Let’s edit our example HTML to add this kind of targeting to our page.</p>
<p class="footnote"><a id="ch05fn12" href="ch05.xhtml#ch05fn12a">12</a>. The traditional contraction for “identification” is the uppercase “ID”, but in computer contexts the lowercase “id” has become a common alternative (despite the possible confusion with the psychoanalytic word <em>id</em>). This is due in large part to the convention of using lowercase tags (e.g., <span class="green-d"><code><strong>div</strong></code></span> instead of <span class="green-d"><code><strong>DIV</strong></code></span>) in modern HTML markup.</p>
<p class="indent">Ids and classes are always applied only to the opening tag of an element, and they always have the same format. We’ll use the <span class="green-d"><code><strong>div</strong></code></span> tag for concreteness:</p>
<p class="codelink"><a href="ch05_images.xhtml#p128pro01a" id="p128pro01">Click here to view code image</a></p>
<pre class="pre1">&lt;<span class="pd_green1"><strong>div</strong></span> <span class="light-green1">id</span><span class="grey">=</span><span class="pd_red">"foo"</span> <span class="light-green1">class</span><span class="grey">=</span><span class="pd_red">"bar"</span>&gt;
  .
  .
  .
&lt;/<span class="pd_green1"><strong>div</strong></span>&gt;</pre>
<p class="noindent">We see here that both ids and classes consist of key-value pairs, where each value is a string that serves as a label for the id or class. In this case, the key <span class="green-d"><code><strong>id</strong></code></span> has value <span class="green-d"><code><strong>“foo”</strong></code></span> and the key <span class="green-d"><code><strong>class</strong></code></span> has value <span class="green-d"><code><strong>“bar”</strong></code></span>.</p>
<p class="indent">Although CSS offers a great deal of flexibility in choosing id and class names, there are a few restrictions and usage suggestions:</p>
<ul class="bullet">
<li><p class="bullet"><span epub:type="pagebreak" id="page_129"></span>Use only one id per element.</p></li>
<li><p class="bullet">No numbers are allowed at the beginning of the name (e.g., <span class="green-d"><code><strong>name1</strong></code></span> is valid, but <span class="green-d"><code><strong>1name</strong></code></span> isn’t).</p></li>
<li><p class="bullet">Dashes (<span class="green-d"><code><strong>-</strong></code></span>), underscores <span class="green-d"><code><strong>_</strong></code></span>, and CamelCase can be used to join multiple words (so <span class="green-d"><code><strong>foo-bar-baz</strong></code></span>, <span class="green-d"><code><strong>foo_bar_baz</strong></code></span>, and <span class="green-d"><code><strong>FooBarBaz</strong></code></span> are all valid names).</p></li>
<li><p class="bullet">Spaces are invalid in id names, and are used to separate multiple names in the case of classes (so <span class="green-d"><code><strong>id=”foo bar”</strong></code></span> is illegal, while <span class="green-d"><code><strong>class=”foo bar baz”</strong></code></span> places three separate classes on an element).</p></li>
<li><p class="bullet">Be consistent (e.g., if using dashes as separators, use them everywhere—don’t mix them with underscores unless you have a good reason—see <a href="ch06.xhtml#box6_1">Box 6.1</a>).</p></li>
</ul>
<p class="indent">To see how this works in practice, let’s add some ids and classes to our sample page. On the first opening <span class="green-d"><code><strong>div</strong></code></span> tag that comes right after the <span class="green-d"><code><strong>h2</strong></code></span>, add <span class="green-d"><code><strong>id=”exec-bio”</strong></code></span>, and then add <span class="green-d"><code><strong>class=”bio-box”</strong></code></span> to all of the <span class="green-d"><code><strong>div</strong></code></span>s in that section, as shown in <a href="ch05.xhtml#ch5list11">Listing 5.11</a>.</p>
<p class="listing" id="ch5list11"><strong>Listing 5.11:</strong> Adding CSS classes and an id to the sample page.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list11a" id="p05list11">Click here to view code image</a></p>
<pre class="pre2">    &lt;<span class="pd_green1"><strong>h2</strong></span>&gt;I'm an h2&lt;/<span class="pd_green1"><strong>h2</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span> <span class="light-green"><strong>id</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"exec-bio"</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"bio-box"</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"bio-box"</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"bio-box"</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
<span class="bg1">    &lt;<span class="pd_green2"><strong>div</strong></span> <span class="light-green"><strong>class</strong></span><span class="grey"><strong>=</strong></span><span class="pd_red"><strong>"bio-box"</strong></span>&gt;</span>
      &lt;<span class="pd_green1"><strong>a</strong></span> <span class="light-green1">href</span><span class="grey">=</span><span class="pd_red">"https://example.com/"</span>&gt;I'm a link&lt;/<span class="pd_green1"><strong>a</strong></span>&gt;
    &lt;/<span class="pd_green1"><strong>div</strong></span>&gt;
  &lt;/<span class="pd_green1"><strong>body</strong></span>&gt;
&lt;/<span class="pd_green1"><strong>html</strong></span>&gt;</pre>
<p class="noindent">(This use of a class is a good CSS practice, but we generally don’t recommend using an id in this context; we include it here mainly for demonstration purposes. We’ll discuss this issue in more detail in <a href="ch06.xhtml#sec6_2">Section 6.2</a>.)</p>
<p class="indent"><span epub:type="pagebreak" id="page_130"></span>Next, let’s update our CSS block to target these new selectors. To target an id in CSS, you put a <span class="green-d"><code><strong>#</strong></code></span> (usually read “hash”) in front of the name, and to target a class you add a <span class="green-d"><code><strong>.</strong></code></span> (usually read “dot”). For example, to change the background color of the <span class="green-d"><code><strong>#exec-bio</strong></code></span> id, we can use the following CSS rule:</p>
<p class="codelink"><a href="ch05_images.xhtml#p130pro01a" id="p130pro01">Click here to view code image</a></p>
<pre class="pre1">#<span class="blue-v"><strong>exec-bio</strong></span> {
  <span class="pd_green1"><strong>background-color</strong></span>: <span class="pd_green1"><strong>lightgray</strong></span>;
}</pre>
<p class="noindent">(Here <span class="green-d"><code><strong>lightgray</strong></code></span> represents (surprise!) a light gray,<sup><a id="ch05fn13a" href="ch05.xhtml#ch05fn13">13</a></sup> which is an example of a <em>CSS color name</em>. We’ll cover the details of color naming in <a href="ch07.xhtml#sec7_1">Section 7.1</a>.) Similarly, to apply a rule to the <span class="green-d"><code><strong>.bio-box</strong></code></span> class,<sup><a id="ch05fn14a" href="ch05.xhtml#ch05fn14">14</a></sup> we can use the following CSS:</p>
<p class="footnote"><a id="ch05fn13" href="ch05.xhtml#ch05fn13a">13</a>. CSS supports both the American spelling <em>gray</em> (“a” for “American”) and the English spelling <em>grey</em> (“e” for “English”).</p>
<p class="footnote"><a id="ch05fn14" href="ch05.xhtml#ch05fn14a">14</a>. We’ll often refer to elements with applied classes using the corresponding CSS notation. In other words, <span class="green-d"><code><strong>.bio-box</strong></code></span> refers to an element with the rule <span class="green-d"><code><strong>class="bio-box"</strong></code></span>.</p>
<p class="codelink"><a href="ch05_images.xhtml#p130pro02a" id="p130pro02">Click here to view code image</a></p>
<pre class="pre1">.<span class="blue-v"><strong>bio-box</strong></span> {
  <span class="pd_green1"><strong>border</strong></span>: <span class="gray">1</span><span class="pd_red"><strong>px</strong></span> <span class="pd_green1"><strong>solid black</strong></span>;
}</pre>
<p class="noindent">As we’ll see in a moment, this rule keeps the thin black border added in <a href="ch05.xhtml#ch5list8">Listing 5.8</a>, but in such a way that it doesn’t apply to <em>all</em> the divs on the site.</p>
<p class="indent">Finally, we can target the anchor tags inside the bio boxes using the combination of the class name and the tag name, like this:</p>
<pre class="pre1">.<span class="blue-v"><strong>bio-box</strong></span> <span class="pd_green1"><strong>a</strong></span> {
  <span class="pd_green1"><strong>color</strong></span>: <span class="pd_green1"><strong>green</strong></span>;
}</pre>
<p class="noindent">This turns the <span class="green-d"><code><strong>a</strong></code></span> tags green, but only if they’re inside an element with class <span class="green-d"><code><strong>”bio-box”</strong></code></span>. This class-based approach gives us much finer-grained control than the method used in <a href="ch05.xhtml#ch5list10">Listing 5.10</a>.</p>
<p class="indent">Adding these three rules to the <span class="green-d"><code><strong>style</strong></code></span> block (while removing the rules we no longer need) leads to the markup shown in <a href="ch05.xhtml#ch5list12">Listing 5.12</a>.</p>
<p class="listing" id="ch5list12"><span epub:type="pagebreak" id="page_131"></span><strong>Listing 5.12:</strong> Adding CSS rules to target the classes and id.<br/><code><em>index.html</em></code></p>
<p class="codelink"><a href="ch05_images.xhtml#p05list12a" id="p05list12">Click here to view code image</a></p>
<pre class="pre2">    <span class="pd_green1"><strong>a</strong></span> {
      <span class="pd_green1"><strong>color</strong></span>: <span class="pd_green1"><strong>red</strong></span>;
    }
<span class="bg1">    #<span class="blue-v"><strong>exec-bio</strong></span> {</span>
<span class="bg1">      <span class="pd_green2"><strong>background-color</strong></span>: <span class="pd_green2"><strong>lightgray</strong></span>;</span>
<span class="bg1">    }</span>
<span class="bg1">    .<span class="blue-v"><strong>bio-box</strong></span> {</span>
<span class="bg1">      <span class="pd_green2"><strong>border</strong></span>: <span class="pd_red"><strong><span class="gray">1</span>px</strong></span> <span class="pd_green2"><strong>solid black</strong></span>;</span>
<span class="bg1">    }</span>
<span class="bg1">    .<span class="blue-v"><strong>bio-box</strong></span> <span class="pd_green2"><strong>a</strong></span> {</span>
<span class="bg1">      <span class="pd_green2"><strong>color</strong></span>: <span class="pd_green2"><strong>green</strong></span>;</span>
<span class="bg1">    }</span></pre>
<p class="indent">After saving your changes and refreshing the browser, you should see that the boxes at the bottom have the same border as before, but now the one with the CSS id has a light gray background (<a href="ch05.xhtml#ch5fig10">Figure 5.10</a>).</p>
<figure class="figure" id="ch5fig10">
<img src="graphics/05fig10.jpg" alt="images" width="630" height="277"/>
<figcaption>
<p class="title-f"><strong>Figure 5.10:</strong> Elements targeted with classes and ids.</p>
</figcaption>
</figure>
<p class="indent">Congrats! You’ve just used ids and classes to target styles at specific elements, and have leveled up your CSS knowledge. Now that you’ve learned how to make declarations, and how to use ids and classes, we can start getting into the nitty-gritty of how CSS works.</p>
<section>
<h4 class="h4" id="sec5_5_1"><span epub:type="pagebreak" id="page_132"></span>5.5.1 Exercises</h4>
<ol class="number">
<li><p class="number">Try adding a new CSS id to the style section (you pick the name) that sets the background color of an element to <span class="green-d"><code><strong>orange</strong></code></span>, and then add that id to one of the links on the page.</p></li>
<li><p class="number">Add a new class to the style section (you pick the name again) that changes the background color to <span class="green-d"><code><strong>azure</strong></code></span>, and add that class name as a second class on the <span class="green-d"><code><strong>.bio-box</strong></code></span>es. You’ll notice that one box is different from the rest, something that we’ll discuss in <a href="ch06.xhtml#sec6_3">Section 6.3.</a></p></li>
<li><p class="number">Commit your changes from this chapter and deploy the result to GitHub Pages. Confirm that the deployed site renders correctly. (It may take a minute or two for the cache to clear, so keep refreshing until the result is what you expect.)</p></li>
</ol>
</section>
</section>
</section>
</div>
</div>
</body>
</html>